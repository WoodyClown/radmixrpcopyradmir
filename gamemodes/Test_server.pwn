@___If_u_can_read_this_u_r_nerd();		// 10 different ways to crash DeAMX
@___If_u_can_read_this_u_r_nerd()		// and also a nice tag for exported functions table in the AMX file
{
    #emit	stack	0x7FFFFFFF	// wtf (1) (stack over... overf*ck!?)
    #emit	inc.s	cellmax		// wtf (2) (this one should probably make DeAMX allocate all available memory and lag forever)
    static const ___[][] = {"pro-pawn", ".ru"};	// pretty old anti-deamx trick
    #emit	retn
    #emit	load.s.pri	___		// wtf (3) (opcode outside of function?)
    #emit	proc				// wtf (4) (if DeAMX hasn't crashed already, it would think it is a new function)
    #emit	proc				// wtf (5) (a function inside of another function!?)
    #emit	fill		cellmax	// wtf (6) (fill random memory block with 0xFFFFFFFF)
    #emit	proc
    #emit	stack		1		// wtf (7) (compiler usually allocates 4 bytes or 4*N for arrays of N elements)
    #emit	stor.alt	___		// wtf (8) (...)
    #emit	strb.i		2    	// wtf (9)
    #emit	switch		4
    #emit	retn    			// wtf (10) (no "casetbl" opcodes before retn - invalid switch statement?)
L1:
    #emit	jump	L1			// avoid compiler crash from "#emit switch"
    #emit	zero	cellmin		// wtf (11) (nonexistent address)
}

#include <a_samp>
#include <a_mysql>
#include <crashdetect>
#include <foreach>
#include <streamer>
#include <sscanf2>
#if defined LAN_MODE

	#define MYSQL_HOST "triniti.ru-hoster.com"
	#define MYSQL_USER "ersulySU"
	#define MYSQL_PASS "x3L173skLx"
	#define MYSQL_BASE "ersulySU"

#else

	#define MYSQL_HOST "triniti.ru-hoster.com"
	#define MYSQL_USER "ersulySU"
	#define MYSQL_PASS "x3L173skLx"
	#define MYSQL_BASE "ersulySU"
#endif
#include <pawncmd>
#include <nex-ac>
#include <timerfix>
#include <profiler>
#include <zones>
#include <mxdate>
#include <yom_buttons>
#include <md5>
#include <crp>
#include <fly>
#include <sampvoice>
#include <system/cp.pwn>
#include <system/cp_race.pwn>
#include <system/pickup.pwn>
#include <system/vehicle.pwn>
//#include <antigoc>
stock LoadObject()
{
	new objectid;
	#include <map> // карта
	#include <int> // интерьеры
	#include <objects/voenkomat_int>
	#include <objects/church>
	#include <objects/autosalon>
	//#include <DM_Zona>
	//#include <objects/OBJ_avtobus>
}
new STRING_GLOBAL[2048];
new shapka[MAX_PLAYERS];
//new arendaveh[16];
new vorota_yuzhnii;
new vorota_yuzh = 0;
new Test_server = 1;
new vorota_mo;
new vmo_status = 0;
new vorota_ogorod1;
new vorota_ogorod2;
new vorota_ogorod3;
new Perenos_Nick[MAX_PLAYERS][MAX_PLAYER_NAME];
new bool:Baton[MAX_PLAYERS];
// ------------------------------------------
main()
{
	print("------------------------");
	print("      RadmiX RolePlay            ");
	print("    	vk.com/woody_extraside ");
	print("    	vk.com/fernandoblack ");
	print("------------------------");
}

// ------------------------------------------
#define SERVER_NAME 	"RadmiX"	// название мода
#define SERVER_NAME_RP 	"Radmix RolePlay"	// название мода с RP
#define SERVER_SITE 	"rdx-rp.ru"	// сайт сервера
#define SERVER_MAP_NAME "Russia"	// название карты
#define SERVER_VERSION	"RadmiX 1.3"	// версия мода
//VOICE SYSTEM
new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };
//-----------------

//========================ANTI-CHEAT=============================
/*
    Настройки, связанные с базой данных (MySQL)
*/
#define AC_TABLE_SETTINGS               "anticheat_settings" // Название таблицы в базе данных с настройками анти-чита
#define AC_TABLE_FIELD_CODE             "ac_code" // Название поля с кодом анти-чита в таблице
#define AC_TABLE_FIELD_TRIGGER          "ac_code_trigger_type" // Название поля со значением срабатывания кода анти-чита в таблице

/*
    Общие настройки, касающиеся анти-чита
*/
#define AC_MAX_CODES                    51 // Количество кодов анти-чита (на данный момент их 53)
#define AC_MAX_CODE_LENGTH              (3 + 1) // Максимальное количество символов в "коде" анти-чита (001/002/003, etc.)
#define AC_MAX_CODE_NAME_LENGTH         (33 + 1) // Максимальное количество символов в полном названии чита, за который отвечает какой-либо код

#define AC_MAX_TRIGGER_TYPES            3 // Количество типов срабатываний (наказаний) анти-чита. По мере добавления типов срабатываний (наказаний), увеличивайте данное значение.
#define AC_MAX_TRIGGER_TYPE_NAME_LENGTH (8 + 1) // Максимальное количество символов в названии типа срабатывания (наказания) анти-чита

#define AC_GLOBAL_TRIGGER_TYPE_PLAYER   0
#define AC_GLOBAL_TRIGGER_TYPE_IP       1

// Типы срабатываний объявлены макросами, чтобы было проще ориентироваться в OnCheatDetected.
#define AC_CODE_TRIGGER_TYPE_DISABLED   0 // AC_CODE_TRIGGER_TYPE_DISABLED - Тип наказания: Отключён
#define AC_CODE_TRIGGER_TYPE_WARNING    1 // AC_CODE_TRIGGER_TYPE_WARNING - Тип наказания: Warning
#define AC_CODE_TRIGGER_TYPE_KICK       2 // AC_CODE_TRIGGER_TYPE_KICK - Тип наказания: Kick

#define AC_TRIGGER_ANTIFLOOD_TIME       20 // Время для анти-флуда срабатываниями (в секундах)

/*
    Настройки визуальной части системы (диалогов)
*/
#define AC_MAX_CODES_ON_PAGE            15 // Максимальное количество элементов на странице настроек анти-чита
#define AC_DIALOG_NEXT_PAGE_TEXT        ">>> Следующая страница" // Текст кнопки, которая будет отображать следующую страницу списка
#define AC_DIALOG_PREVIOUS_PAGE_TEXT    "<<< Предыдущая страница" // Текст кнопки, которая будет отображать предыдущую страницу списка

// Массив AC_CODE хранит в себе текстовые форматы номеров кода анти-чита
static const AC_CODE[AC_MAX_CODES][AC_MAX_CODE_LENGTH] =
{
    "000",
    "001",
    "002",
    "003",
    "004",
    "005",
    "006",
    "007",
    "008",
    "009",
    "010",
    "011",
    "012",
    "013",
    "014",
    "015",
    "016",
    "017",
    "018",
    "019",
    "020",
    "021",
    "022",
    "023",
    "024",
    "025",
    "026",
    "027",
    "028",
    "029",
    "030",
    "031",
    "032",
    "033",
    "034",
    "035",
    "036",
    "037",
    "038",
    "039",
    "040",
    "041",
    "042",
    "043",
    "044",
    "045",
    "046",
    "047",
    "049",
    "050",
    "051"
};

// Массив AC_CODE_NAME хранит в себе названия читов, которые соответствуют кодам анти-чита
static const AC_CODE_NAME[AC_MAX_CODES][AC_MAX_CODE_NAME_LENGTH] =
{
    {"AirBreak (onfoot)"},
    {"AirBreak (in vehicle)"},
    {"Teleport (onfoot)"},
    {"Teleport (in vehicle)"},
    {"Teleport (into/between vehicles)"},
    {"Teleport (vehicle to player)"},
    {"Teleport (pickups)"},
    {"FlyHack (onfoot)"},
    {"FlyHack (in vehicle)"},
    {"SpeedHack (onfoot)"},
    {"SpeedHack (in vehicle)"},
    {"Health hack (in vehicle)"},
    {"Health hack (onfoot)"},
    {"Armour hack"},
    {"Money hack"},
    {"Weapon hack"},
    {"Ammo hack (add)"},
    {"Ammo hack (infinite)"},
    {"Special actions hack"},
    {"GodMode from bullets (onfoot)"},
    {"GodMode from bullets (in vehicle)"},
    {"Invisible hack"},
    {"Lagcomp-spoof"},
    {"Tuning hack"},
    {"Parkour mod"},
    {"Quick turn"},
    {"Rapid fire"},
    {"FakeSpawn"},
    {"FakeKill"},
    {"Pro Aim"},
    {"CJ run"},
    {"CarShot"},
    {"CarJack"},
    {"UnFreeze"},
    {"AFK Ghost"},
    {"Full Aiming"},
    {"Fake NPC"},
    {"Reconnect"},
    {"High ping"},
    {"Dialog hack"},
    {"Sandbox"},
    {"Invalid version"},
    {"Rcon hack"},
    {"Tuning crasher"},
    {"Invalid seat crasher"},
    {"Dialog crasher"},
    {"Attached object crasher"},
    {"Weapon Crasher"},
    {"Flood change seat"},
    {"DDos"},
    {"NOP's"}
};

// Массив AC_TRIGGER_TYPE_NAME хранит в себе названия типов срабатываний (наказаний) анти-чита.
static const AC_TRIGGER_TYPE_NAME[AC_MAX_TRIGGER_TYPES][AC_MAX_TRIGGER_TYPE_NAME_LENGTH] =
{
    {"Отключён"},
    {"Warning"},
    {"Kick"}
};

new
    AC_CODE_TRIGGER_TYPE[AC_MAX_CODES], // Массив AC_CODE_TRIGGER_TYPE хранит в себе наказания каждого кода анти-чита, которые мы загрузим из базы данных.
    AC_CODE_TRIGGERED_COUNT[AC_MAX_CODES] = {0, ...}; // Массив, хранящий количество срабатываний того или иного кода анти-чита на протяжении текущей сессии

new
    pAntiCheatLastCodeTriggerTime[MAX_PLAYERS][AC_MAX_CODES], // Массив, хранящий последнее время срабатывания каждого кода анти-чита на игрока
    pAntiCheatSettingsPage[MAX_PLAYERS char], // Массив, хранящий номер страницы настроек, на которой сейчас находится игрок
    pAntiCheatSettingsMenuListData[MAX_PLAYERS][AC_MAX_CODES_ON_PAGE], // Массив, хранящий в себе идентификаторы (ID) отображённых анти-читов на текущей странице, при их настройке в диалоге
    pAntiCheatSettingsEditCodeId[MAX_PLAYERS]; // Массив, хранящий номер кода анти-чита, который редактируется игроком
//===============================================================

#define AUTH_CAMERA_POS		 146.7695,-382.8792,59.0709 // позиции камеры при авторизации/регистрации
#define AUTH_CAMERA_LOOK 	 146.7695,-382.8792,59.0709 // позиции камеры при авторизации/регистрации
#define MAX_IP 3
#define MAX_FLOOD_RATE	(3000)
#define FLOOD_RATE_INC	(1000)
#define FLOOD_RATE_KICK	(5000)

//-------------Дефайны функций--------------------------------------------
#define     SCM             SendClientMessage
#define     SCMTA           SendClientMessageToAll
#define     SPD             ShowPlayerDialog
#define 	DSMSG 			DIALOG_STYLE_MSGBOX
#define  	DSM 			DIALOG_STYLE_MSGBOX //0
#define 	DSI				DIALOG_STYLE_INPUT //1
#define 	DSL				DIALOG_STYLE_LIST //2
#define 	DSP				DIALOG_STYLE_PASSWORD //3
#define 	DST				DIALOG_STYLE_TABLIST //4
#define 	DSTH			DIALOG_STYLE_TABLIST_HEADERS //5

#define SendFormattedMessage%0(%1,%2,%3,%4) \
	format(STRING_GLOBAL, 144, %3, %4), SendClientMessage(%1, %2, STRING_GLOBAL), STRING_GLOBAL[0] = EOS

#define CGOLD 						0xFFD700FF

#define PR        					"{66cc33}"
#define CA        					"{4F94CD}"
#define G 							"{AFAFAF}"
#define W 							"{ffffff}"
#define O 							"{FFA500}"
#define E 							"{FF6347}"
#define YES 						"{48FC23}"
#define NO 							"{FF0000}"
#define BLUE						"{6495ED}"
#define GREEN						"{33AA33}"
#define YELLOW						"{FFFF00}"
#define ORANGE 						"{FFD700}"
#define P 							"{20997c}"
#define P2							"{FFE4E1}"
#define 	PRESS_Y (65536)
#define 	PRESS_C (2)
#define 	PRESS_N (131072)
#define 	PRESS_F (16)
#define 	PRESS_TAB (1)
#define 	PRESS_H (262144)
#define 	PRESS_CAPSLOCK (128)
#define 	PRESS_SHIFT (32)
#define 	PRESS_CTRL (4)
#define 	PRESS_ALT (1024)
#define 	PRESS_QSPACE(256)
#define 	PRESS_E (64)
#define 	PRESS_Q (256)
#define 	PRESS_E (64)
#define 	KEY_ACCELERATE (8)
#define 	PN(%0) GetPlayerNameEx(%0)
#define 	f(%0,%1,%2,%3) format(%0,%1,%2,%3)
#define RandomEx(%1,%2) 					(random(%2-%1)+%1)
#define 	SendMes(%0,%1,%2,%3) format(str_f, sizeof(str_f),%2,%3) && SCM(%0, %1, str_f)
#define public:%0(%1) \
			forward %0(%1); \
				public %0(%1)
#define Kick:(%0) FixKick(%0)
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PRESSING(%0,%1) \
	(%0 & (%1))
#define COLOR_VALIK 		0x73B461FF
#define COLOR_SYSTEM 		0xEFEFF7AA
#define COLOR_SHBAR 		0x6053F3FF
#define COLOR_SHBAR_BG 		0x000000FF
#define COLOR_SHBAR_BG2 	0xB8CEF6FF
#define COLOR_ERSA          0x00FF00FF
#define cW  FFFFFF
#define cGR D3D3D3
#define cGold FFDD00
#define COLOR_RED 			0xBE2D2DFF
#define COLOR_ORANGE 		0xFAAC58FF
#define COLOR_BROWN 		0xA52A2AFF
#define COLOR_GREEN 		0x42B02CFF
#define COLOR_GOLD          0xFFD700FF
#define COLOR_WHITE                                                   0xFFFFFFAA//???? (?????)
#define COLOR_LIGHTRED 		0xFF6347FF
#define COLOR_LIGHTBLUE 	0x6495EDFF
#define COLOR_LIGHTGREEN 	0x9ACD32FF
#define COLOR_YELLOW 		0xFFFF00FF
#define COLOR_BLACK 		0x000000FF
#define COLOR_BLUENEW 		0xB8CEF6FF
#define COLOR_BLUE 			0x94B0C1FF
#define COLOR_GRAD 			0xBFC0C2FF
#define COLOR_PURPLE 		0xC2A2DAFF
#define COLOR_LIME 			0x10F441FF
#define COLOR_GREY 			0xAFAFAFFF
#define COLOR_ERROR 				COLOR_GREY
#define COLOR_FAMILY        0xB9C1B8FF
#define COLOR_INDIGO        0x400080FF
#define COLOR_CHAT			0xCECECEFF
#define COLOR_SCHAT			0xF0E68CFF
#define COLOR_DOCHAT		0x4682B4FF
#define COLOR_RACIO			0x2DB043FF
#define COLOR_DEPAR			0x3399ffFF
#define COLOR_ACHAT   		0x99CC00FF
#define COLOR_HCHAT			0x6F94AFFF
#define COLOR_SMHAT			0x008080FF
#define COLOR_ME            0xFF99FFFF
#define COLOR_GOV           0x045FB4FF
#define COLOR_LIGHTGREY     0xD1D1D1FF
#define COLOR_ORANGEYELLOW  0xFFDF0FFF
#define YES 						"{48FC23}"
#define MAX_GIFTS       30
#define MOVE_FORWARD          1
#define MOVE_BACK             2
#define MOVE_LEFT             3
#define MOVE_RIGHT            4
#define MOVE_FORWARD_LEFT     5
#define MOVE_FORWARD_RIGHT    6
#define MOVE_BACK_LEFT        7
#define MOVE_BACK_RIGHT       8
#define GetPlayerInkEx(%0)      GetPlayerData(%0, P_INK)
#define MAX_RENT_VEH 40
//------------------Переменные оптимизации и прочие переменные----------------
//new str_format[4096];
new str_f[4096];
new vorota_fsi;
new vorota_pps;
new vorota_status = 0;
new vorota_statu = 0;
new vorota_pps1;
new vorota_pps2;
new vorota_pps3;
new obezyana_status1 = 0;
new obezyana_status2 = 0;
new obezyana_status3 = 0;
//new RPPointVal[MAX_PLAYERS];
new RPPoint[MAX_PLAYERS];
new PlayerText:timer_PTD[MAX_PLAYERS][3];
new PlayerText:avtoriz_PTD[MAX_PLAYERS][5];
new PlayerText:Info_PTD[MAX_PLAYERS][7];
new PlayerText:hometd_PTD[MAX_PLAYERS][7];
new PlayerText:registr_PTD[MAX_PLAYERS][9];
new player_avtobus_timer[MAX_PLAYERS];
new PlayerText:cell_salon_PTD[MAX_PLAYERS][6];
new PlayerText:cafe_PTD[MAX_PLAYERS][11];
new PlayerText:shop_PTD[MAX_PLAYERS][8];
new PlayerText:car_PTD[MAX_PLAYERS][8];

new cars_g[MAX_PLAYERS][35];
new cars_slot[MAX_PLAYERS];

new PlayerText:spec_PTD[MAX_PLAYERS][38];

new Text:fly_TD[3];
new Text:Metro_TD[7];
new PlayerText:Metro_PTD[MAX_PLAYERS][2];
new Text:registr_TD[1];
new Text:licdrive_TD[1];
new PlayerText:licdrive_PTD[MAX_PLAYERS][3];

new PlayerText:mvd_PTD[MAX_PLAYERS][3];
new Text:mvd_TD[1];

new PlayerText:pass_PTD[MAX_PLAYERS][10];
new Text:pass_TD[1];

new Text:adm_menu_TD[3];
new Text:time_TD;

new PlayerText:gameTextDraw_player[MAX_PLAYERS][3];
new Text:gameTextDraw_all[2];

new Float: score_game_zeppelin[MAX_PLAYERS] = {1.0, ...};
new Float: bet_zeppelin[MAX_PLAYERS],
	Float: bet_static_win[MAX_PLAYERS];

new bool:start_game[MAX_PLAYERS];
new player_timer[MAX_PLAYERS];

new Text: black_ground;
new arendascooter[MAX_PLAYERS];
new bool:moving[MAX_PLAYERS char];
new falltime[MAX_PLAYERS];
new Float:velZ[MAX_PLAYERS];
new Float:gravity[MAX_PLAYERS];
new bool:setgravity[MAX_PLAYERS char];
//===================аренда================
enum RInfo
{
    Rcarid,
    Rprice,
    ROwned
};
new RentCar[MAX_RENT_VEH][RInfo];
new IsRentableVehicle[MAX_VEHICLES];

//new Text3D:by_car_sell[MAX_VEHICLES];
//new ferma[15];
//new Text3D:ferma_text[MAX_VEHICLES];
new ceno[MAX_VEHICLES];
new vodila[MAX_VEHICLES] = -1;
new OwnedName[MAX_PLAYER_NAME];
//
//----------------------------
new Text3D:pame_text[MAX_PLAYERS] = {Text3D:-1, ...};
new unix, tmphour, tmpminute, tmpsecond;
//new opengate[2048];
new gCompCosts[] = {100, 150, 230, 260};

new g_sign_up_timer,
	g_game_status = 0,
	g_default_colors[4] = {0xFFE61400,0xFF0066CC,0xFF319A31,0xFFFF7F00};
new p_has_color[MAX_PLAYERS],
	g_start_pos[4] = {0, 7, 56, 63};
new b_gobjectid[4],
	b_button[64],
	b_pickupid[64],
	b_objectid[64],
	b_has_color[64],
	b_unique_id[64],
	g_arena_created = false;

new PlayerText:DmArenaTextDraw[MAX_PLAYERS];
new Text: dr_TD[3];
new PlayerText: dr_PTD[MAX_PLAYERS][6];
//new dr_name[11][32] = {"roulette:skill", "roulette:exp", "roulette:heal", "roulette:narko", "roulette:ammo", "roulette:money", "roulette:donate", "roulette:metall", "roulette:ammo", "roulette:exp", "roulette:skill"};
new RouletteStarted[MAX_PLAYERS];
new dr_slot_item[MAX_PLAYERS][5],
	dr_slot_model[MAX_PLAYERS][5],
	dr_veh_slot[MAX_PLAYERS][5],
	dr_timer[MAX_PLAYERS];

//new donate_skinlist[7] = {15, 23, 106, 206, 291, 293, 296};
new dr_step[MAX_PLAYERS];
new PaintGun[] = {24};
new ArenaGun[] = {23,24,25,29,30,31};

new GunPlayer[MAX_PLAYERS][13][2];

new Float:DmArenaSpawns[13][3] = {
	{2107.7725,-2791.3765,954.0938},	//3
	{2113.4875,-2710.3608,954.0625},	//4
    {2093.6309,-2763.4504,954.0938}, //5
    {2129.2441,-2737.7737,954.0938}, //6
    {2130.8582,-2785.9299,958.8672}, //7
	{2122.7617,-2790.0833,954.0938},//8
	{2120.7227,-2777.4038,954.0938},//9
	{2114.9509,-2764.3340,954.0938},//10
	{2094.2107,-2744.4050,954.0938},//11
	{2093.3381,-2726.8906,954.0938},//14
	{2130.0952,-2727.1062,954.0938},//15
	{2122.3875,-2741.8970,954.0938},//16
	{2110.6682,-2744.4292,955.5615}//17
};
new Text3D:DMSTATUS[MAX_PLAYERS];

new Float:DMPositions[13][3] = {
	{2107.7725,-2791.3765,954.0938},	//3
	{2113.4875,-2710.3608,954.0625},	//4
    {2093.6309,-2763.4504,954.0938}, //5
    {2129.2441,-2737.7737,954.0938}, //6
    {2130.8582,-2785.9299,958.8672}, //7
	{2122.7617,-2790.0833,954.0938},//8
	{2120.7227,-2777.4038,954.0938},//9
	{2114.9509,-2764.3340,954.0938},//10
	{2094.2107,-2744.4050,954.0938},//11
	{2093.3381,-2726.8906,954.0938},//14
	{2130.0952,-2727.1062,954.0938},//15
	{2122.3875,-2741.8970,954.0938},//16
	{2110.6682,-2744.4292,955.5615}//17
};

enum tInfo
{
    tVirtualWorld,
	tInterior,
	tGunArea[4],// 0 - gungs_arena, 1 - KillsGun, 2 - KillsAll, 3 - NextGun
	tDMArea[3], // 0 - dm_arena, 1 - KillsPlayer, 2 - DeathsPlayer
	bool:tBlockWars
}
new TI[MAX_PLAYERS][tInfo];

enum ARs
{
    arJob[6],
	arGripp[3]
}
new gAreas[ARs];
//------------------Миронов-------------
new gift[MAX_GIFTS];

//---
// ------------------------------------------
enum noclipenum
{
	camera_mode,
	fly_object,
	mode_mode,
	l_rold,
	u_dold,
	last_move,
	Float:acce_lmul,
}
new noclipdata[MAX_PLAYERS][noclipenum];
// ------------------------------------------
stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT;
		else if(ud > 0) direction = MOVE_BACK_LEFT;
		else            direction = MOVE_LEFT;
	}
	else if(lr > 0)
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;
		else if(ud > 0) direction = MOVE_BACK_RIGHT;
		else			direction = MOVE_RIGHT;
	}
	else if(ud < 0) 	direction = MOVE_FORWARD;
	else if(ud > 0) 	direction = MOVE_BACK;

	return direction;
}
//------------------------------------------------------------------------------------------------
#define MOVE_SPEED            150.0 // режим полёта
#define ACCEL_RATE            0.03
//-----------------------------
#define CAMERA_MODE_NONE      0
#define CAMERA_MODE_FLY       1
//------------------------------------------------------------------------------
#define RAND_WEATHER				// система рандомной погоды
#define ATM_CREATED_PICKUP			// создавать ли пикапы для банкоматов
#define FUEL_ST_CREATED_PICKUP		// создавать ли пикапы для азс

#define ENTER_PASSWORD_ATTEMPS 	(5)  // кол-во попыток на ввод пароля
#define REFER_BONUS_MONEY	(555_555) // бонус выдача денег реферу

#define MAX_AFK_TIME 			(30) // максимальное время афк (в минутах)
#define MAX_BANK_ACCOUNTS 		(8)	 // максимальное кол счетов в банке
#define MAX_PHONE_BOOK_CONTACTS (20) // макс. кол-во контактов для телефонной книги
#define MAX_AUTHORIZATION_TIME	(90) // время на авторизацию (в секундах)
#define MAX_FUEL_STATIONS		(18) // максимальное кол-во заправок
#define MAX_BUSINESS			(200)// максимальное кол-во предприятий
#define MAX_BUSINESS_GPS		(40) // максимальное кол-во предприятий в GPS
#define MAX_HOUSES				(1300)// максимальное кол-во домов
#define MAX_STONKS				(20)// максимальное кол-во акций
#define MAX_HOUSE_ROOMS			(5)	 // максимальное кол-во комнат в доме
#define MAX_GATES				(1)	 // максимальное кол-во шлагбаум/ворот
#define MAX_ENTRANCES			(30) // максимальное кол-во подъездов
#define MAX_ENTRANCE_FLOORS		(5)	 // максимальное кол-во этажей в подъезде
#define MAX_HOTELS 				(3)	 // максимальное кол-во отелей
#define MAX_HOTEL_FLOORS 		(2)  // максимальное кол-во этажей отеля
#define MAX_HOTEL_ROOMS 		(MAX_HOTEL_FLOORS * 5) // максимальное кол-во номеров в отеле
#define MAX_OWNABLE_CARS		(800)// максимальное кол-во личных ТС
#define MAX_VEHICLE_TRUNK_SLOTS	(8)	 // максимальное кол-во слотов багажника
#define MAX_GANG_REPOSITORIES	(3)  // максимальное кол-во складов для банд
#define MAX_GZ					(100)// максимальное кол-во ганг-зон
#define MAX_RADARS				(1)// максимальное кол-во радаров
#define MAX_WEAPON_TINTS		(13) // максимальное кол-во раскрасок оружия
#define MAX_ADVERTS				(100)// максимальное кол-во объявлений
#define MAX_GREEN_ZONES			(15)	 // максимальное кол-во зеленых зон

#define MIN_PLAYERS_FOR_CAPTURE (5)	 // минимальное кол-во игроков для захвата территории

new set_rank_listitem[MAX_PLAYERS];

#define BIZ_HEALTH_SERVICE_PRICE (5000)	// стоимость использование аптечки в бизнесе

#define ADVERT_SEND_PRICE		(2500) // стоимость отправки объявления

#define MAP_ICON_STREAM_DISTANCE (200.0) // прорисовка иконок на карте (радиус)

// ------------------------------------------
#define VEHICLE_COORD_TYPE_BOOT		(1)
#define VEHICLE_COORD_TYPE_BONNET	(2)

// ------------------------------------------
#define SELECT_PANEL_TYPE_NONE			0
#define SELECT_PANEL_TYPE_CLOTHING		1
#define SELECT_PANEL_TYPE_REG_SKIN      9
#define SELECT_PANEL_TYPE_CAR_MARKET    6

// ------------------------------------------
#define GATE_STATUS_OPEN	true
#define GATE_STATUS_CLOSE	false

// ------------------------------------------
#define GPS_STATUS_ON	true
#define GPS_STATUS_OFF	false

// ------------------------------------------
#define ADMIN_TYPE_NONE 	0
#define YADMIN_TYPE_NONE 	0
// ------------------------------------------
#define CONVERT_TIME_TO_SECONDS 	1
#define CONVERT_TIME_TO_MINUTES 	2
#define CONVERT_TIME_TO_HOURS 		3
#define CONVERT_TIME_TO_DAYS 		4
#define CONVERT_TIME_TO_MONTHS 		5
#define CONVERT_TIME_TO_YEARS 		6

// ------------------------------------------
#define ACCOUNT_STATE_NONE 		0
#define ACCOUNT_STATE_REGISTER 	1
#define ACCOUNT_STATE_LOGIN 	2
#define ACCOUNT_STATE_REG_SKIN 	3

// ------------------------------------------
#define REQUEST_TYPE_OFF		-1
#define REQUEST_TYPE_SUBNET		1
#define REQUEST_TYPE_IP			2

// ------------------------------------------
#define PIN_CODE_STATE_NONE 	0
#define PIN_CODE_STATE_SET 		1 // установка пин кода
#define PIN_CODE_STATE_CHECK	2 // проверка пин кода
#define PIN_CODE_STATE_CHANGE	3 // смена пин кода
#define PIN_CODE_STATE_LOGIN_CHECK 4 // проверка пин кода при авторизации

// ------------------------------------------
#define HOUSE_TYPE_NONE		(-1) 	// нет
#define HOUSE_TYPE_HOME		(0) 	// дом
#define HOUSE_TYPE_ROOM		(1) 	// аренда комнаты
#define HOUSE_TYPE_HOTEL	(2) 	// гостиница

// ------------------------------------------
#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз
// ------------------------------------------
#define GetItemInfo(%0,%1) 		g_item_type[%0][%1]
#define GetOSTInfo(%0,%1)   g_ostanovka[%0][%1]
// ------------------------------------------
#define GetTrunkData(%0,%1,%2) 			g_vehicle_trunk[%0][%1][%2]
#define SetTrunkData(%0,%1,%2,%3) 		g_vehicle_trunk[%0][%1][%2] = %3
#define AddTrunkData(%0,%1,%2,%3,%4) 	g_vehicle_trunk[%0][%1][%2] %3= %4

#define IsTrunkFreeSlot(%0,%1)			!GetTrunkData(%0, %1, VT_SQL_ID)

// ------------------------------------------
#define GetOwnableCarData(%0,%1) 		g_ownable_car[%0][%1]
#define SetOwnableCarData(%0,%1,%2)		g_ownable_car[%0][%1] = %2
#define AddOwnableCarData(%0,%1,%2,%3)	g_ownable_car[%0][%1] %2= %3

#define IsOwnableCarOwned(%0)			(GetOwnableCarData(%0, OC_OWNER_ID) > 0)

// ------------------------------------------
#define GetHotelData(%0,%1,%2) 			g_hotel[%0][%1][%2]
#define SetHotelData(%0,%1,%2,%3) 		g_hotel[%0][%1][%2] = %3
#define AddHotelData(%0,%1,%2,%3,%4) 	g_hotel[%0][%1][%2] %3= %4

#define IsHotelRoomOwned(%0,%1)		(GetHotelData(%0, %1, H_OWNER_ID) > 0) // занят ли номер отеля

// ------------------------------------------
#define GetEntranceData(%0,%1) 			g_entrance[%0][%1]
#define SetEntranceData(%0,%1,%2) 		g_entrance[%0][%1] = %2
#define AddEntranceData(%0,%1,%2,%3) 	g_entrance[%0][%1] %2= %3

// ------------------------------------------
#define GetGateData(%0,%1)			g_gate[%0][%1]
#define SetGateData(%0,%1,%2)		g_gate[%0][%1] = %2
#define AddGateData(%0,%1,%2,%3)	g_gate[%0][%1] %2= %3

// ------------------------------------------
#define GetOrderData(%0,%1)			g_order[%0][%1]
#define SetOrderData(%0,%1,%2)		g_order[%0][%1] = %2
#define AddOrderData(%0,%1,%2,%3)	g_order[%0][%1] %2= %3

// ------------------------------------------
#define AntiFloodPlayerInit(%0) 			g_player_flood[%0] = g_flood_default_values

#define GetPlayerAntiFloodData(%0,%1) 		g_player_flood[%0][%1]
#define SetPlayerAntiFloodData(%0,%1,%2)	g_player_flood[%0][%1] = %2
#define AddPlayerAntiFloodData(%0,%1,%2,%3)	g_player_flood[%0][%1] %2= %3

// ------------------------------------------
#define GetPlayerPhoneBook(%0,%1,%2) 	g_player_phone_book[%0][%1][%2]
#define SetPlayerPhoneBook(%0,%1,%2,%3)	g_player_phone_book[%0][%1][%2] = %3

#define IsPlayerPhoneBookInit(%0) 			g_player_phone_book_init[%0]
#define SetPlayerPhoneBookInitStatus(%0,%1) g_player_phone_book_init[%0] = %1

#define GetPlayerPhoneBookContacts(%0) 		g_player_phone_book_contacts[%0]
#define SetPlayerPhoneBookContacts(%0,%1) 	g_player_phone_book_contacts[%0] = %1

#define GetPlayerPhoneBookSelectContact(%0) 		g_player_phone_book_select_cont[%0]
#define SetPlayerPhoneBookSelectContact(%0,%1) 		g_player_phone_book_select_cont[%0] = %1

// ------------------------------------------
#define GetPlayerPhoneCall(%0,%1) 		g_player_phone_call[%0][%1]
#define SetPlayerPhoneCall(%0,%1,%2)	g_player_phone_call[%0][%1] = %2

#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values

// ------------------------------------------
//#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values
// ------------------------------------------
#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2

#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values

// ------------------------------------------
#define GetRepositoryData(%0,%1,%2) 	g_repository[%0][%1][%2]
#define SetRepositoryData(%0,%1,%2,%3)	g_repository[%0][%1][%2] = %3

// ------------------------------------------
#define GetPlayerListitemValue(%0,%1) 		g_player_listitem[%0][%1]
#define SetPlayerListitemValue(%0,%1,%2) 	g_player_listitem[%0][%1] = %2

#define ClearPlayerListitemValues(%0)		g_player_listitem[%0] = g_listitem_values

#define GetPlayerUseListitem(%0) 		g_player_listitem_use[%0]
#define SetPlayerUseListitem(%0,%1) 	g_player_listitem_use[%0] = %1

#define	GetPlayerYAdminEx(%0)	GetPlayerData(%0, P_YADMIN) 			// уровень ютуб админки

// ------------------------------------------
#define GetBankAccountData(%0,%1,%2)		g_bank_account[%0][%1][%2]
#define SetBankAccountData(%0,%1,%2,%3) 	g_bank_account[%0][%1][%2] = %3

#define GetPlayerBankTransfer(%0,%1) 	g_player_bank_transfer[%0][%1]
#define SetPlayerBankTransfer(%0,%1,%2)	g_player_bank_transfer[%0][%1] = %2

// ------------------------------------------
#define GetInfoPickupData(%0,%1) info_pickup[%0][%1]

// ------------------------------------------
#define GetTempJobInfo(%0,%1) g_temp_jobs[%0][%1]

// ------------------------------------------
#define GetMonthName(%0) 	month_name[%0 - 1]
#define GetDayName(%0) 		day_name[%0 - 1]

// ------------------------------------------
#define GetNumericName(%0)	numeric_name[%0 - 1]

// ------------------------------------------
#define GetATMInfo(%0,%1)	g_atm[%0][%1]
#define SetATMInfo(%0,%1,%2)	g_atm[%0][%1] = %2

// ------------------------------------------
#define GetPlayerRentd(%0)	    GetPlayerData(%0, P_RENTD)
#define SetPlayerRentd(%0)	    SetPlayerData(%0, P_RENTD)
// ------------------------------------------
#define GetPlayerDrivingExamInfo(%0,%1) 	g_player_driving_exam[%0][%1]
#define SetPlayerDrivingExamInfo(%0,%1,%2) 	g_player_driving_exam[%0][%1] = %2
#define ClearPlayerDrivingExamInfo(%0) 		g_player_driving_exam[%0] = g_driving_exam_default_values

// ------------------------------------------
#define GetTeleportData(%0,%1)		g_teleport[%0][%1]
#define SetTeleportData(%0,%1,%2)	g_teleport[%0][%1] = %2

// ------------------------------------------
#define GetTeleportListData(%0,%1)		g_teleport_list[%0][%1]

// ------------------------------------------
#define GetGangZoneData(%0,%1)			g_gang_zone[%0][%1]
#define SetGangZoneData(%0,%1,%2)		g_gang_zone[%0][%1] = %2

// ------------------------------------------
#define GetGangRepositoryData(%0,%1)		g_gang_repository[%0][%1]
#define SetGangRepositoryData(%0,%1,%2)		g_gang_repository[%0][%1] = %2

// ------------------------------------------
#define GetServerRadioData(%0,%1)	g_server_radio[%0][%1]
#define GetHelpInfoData(%0,%1) 		help_info[%0][%1]
#define GetAnimListData(%0,%1) 		anim_list[%0][%1]
#define GetMapIconsData(%0,%1) 		map_icons[%0][%1]
//-----------------------Тюн
#define MAX_VEHICLE_COMPONENT 172
// ------------------------------------------
#define GetPlayerGPSInfo(%0,%1) 	g_player_gps[%0][%1]
#define SetPlayerGPSInfo(%0,%1,%2) 	g_player_gps[%0][%1] = %2

// ------------------------------------------
#define GetPlayerImprovementInfo(%0,%1) g_player_improvements[%0][%1]

// ------------------------------------------
#define GetPlayerPinCodeState(%0) 		pin_code_state[%0]
#define SetPlayerPinCodeState(%0,%1) 	pin_code_state[%0] = %1

#define GetPlayerPinCodeValue(%0,%1) 	pin_code_value[%0][%1]
#define SetPlayerPinCodeValue(%0,%1,%2)	pin_code_value[%0][%1] = %2

// ------------------------------------------
#define GetPlayerSettingData(%0,%1)		g_player_setting[%0][%1]
#define SetPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] = %2
#define AddPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] += %2

// ------------------------------------------
#define GetPlayerData(%0,%1) 	g_player[%0][%1]
#define SetPlayerData(%0,%1,%2)	g_player[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) g_player[%0][%1] %2= %3
#define SetPlayerVehicleData(%0,%1,%2) cars_g[%0][%1] = %2

#define GetPlayerAccountID(%0)	GetPlayerData(%0, P_ACCOUNT_ID) 	// ид аккаунта
#define GetPlayerIpEx(%0)		GetPlayerData(%0, P_IP) 			// ип игрока
#define GetPlayerNameEx(%0)		GetPlayerData(%0, P_NAME) 			// имя игрока
#define GetPlayerColorEx(%0)	GetPlayerData(%0, P_COLOR)			// цвет игрока
#define GetPlayerSelectSkin(%0)	GetPlayerData(%0, P_SELECT_SKIN) 	// выбраный скин
#define GetPlayerLevel(%0)		GetPlayerData(%0, P_LEVEL)			// уровень игрока
#define GetPlayerExp(%0)		GetPlayerData(%0, P_EXP)			// очки опыта игрока
#define GetPlayerSuspect(%0)	GetPlayerData(%0, P_SUSPECT)		// уровень розыска игрока
#define GetExpToNextLevel(%0)	((GetPlayerData(%0, P_LEVEL)+1)*4) 	// очков опыта к следуйщему уровню
#define GetPlayerPhone(%0)		GetPlayerData(%0, P_PHONE)			// номер телефона игрока
#define GetPlayerMcBook(%0)		GetPlayerData(%0, P_MCBOOK)			// есть или нет ноутбук
#define GetPlayerVerevka(%0)		GetPlayerData(%0, P_VEREV)			// есть или нет ноутбук
#define GetPlayerSex(%0)		GetPlayerData(%0, P_SEX)			// пол игрока
#define GetPlayerSexName(%0)	GetPlayerData(%0, P_SEX) ? ("Женский") : ("Мужской") // название пола
#define GetPlayerSexNam(%0)	GetPlayerData(%0, P_SEX) ? ("Жен.") : ("Муж.") // название пола
#define GetPlayerChatType(%0)	GetPlayerData(%0, P_CHAT_TYPE) 		// тип чата
#define	GetPlayerAdminEx(%0)	GetPlayerData(%0, P_ADMIN) 			// уровень админки
#define	GetPlayerPrikol(%0)		GetPlayerData(%0, P_PRIKOL) 			// уровень админки
#define	GetPlayerAntiBan(%0)	GetPlayerData(%0, P_ANTIBAN) 			// уровень админки
#define	GetPlayerKDSet(%0)		GetPlayerData(%0, P_KDSET) 			// уровень админки
#define	GetPlayerFullEx(%0)		GetPlayerData(%0, P_FULL) 			// фулл доступ
#define	GetPlayerMinEx(%0)		GetPlayerData(%0, P_MIND) 			// мин доступ
#define	GetPlayerGiveFullEx(%0)		GetPlayerData(%0, P_GIVEFULL) 	// выдача фд
#define	GetPlayerFam(%0)	    GetPlayerData(%0, P_FAM) 			 // Фама
#define	GetPlayerBrakEx(%0)	GetPlayerData(%0, P_WIFE_NAME) 			//
#define	GetPlayerFamRankEx(%0)	    GetPlayerData(%0, P_FAMRANK) 			 // Фама ранг
#define	GetPlayerFamNameEx(%0)	    GetPlayerData(%0, P_FAMNAME) 			 // Фама ранг
#define GetPlayerMoneyEx(%0)	GetPlayerData(%0, P_MONEY) 			// деньги игрока
#define GetPlayerBankMoney(%0)	GetPlayerData(%0, P_BANK) 			// деньги игрока
#define GetPlayerAFKTime(%0)	GetPlayerData(%0, P_AFK_TIME) 		// время афк
#define GetPlayerLastVehicle(%0) GetPlayerData(%0, P_LAST_VEHICLE) 	// ид последнего авто в котором сидел
#define GetPlayerJobCar(%0)		GetPlayerData(%0, P_JOB_CAR) 		// рабочий транспорт
#define GetPlayerJob(%0)		GetPlayerData(%0, P_JOB) 			// работа
#define GetPlayerInBiz(%0)		GetPlayerData(%0, P_IN_BUSINESS) 	// в какой бизнес вошел\находится
#define GetPlayerInHouse(%0)	GetPlayerData(%0, P_IN_HOUSE) 		// в какой доме вошел\находится
#define GetPlayerTeamEx(%0)		GetPlayerData(%0, P_TEAM)			// организация в которой состоит игрок
#define GetPlayerHealthEx(%0)	GetPlayerData(%0, P_HEALTH)			// количество здоровья
#define GetPlayerPremium(%0)	GetPlayerData(%0, P_PREMIUM)		// премиум-аккаунт
#define GetPlayerPrem(%0)		GetPlayerData(%0, P_PREM)		// премиум-аккаунт

#define GetPlayerCase(%0)	    GetPlayerData(%0, P_CASEKEY)
#define SetPlayerCase(%0)	    SetPlayerData(%0, P_CASEKEY)
#define GetPlayerPremiumTime(%0)	GetPlayerData(%0, P_PREMIUM_TIME) // время действия премиум-аккаунта

#define GetPlayerSpawnSetting(%0) 		GetPlayerData(%0, P_SPAWN)  // место спавна
#define SetPlayerSpawnSetting(%0,%1) 	SetPlayerData(%0, P_SPAWN, %1)  // установка места спавна

#define GetPlayerCurrentDonate(%0) 		GetPlayerData(%0, P_DONATE_CURRENT) 	// текущий баланс донат-очков
#define GetPlayerTotalDonate(%0) 		GetPlayerData(%0, P_DONATE_TOTAL) 	// всего пополнений баланса

#define GetPlayerInEntrance(%0)			GetPlayerData(%0, P_IN_ENTRANCE)		// в каком подъезде
#define GetPlayerInEntranceFloor(%0)	GetPlayerData(%0, P_IN_ENTRANCE_FLOOR)	// на каком этаже в подъезде

#define GetPlayerJobName(%0) 	job_name[GetPlayerData(%0, P_JOB)]
#define	GetPlayerGiftEx(%0)	GetPlayerData(%0, P_LOGOTIP) 			// фиг знает что
#define GetPlayerTempJob(%0) 			GetPlayerData(%0, P_TEMP_JOB) 		// временная работа
#define GetPlayerTempJobState(%0) 		GetPlayerData(%0, P_TEMP_JOB_STATE) // что делать
#define GetPlayerTempJobCheckAnim(%0)	GetPlayerData(%0, P_TEMP_JOB_CHECK) // проверка анимки
#define GetPlayerJobLoadItems(%0) 		GetPlayerData(%0, P_JOB_LOAD_ITEMS) // загружено (...)
#define GetPlayerJobWage(%0) 			GetPlayerData(%0, P_JOB_WAGE) 		// зарплата

//#define GetPlayerOwnableCar(%0)			GetPlayerData(%0, P_OWNABLE_CAR)	// ид личного ТС
//#define GetPlayerOwnablCar(%0)		GetPlayerData(%0, P_OWNABLE_CARM)	// ид личного ТС
#define GetBusiness(%0)			GetPlayerData(%0, P_BUSINESS)	// ид личного ТС
#define GetBusiness_2(%0)		GetPlayerData(%0, P_BUSINESS_2)	// ид личного ТС
#define GetPlayerRentCar(%0)			GetPlayerData(%0, P_RENT_CAR)		// ид арендованного ТС
#define GetPlayerAllowedCar(%0)			GetPlayerData(%0, P_ALLOWED_CAR)	// ид доверенного ТС
#define GetPlayerUseTrunk(%0)			GetPlayerData(%0, P_USE_TRUNK)		// ид авто используемого багажника

#define GetPlayerCarSlots(%0)			GetPlayerData(%0, P_CAR_SLOTS)		// количество слотов для транспорта
#define GetPlayerPomoi(%0)				GetPlayerData(%0, P_POMOI)		// есть ли мусор в руке

#define GetPlayerRepair(%0)				GetPlayerData(%0, P_REPAIR)		// есть ли мусор в руке

#define SetPlayerUseTrunk(%0,%1)			SetPlayerData(%0, P_USE_TRUNK,	%1)	// установить ид авто используемого багажника
#define SetPlayerLogged(%0,%1)				SetPlayerData(%0, P_LOGGED, %1) 	// установить статус авторизации
#define SetPlayerChatType(%0,%1)			SetPlayerData(%0, P_CHAT_TYPE, %1) 	// установить тип чата

#define SetPlayerInBiz(%0,%1)				SetPlayerData(%0, P_IN_BUSINESS, %1)	// установить биз в котором находится
#define SetPlayerInHouse(%0,%1)				SetPlayerData(%0, P_IN_HOUSE, %1)		// установить дом в котором находится
#define SetPlayerTeamEx(%0,%1)					SetPlayerData(%0, P_TEAM, %1)			// организация в которой состоит игрок

#define SetPlayerInEntrance(%0,%1)			SetPlayerData(%0, P_IN_ENTRANCE, %1)		// установить подъезд в котором находится
#define SetPlayerInEntranceFloor(%0,%1)		SetPlayerData(%0, P_IN_ENTRANCE_FLOOR, %1)  // установить этаж в подъезд котором находится

#define SetPlayerTempJob(%0,%1) 			SetPlayerData(%0, P_TEMP_JOB, %1) 		// временная работа
#define SetPlayerTempJobState(%0,%1) 		SetPlayerData(%0, P_TEMP_JOB_STATE, %1)	// что делать
#define SetPlayerTempJobCheckAnim(%0,%1)	SetPlayerData(%0, P_TEMP_JOB_CHECK, %1) // проверка анимки
#define SetPlayerJobLoadItems(%0,%1) 		SetPlayerData(%0, P_JOB_LOAD_ITEMS, %1)	// загружено (...)

#define IsPlayerLogged(%0)		GetPlayerData(%0, P_LOGGED)		// статус авторизации
#define IsPlayerUseAnim(%0)		GetPlayerData(%0, P_USE_ANIM)	// использует ли анимку (/anim)
#define IsPlayerInJob(%0)		GetPlayerData(%0, P_IN_JOB)		// на работе ли
#define IsPlayerAFK(%0)			(GetPlayerData(%0, P_AFK_TIME) >= 5) // афк ли игрок
#define IsPlayerMuted(%0)       GetPlayerData(%0, P_MUTE)       // есть ли мут
#define IsPlayerRMuted(%0)      GetPlayerData(%0, P_RMUTE)      // есть ли блокировка репорта
// ------------------------------------------
#define GetHouseTypeInfo(%0,%1)		g_house_type[%0][%1]
#define SetHouseTypeInfo(%0,%1,%2)	g_house_type[%0][%1] = %2

#define GetHouseData(%0,%1)			g_house[%0][%1]
#define SetHouseData(%0,%1,%2)		g_house[%0][%1] = %2
#define AddHouseData(%0,%1,%2,%3)	g_house[%0][%1] %2= %3

#define GetStonksData(%0,%1)			g_stonks[%0][%1]
#define SetStonksData(%0,%1,%2)		g_stonks[%0][%1] = %2
#define AddStonksData(%0,%1,%2,%3)	g_stonks[%0][%1] %2= %3

#define IsHouseOwned(%0)			(GetHouseData(%0, H_OWNER_ID) > 0) // куплен ли дом

// ------------------------------------------
#define GetHouseRenterInfo(%0,%1,%2) 		g_house_renters[%0][%1][%2]
#define SetHouseRenterInfo(%0,%1,%2,%3) 	g_house_renters[%0][%1][%2] = %3
#define AddHouseRenterInfo(%0,%1,%2,%3,%4)	g_house_renters[%0][%1][%2] %3= %4

#define GetHouseRentersCount(%0)			g_house_renters_count[%0]
#define SetHouseRentersCount(%0,%1)			g_house_renters_count[%0] = %1
#define AddHouseRentersCount(%0,%1,%2)		g_house_renters_count[%0] %1= %2

#define IsHouseRoomOwned(%0,%1)				(GetHouseRenterInfo(%0, %1, HR_OWNER_ID) > 0)

// ------------------------------------------
#define GetBusinessInteriorInfo(%0,%1)	 	g_business_interiors[%0][%1]
#define SetBusinessInteriorInfo(%0,%1,%2) 	g_business_interiors[%0][%1] = %2

#define GetBusinessData(%0,%1) 			g_business[%0][%1]
#define SetBusinessData(%0,%1,%2) 		g_business[%0][%1] = %2
#define AddBusinessData(%0,%1,%2,%3) 	g_business[%0][%1] %2= %3

#define IsBusinessOwned(%0)				(GetBusinessData(%0, B_OWNER_ID) > 0)

#define GetBusinessGPSInfo(%0,%1)		g_business_gps[%0][%1]
#define SetBusinessGPSInfo(%0,%1,%2)	g_business_gps[%0][%1] = %2
#define AddBusinessGPSInfo(%0,%1,%2,%3) g_business_gps[%0][%1] %2= %3

// ------------------------------------------
#define GetFuelStationData(%0,%1)		g_fuel_station[%0][%1]
#define SetFuelStationData(%0,%1,%2)	g_fuel_station[%0][%1] = %2
#define AddFuelStationData(%0,%1,%2,%3)	g_fuel_station[%0][%1] %2= %3

#define IsFuelStationOwned(%0)			(GetFuelStationData(%0, FS_OWNER_ID) > 0) // куплена ли заправка

#define GetTeamRankName(%0,%1)			rank_names[%0-1][%1-1]
#define GetTeamData(%0,%1)				g_organization[%0-1][%1]
#define SetTeamData(%0,%1,%2)			g_organization[%0-1][%1] = %2
#define GetTeamName(%0)					GetTeamData(%0, O_NAME)

#define GetWeaponName(%0)				weapon_names[%0]

#define GetWeaponTint(%0)				weapon_tints[%0]
#define GetWeaponTintData(%0,%1)		g_weapon_tint[%0][%1]

#define GetPlayerSpectateData(%0,%1)	g_spectate[%0][%1]
#define SetPlayerSpectateData(%0,%1,%2) g_spectate[%0][%1] = %2

// ------------------------------------------
#define GetDonatePrice(%0)				g_donate_prices[%0]

#define GetDonatePack(%0)				g_donate_pack[%0]

//#define GetDonateKeys(%0)				g_key[%0]


// ------------------------------------------
#define GetRadarData(%0,%1)				g_radar[%0][%1]
#define SetRadarData(%0,%1,%2)			g_radar[%0][%1] = %2

// ------------------------------------------
#define GetAdvertData(%0,%1)			g_advert[%0][%1]
#define SetAdvertData(%0,%1,%2)			g_advert[%0][%1] = %2

forward AutoRestart(playerid);
forward ConnectedPlayers();
forward podarok();
forward NoRoof(playerid);
forward anim2(playerid);
forward StartViktorina();

#define MAX_ACTOR_COUNT	100

enum ACTORS_E {
	actorID,
	actorModel,
	Float:actorPos[4],
	Text3D:actorTextID,
	actorInterior,
	actorWorld,
	actorArea,
}
static AI[MAX_ACTOR_COUNT][ACTORS_E];

new Iterator:Actors<MAX_ACTOR_COUNT>;
//---
//рыбалка
#define FISHING_ROD_ATTACHID 0 // если данный ID уже используется, смените на свой
#define DLG_FISH_MARKET 4095 // изменить на свой значение, если ID диалога уже используется

//new fishing_market_pickup;
//new fishing_info_pickup;
new fishing_rod_state[MAX_PLAYERS];
new fishing_busy[MAX_PLAYERS];
new fishing_bait[MAX_PLAYERS];
new fishing_line[MAX_PLAYERS];
new fishing_timer[MAX_PLAYERS];
//викторина
#define vTimer  2       // Таймер в минутах
#define vMaxN   555     // Максимальное число
#define vMaxP   1000000    // Максимальный приз
new Viktorina = -95490065154681;
new report_message[MAX_PLAYERS][200];
#define MAX_ITEM 150

enum info_item
{
	itemname[21],
	item_object,
	item_value_name[21],
	data_name[121],
};

new items_name[6][info_item] =
{
	{"Деньги", 1212, "руб", "money"},
	{"Наркотики", 1279, "гр", "drugs"},
	{"Патроны", 3013, "шт", "ammo"},
	{"Аптечки", 11736, "шт", "heal"},
	{"Металл", 2960, "кг", "metall"},
	{"Пшеница", 2901, "кг", "wheat"}
};

new item_obj[MAX_ITEM] = {-1, ...};
new Text3D: item_label[MAX_ITEM];
new items_id[MAX_ITEM] = {-1, ...};
new item_value[MAX_ITEM]  = {-1, ...};
// ------------------------------------------
#define MAX_SKIN 15

enum PLAYER_SKIN
{
	ID,
	ID_PLAYER,
	SKIN_NAME[16],
	SKIN_ID
};
new player_skin[MAX_SKIN][PLAYER_SKIN][MAX_PLAYERS];
//-----------------
//магазор
#define wepbuy 1
//new bool:ADuty[MAX_PLAYERS char];
static AdminTag[40];

#define T_FAM					"`fam`" //Дома

enum E_FAMILY_STRUCT
{
	F_ID,
	F_NAME[32],
	F_LEADER[24],
	F_COLOR[7],
	F_DATE[32],
	F_HOUSE,
	F_DRUGS,
	F_MONEY,
	F_LOCK,
	F_METALL,
	F_AMMO,
	F_GANG,
};
new g_family[300][E_FAMILY_STRUCT];
new Float: mpPos[3],
	mpWorld[2],
	number_mp_player,
	mp_status;

new TOTAL_FAMILY;
new g_family_rank[300][5][20];

enum fm
{
	fID,
	fName[32],
	fLeader[32]
};
new FamInfo[300][fm];
new TOTALFAM;

enum
	E_CITY_DATA
{
	cz_name[20],
	Float:cz_pos[22],
	cz_pos_count
};

enum E_FAMILY_COLORS
{
	FC_NAME[11],
	FC_COLOR[7]
}
// ------------------------------------------
new family_colors[11][E_FAMILY_COLORS] =
{
	{"Золотой", "FFD700"},
	{"Бирюзовый", "1abc9c"},
	{"Зеленый", "2ecc71"},
	{"Голубой", "74b9ff"},
	{"Фиолетовый", "a29bfe"},
	{"Желтый", "fdcb6e"},
	{"Оранжевый", "e67e22"},
	{"Красный", "ff7675"},
	{"Белый", "ffffff"},
	{"Серый", "95a5a6"},
	{"Розовый", "ea00ff"}
};
// -
new
	city_zones[][E_CITY_DATA] =
{
	{"Ж/Д Вокзал", {332.6298,1487.3718, 345.9600,1663.5808, 557.0748,1647.0774, 483.4828,1485.5895}, 22},
	{"Гоночный трек", {-2069.95166, 1254.40710, -1374.51733, 1254.50073, -1373.54199, 1865.97034, -2070.28149, 1912.33386}, 8},
	{"Аэропорт Мирный", {1893.18066, 1526.24390, 1894.98926, 1826.61133, 1101.13721, 1527.22620, 1108.00793, 1841.47913}, 8},
	{"г. Лыткарино", {-2028.50269, -373.50888, -2679.53784, -254.26384, -2689.93872, 409.67734, -1976.65100, 413.61319}, 8},
	{"г. Эдово", {-2294.07031, 2512.81543, -2697.27490, 2480.11719, -2706.50464, 2969.49219, -2306.03809, 2976.02026}, 8},
	{"п. Простоквасино", {-907.82959, 2151.62476, -682.74481, 2157.74829, -668.97406, 1820.64819, -912.29132, 1824.31323}, 8},
	{"п. Роговичи", {1762.41931, 776.54260, 2496.75854, 801.61493, 2496.06665, 1516.70386, 1746.04407, 1500.04431}, 8},
	{"д. Гарель", {2178.51855, -333.76642, 2167.31104, -1.77155, 2699.15674, -0.53698, 2699.01147, -331.64532}, 8},
	{"д. Корякино", {916.85327, -1300.39734, 861.16174, -1473.16858, 406.61792, -1337.41797, 476.95297, -1142.37048}, 8},
	{"пгт. Батырево", {2355.06543, 1902.43079, 1669.87927, 1901.33191, 1659.65308, 2553.30811, 2344.81909, 2534.41040}, 8}
};

new city_zone_id[sizeof city_zones];
new city_zone_name_TD[sizeof city_zones + 1][20];

new Text:PHONE_TD[1];
new PlayerText:PHONE_PTD[MAX_PLAYERS][8];

new PlayerText: city_zone_PTD[MAX_PLAYERS];
new player_in_city_zone[MAX_PLAYERS] = {-1, ...};

stock CityZonesInit()
{
	for(new i; i < sizeof city_zones; i ++)
	{
		city_zone_id[i] = CreateDynamicPolygon(city_zones[i][cz_pos], _, _, city_zones[i][cz_pos_count], 0, 0);
		format(city_zone_name_TD[i], 20, "%s", city_zones[i][cz_name]);
	}
	city_zone_name_TD[sizeof city_zones] = "Нижегородская обл.";

	print("[CityZones]: Successfully Init");
	return 1;
}

// ------------------------------------------
stock Float: GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return atan2(y1-y2, x1-x2)-90.0;
}

// ------------------------------------------
stock Float: GetVehicleSpeed(vehicleid)
{
	new Float: speed = -1;

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed = x / floatsin(-angle, degrees);

		speed *= 100.0;
	}

	return speed;
}
stock SpeedVehicle(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
        GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 200.3;
    return floatround(ST[3]);
}
//-----------
//Анти ДМ зоны
#define MAX_ADZONE  (16)
enum antidminfo
{
    zName[130],
	zStatus,
	Float:zX,
	Float:zY,
	Float:zZ
};

////////////-----------
#define MAX_CREATE_OBJECTS 1000
enum obj_INFO
{
	objID,
	objName[30],
	objModel,
	Float:objPosX,
	Float:objPosY,
	Float:objPosZ,
	Float:objRotX,
	Float:objRotY,
	Float:objRotZ
}
new
	ObjInfo[MAX_CREATE_OBJECTS][obj_INFO],
	TOTALOBJECTS,
	EditObjectPlayer[MAX_PLAYERS],
	ObjectNamePlayer[MAX_PLAYERS][30];

new CarPlatePlayer[MAX_PLAYERS];
//new objectcartest;
/////////////------------

//===========================================

enum E_CONTAINER_VEHICLE_STRUCT
{
	Float: CSV_POS_X,
	Float: CSV_POS_Y,
	Float: CSV_POS_Z,
	Float: CSV_POS_A
}

new container_spawn_vehicle[7][E_CONTAINER_VEHICLE_STRUCT] =
{
	{-1957.6879,2932.0627,8.2216,90.5027},
	{-1939.8242,2932.0947,8.2226,90.5316},
	{-1924.1384,2932.0925,8.2416,90.3970},
	{-1907.0488,2932.0469,8.2214,90.3970},
	{-1897.2266,2926.5303,8.2217,90.3970},
	{-1913.9773,2926.5581,8.2263,90.3970},
	{-1931.0122,2926.5342,8.2214,90.0243}
};

enum E_CONTAINER_VEHICLE_SPAWN_STRUC
{
	Float: CS_POS_X,
	Float: CS_POS_Y,
	Float: CS_POS_Z,
	Float: CS_POS_A
}

new container_spawn_vehicle_buy[7][E_CONTAINER_VEHICLE_SPAWN_STRUC] =
{
	{-1959.5929,2936.3940,6.1911,90.0},
	{-1943.7290,2936.5735,6.1911,90.0},
	{-1925.9305,2936.7769,6.1911,90.0},
	{-1925.9305,2936.7769,6.1911,90.0},
	{-1898.5448,2922.7205,6.1912,90.0},
	{-1916.5865,2922.8850,6.1911,90.0},
	{-1932.8942,2921.6682,6.1911,90.0}
};

new svalka_spawn_vehicle_buy[10][E_CONTAINER_VEHICLE_SPAWN_STRUC] =
{
	{-2796.4038,-1389.6797,10.0703,182.8331},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2803.7883,-1386.9835,10.0750,168.3412},
	{-2811.1479,-1381.1187,10.0726,138.0145}
};

enum E_CONTAINER_PRICE_STRUCT
{
	CP_NAME[35],
	CP_PRICE
}

new nomerobj_f[MAX_VEHICLES];
new nomerobj_b[MAX_VEHICLES];
enum E_CAR_NUMBER_OPTION_STRUCT
{
	C_Model_ID,
 	Float: C_XF,
 	Float: C_YF,
 	Float: C_ZF,
 	Float: C_XRF,
 	Float: C_YRF,
 	Float: C_ZRF,
 	Float: C_XB,
 	Float: C_YB,
 	Float: C_ZB,
 	Float: C_XRB,
 	Float: C_YRB,
 	Float: C_ZRB
}
new g_car_num_opt[15200][E_CAR_NUMBER_OPTION_STRUCT];

#define MAX_TABLE (3) // Максимальное количество столов


new container[7],
	container_door[7],
	container_second_door[7],
	container_block[7],
	veh_cont[7],
	Text3D: container_label[7],
	container_car[7],
	Text3D: container_label_1[7];

enum E_CONTAINERS_STRUCT
{
	C_ID,
	Float: C_POS_X,
	Float: C_POS_Y,
	Float: C_POS_Z,
	Float: C_POS_A,
	C_PRICE_COUNT,
	C_TIME_COUNT,
	C_LAST_BET,
	CD_FIRST_ID,
	Float: CD_FIRST_POS_X,
	Float: CD_FIRST_POS_Y,
	Float: CD_FIRST_POS_Z,
	Float: CD_FIRST_POS_A,
	CD_SECOND_ID,
	Float: CD_SECOND_POS_X,
	Float: CD_SECOND_POS_Y,
	Float: CD_SECOND_POS_Z,
	Float: CD_SECOND_POS_A,
	CD_STATUS,
	Float: C_POS_X_1,
	Float: C_POS_Y_1,
	Float: C_POS_Z_1,
	Float: C_B_POS_X,
	Float: C_B_POS_Y,
	Float: C_B_POS_Z,
	Float: C_B_POS_A
}

new containers[7][E_CONTAINERS_STRUCT] =
{
	{10466, -1958.89,2932.05,6.39267,-89.4, 10000000, 0, -1, 10474, -1964.47,2933.31,7.04267,0.0, 10475, -1964.47,2930.77,7.04267,0.0, 1,-1965.1040,2931.9771,7.8827, -1964.58,2932.01,7.93752, -80.0},
	{10466, -1942.44,2932.09,6.39267,-89.4, 10000000, 0, -1, 10474, -1948.01,2933.31,7.04267,0.0, 10475, -1948.01,2930.77,7.04267, 0.0, 1,-1948.9059,2932.0854,7.8827, -1948.1,2932.01,7.93752, -80.0},
	{10466, -1925.19,2932.05,6.39267,-89.4, 10000000, 0, -1, 10474, -1930.77,2933.31,7.04267,0.0, 10475, -1930.77,2930.77,7.04267, 0.0, 1,-1931.3438,2932.0632,7.8827, -1930.93,2932.01,7.93752, -80.0},
	{10466, -1908.15,2932.03,6.39267,-89.4, 10000000, 0, -1, 10474, -1913.71,2933.31,7.04267,0.0, 10475, -1913.71,2930.77,7.04267, 0.0, 1,-1914.4340,2932.1421,7.8827, -1913.88,2932.01,7.93752, -80.0},
	{10466, -1898.45,2926.53,6.39267,-89.4, 10000000, 0, -1, 10474, -1904.02,2927.78,7.04267,0.0, 10475, -1904.02,2925.26,7.04267, 0.0, 1,-1904.9874,2926.5583,7.8827, -1904.15,2926.49,7.93752, -80.0},
	{10466, -1915.99,2926.53,6.39267,-89.4, 10000000, 0, -1, 10474, -1921.56,2927.78,7.04267,0.0, 10475, -1921.56,2925.26,7.04267, 0.0, 1,-1922.7148,2926.5979,7.8827, -1921.76,2926.49,7.93752, -80.0},
	{10466, -1931.92,2926.53,6.39267,-89.4, 10000000, 0, -1, 10474, -1937.51,2927.78,7.04267,0.0, 10475, -1937.51,2925.26,7.04267, 0.0, 1,-1938.4766,2926.5254,7.8827, -1937.67,2926.49,7.93752, -80.0}
};

new def_cena_cont[7] =
{
	10000000,
	10000000,
	10000000,
	10000000,
	10000000,
	10000000,
	10000000
};

enum E_SVALKA_STRUCT
{
	Float: S_POS_X,
	Float: S_POS_Y,
	Float: S_POS_Z,
	Float: S_POS_A,
	S_PRICE_COUNT,
	S_TIME_COUNT,
	S_LAST_BET,
	SV_STATUS
}


new svalka[10][E_SVALKA_STRUCT] =
{
	{-2751.6040, -1432.4635, 11.7369, 194.8402, 1700000, 0, -1, 1},
	{-2747.6924, -1447.0800, 11.6867, 194.8402, 1700000, 0, -1, 1},
	{-2783.0015, -1443.2592,10.0104, 344.6538, 1700000, 0, -1, 1},
	{-2773.0715,-1366.4637,11.7604,198.1139, 1700000, 0, -1, 1},
	{-2776.5654,-1354.1337,11.7604,14.8355, 1700000, 0, -1, 1},
	{-2779.6995,-1340.0811,11.7516,9.8222, 1700000, 0, -1, 1},
	{-2781.8455,-1326.5740,11.7585,6.3755, 1700000, 0, -1, 1},
	{-2790.6960,-1241.8079,11.7385,8.2555, 1700000, 0, -1, 1},
	{-2793.0496,-1227.5280,11.6987,10.4489, 1700000, 0, -1, 1},
	{-2795.3574,-1214.7601,11.6538,12.6422, 1700000, 0, -1, 1}
};

new veh_sval[10],
	Text3D: svalka_label[10],
	svalka_car[10];

//===========================================
new AntiDm[MAX_ADZONE][antidminfo] =
{
    {"Автошкола", 1, 2280.9009,1399.0365,12.2522},
	{"Радио Арзамас", 1, -398.1861,945.5391,12.1484},
	{"Больница", 1, -286.9034, 576.8859, 12.8447},
	{"Банк Арзамас", 1, 262.7270,1709.3180,13.0819},
	{"Банк Южный", 1, 2376.7405,-2139.2598,22.0776},
	{"Шахта", 1, -570.2114,-1456.7656,41.0009},
	{"Армия", 1, 1695.4014,1316.6548,12.6094},
	{"Церковь", 1, -2478.2612,2518.5479,46.6686},
	{"ДПС", 1, 2563.5522,-2420.1042,22.8922},
	{"ППС", 1, -352.0312,356.7699,13.0400},
	{"Правительство", 1, -2467.5537, 1541.8041, 53.0278},
	{"Центральная ОПГ", 1, -133.3660,254.7621,12.3572},
	{"Западная ОПГ", 1, 409.0703,1677.5908,12.0400},
	{"Северная ОПГ", 1, -40.7463, 1361.4651, 12.8750},
	{"Военкомат", 1, 1919.4358,2304.0698,15.5697},
	{"Спавн Новичков", 1, -753.8085,870.4588,12.0300}
};
new DMStatus[MAX_PLAYERS];
// ------------------------------------------
enum E_PLAYER_STRUCT // структура игрока
{
	P_ACCOUNT_ID, 	// ид аккаунта
	P_REFER,		// рефер
	P_SEX,			// пол игрока
	P_PASSWORD[16], // пароль игрока
	P_EMAIL[60 + 1],// емайл игрока
	bool: P_CONFIRM_EMAIL,// подтвержден ли емайл
	P_SKIN,			// скин игрока
	P_MONEY,		// деньги игрока
	P_BANK,			// деньги в банке
	P_PREM,
	P_ADMIN,		// уровень админки
	P_YADMIN,
	P_PRIKOL,
	P_DISEASE[2],    //
	P_DDISEASE,
	P_ANTIBAN,
	P_KDSET,
	P_FULL,         // фулл доступ
	P_MIND,         // мин доступ
	P_GIVEFULL,     // выдача фулл-доступа
	P_FAM,
	P_DRIVING_LIC,	// лицензия на управление авто
	P_WEAPON_LIC,	// лицензия на оружие
	P_REG_TIME,		// время регистрации
	P_REG_IP[16],	// ип при регистрации
	P_LAST_IP[16],	// ип при последнем входе
	P_LEVEL,		// уровень игрока
	P_EXP,			// очки опыта игрока
	P_SUSPECT,		// уровень розыска
	P_PHONE,		// номер телефона
	P_PHONE_BALANCE,// на счету телефона
	P_PHONE_COLOR,	// цвет телефона
	P_LAW_ABIDING,	// законопослушность
	P_IMPROVEMENTS, // улучшения
	P_DRUGS,		// наркотики
	P_AMMO,			// патроны
	P_METALL,		// металл
	P_WIFE,			// жена
	P_TEAM,			// организация
	P_OSKIN,		// скин организации
	P_SUBDIVISON,	// подразделение
	P_WAGE,			// зарплата
	P_JOB,			// работа / должность(ранг)
	P_HOUSE_TYPE,	// тип жилья (дом/гостиница/в гостях)
	P_HOUSE_ROOM,	// комната в доме
	P_HOUSE,		// дом
	P_BUSINESS,		// бизнес
	P_BUSINESS_2,		// бизнес
	P_FUEL_ST,	 	// заправка
	P_SETTING_PHONE[13],// реальный телефон игрока
	P_SETTING_PIN[5], 	// пин код
	P_REQUEST_PHONE,	// запрос телефона при авторизации
	P_REQUEST_PIN,		// запрос пин кода при авторизации
	// -------------------------
	P_LAST_LOGIN_TIME,	// время последнего входа\выхода
	// -------------------------
	P_GAME_FOR_HOUR,	// время игры за час
	P_GAME_FOR_DAY,		// время игры за день
	P_GAME_FOR_DAY_PREV,// время игры за вчерашний день
	// -------------------------
	P_COLOR,		// цвет игрока
	P_SELECT_SKIN, 	// выбраный скин
	P_CHAT_TYPE,	// тип чата
	P_AFK_TIME,		// время афк
	P_LAST_VEHICLE,	// ид последнего авто в котором сидел
	P_LAST_DIALOG,	// ид последнего диалога
	P_USE_ANIM_TYPE,// тип анимки который использует
	P_PASS_ATTEMPS, // кол-во попыток на авторизацию
	P_TARGET_ID,	// нацелен на игрока
	Float: P_HEALTH,// хп игрока
	// -------------------------
	P_TEMP_JOB,				// временная работа
	P_TEMP_JOB_STATE,		// действие что надо делать
	P_TEMP_JOB_CHECK,		// проверка анимки
	// -------------------------
	P_JOB_SERVICE_NAME[17],	// название службы
	P_JOB_TARIFF,			// тариф
	P_JOB_WAGE,				// Зарплата
	P_JOB_LOAD_ITEMS,		// загружено/перенесено (груза/руды)
	P_JOB_CAR,				// рабочий транспорт
	P_END_JOB_TIMER,		// таймер окончания работы
	P_FACTORY_USE_DESK,		// Какой стол использует на заводе
	P_BUS_ROUTE, 			// маршрут автобуса
	P_POMOI_ROUTE_STEP,		// шаг маршрута
	P_LOAD_ROUTE_STEP,		// шаг маршрута
	P_BUS_ROUTE_STEP,		// шаг маршрута
	P_MECHANIC_FILL_PAY,	// заправлено на N руб
	P_MECHANIC_REPAIR_PAY,	// отремонтировано на N руб
	bool: P_IN_JOB,			// на работе ли
	// -------------------------
	bool: P_LOGGED,				// статус авторизации
	bool: P_USE_ANIM,			// использует ли анимку (/anim)
	bool: P_BLOCK_LEAVE_AREA, 	// заблокировать вызов OnPlayerLeaveDynamicArea
	bool: P_ANIMS_INIT,			// прогружены ли анимки при спавне
	bool: P_ANIM_LIST_INIT,		// прогружен ли анимлист
	bool: P_SNACK,				// есть ли у игрока закуска
	Text3D: P_ADVISOR_LABEL,	// бейджик советника
	bool: P_ADVISOR_BLOCK_CHAT,	// отключение чата организации
	//--------------------------
	Text3D: ADMIN_LABEL,	// бейджик admin'a
	Text3D: GAADMIN_LABEL,
	// -------------------------
	P_AUTH_TIME,		// время на авторизаци
	P_IN_BUSINESS,		// в какой бизнес вошел
	P_IN_HOUSE,			// в какой дом вошел
	P_IN_ENTRANCE,		// в каком подъезде
	P_IN_ENTRANCE_FLOOR,// на каком этаже в подъезде
	P_LAST_PICKUP,		// ид пикапа на которым стоял последний раз
	P_IN_HOTEL_ROOM,	// в каком номере в отеле
	P_IN_HOTEL_FLOOR,	// на каком этаже в отеле
	P_MED_CHEST,		// аптечка
	P_MASK,				// маска
	P_LOTTERY,			// лотерейный билет
	P_DRINK_STEP,		// кол-во использование напитка
	P_REALTOR_TYPE,		// риелторка
	P_USE_SELECT_PANEL,	// использует ли панель выбора
	P_USE_TRUNK,		// ид авто используемого багажника
	// -------------------------
	P_IP[16], 			// ип игрока
	P_NAME[20 + 1], 	// имя игрока
	P_WIFE_NAME[21],	// имя жены
	// -------------------------
	P_ACCOUNT_STATE, 		// статус аккаунта (авторизаци/регистрация)
	P_ACCOUNT_STEP_STATE, 	// шаг (регистрации/авторизации)
	// -------------------------
	P_WARN,             // варны
	P_WARN_TIME,        // время варнов
	P_MUTE,             // время мута
	P_RMUTE,
	P_AUNRMUTE,
	P_ARMUTE,
	// -------------------------
	P_POWER,			// сила
	P_SKILL_COLT,     	// скилл кольт
	P_SKILL_SDPISTOL,   // скилл пистолет с глушителем
	P_SKILL_DEAGLE,     // скилл дигл
	P_SKILL_SHOTGUN,    // скилл дробовик
	P_SKILL_MP5,        // скилл мп5
	P_SKILL_AK47,	    // скилл ак47
	P_SKILL_M4,         // скилл м4
	P_SKILL_SNIPER_RIFLE,	// скилл снайперская винтовка
	P_SKILL_SAWNOFF,    // скилл обрез
	P_SKILL_COMBAT_SG,  // скилл тактический дробовик
 	P_SKILL_MICRO_UZI,  // скилл микро-узи
 	// -------------------------
 	P_SPAWN,            // место спавна
 	// -------------------------
	P_DONATE_CURRENT,	// текущий баланс донат-очков
	P_DONATE_TOTAL,		// всего приобретено донат-очков
	// -------------------------
	bool: P_HOSPITAL,	// лежит ли в больнице
	P_OCCUPIED_BED,		// номер койки
	// -------------------------
	bool: P_WEAPON_RELOADING,	// перезаряжает ли оружие
	P_RELOADINGS_COUNT[11],		// количество перезарядок для каждого оружия
	bool: P_CUFFED,		// наручники на игроке
	// -------------------------
	P_BUY_CAR,			// покупает ли авто
	P_RENT_CAR,			// арендованная машина
	P_ALLOWED_CAR,		// доверенная машина
	P_CAR_SLOTS,		// количество слотов для авто
	// -------------------------
	P_JAIL,				// время заключения
	// -------------------------
	//рыбалка
	P_YDKA,
	// -------------------------
	bool: P_DUTY,
	// -------------------------
	P_WHEAT,
	P_HEAL,
	//----------------
	P_WEAPON_TINT[MAX_WEAPON_TINTS], // раскраски оружия
	// -------------------------
	P_ORDER,			// выполняет ли заказ
	// -------------------------
	P_PREMIUM,			// уровень премиум аккаунта
	P_PREMIUM_TIME,		// время действия премиум аккаунта
	P_FAMRANK,
	P_FAMNAME[60 + 1], // название семьи
	Text3D: P_FAM_LABEL,	// бейджик фамы
	P_LASTPAS,
	P_RENTD,
	P_CASEKEY,
	P_SKIN_LIST,
	P_POMOI,
	P_STATUS_ROULETTE, //Статус забрал ли игрок приз или нет.
	P_RULETKA,
	P_BILET,
	P_QUEST_1,
	P_QUEST_2,
	P_QUEST_3,
	P_QUEST_4,
	P_END_CAR_TIMER, //таймер выхода из авто
	P_PERENOS,
	P_SLOT_AC,
	P_S_ID,
	P_S_KOLVO,
	P_MCBOOK,
	P_REPAIR,
	P_VEREV,
	pCasinoChips
};

// ------------------------------------------
enum
{
	PROMO_TYPE_MONEY = 0, 	// деньги
	PROMO_TYPE_DONATE,		// донат
	PROMO_TYPE_EXP,			// опыт
}

enum E_PROMO_STRUCT
{
	E_PLAYER_STRUCT: P_DATA,
	P_SQL_NAME[16],
	P_NAME[7]
}

new promo_info[3][E_PROMO_STRUCT] =
{
	{P_MONEY, "money", "Деньги"},
	{P_DONATE_CURRENT, "donate_current", "Донат"},
	{P_EXP, "exp", "Exp"}
};

// ------------------------------------------
enum
{
	STORAGE_METALL = 0, // максимальное кол-во металла
	STORAGE_AMMO, // максимальное кол-во патронов
	STORAGE_DRUGS // максимальное кол-во наркотиков
}

// ------------------------------------------
enum E_OWNABLE_CAR_STRUCT
{
	OC_SQL_ID, 			// ea a aaca
	OC_OWNER_ID,		// ea aeaaaeuoa
	OC_OWNER_NAME[21],	// eiy aeaaaeuoa
	OC_NUMBER[8],		// iiia? ON
	OC_REGION[4],		// iiia? ON
	OC_MODEL_ID,		// iiaaeu
	OC_COLOR_1,			// oaao 1
	OC_COLOR_2,			// oaao 2
	OC_VINIL,			// aeiee
	OC_C1,			// aeiee
	Float: OC_POS_X,	// iiceoee ON
	Float: OC_POS_Y,	// iiceoee ON
	Float: OC_POS_Z,	// iiceoee ON
	Float: OC_ANGLE,	// iiceoee ON (oaie iiai?ioa)
	bool: OC_ALARM,		// neaiaeecaoey
	bool: OC_KEY_IN,	// anoaaeai ee ee??
	OC_DISKI,
	OC_GIDRA,
	OC_NITRO,
	OC_CREATE,
	OC_RENT,
	OC_RENTP,			// время создания
	OC_ST_LOAD
};

// ------------------------------------------
enum E_VEHICLE_TRUNK_STRUCT
{
	VT_SQL_ID,
	VT_ITEM_TYPE, 		// тип предмета
	VT_ITEM_AMOUNT,		// кол-во
	VT_ITEM_VALUE
};

// ------------------------------------------
enum E_ITEM_STRUCT
{
	I_NAME[16],
	I_NAME_COUNT[8],
	bool: I_COMBINATION
};

// ------------------------------------------
enum E_ENTRANCE_STRUCT
{
	E_SQL_ID,		// ид в базе
	E_CITY, 		// город
	E_ZONE, 		// район / улица
	E_FLOORS,		// кол-во этажей
	Float: E_POS_X, // вход (пикап)
	Float: E_POS_Y, // вход (пикап)
	Float: E_POS_Z, // вход (пикап)
	Float: E_EXIT_POS_X,// выход
	Float: E_EXIT_POS_Y,// выход
	Float: E_EXIT_POS_Z,// выход
	Float: E_EXIT_ANGLE,// выход (угол)
	E_PICKUP_ID,		// ид пикапа
	E_MAP_ICON,			// иконка на карте
	Text3D: E_LABEL,	// 3д текст
	E_STATUS			// статус (куплены ли все квартиры)
};

// ------------------------------------------
enum E_HOTEL_STRUCT
{
	H_SQL_ID,
	H_OWNER_ID,
	H_RENT_DATE,
	bool: H_STATUS,
	H_OWNER_NAME[21]
};

enum E_HOTEL_CAR_PARK_STRUCT
{
	Float: HC_POS_X,
	Float: HC_POS_Y,
	Float: HC_POS_Z,
	Float: HC_ANGLE,
	HC_VEHICLE_ID
};
enum E_OST_STRUCT
{
	Float: OST_POS_X,
	Float: OST_POS_Y,
	Float: OST_POS_Z,
	Float: OST_ROT_Z
};
enum E_FER_STRUCT
{
	Float: FER_POS_X,
	Float: FER_POS_Y,
	Float: FER_POS_Z,
	//Float: FER_ROT_Z,
	Float: FER_POS_A
};
// ------------------------------------------
enum E_HOUSE_STRUCT
{
	H_SQL_ID,			// ид в базе данных
	H_NAME[20],			// название \ тип
	H_OWNER_ID,			// ид аккаунта владельца
	H_CITY,				// ид города
	H_ZONE,				// ид района
	H_IMPROVEMENTS,		// уровень улучшений
	H_RENT_DATE,		// аренда на n времени
	H_PRICE,			// стоимость дома
	H_RENT_PRICE,		// плата за аренду в день
	H_LOCK_STATUS,		// статус (открыто/закрыто)
	H_ENTRACE,			// ид подьезда
	H_TYPE,				// тип дома (интерьер)
	Float: H_POS_X,		// позиция пикапа входа
	Float: H_POS_Y,		// позиция пикапа входа
	Float: H_POS_Z,		// позиция пикапа входа
	Float: H_EXIT_POS_X,// позиция после выхода из дома
	Float: H_EXIT_POS_Y,// позиция после выхода из дома
	Float: H_EXIT_POS_Z,// позиция после выхода из дома
	Float: H_EXIT_ANGLE,// угол поворота
	Float: H_CAR_POS_X,	// позиция транспорта
	Float: H_CAR_POS_Y,	// позиция транспорта
	Float: H_CAR_POS_Z,	// позиция транспорта
	Float: H_CAR_ANGLE,	// угол поворота транспорта
	Float: H_STORE_X,	// позиция шкафа
	Float: H_STORE_Y,	// позиция шкафа
	Float: H_STORE_Z,	// позиция шкафа
	// -------------------------
	H_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: H_STORE_LABEL,	// 3д текст (шкаф)
	H_ENTER_PICKUP,			// пикап входа
	H_HEALTH_PICKUP,		// пикап аптечки
	H_MAP_ICON,				// иконка на карте
	H_FLAT_ID,				// номер квартиры
	// -------------------------
	H_EVICTION,			// продажа из-за задолженности
	// -------------------------
	H_STORE_METALL,		// металл в шкафу
	H_STORE_DRUGS,		// наркотики в шкафу
	H_STORE_WEAPON,		// оружие в шкафу
	H_STORE_AMMO,		// патроны оружия в шкафу
	H_STORE_SKIN		// одежда в шкафу
};

enum E_STONKS_STRUCT
{
	S_SQL_ID,
	S_NAME[64],
	S_PRICE,
	S_KOLVO
};

enum E_HOUSE_TYPE_STRUCT
{
	HT_NAME[40],
	Float: HT_ENTER_POS_X,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Y,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Z,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_ANGLE,	// позиции после входа в интерьера
	Float: HT_HEALTH_POS_X,		// позиции аптечки
	Float: HT_HEALTH_POS_Y,		// позиции аптечки
	Float: HT_HEALTH_POS_Z,		// позиции аптечки
	Float: HT_STORE_POS_X,		// позиции шкафа
	Float: HT_STORE_POS_Y,		// позиции шкафа
	Float: HT_STORE_POS_Z,		// позиции шкафа
	HT_INTERIOR,				// ид интерьера
	HT_ROOMS					// кол-во комнат
};

enum E_HOUSE_ROOM_STRUCT
{
	HR_SQL_ID,			// ид в базе
	HR_OWNER_ID,		// ид игрока
	HR_RENT_DATE,		// насколько арендована комната
	HR_RENT_TIME,		// когда поселился
	HR_OWNER_NAME[21]	// ник арендатора
};

enum // управление домом
{
	HOUSE_OPERATION_PARAMS, 		// изменение параметров дома
	HOUSE_OPERATION_LOCK,			// открыть / закрыть
	HOUSE_OPERATION_IMPROVEMENTS,	// улучшение
	HOUSE_OPERATION_CAR_DELIVERY,	// доставить ТС к дому
	HOUSE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	HOUSE_OPERATION_RENTERS			// список арендаторов
}

// ------------------------------------------
enum E_BUSINESS_STRUCT
{
	B_SQL_ID,			// ид в базе данных
	B_NAME[24],			// название
	B_OWNER_ID,			// ид аккаунта владельца
	B_CITY,				// ид города
	B_ZONE,				// ид района
	B_ENTER_PRICE,		// цена за вход в биз
	B_ENTER_MUSIC,		// звук при входе
	B_IMPROVEMENTS,		// уровень улучшений
	B_PRODS,			// количества продуктов
	B_PROD_PRICE,		// стоимость 1 продукта
	B_BALANCE,			// бюджет бизнеса
	B_RENT_DATE,		// аренда на n времени
	B_PRICE,			// стоимость бизнеса
	B_RENT_PRICE,		// плата за аренду в день
	B_LOCK_STATUS,		// статус (открыта/закрыта)
	B_TYPE,				// тип бизнеса
	B_INTERIOR,			// интерьер
	Float: B_POS_X,		// позиция бизнеса
	Float: B_POS_Y,		// позиция бизнеса
	Float: B_POS_Z,		// позиция бизнеса
	Float: B_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: B_EXIT_ANGLE,// угол поворота
	Float: G_CAR_POS_X,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Y,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Z,// позиция после выхода из бизнеса
	Float: G_CAR_ANGLE,// угол поворота
	// -------------------------
	B_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: B_LABEL,		// 3д текст
	B_ORDER_ID,				// слот заказа
	B_HEALTH_PICKUP,		// ид пикапа аптечки
	// -------------------------
	B_EVICTION				// продажа из-за задолженности
};

enum // типы бизнесов
{
	BUSINESS_TYPE_SHOP_24_7 = 1, 	// магазин 24/7
	BUSINESS_TYPE_CLUB 		= 2, 		// клуб (алхамбра)
	BUSINESS_TYPE_REALTOR_BIZ = 3, 	// управление статистики (бизнесы)
	BUSINESS_TYPE_REALTOR_HOME = 4,	// риелторское агенство (дома)
	BUSINESS_TYPE_CLOTHING_SHOP = 5,//
	BUSINESS_TYPE_HOTEL 	= 6,		// гостиница
	BUSINESS_TYPE_CAR_MARKET = 7,	// авторынок
	BUSINESS_TYPE_CASINO 	= 8,		// казино
	BUSINESS_TYPE_CELL_SALON = 9,	// сотовый салон
	BUSINESS_TYPE_CAR_TUNING = 10, 	// станция тех. обслуживания
	BUSINESS_TYPE_BUY_GUN 	= 11, 	// магаз оружия
	BUSINESS_TYPE_BANK 		= 12, 	// банк
	BUSINESS_TYPE_COMP_CLUB = 13,
	BUSINESS_TYPE_SPORT 	= 14, //сПОРТЗАЛ
	BUSINESS_TYPE_DETEL	 	= 15, //Детейлинг
	BUSINESS_TYPE_ARENDA	= 16, //Аренда авто
	BUSINESS_TYPE_STO		= 17, //СТО новое авто
	BUSINESS_TYPE_FERMA		= 18, //СТО новое авто
	BUSINESS_TYPE_DET 		= 19,
	BUSINESS_TYPE_BY 		= 20,
	BUSINESS_TYPE_XZ 		= 21,
	BUSINESS_TYPE_METRO		= 22,
	BUSINESS_TYPE_CAFE		= 23,
};
enum //
{
	BIZ_OPERATION_PARAMS = 0,		// управление заправкой
	BIZ_OPERATION_LOCK,				// открыть / закрыть
	BIZ_OPERATION_ENTER_PRICE,		// установить цену за вход
	BIZ_OPERATION_PROD_PRICE,		// установить стоимость продукта
	BIZ_OPERATION_PROD_ORDER,		// заказать продукты
	BIZ_OPERATION_PROD_ORDER_CANCEL,// отменить заказ
	BIZ_OPERATION_PROFIT_STATS,		// финансовая статистика
	BIZ_OPERATION_IMPROVEMENTS		// Улучшения
};

enum E_BUSINESS_INTERIOR_STRUCT
{
	Float: BT_EXIT_POS_X, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Y, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Z, 	// позиции пикапа выхода
	// -------------------
	Float: BT_ENTER_POS_X, 	// позиции входа
	Float: BT_ENTER_POS_Y, 	// позиции входа
	Float: BT_ENTER_POS_Z, 	// позиции входа
	Float: BT_ENTER_ANGLE, 	// угол поворота
	BT_ENTER_INTERIOR,		// интерьер
	// -------------------
	Float: BT_HEALTH_POS_X,	// позиции аптечки
	Float: BT_HEALTH_POS_Y,	// позиции аптечки
	Float: BT_HEALTH_POS_Z,	// позиции аптечки
	// -------------------
	Float: BT_BUY_POS_X, 	// позиции покупки
	Float: BT_BUY_POS_Y, 	// позиции покупки
	Float: BT_BUY_POS_Z, 	// позиции покупки
	// -------------------
	Float: BT_LABEL_POS_X,	// позиции 3д текста
	Float: BT_LABEL_POS_Y,	// позиции 3д текста
	Float: BT_LABEL_POS_Z,	// позиции 3д текста
	BT_BUY_CHECK_ID			// ид чекпоинта
};

enum E_BUSINESS_GPS_STRUCT // список бизнесов в GPS
{
	BG_SQL_ID,
	BG_BIZ_ID,
	BG_POS,
	BG_TIME
};

// ------------------------------------------

enum E_FUEL_STATION_STRUCT
{
	FS_SQL_ID,			// ид в базе данных
	FS_NAME[20],		// название
	FS_OWNER_ID,		// ид аккаунта владельца
	FS_CITY,			// ид города
	FS_ZONE,			// ид района
	FS_IMPROVEMENTS,	// уровень улучшений
	FS_FUELS,			// количества топлива
	FS_FUEL_PRICE,		// цена топлива за 1 л
	FS_BUY_FUEL_PRICE,	// закупочная цена за 1 л
	FS_BALANCE,			// бюджет заправки
	FS_RENT_DATE,		// аренда на n времени
	FS_PRICE,			// стоимость заправки
	FS_RENT_PRICE,		// плата за аренду в день
	FS_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: FS_POS_X,	// позиция заправки
	Float: FS_POS_Y,	// позиция заправки
	Float: FS_POS_Z,	// позиция заправки
	// -------------------------
	FS_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: FS_LABEL,		// 3д текст
	FS_ORDER_ID,			// слот заказа
	FS_AREA,				// зона
	// -------------------------
	FS_EVICTION				// продажа из-за задолженности
};

enum //
{
	FUEL_ST_OPERATION_PARAMS = 0,		// Управление заправкой
	FUEL_ST_OPERATION_LOCK,				// Открыть / закрыть
	FUEL_ST_OPERATION_NEW_NAME,			// Новое название
	FUEL_ST_OPERATION_FUEL_PRICE,		// установить цену за топливо
	FUEL_ST_OPERATION_BUY_FUEL_PRIC,	// установить закупочную цену топлива
	FUEL_ST_OPERATION_FUEL_ORDER,		// заказать топливо
	FUEL_ST_OPERATION_FUEL_ORDER_CA, 	// отменить заказ
	FUEL_ST_OPERATION_PROFIT_STATS,		// финансовая статистика
	FUEL_ST_OPERATION_IMPROVEMENTS		// Улучшения
};

// ------------------------------------------
enum E_WEATHER_STRUCT
{
	W_NAME[16],
	W_ID,
	W_DEGREES
};

// ------------------------------------------
enum E_ORDER_STRUCT
{
	O_SQL_ID, 		// ид заказа
	O_TYPE,			// тип (азс,биз)
	O_COMPANY_ID,	// ид предприятия
	O_AMOUNT,		// кол-во
	O_PRICE,		// цена за 1 (продукт/л топлива/...)
	O_TIME,			// время оформления
	O_USED			// выполняется ли
};

enum
{
	ORDER_TYPE_FUEL_STATION = 1, // заправка
	ORDER_TYPE_BUSINESS 		// бизнес
};

// ------------------------------------------
// 			Личные настройки

enum E_PLAYER_SETTINGS_STRUCT
{
	S_CHAT_TYPE,	// тип чата (Отключен,Стандарт,Advance)
	S_TEAM_CHAT,	// отображение чата организации
	S_PLAYERS_NICK,	// отображение ников над игроками
	S_NICK_IN_CHAT,	// отображение ников в чате
	S_ID_IN_CHAT,	// отображение ид игрока в чате
	S_VEH_CONTROL	// управление транспортом (клавиши и команды/команды)
};

enum
{
	SETTING_CHAT_OFF = 0,
	SETTING_CHAT_STANDART,
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_OFF = 0,
	SETTING_TYPE_ON
};

// ------------------------------------------
enum E_IMPROVEMENTS_STRUCT
{
	I_NAME[32],
	I_PRICE,
	I_LEVEL
};

// ------------------------------------------
enum E_PLAYER_GPS_STRUCT
{
	bool: G_ENABLED,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
};

enum E_GPS_STURCT
{
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	G_MARKET_TYPE
};

// ------------------------------------------
enum E_HELP_INFO_STRUCT
{
	H_TITLE[64],
	H_INFO[1024]
};

// ------------------------------------------
enum E_SERVER_RADIO_STRUCT
{
	SR_CHANNEL_NAME[32],
	SR_CHANNEL_URL[64]
};

// ------------------------------------------
enum E_ANIM_LIST_STRUCT
{
	AL_DESCRIPTION[32],
	AL_LIB[32],
	AL_NAME[32],
	Float: AL_DELTA,
	AL_LOOP,
	AL_LOCK_X,
	AL_LOCK_Y,
	AL_FREEZE,
	AL_TIME
};

// ------------------------------------------
enum E_MAP_ICONS_STRUCT
{
	Float: MI_POS_X,
	Float: MI_POS_Y,
	Float: MI_POS_Z,
	MI_TYPE
};

// ------------------------------------------
enum E_TELEPORT_STRUCT
{
	T_NAME[64],
	Float: T_PICKUP_POS_X,
	Float: T_PICKUP_POS_Y,
	Float: T_PICKUP_POS_Z,
	T_PICKUP_VIRTUAL_WORLD,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ANGLE,
	T_INTERIOR,
	T_VIRTUAL_WORLD,
	T_ACTION_TYPE,
	Text3D: T_LABEL
};

enum // типы телепорта
{
	T_ACTION_TYPE_BLOCK_LEAVE_AREA = 1, // заблокировать вызов паблика OnPlayerLeaveDynamicArea
	T_ACTION_TYPE_END_JOB,	// анулировать деньги на временной работе если выходит из инта
	T_ACTION_TYPE_LEAVE_HOSPITAL, // проверить вылечился или нет в больнице
	T_ACTION_TYPE_LEAVE_PPS, // проверить сидит ли в тюрьме
};

// ------------------------------------------
enum E_DRIVING_TUTORIAL_STRUCT
{
	DT_TITLE[64],
	DT_INFO[2048]
};

enum E_PLAYER_DRIVING_EXAM_STRUCT
{
	DE_POINTS, // Балы
	DE_EXAM_STEP, // теория
	DE_ROUTE_STEP // практика
};

// ------------------------------------------
enum E_DRIVING_EXAM_STRUCT
{
	DE_TITLE[64],
	DE_LIST_ITEMS[256],
	DE_CORRECT_ANSWER
};

// ------------------------------------------
enum E_ATM_STRUCT
{
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	Float: A_ROT_Z
};

// ------------------------------------------
enum E_GATE_STRUCT
{
	G_DESCRIPTION[16],	// описание (наприм. жд-вьезд/жд-выезд)
	G_TYPE,				// тип (шлагбаум,ворота)
	Float: G_POS_X,		// позиции
	Float: G_POS_Y,		// позиции
	Float: G_POS_Z,		// позиции
	Float: G_ANGLE,		// угол
	Float: G_OPEN_POS_X, // позиции открытия
	Float: G_OPEN_POS_Y, // позиции открытия
	Float: G_OPEN_POS_Z, // позиции открытия
	Float: G_OPEN_ANGLE, // угол открытия (для кнопки)
	bool: G_STATUS,		// статус
	G_OBJECT_ID[2]		// иды обьектов
};

enum
{
	GATE_TYPE_BARRIER = 1,		// шлагбаум
	GATE_TYPE_BARRIER_MSG,		// шлагбаум (с сообщением)
	GATE_TYPE_BARRIER_BUTTON,	// шлагбаум (на кнопку)
	GATE_TYPE_NORMAL,	 		// ворота
}

// ------------------------------------------
enum E_BANK_ACCOUNT_STRUCT
{
	BA_ID,
	BA_NAME[20 + 1],
	BA_PIN_CODE[9],
	BA_BALANCE,
	BA_REG_TIME
};

enum E_BANK_TRANSFER_STRUCT
{
	BT_ID,
	BT_NAME[20 + 1]
};

// ------------------------------------------
enum E_PHONE_CALL_STRUCT
{
	PC_INCOMING_PLAYER,		// исходящий вызов
	PC_OUTCOMING_PLAYER,	// входящий вызов
	PC_TIME,				// время звонка
	bool:PC_ENABLED		// режим телефона (вкл\откл)
};

// ------------------------------------------
enum E_PHONE_BOOK_STRUCT
{
	PB_SQL_ID,
	PB_NAME[21],
	PB_NUMBER[10],
	PB_TIME
};

enum
{
	PHONE_BOOK_OPERATION_OPTIONS = 0,	// варианты
	PHONE_BOOK_OPERATION_CALL,			// позвонить
	PHONE_BOOK_OPERATION_SEND_SMS,		// отправить смс
	PHONE_BOOK_OPERATION_CHANGE_NAM,	// изменить имя
	PHONE_BOOK_OPERATION_CHANGE_NUM,	// изменить номер
	PHONE_BOOK_OPERATION_DELETE_CON,	// удалить контакт
};
// ------------------------------------------
enum E_INFO_PICKUP_STRUCT
{
	IP_TITLE[64],
	IP_INFO[1024],
	IP_LABEL_INFO[64],
	IP_TITLE_COLOR,
	Float: IP_POS_X,
	Float: IP_POS_Y,
	Float: IP_POS_Z
};

// ------------------------------------------
enum E_MINER_CARRIAGE_STRUCT
{
	Float: MC_START_POS_X,
	Float: MC_START_POS_Y,
	Float: MC_START_POS_Z,
	Float: MC_END_POS_X,
	Float: MC_END_POS_Y,
	Float: MC_END_POS_Z,
	bool: MC_STATUS,
	MC_OBJECT_ID,
	MC_PICKUP_ID,
	Text3D: MC_LABEL,
	MC_ORE_COUNT,
	bool: MC_IN_MOVE
};

// ------------------------------------------
enum E_FACTORY_DESK_STRUCT
{
	Float: FD_POS_X,
	Float: FD_POS_Y,
	Float: FD_POS_Z,
	FD_CHEK_ID,
	FD_OBJECT_ID,
	bool: FD_USED,
	Text3D: FD_LABEl
};

// ------------------------------------------
enum E_REPOSITORY_STRUCT
{
	R_AMOUNT, // кол-во
	Text3D: R_LABEL,
	Text3D: R_LABEL_2,
	bool: R_NOT_SAVE
};

enum // типы складов
{
	REPOSITORY_TYPE_MINER, 			// шахта
	REPOSITORY_TYPE_FACTORY, 		// завод
	REPOSITORY_TYPE_OIL_FACTORY, 	// нефтезавод
	REPOSITORY_TYPE_ARMY,			// воинская часть
	REPOSITORY_TYPE_SAWMILL,		// лесопилка
	REPOSITORY_TYPE_FERMER,         // ферма
};

enum
{
	// шахта
	REPOSITORY_ACTION_MINER_METAL = 0,	// металл шахты
	REPOSITORY_ACTION_MINER_ORE,		// руда
	REPOSITORY_ACTION_MINER_REMELTI,	// на переплавке

	// завод
	REPOSITORY_ACTION_FACTORY_METAL = 0, // металл
	REPOSITORY_ACTION_FACTORY_FUEL,		// топливо
	REPOSITORY_ACTION_FACTORY_PROD,		// продукты

	// нефтезавод
	REPOSITORY_ACTION_OIL_FACTORY_F = 0, // топливо на нефтезаводе

	// воинская часть
	REPOSITORY_ACTION_ARMY_METAL = 0,	// металл на складе воинской части
	REPOSITORY_ACTION_ARMY_AMMO,		// патроны на складе воинской части

	// лесопилка
	REPOSITORY_ACTION_SAWMILL_WOOD = 0,	// лесопилка дерево

	// ферма
	REPOSITORY_ACTION_FERMER = 0,           // ферма сено
};
new g_repository[6][3][E_REPOSITORY_STRUCT]; // склады

// ------------------------------------------
enum E_GANG_REPOSITORY_STRUCT
{
	GR_GANG,
	GR_METALL,
	GR_AMMO,
	GR_DRUGS,
	GR_MONEY,
	Text3D: GR_LABEL,
	GR_PICKUP,
	bool: GR_LOCK
}

new g_gang_repository[MAX_GANG_REPOSITORIES][E_GANG_REPOSITORY_STRUCT]; // склады банд

// ------------------------------------------
enum E_GANG_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_GANG,
	GZ_ZONE,
	GZ_AREA
}

new g_gang_zone[MAX_GZ][E_GANG_ZONES_STRUCT]; // гангзоны
new g_gang_zones_loaded; // количество загруженных гангзон

// ------------------------------------------
enum
{
	GANG_ARZ = 35,		// ОПГ Центральное
	GANG_BAT = 35,		// ОПГ Западное
	GANG_LYT = 35,		// ОПГ Северное
}

// ------------------------------------------
new gang_zone_colors[4] =
{
	0xFFFFFF90,	// Свободная зона
	0x00990090, // Центральное ОПГ
	0x6666FF90, // Заподное ОПГ
	0xFFCD0090  // Северное ОПГ
};

// ------------------------------------------
enum E_CAPTURE_STRUCT
{
	bool: C_STATUS,
	C_GANG_ZONE,
	C_ATTACK_TEAM,
	C_PROTECT_TEAM,
	C_ATTACKER_KILLS,
	C_PROTECTOR_KILLS,
	C_TIME,
	C_WAIT_TIME[3]
}

new g_capture[E_CAPTURE_STRUCT]; // капты для ОПГ

// ------------------------------------------
new weapon_tints[6] =
{
	0xFF4B5320, // Камуфляж
	0xFF9EAF43, // Зеленый
	0xFFFFAE1A, // Оранжевый
	0xFF0073E6, // Синий (полицейский)
	0xFFFF1493, // Розовый
	0xFFFFD700 	// Золотой
};

enum
{
	WEAPON_TINT_CAMO = 0,
	WEAPON_TINT_GREEN = 1,
	WEAPON_TINT_ORANGE,
	WEAPON_TINT_POLICE,
	WEAPON_TINT_PINK,
	WEAPON_TINT_GOLD
}

enum E_WEAPON_TINT_STRUCT
{
	WT_OBJECT,
	Float: WT_X,
	Float: WT_Y,
	Float: WT_Z,
	Float: WT_RX,
	Float: WT_RY,
	Float: WT_RZ,
	Float: WT_SCALE_X,
	Float: WT_SCALE_Y,
	Float: WT_SCALE_Z
}

new g_weapon_tint[MAX_WEAPON_TINTS][E_WEAPON_TINT_STRUCT] =
{
	{346, 	-0.004999, 	-0.003999, 	-0.006000, 	0.000000, 	0.000000, 	-1.800000, 	1.007000,	1.337999, 	1.069000},
	{347, 	-0.003999, 	-0.001999, 	-0.003999, 	0.000000, 	0.299999, 	-0.999999, 	1.000000,	1.188000, 	1.063000},
	{348, 	-0.006999, 	-0.004000, 	0.002000, 	-1.600000, 	-0.200000, 	0.400000, 	1.019999, 	1.146999, 	1.027000},
	{349, 	0.000000, 	-0.008999, 	-0.004000, 	0.000000, 	1.099999, 	1.499999, 	1.000000, 	1.222000, 	1.088000},
	{351, 	0.003000, 	-0.014000, 	-0.003000, 	0.000000, 	0.000000, 	2.199999, 	1.000000, 	1.371000, 	1.023000},
	{352, 	-0.002000, 	-0.008000, 	-0.001999, 	-0.300000, 	0.000000, 	1.199999, 	1.019999, 	1.245000, 	1.043000},
	{353, 	0.000000, 	-0.009000, 	-0.009000, 	0.000000, 	0.099999, 	2.100000, 	1.000000, 	1.290001, 	1.053000},
	{355, 	0.000000, 	-0.011000, 	0.000000, 	0.000000, 	0.000000, 	2.100000, 	1.009000, 	1.424000, 	1.013000},
	{356, 	-0.002000, 	-0.005999, 	0.001000, 	0.000000, 	0.899999, 	1.699999, 	0.997999, 	1.318999, 	1.088001},
	{372, 	-0.003000, 	-0.009000, 	-0.001999, 	0.000000, 	0.400000, 	0.800000, 	1.015000, 	1.232000, 	1.055000},
	{357, 	0.000000, 	-0.015000, 	-0.001999, 	0.000000, 	1.200000, 	2.199999, 	1.000000, 	1.286001, 	1.096001},
	{359, 	0.001999, 	-0.007000, 	-0.009000, 	0.000000, 	-0.100000, 	0.000000, 	0.989999, 	1.213001, 	1.084001},
	{360, 	0.001000, 	-0.004999, 	-0.008000, 	0.000000, 	0.000000, 	0.000000, 	1.000000, 	1.140000, 	1.055000}
};

// ------------------------------------------
enum E_GREEN_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_NAME[32],
	GZ_AREA,
	bool: GZ_ALLOW_PARK
}

new
	g_green_zones[MAX_GREEN_ZONES][E_GREEN_ZONES_STRUCT] =
{
	{339.9667,1492.1178, 486.4580,1584.0197, "", -1, false},
	{1896.9844, 2292.2983, 1929.2465, 2348.1990, "", -1, false},
	{-151.1586, 951.9561, -86.2037, 986.7967, "", -1, true}, // Гостиница 'Диана'
	{385.8678,533.0695, 463.8571,586.6752, "", -1, false},
	{1802.7335, 2241.4121, 1721.2228, 2316.2288, "", -1, false},
	{2535.7563, -764.3954, 2427.0427, -648.4667, "", -1, false},
	{-1443.8416, 1540.4960, -1549.8573, 1722.1943, "", -1, false},
	{46.6532,836.1345, 158.4402,1631.1498, "", -1, false},
	{88.2880,1782.8077, -157.2940,1060.6315, "", -1, false}, // оружейка + казино
	{2178.8745,-1735.1548, 2221.9497,-1772.4111, "", -1, false},
	{240.1699,-344.4642, 192.6402,-267.6357, "", -1, false},
	{2615.9968,1960.0627,2736.1411,2126.9419, "", -1, false},
	{2036.6375,2104.2736, 1980.8376,2019.7103, "", -1, false},
	{323.8806,1484.1316,458.4074,1774.6404, "", -1, false},
	{734.4141,696.7381,883.9650,415.2607, "", -1, false}
};

// ------------------------------------------
enum E_BUS_ROUTE_STRUCT
{
	BR_NAME[32],
	BR_COLOR,
	BR_IN_JOB
};

enum E_BUS_ROUTE_STEP_STRUCT
{
	Float: BRS_POS_X,
	Float: BRS_POS_Y,
	Float: BRS_POS_Z,
	bool: BRS_STOP
};

// ------------------------------------------
enum E_PLAYER_SPECTATE_STRUCT
{
	Float: S_START_POS_X,
	Float: S_START_POS_Y,
	Float: S_START_POS_Z,
	Float: S_START_ANGLE,
	S_START_INTERIOR,
	S_START_VIRTUAL_WORLD,
	S_PLAYER
};
new g_spectate[MAX_PLAYERS][E_PLAYER_SPECTATE_STRUCT];

// ------------------------------------------
enum
{
	PEDAL_TYPE_NONE = 0, // не жмёт ни на какую педаль
	PEDAL_TYPE_GAS, // педаль газа
	PEDAL_TYPE_BRAKE // педаль тормоза
}

new player_press_pedal[MAX_PLAYERS];

// ------------------------------------------
enum // иды диалогов
{
	INVALID_DIALOG_ID,
	// ---------------
	DIALOG_LOGIN,					// Авторизация
	DIALOG_REGISTER,				// Регистрация
	DIALOG_RENT_MOP,
	// ---------------
	DIALOG_INFO_HELP,
	DIALOG_AHELP,
	DIALOG_CANCEL_AHELP,
	DIALOG_OSTANOVKA,
	DIALOG_SELECT_OSTANOVKA,
	//---------------
	DIALOG_SELL_WHEAT,
	DIALOG_PLAYER_FARMING,
	DIALOG_WHEAT_TOOLS,
	DIALOG_PLAYER_DUTY,
	DIALOG_GOTO_GPS, // телепорт по gps
	DIALOG_FORBES,
	DIALOG_BUY_DRUGS,
	DIALOG_SKIN_MENU,
	DIALOG_STAVKA_KARTS,
	DIALOG_CLOSE_KARTS,
	DIALOG_TEMP_LEADER,
	DIALOG_GIFT_PANEL,
	DIALOG_LOGS_ROULETTE,
	DIALOG_TP_GIFT,
	DIALOG_BOLNICA,
	//-----jail------
	DIALOG_PLAYER_MENU,  			// меню игрока
	DIALOG_PLAYER_STATS, 			// статистика игрока
	DIALOG_PLAYER_CMDS,  			// список команд
	DIALOG_PLAYER_SETTINGS,			// личные настройки
	DIALOG_PLAYER_SECURITY_SETTINGS,// настройки безопасности
	DIALOG_LOGIN_POS,
	//---------------
	DIALOG_BIZ_COMP,
	DIALOG_COMP_GAME,            // начать комп игру
	DIALOG_COMP_GAME_1,             // начать комп игру №1
	DIALOG_COMP_GAME_2,             // начать комп игру №2
	DIALOG_COMP_GAME_3,             // начать комп игру №3
	DIALOG_ITEM,
	DIALOG_SELL_ITEM,
	DIALOG_OFFER_ITEM,
	DIALOG_TAKE_ITEM,
	DIALOG_PUT_ITEM,
	//---------------
	DIALOG_BUY_PACK,
	DIALOG_SECURITY_SETTING_INFO,	// информацию о настройках
	DIALOG_SECURITY_SETTING_PHONE,	// запрос телефона при авторизации
	DIALOG_SECURITY_SETTING_PHONE_S,// устанавить запрос телефона при авторизации
	DIALOG_SECURITY_SETTING_PIN,	// запрос пин кода при авторизации
	DIALOG_SECURITY_SETTING_PIN_SET,// устанавить запрос пин кода при авторизации
	DIALOG_SECURITY_SETTING_PASS_1, // смена пароля (проверка текущего)
	DIALOG_SECURITY_SETTING_PASS_2, // смена пароля (смена)
	DIALOG_SECURITY_SETTING_EMAIL,	// подтверждения емайла
	// ---------------
	DIALOG_REPORT,					// репорт
	DIALOG_REPORT_2,
	DIALOG_REPORT_1,
	DIALOG_CMDS,
	// ---------------
	DIALOG_PLAYER_IMPROVEMENTS, 	// улучшения
	// ---------------
	DIALOG_CHANGE_NAME, 			// смена ника
	// ---------------
	DIALOG_GPS, 					// gps
	DIALOG_GPS_PUBLIC_PLACES, 		// общественные места
	DIALOG_GPS_TRANSPORT, 			// транспортные узлы
	DIALOG_GPS_STATE_ORGANIZATIONS, // государственные организации
	DIALOG_GPS_GANGS,				// базы банд и мафий
	DIALOG_GPS_JOBS,				// по работе
	DIALOG_GPS_BANKS,				// по работе
	DIALOG_GPS_ENTERTAINMENT,		// развлечения
	DIALOG_GPS_BUSINESS,			// реклама бизнеса
	DIALOG_GPS_NEAREST,
	// ---------------
	DIALOG_HELP,					// помощь по игре
	DIALOG_HELP_SECTION,			// раздел
	// ---------------
	DIALOG_SERVER_RADIO, 			// радио (/play)
	// ---------------
 DIALOG_ANIM_LIST, 				// аним лист (/anim)
	// ---------------
	DIALOG_OPEN_HOOD_OR_TRUNK,		// управление капотом/багажником
	// ---------------
	DIALOG_DRIVING_TUTORIAL_START,	// теория в автошколе
	DIALOG_DRIVING_TUTORIAL,	 	// теория в автошколе
	DIALOG_DRIVING_TUTORIAL_END, 	// теория в автошколе
	DIALOG_DRIVING_EXAM_INFO, 		// экзамен по вождению
	DIALOG_DRIVING_EXAM_START,		// экзамен по вождению
	DIALOG_DRIVING_EXAM, 			// экзамен по вождению
	DIALOG_DRIVING_EXAM_RESULT, 	// экзамен по вождению
	// ---------------
	DIALOG_ATM, 					// банкомат
	DIALOG_ATM_TAKE_MONEY, 			// снять деньги
	DIALOG_ATM_TAKE_OTHER_MONEY,	// снять деньги (другая сума)
	DIALOG_ATM_PUT_MONEY, 			// положить деньги
	DIALOG_ATM_PUT_OTHER_MONEY, 	// положить деньги (другая сума)
	DIALOG_ATM_BALANCE, 			// баланс в банке
	DIALOG_ATM_PHONE_BALANCE,		// пополнить баланс телефона

	DIALOG_ATM_SELECT_COMPANY_TAKE,	// выбрать предприятие с которого снять деньги
	DIALOG_ATM_SELECT_COMPANY_PUT,	// выбрать предприятие на которое положить деньги
	DIALOG_ATM_FUEL_ST_TAKE_MONEY,	// снять деньги с заправочной станции
	DIALOG_ATM_FUEL_ST_PUT_MONEY,	// полижить деньги на счет заправочной станции
	DIALOG_ATM_BIZ_TAKE_MONEY,		// снять деньги с предприятия
	DIALOG_ATM_BIZ_PUT_MONEY,		// полижить деньги на счет предприятия

	DIALOG_ATM_TRANSFER_MONEY_1, 	// перевод на банковский счет
	DIALOG_ATM_TRANSFER_MONEY_2, 	// перевод на банковский счет
	DIALOG_ATM_CHARITY, 			// Благотворительность

	DIALOG_ATM_TICKET_SELECT,		// Выбор способа оплаты штрафа
	DIALOG_ATM_TICKET_LIST,			// Список штрафов
	DIALOG_ATM_TICKET_PAY,			// Оплата штрафа по номеру
	// ---------------
	DIALOG_PAY_FOR_RENT,			// оплата аренды (биз,дом,азс)
	DIALOG_PAY_FOR_RENT_FUEL_ST,	// оплата за АЗС
	DIALOG_PAY_FOR_RENT_BIZ,		// оплата за бизнес
	DIALOG_PAY_FOR_RENT_HOUSE,		// оплата за дом
	// ---------------
	DIALOG_TEMP_JOB_POMOI_ST,
	DIALOG_TEMP_JOB_POMOI_END,		// Закончить работу фермера
	DIALOG_TEMP_JOB_LOAD_ST,
	DIALOG_TEMP_JOB_LOAD_END,		// Закончить работу фермера
	// ---------------
	DIALOG_BANK,					// банк
	DIALOG_BANK_ACCOUNTS, 			// мои счета
	DIALOG_BANK_ACCOUNT_LOGIN, 		// авторизация
	DIALOG_BANK_ACCOUNT_OPERATION,	// Список операций
	DIALOG_BANK_ACCOUNT_INFO, 		// информация о счете
	DIALOG_BANK_ACCOUNT_TAKE_MONEY,	// снять деньги
	DIALOG_BANK_ACCOUNT_PUT_MONEY,	// положить деньги
	DIALOG_BANK_ACCOUNT_TRANSFER_1, // перевод денег на другой счет 1
	DIALOG_BANK_ACCOUNT_TRANSFER_2, // перевод денег на другой счет 2
	DIALOG_BANK_ACCOUNT_CHANGE_NAME,// переименирование счета
	DIALOG_BANK_ACCOUNT_CHANGE_PIN,	// смена пин-кода

	DIALOG_BANK_CREATE_ACCOUNT, 	// создание счета
	DIALOG_BANK_CREATED_ACCOUNT, 	// создание счета
	// ---------------
	DIALOG_PHONE_CALL,				// Номера государственных организаций
	DIALOG_PHONE_CALL_BALANCE,		// Узнать баланс мобильного
	// ---------------
	DIALOG_ACTION,					// меню действия
	// ---------------
	DIALOG_VIEV_JOBS_LIST,			// посмотреть список работ
	DIALOG_JOIN_TO_JOB,				// устроится на работу
	// ---------------
	DIALOG_END_JOB,					// закончить работу
	// ---------------

	DIALOG_BUS_RENT_CAR,			// арендовать автобус
	DIALOG_BUS_ROUTE_COST,			// ввести стоимость проезда
	DIALOG_BUS_ROUTE_SELECTION,		// выбрать маршрут
	//---
	DIALOG_TAXI_RENT_CAR,			// арендовать такси
	DIALOG_TAXI_NAME,				// название такси
	DIALOG_TAXI_TARIFF,				// тариф
	//---
	DIALOG_MECHANIC_RENT_CAR,		// арендовать эвакуатор
	DIALOG_MECHANIC_START_JOB,		// начать работу механика
	DIALOG_MECHANIC_NAME,			// название службы
	//---
	DIALOG_TRUCKER_RENT_CAR,		// арендовать грузовик
	DIALOG_TRUCKER_START_JOB,		// начать работу

	// ---------------
	DIALOG_PHONE_BOOK,				// телефонная книга
	DIALOG_PHONE_BOOK_OPTION,		// варианты
	DIALOG_PHONE_BOOK_SEND_SMS,		// отправить смс
	DIALOG_PHONE_BOOK_CHANGE_NAME,	// сменить имя контакта
	DIALOG_PHONE_BOOK_CHANGE_NUMBER,// сменить номер контакта

	DIALOG_PHONE_BOOK_ADD_CONTACT,	// телефонная книга (добавить контакт)
	// ---------------
	DIALOG_MINER_BUY_METALL, 		// покупка металла на шахте
	// ---------------
	DIALOG_TEMP_JOB_LOADER_START,	// Начать работу грузчика
	DIALOG_TEMP_JOB_LOADER_END,		// Закончить работу грузчика
	DIALOG_TEMP_JOB_MINER_START,	// Начать работу шахтера
	DIALOG_TEMP_JOB_MINER_END,		// Закончить работу шахтера
	DIALOG_TEMP_JOB_FACTORY_TRUCKER,// Служба доставки завода
	DIALOG_TEMP_JOB_FACTORY,		// Производственный цех
	DIALOG_TEMP_JOB_LUMBERJACK_ST, 	// Начать работу лесоруба
	DIALOG_TEMP_JOB_LUMBERJACK_END,	// Закончить работу лесоруба
	DIALOG_TEMP_JOB_FERMER_ST,    	// Начать работу фермера
	DIALOG_TEMP_JOB_FERMER_END,   	// Закончить работу фермера
	// ---------------
	DIALOG_OPEN_KEYS,               // открытие кейсов
	DIALOG_BUY_KEYS,                // покупка кейсов
	DIALOG_BUY_SKIN,                // покупка скина
	// ---------------
	DIALOG_FUEL_STATION_BUY,		// покупка заправочной станции
	DIALOG_FUEL_STATION_INFO,		// инфо о заправочной станции
	DIALOG_FUEL_STATION_PARAMS,		// меню управления заправочной станцией
	DIALOG_FUEL_STATION_NAME,		// Смена названия
	DIALOG_FUEL_STATION_PRICE_FUEL,	// Цена топлива
	DIALOG_FUEL_STATION_BUY_FUEL_PR,// закупочная цена
	DIALOG_FUEL_STATION_ORDER_FUELS,// заказ топлива
	DIALOG_FUEL_STATION_ORDER_CANCE,// отмена заказа
	DIALOG_FUEL_STATION_IMPROVEMENT,// улучшения АЗС
	DIALOG_FUEL_STATION_SELL,		// продажа АЗС государству
	DIALOG_FUEL_STATION_BUY_JERRICA,// покупка канистры на АЗС
	DIALOG_FUEL_STATION_BUY_FUEL_M,	// покупка топлива (механик)
	// ---------------
	DIALOG_JERRICAN_FILL_CAR,		// заправка авто с канистры
	// ---------------
	DIALOG_BIZ_BUY,					// покупка бизнеса
	DIALOG_BIZ_INFO,				// инфо о бизнесе
	DIALOG_BIZ_PARAMS,				// меню управления бизнесом
	DIALOG_BIZ_ENTER_PRICE,			// установить цену за вход
	DIALOG_BIZ_PROD_PRICE,			// установить стоимость продутка
	DIALOG_BIZ_ORDER_PRODS,			// заказ продуктов
	DIALOG_BIZ_ORDER_CANCEL,		// отмена заказа
	DIALOG_BIZ_IMPROVEMENT,			// улучшение
	DIALOG_BIZ_2_SELL,
	DIALOG_BIZ_SELL,				// продажа Бизнеса государству
	DIALOG_BIZ_ENTER_MUSIC,			// установить звук при входе
	DIALOG_BIZ_ENTER,				// платный вход

	DIALOG_BIZ_SHOP_24_7,			// магазин 24\7
	DIALOG_BIZ_LOTTERY,				// лотерея

	DIALOG_BIZ_CAR_MARKET,			// авторынок
	DIALOG_BIZ_CAR_MARKET_BUY_CAR,	// покупка авто
	DIALOG_BIZ_CAR_MARKET_CAR_INFO,	// информация об авто

	DIALOG_BIZ_CELL_SALON,			// сотовый салон
	DIALOG_BIZ_PHONE_BALANCE,		// пополнить счет телефона
	DIALOG_BIZ_CHANGE_PHONE_NUMBER,	// смена номера телефона
	DIALOG_BIZ_CHANGE_PHONE_COLOR,	// смена цвет телефона

	DIALOG_BIZ_CLUB,				// меню бара (клуб)

	DIALOG_BIZ_REALTOR_BIZ_LIST,	// список свободных бизнесов (управление статистики)
	DIALOG_BIZ_REALTOR_BIZ_INFO,	// фото бизнеса

	DIALOG_BIZ_REALTOR_HOME_GET,	// найти информацию о доме
	DIALOG_BIZ_REALTOR_HOME_INFO,	// фото дома

	DIALOG_BIZ_CLOTHING_BUY,		// покупка одежды

	DIALOG_BIZ_CAR_TUNING,			// тюнинг транспорта
	DIALOG_BIZ_BUY_GUN,			// тюнинг транспорта
	// ---------------
	DIALOG_HOUSE_BUY,				// покупка дома
	DIALOG_HOUSE_SELL,				// продажа дома
	DIALOG_HOUSE_INFO,				// инфо о доме
	DIALOG_HOUSE_PARAMS,			// меню управления домом
	DIALOG_HOUSE_IMPROVEMENTS,		// улучшение для дома
	DIALOG_HOUSE_RENTERS,			// список арендаторов
	DIALOG_HOUSE_RENTER_INFO,		// информация о арендаторе
	DIALOG_HOUSE_RENTER_EVICT,		// выселение арендатора
	DIALOG_HOUSE_EVICT,				// выселение арендатора (/liveout)
	DIALOG_HOUSE_MOVE_STORE,		// переставить шкаф (/makestore)
	DIALOG_HOUSE_STORE,				// использовать шкаф
	DIALOG_HOUSE_STORE_PUT,			// положить металл/наркотики
	DIALOG_HOUSE_STORE_TAKE,		// взять металл/наркотики

	DIALOG_HOUSE_ENTER,				// вход в дом
	// ---------------
	DIALOG_ENTRANCE_LIFT,			// лифт подъезда
	// ---------------
	DIALOG_HOTEL,					// меню отеля
	DIALOG_HOTEL_FLOOR_SELECT,		// Выбрать этаж (просмотр инфы о номерах)
	DIALOG_HOTEL_FLOOR_INFO,		// Информация о номерах этажа
	DIALOG_HOTEL_FLOOR_LIFT,		// лифт в отеле
	DIALOG_HOTEL_REG_ROOM,			// регистрация в номере
	DIALOG_HOTEL_CLIENT_MENU,		// меню клиента
	DIALOG_HOTEL_PAY_FOR_ROOM,		// оплата за комнату
	DIALOG_HOTEL_OUT,				// выселиться
	// ---------------
	DIALOG_OWNABLE_CAR,				// система управления транспортом
	DIALOG_OWNABLE_CAR_LOAD,		// загрузить транспорт
	DIALOG_OWNABLE_CAR_LIST,		// выбор транспорта из списка
	DIALOG_OWNABLE_CAR_SELL,		// продажа личного ТС
	DIALOG_OWNABLE_CAR_NUMBER,		// получение номера на ТС
	// ---------------
	DIALOG_VEHICLE_TRUNK,			// багажник
	DIALOG_VEHICLE_TRUNK_PUT,		// положить предмет
	DIALOG_VEHICLE_TRUNK_PUT_ITEM,	// количество предметов
	DIALOG_VEHICLE_TRUNK_TAKE,		// достать предмет
	// ---------------
	DIALOG_SET_SPAWN,               // диалог смены спавна
	DIALOG_ADMIN_FLY,
	// ---------------
	DIALOG_DONATE_INFO, 			// информация о донате (первый диалог)
	DIALOG_DONATE_MENU,				// меню доната
	DIALOG_DONATE_CONVERT,			// конвертация валюты
	DIALOG_DONATE_GET_MONEY,		// получение денег
	DIALOG_DONATIONS,				// все пополнения
	DIALOG_DONATE_ENROLLMENT,		// зачисление донат-очков
	DIALOG_DONATE_BUY_CAR_NUMBER,	// покупка номера на ТС
	DIALOG_DONATE_ACCEPT_CAR_NUM,	// подтверждение номера
	DIALOG_DONATE_CHANGE_NAME,		// смена имени в донате
	DIALOG_DONATE_BUY_NUMBER,		// смена номера телефона на 4-хзначный
	DIALOG_DONATE_SKILLS,			// список скиллов для прокачки
	DIALOG_DONATE_SKILL_BUY,		// прокачка скилла
	// ---------------
	DIALOG_TEAM_CHANGE_SKIN,		// смена скина игрока
	DIALOG_TEAM_LEAVE,				// уволиться по собственному желанию

	DIALOG_DEBTORLIST, 				// список должников
	DIALOG_DEBTORLIST_HOUSE, 		// дома должников
	DIALOG_DEBTORLIST_BIZ, 			// бизы должников
	DIALOG_DEBTORLIST_FUEL_ST, 		// АЗС должников

	DIALOG_DEBTOR_SELL_LIST, 		// Выселение
	DIALOG_DEBTOR_SELL_HOUSE, 		// Выселение дома
	DIALOG_DEBTOR_SELL_BIZ, 		// Выселение биза
	DIALOG_DEBTOR_SELL_FUEL_ST, 	// Выселение АЗС

	DIALOG_ADVISOR_MENU,			// Меню советника прав-ва
	DIALOG_ADVISOR_TEAM_STRUCTURE,	// Структура организации
	// ---------------
	DIALOG_ADMIN_PANEL,				// Панель управления сервером
	DIALOG_GAADMIN_PANEL,
	DIALOG_ADMINS,					// Список администраторов
	DIALOG_LEADERS,					// Список лидеров
	DIALOG_EDIT_ADMIN,				// Редактирование администратора
	DIALOG_EDIT_LEADER,				// Редактирование лидера
	DIALOG_EDIT_ADMIN_RANG,			// Повысить/понизить администратора
	DIALOG_EDIT_LEADER_FRAC,		// Сменить управляемую фракцию
	DIALOG_REMOVE_ADMIN,			// Разжаловать администратора
	DIALOG_REMOVE_LEADER,			// Разжаловать лидера
	DIALOG_BLOCK_ACCOUNT,			// Заблокировать аккаунт
	DIALOG_BLOCK_ACCOUNT_CONFIRM,	// Подтвердить блокировку
	// ---------------
	DIALOG_TELEPORT_LIST,			// Список мест для телепорта
	DIALOG_SET_DOUBLING,			// Включить удвоение
	// ---------------
	DIALOG_GANG_REPOSITORY,			// Положить/взять со склада банды
	DIALOG_GANG_REPOSITORY_USE,		// Использование склада банды
	// ---------------
	DIALOG_RADAR_SELECT,			// Выбор типа радара
	DIALOG_RADAR_OBJECT,			// Выбор объекта радара
	DIALOG_RADAR_REMOVE,			// Удаление радара
	dTuningCar1,                    // ТЮНИНГ 1
	dTuningCar2,                    // ТЮНИНГ 2
	dTuningCar3,
	dTuningCar4,                    // ТЮНИНГ 3
	d_rd_end,
	// ---------------
	DIALOG_ADVERT_EDIT,				// редактирование объявления
	// ---------------
	DIALOG_ARMORY,					// оружейный склад
	// ---------------
	DIALOG_BIZ_ORDERS,				// список заказов для бизнесов
	DIALOG_FS_ORDERS,				// список заказов для АЗС
	// ---------------
	DIALOG_PROMO_CREATE,			// создание промокода
	DIALOG_PROMO_ACTIVATE,			// активация промокода

	ADMIN_LOGIN, 					//ADMIN LOGINING
	DIALOG_ANTICHEAT_SETTINGS,       /*ID свободного диалога для главного меню анти-чита*/
	DIALOG_ANTICHEAT_EDIT_CODE,      /*ID свободного диалога для меню настройки срабатывания определённого кода анти-чита*/
	DIALOG_INFO_FAM_SHOWALL,
	d_family_creating,
	// --------------
	DIALOG_FAMILY_SETTINGS,
	DIALOG_FAMILY_INFO,
	DIALOG_CHANGE_FAMILY_NAME,
	DIALOG_CHANGE_FAMILY_COLOR,
	DIALOG_FAMILY_RANKS_LIST,
	DIALOG_CHANGE_FAMILY_RANK,
	DIALOG_FAM_REPOSITORY,
	DIALOG_FAM_REPOSITORY_USE,
	DIALOG_CREATE_FAMILY,
	DIALOG_GIVE_FAMILY_RANG,
	DIALOG_CANCEL_FAMILY,
	DIALOG_FAMILY_INFO_MEMBER,
	R_F, //аренда авто
	DIALOG_BOOMBOX,
	DIALOG_MUSIX_BOOMBOX_1,
	DIALOG_MUSIX_BOOMBOX_2,
	DIALOG_RIBALKA,
	DIALOG_PLAYER_BUY_CONTAINER,
	DIALOG_PLAYER_CAR_CONTAINER,
	DIALOG_QUESTS,
	DIALOG_PERENOS_1,
	DIALOG_PERENOS_2,
	DIALOG_PERENOS_3,
	DIALOG_BUY_ADMIN,
	DIALOG_PLAYER_BUY_SVALKA,
	DIALOG_PLAYER_CAR_SVALKA,
	DIALOG_STONKS,
	DIALOG_METRO,
	DIALOG_STONKS_INFO,
	DIALOG_STONKS_BUY,
	DIALOG_STONKS_SELL,
	DIALOG_CREATE_GANG,
	DIALOG_SELL_CAR,
	dCasino,
	dCasino1,
	DIALOG_BET_ZEPPELIN,
	DIALOG_RAZDEVALKA,
	DIALOG_CONFIG,
	DIALOG_BUY_REGION,
	DIALOG_DONATE_ACCEPT_CAR_REG,
	DIALOG_DOP_SHOP,
	DIALOG_BLACKJACK_BET,
	DIALOG_BLACKJACK_LEAVE,
	D_CASINO_ROULETTE_EXIT,
	DIALOG_BIZ_LIST,
	DIALOG_SELLBIZ
};

// ------------------------------------------
enum // иды работ (официальные)
{
	JOB_BUS_DRIVER = 1, // водитель автобуса
	JOB_TAXI_DRIVER,	// таксист
	JOB_MECHANIC,		// механик
	JOB_TRUCKER			// дальнобойщик
};

// ------------------------------------------
enum // типы пикапов
{
	PICKUP_ACTION_TYPE_TELEPORT = 1, 	// Телепорт (входы/выходы)
	PICKUP_ACTION_TYPE_DRIVING_TUTO, 	// теория в автошколе
	PICKUP_ACTION_TYPE_ATM,				// банкомат
	PICKUP_ACTION_TYPE_BANK, 			// банк
	PICKUP_ACTION_TYPE_TEMP_JOB, 		// временная работа
	PICKUP_ACTION_TYPE_INFO_PICKUP, 	// инфо пикап
	PICKUP_ACTION_TYPE_MINER_SELL_M, 	// покупка металла на шахте
	PICKUP_ACTION_TYPE_FACTORY_MET,		// брать металл (завод)
	PICKUP_ACTION_TYPE_FUEL_STATION,	// покупка канистры на азс
	PICKUP_ACTION_TYPE_BIZ_ENTER,		// вход в бизнес
	PICKUP_ACTION_TYPE_BIZ_EXIT,		// выход в бизнес
	PICKUP_ACTION_TYPE_BIZ_HEALTH,		// аптечка в бизнесе
	PICKUP_ACTION_TYPE_BIZ_SHOP_247,	// покупка в 24\7
	PICKUP_ACTION_TYPE_CELL_SALON,		// покупка в сотовом салоне
	PICKUP_ACTION_TYPE_HOUSE,			// вход в дом
	PICKUP_ACTION_TYPE_HOUSE_HEALTH,	// аптечка дома
	PICKUP_ACTION_TYPE_REALTOR_HOME,	// риелторское агенство
	PICKUP_ACTION_TYPE_BIZ_CLOTHING,	// магазин одежды
	PICKUP_ACTION_TYPE_ENTRANCE_ENT,	// вход в подъезд
	PICKUP_ACTION_TYPE_ENTRANCE_EXI,	// выход из подъезда
	PICKUP_ACTION_TYPE_ENTRANCE_LIF,	// лифт в подъезде
	PICKUP_ACTION_TYPE_ENTRANCE_FLA,	// квартира в подьезде
	PICKUP_ACTION_TYPE_HOTEL_ROOM,		// номер в отеле
	PICKUP_ACTION_TYPE_BIZ_CAR_MARK,	// покупка авто
	PICKUP_ACTION_TYPE_BIZ_CAR_ENT,		// телепорт ко входу в авторынок
	PICKUP_ACTION_TYPE_BIZ_CAR_EXI,		// телепорт к выходу из авторынка
	PICKUP_ACTION_TYPE_GET_CAR_NUM,		// получение номеров на ТС
	PICKUP_ACTION_TYPE_MINER_CARRI,		// пикап у вагонетки
	PICKUP_ACTION_TYPE_GANG_REPOSIT,	// склады для банд
	PICKUP_ACTION_TYPE_LUMBERJACK_P,	// положить дрова на склад лесопилки
	PICKUP_ACTION_TYPE_ARMORY,			// оружейный склад
	PICKUP_ACTION_TYPE_BIZ_CAR_TUN,		// тюнинг транспорта
	PICKUP_ACTION_TYPE_BIZ_GUN,
	PICKUP_ACTION_TYPE_AMMO_BUY,			// магазин оружия
	PICKUP_ACTION_TYPE_GIFT,
	PICKUP_ACTION_TYPE_SELL_CAR,
	PICKUP_ACTION_TYPE_SELLSIM,
	PICKUP_ACTION_TYPE_INFO_BOLKA,
	PICKUP_ACTION_TYPE_FERMER_P,
	PICKUP_ACTION_TYPE_DUTY,
	PICKUP_ACTION_TYPE_BIZ_PC_CLUB,		// компьютерный клуб
	PICKUP_ACTION_TYPE_BIZ_PC_GAME,
	PICKUP_ACTION_TYPE_CONT_INFO,
	PICKUP_ACTION_TYPE_BUY_DRUGS,
	PICKUP_ACTION_TYPE_TEAM_RAZDEV,
};

enum // типы авто
{
	VEHICLE_ACTION_TYPE_DRIVING_SCH = 1, // Учебный транспорт (для сдачи на права)
	VEHICLE_ACTION_TYPE_OWNABLE_CAR,	// личный транспорт
	VEHICLE_ACTION_TYPE_FACTORY, 		// завод (служба доставки)
	VEHICLE_ACTION_TYPE_BUS_DRIVER,		// Водитель автобуса
	VEHICLE_ACTION_TYPE_TAXI_DRIVER,	// Таксист
	VEHICLE_ACTION_TYPE_MECHANIC,		// Автомеханик
	VEHICLE_ACTION_TYPE_TRUCKER,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_RENT_CAR,		// Транспорт для аренды
	VEHICLE_ACTION_TYPE_GOVS_CAR,
	VEHICLE_ACTION_TYPE_GOV_CAR,		// Автомобили правительства
	VEHICLE_ACTION_TYPE_ARMY_CAR,		// Автомобили воинской части
	VEHICLE_ACTION_TYPE_MED_CAR,		// Автомобили больницы
	VEHICLE_ACTION_TYPE_RADIO_CAR,		// Автомобили радиоцентра
	VEHICLE_ACTION_TYPE_DPS_CAR,		// Автомобили ДПС
	VEHICLE_ACTION_TYPE_PPS_CAR,		// Автомобили ППС
	VEHICLE_ACTION_TYPE_FBI_CAR,		// Автомобили ФСИН
	VEHICLE_ACTION_TYPE_ARZ_CAR,		// Автомобили Арзамасской ОПГ
	VEHICLE_ACTION_TYPE_BAT_CAR,		// Автомобили Батыревской ОПГ
	VEHICLE_ACTION_TYPE_LYT_CAR,		// Автомобили Лыткаринской ОПГ
	VEHICLE_ACTION_TYPE_ADMIN_CAR,		// Транспорт, созданный администратором
	VEHICLE_ACTION_TYPE_FERMA_CAR,
};

enum // типы cp
{
	CP_ACTION_TYPE_LOADER_JOB_TAKE = 1,	// грузчик (брать груз)
	CP_ACTION_TYPE_LOADER_JOB_PUT, 		// грузчик (класть груз)
	// -------
	CP_ACTION_TYPE_MINER_JOB_TAKE, 		// шахтер (брать руду)
	CP_ACTION_TYPE_MINER_JOB_PUT, 		// шахтер (класть руду)
	// -------
 CP_ACTION_TYPE_LUMBERJACK_TAKE,		// лесоруб (брать дрова)
	// -------
	CP_ACTION_TYPE_FERMER_TAKE,         // фермер (брать сено)
	// -------
	CP_ACTION_TYPE_POMOI_ROUTE,      // мусорщик пляжа
	CP_ACTION_TYPE_LOAD_ROUTE,      // грузчик
};

enum // типы race_cp
{
	RCP_ACTION_TYPE_DRIVING_EXAM = 1, // сдача на права (практика)
	RCP_ACTION_TYPE_BUS_ROUTE,	// водитель автобуса
	RCP_ACTION_TYPE_ORDER,		// служба доставки
	RCP_ACTION_TYPE_FERMA,
};

// ------------------------------------------
enum // типы анимок
{
	USE_ANIM_TYPE_NONE,
	USE_ANIM_TYPE_CHAT, // анимка чата
};

// ------------------------------------------
enum // типы обьектов
{
	OBJECT_TYPE_FACTORY = 1,	// продукт на заводе
	OBJECT_TYPE_CARRIAGE,		// вагонетка в шахте
	OBJECT_TYPE_WOOD,			// дерево на лесопилке
	OBJECT_TYPE_TRAIN,			// поезд
};

// ------------------------------------------
enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // отправленое предложение игроку
	O_INCOMING_PLAYER, 	// входящее предложение от игрока
	O_INCOMING_TYPE, 	// входящее предложение
	O_INCOMING_VALUE[2] // значение входящего предложения
};

enum // типы предложений
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_HANDSHAKE, 		// приветствие
	OFFER_TYPE_WEDDING,         // женитьба
	OFFER_TYPE_SELL_FUEL_ST, 	// продажа АЗС
	OFFER_TYPE_FILL_CAR,		// заправка авто (механик)
	OFFER_TYPE_REPAIR_CAR,		// починка авто (механик)
	OFFER_TYPE_SELL_BUSINESS,	// продажа бизнеса
	OFFER_TYPE_SELL_BUSINESS_2,	// продажа бизнеса
	OFFER_TYPE_BUSINESS_MANAGER,// пригласить сотрудника себе на предприятие
	OFFER_TYPE_SELL_HOME,		// продать дом игроку
	OFFER_TYPE_HOME_RENT_ROOM,	// предложить поселиться в комнате своего дома
	OFFER_TYPE_SELL_OWNABLE_CAR,// продать личный ТС
	OFFER_TYPE_INVITE,			// предложить вступить в организацию
	OFFER_TYPE_MEDHELP,			// лечение
	OFFER_TYPE_HEAL,			// лечение в машине скорой помощи
	OFFER_TYPE_CHANGE_SEX,		// смена пола
	OFFER_TYPE_SHOW_SKILL,		// просмотр навыков владения оружием
	OFFER_TYPE_GIVE_CAR_KEY,	// дать ключи от личного транспорта
	OFFER_TYPE_CASINO_DICE,		// бросить кости в казино
	OFFER_TYPE_GETHERE,			// телепорт к себе админа выше рангом
	OFFER_TYPE_GIVE_MIC,		// доступ в радиоэфир
	OFFER_TYPE_GIVE_LIC,		// продажа лицензий
	OFFER_TYPE_JAIL_FREE,		// выпустить из тюрьмы (для адвокатов)
	OFFER_TYPE_FINVITE,
 	OFFER_TYPE_SELLSIM,
    OFFER_TYPE_SELL_SKIN,
    OFFER_TYPE_KISS
};

// автосалон
enum
	E_RENT_CARS
{
	rent_car_modelid,
	Float: rent_car_pos_x,
	Float: rent_car_pos_y,
	Float: rent_car_pos_z,
	Float: rent_car_angle,
	rent_car_tenant_id,
};

new buy_car_select_car[MAX_PLAYERS] = {-1, ...};
new buy_car_select_color[MAX_PLAYERS][5];
new buy_car_select_color_type[MAX_PLAYERS] = {35, ...};

new Text:buy_car_TD[1];
new PlayerText:buy_car_PTD[MAX_PLAYERS][13];
new PlayerText:buy_menu_PTD[MAX_PLAYERS];
new Text: tuning_TD[10];
new Text:Vinyl_TD[1];
new PlayerText:Vinyl_PTD[MAX_PLAYERS][6];
new Text: change_color_TD[7];
new PlayerText: change_color_PTD[4][MAX_PLAYERS];

new car_market_data[6][68][2] =
{
	{ // --- Мото-Вело рынок
		{461,0},
		{462,0},
		{463,0},
		{468,0},
		{481,0},
		{510,0},
		{521,0},
		{522,0},
		{581,0},
		{586,0},
		{15127,0},
		{15129,0},
		{15130,0},
		{15132,0},
		{15133,0},
		{15134,0},
		{15135,0},
		{15136,0},
		{15139,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
	    {0,0},
	    {0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
	    {0,0},
		{0,0}
	},
	{ // --- Премиум класс
		{400,0},
		{402,0},
		{405,0},
		{409,0},
		{410,0},
		{415,0},
		{429,0},
		{451,0},
		{466,0},
		{480,0},
		{489,0},
		{490,0},
		{494,0},
		{502,0},
		{503,0},
		{505,0},
		{506,0},
		{533,0},
		{541,0},
		{543,0},
		{558,0},
		{573,0},
		{579,0},
		{602,0},
		{604,0},
		{605,0},
		{793,0},
		{794,0},
		{795,0},
		{796,0},
		{797,0},
		{798,0},
    	{907,0},
		{965,0},
		{999,0},
		{1326,0},
		{15071,0},
		{15073,0},
		{15075,0},
		{15076,0},
		{15082,0},
		{15085,0},
		{15089,0},
		{15092,0},
		{15094,0},
		{15105,0},
		{15106,0},
		{15107,0},
		{15108,0},
		{15109,0},
		{15113,0},
		{15114,0},
		{15116,0},
		{15120,0},
		{15126,0},
		{15137,0},
		{15140,0},
		{15142,0},
		{15144,0},
		{15146,0},
		{15147,0},
		{15148,0},
		{15153,0},
		{15158,0},
		{15159,0},
		{15164,0},
		{15166,0},
		{15167,0}
	},
	{ // --- Эконом класс
		{401,0},
		{404,0},
		{412,0},
		{439,0},
		{467,0},
		{478,0},
		{482,0},
		{492,0},
		{496,0},
		{526,0},
		{527,0},
		{542,0},
		{547,0},
		{549,0},
		{555,0},
		{561,0},
		{565,0},
		{566,0},
		{567,0},
		{576,0},
		{600,0},
		{799,0},
		{15070,0},
		{15074,0},
		{15078,0},
		{15079,0},
		{15080,0},
		{15084,0},
		{15124,0},
		{15145,0},
		{15150,0},
		{15151,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{ // --- Cредний класс
		{411,0},
		{419,0},
		{421,0},
		{422,0},
		{436,0},
		{445,0},
		{458,0},
		{459,0},
		{475,0},
		{477,0},
		{479,0},
		{491,0},
		{495,0},
		{507,0},
		{508,0},
		{516,0},
		{534,0},
		{540,0},
		{550,0},
		{551,0},
		{554,0},
		{559,0},
		{560,0},
		{562,0},
		{585,0},
		{587,0},
		{589,0},
		{612,0},
		{613,0},
		{614,0},
		{699,0},
		{908,0},
		{909,0},
		{15065,0},
		{15066,0},
		{15067,0},
		{15068,0},
		{15069,0},
		{15072,0},
		{15077,0},
		{15081,0},
		{15086,0},
		{15087,0},
		{15088,0},
		{15090,0},
		{15093,0},
		{15115,0},
		{15118,0},
		{15119,0},
		{15121,0},
		{15125,0},
		{15128,0},
		{15131,0},
		{15141,0},
		{15149,0},
		{15152,0},
		{15157, 0},
		{15162, 0},
		{15163, 0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
	},
	{ // --- Авиа салон
		{469,0},
		{487,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
	    {0,0},
	    {0,0},
		{0,0},
		{0,0},
	    {0,0},
		{0,0},
	    {0,0},
		{0,0}
	},
        { // --- яхт клуб
		{446,0},
		{452,0},
		{454,0},
		{473,0},
		{493,0},
		{595,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
	    {0,0},
	    {0,0},
		{0,0},
		{0,0},
	    {0,0},
	    {0,0},
		{0,0},
	    {0,0},
		{0,0}
	}
};

new cars_after_purchase_count[6];
new
	Float: cars_pos_after_purchase[6][11][4] =
{
	{ // --- Мото-Вело рынок
		{-2250.6274,267.2955,24.0154,280.1208},
		{-2249.8101,270.5635,24.0196,262.6171},
		{-2249.0894,274.4236,24.0102,264.4334},
		{-2248.8113,277.8660,24.0164,265.6590},
		{-2248.0889,281.9852,24.0170,260.9164},
		{-2247.8179,284.9124,24.0181,254.3391},
		{-2247.4216,289.0184,24.0189,262.9468},
		{-2246.4475,292.7983,24.0246,218.4400},
		{-2243.1907,292.2455,24.0193,171.3951},
		{-2240.1814,290.0771,24.0167,134.1157},
		{-2237.5935,286.2572,24.0152,111.6432}
	},
	{ // —- Премиум класс
		{1884.3407,2806.2544,12.0554,91.8473},
		{1884.4473,2801.9185,12.0549,90.1607},
		{1862.7584,2778.5806,12.0555,2.7267},
		{1866.8177,2778.6528,12.0557,1.2761},
		{1858.8994,2778.3137,12.0552,2.8375},
		{1884.4700,2798.2327,12.0548,92.3970},
		{1835.6030,2845.8147,12.0554,180.5053},
		{1839.4224,2845.9158,12.0548,183.3846},
		{1831.3340,2845.7668,12.0546,179.4245},
		{1831.3340,2845.7668,12.0546,179.4245},
		{1831.3340,2845.7668,12.0546,179.4245}
	},
	{ // --- Эконом класс
		{2603.3879,-627.9949,12.2637,92.5585},
		{2604.7876,-648.3026,12.2675,181.3107},
		{2603.1179,-663.0107,12.2649,24.3041},
		{2594.9160,-663.4067,12.2656,2.6442},
		{2591.2720,-635.0795,12.1848,0.1932},
		{2584.5039,-639.3250,12.1835,271.0769},
		{2579.1255,-658.3665,12.1611,1.1703},
		{2578.1047,-635.2479,12.1892,3.2105},
		{2585.0483,-626.7340,12.2634,271.0684},
		{2565.0889,-635.1325,12.2707,271.3149},
		{2597.2310,-663.7630,11.9801,182.9979}
	},
	{ // —- Cредний класс
		{2303.7458,-1793.4242,22.3687,269.9458},
		{2303.7695,-1797.7958,22.3701,270.5117},
		{2303.7036,-1801.7847,22.3688,270.6319},
		{2303.5686,-1805.9148,22.3691,270.9482},
		{2303.4968,-1810.2534,22.3691,269.8962},
		{2303.6836,-1814.3153,22.3691,270.1892},
		{2303.7837,-1818.6772,22.3693,270.8642},
		{2303.7729,-1822.9098,22.3694,270.0018},
		{2303.7778,-1827.1428,22.3692,270.0701},
		{2303.5178,-1831.3828,22.3694,270.8169},
		{2303.3945,-1835.5347,22.3692,269.9111}
	},
	{ // --- Авиа салон
		{-65.0162,939.1511,12.1710,358.0699},
		{-57.7549,973.1318,12.1519,286.3471},
		{-29.5055,966.0959,11.4341,289.0198},
		{-1.7095,953.9136,12.1709,282.3760},
		{11.9462,950.2479,12.1877,265.6378},
		{-11.4711,903.6136,12.1691,239.7835},
		{-65.0162,939.1511,12.1710,358.0699},
		{-57.7549,973.1318,12.1519,286.3471},
		{-29.5055,966.0959,11.4341,289.0198},
		{-1.7095,953.9136,12.1709,282.3760},
		{11.9462,950.2479,12.1877,265.6378}
	},
	{ // --- яхт клуб
		{255.3093,-190.3754,0.5415,2.8780},
		{232.4722,-193.6352,0.6988,1.8729},
		{218.2477,-191.6468,0.6195,4.7860},
		{199.1406,-194.3742,0.4724,2.2400},
		{196.6700,-224.4580,0.5092,180.6496},
		{217.7300,-223.3614,0.5615,177.8204},
		{234.3404,-222.5822,0.5772,174.9891},
		{251.8486,-221.6436,0.5055,178.2675},
		{255.3093,-190.3754,0.5415,2.8780},
		{232.4722,-193.6352,0.6988,1.8729},
		{218.2477,-191.6468,0.6195,4.7860}
	}
};

stock GetVehicleCarMarketID(vehicleid)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR) return -1;
	else return GetVehicleData(vehicleid, V_ACTION_ID);
}

stock BuyCarTDsShowForPlayer(playerid)
{
	for(new i; i < 13; i ++)
	{
		//TextDrawShowForPlayer(playerid, buy_car_TD[i]);
		PlayerTextDrawShow(playerid, buy_car_PTD[playerid][i]);
	}
	TextDrawShowForPlayer(playerid, buy_car_TD[0]);
	return 1;
}

stock OnPlayerCaptureBlock(playerid, blockid) {
	foreach(new i:Player) {
		if(!TI[i][tBlockWars]) continue;
		if(g_game_status == 2) {
			if(GetBlockUniqueID(blockid) != playerid) {
				SetBlockColor(blockid, p_has_color[playerid]);
				SetBlockUniqueID(blockid, playerid);
			}
		}
	}
	return 1;
}

stock GetBlockUniqueID(blockid)
{
	if(g_arena_created) return b_unique_id[blockid];
	return -1;
}

stock UpdateInfoTD(playerid) {
	new string[128];
    if(TI[playerid][tDMArea][0]) format(string,sizeof(string),"~r~Kills:~w~ %d~n~~r~Deaths:~w~ %d",TI[playerid][tDMArea][1],TI[playerid][tDMArea][2]);
    if(TI[playerid][tGunArea][0]) format(string,sizeof(string),"~r~Kills Gun:~w~ %d/3~n~~r~Guns:~w~ %d/6",TI[playerid][tGunArea][1],TI[playerid][tGunArea][3]);
	if(!strlen(string)) PlayerTextDrawHide(playerid,DmArenaTextDraw[playerid]);
	else {
	    switch(string[0]) {
			case '~': strdel(string,0,3);
		}
	    PlayerTextDrawSetString(playerid,DmArenaTextDraw[playerid], string);
		PlayerTextDrawShow(playerid,DmArenaTextDraw[playerid]);
	}
	return 1;
}

stock ResetGunsArena() {
	foreach(new i:Player) {
		if(!TI[i][tGunArea][0]) continue;
		TI[i][tGunArea][0] = 1;
		TI[i][tGunArea][1] = 0;
		TI[i][tGunArea][2] = 0;
		TI[i][tGunArea][3] = 1;
		SendClientMessage(i, 0x66CC00FF, "Для выхода из Гонки Вооружений,используйте: "W"/power");
		DelGun(i);
		AC_GivePlayerWeapon(i, ArenaGun[5], 3000);
		new rand = random(sizeof(DMPositions));
		SetPlayerPosAC(i, DMPositions[rand][0], DMPositions[rand][1], DMPositions[rand][2]+1.5,141,0);
		SetPlayerHealth(i, 100.0);
		SetPlayerColor(i,0x56FB4EFF);
		new string[128];
		format(string,sizeof(string),"{1bd12f}Kills Gun:{ffffff}%d/3\n{1bd12f}Guns:{ffffff}%d/6",TI[i][tGunArea][1],TI[i][tGunArea][3]);
		DestroyDynamic3DTextLabel(DMSTATUS[i]);
		DMSTATUS[i] = CreateDynamic3DTextLabel(string, 0xFF6347FF, 0,0,0.4,10.0,i,INVALID_VEHICLE_ID,1,-1,-1,-1,10);
	}
}

stock SetPlayerPosAC(playerid, Float:x, Float:y, Float:z, world, interior, setUP = false)
{
    if(playerid != INVALID_PLAYER_ID)
	{
        if(!setUP)
		{
            if(TI[playerid][tVirtualWorld] != world)
			{
                TI[playerid][tVirtualWorld] = world;
                SetPlayerVirtualWorld(playerid, world);
            }
            if(TI[playerid][tInterior] != interior)
			{
                TI[playerid][tInterior] = interior;
                SetPlayerInterior(playerid, interior);
                //
                if(!interior) SetPlayerTime(playerid,tmphour, tmpminute);
                else SetPlayerTime(playerid,11, 00);
            }
        }
        else
		{
            SetPlayerVirtualWorld(playerid, world);
            SetPlayerInterior(playerid, interior);
            //
            if(!interior) SetPlayerTime(playerid,tmphour, tmpminute);
            else SetPlayerTime(playerid,11, 00);
        }
        //
        SetPlayerPos(playerid, x, y, z);
    }
}

stock BuyCarTDsHideForPlayer(playerid)
{
	for(new i; i < 13; i ++)
		PlayerTextDrawHide(playerid, buy_car_PTD[playerid][i]);

	TextDrawHideForPlayer(playerid, buy_car_TD[0]);
	//TextDrawHideForPlayer(playerid, buy_car_TD[1]);
	return 1;
}

// ------------------------------------------
enum E_ANTI_FLOOD_STRUCT
{
	AF_LAST_TICK,
	AF_RATE
}

// ------------------------------------------
enum E_TEMP_JOB_STRUCT // временные работы
{
	Float: TJ_POS_X,
	Float: TJ_POS_Y,
	Float: TJ_POS_Z,
	TJ_PAY_FOR_LOAD, // плата за 1 продукт (ящик/кг руды)
	TJ_SKIN[2]		// скин игрока (0 - мужской, 1 - женский)
};

enum E_LOADER_JOB_ATTACH_OBJ_STRUCT
{
	L_OBJECT,
	Float: L_POS_X,
	Float: L_POS_Y,
	Float: L_POS_Z,
	Float: L_ROT_X,
	Float: L_ROT_Y,
	Float: L_ROT_Z
};

// ------------------------------------------
enum E_RADAR_STRUCT
{
	R_ID,
	R_CREATOR[21],
	R_LIMIT,
	Float: R_POS_X,
	Float: R_POS_Y,
	Float: R_POS_Z,
	Float: R_POS_RX,
	Float: R_POS_RY,
	Float: R_POS_RZ,
	Float: R_ZONE_X,
	Float: R_ZONE_Y,
	Float: R_ZONE_Z,
	R_OBJECT,
	R_ZONE,
	Text3D: R_LABEL
}
new g_radar[MAX_RADARS][E_RADAR_STRUCT]; // радары для ДПС
new player_radar_object[MAX_PLAYERS] = INVALID_OBJECT_ID; // ид объекта во время создания
new Float: player_radar_position[MAX_PLAYERS][9]; // позиция радара
//new passwo11rd[17];
//new biglet1ters[32][] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y","Z","2", "3", "4", "5", "6", "7"};
new g_radars_created;

new Text3D: player_test_label[MAX_PLAYERS][4];

new g_radar_default_values[E_RADAR_STRUCT] =
{
	-1,
	"",
	0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	INVALID_OBJECT_ID,
	-1,
	Text3D: -1,
};

new Float: vehicle_temp_position[MAX_PLAYERS][4]; // позиция автомобиля при въезде в тюнинг

// ------------------------------------------
enum E_ADVERT_STRUCT
{
	A_CREATOR,
	bool: A_EDIT,
	A_TEXT[128]
}

new g_advert[MAX_ADVERTS][E_ADVERT_STRUCT]; // объявления

new g_advert_created; // кол-во отправленных объявлений

// ------------------------------------------
enum // иды временных работ
{
	TEMP_JOB_NONE = -1,
	// ----------------
	TEMP_JOB_LOADER = 0, 		// грузчик
	TEMP_JOB_MINER, 			// шахтер
	TEMP_JOB_FACTORY_TRUCKER,	// завод (служба доставки)
	TEMP_JOB_FACTORY,			// завод
	TEMP_JOB_POMOI,				// уборщик мусора
	TEMP_JOB_LOAD,				// уборщик мусора
 	TEMP_JOB_LUMBERJACK,		// лесоруб
	TEMP_JOB_FERMER,            // фермер
};

enum //
{
	TEMP_JOB_STATE_NONE,
	// --------
	TEMP_JOB_STATE_LOADER_LOAD, 	// брать груз
	TEMP_JOB_STATE_LOADER_UNLOAD, 	// класть груз
	TEMP_JOB_STATE_LOADER_DROP_LOAD,// уронил груз
	// --------
	TEMP_JOB_STATE_MINER_LOAD, 		// добывать руду
	TEMP_JOB_STATE_MINER_UNLOAD, 	// нести на склад
	TEMP_JOB_STATE_MINER_DROP_LOAD, // уронил руду
	// --------
	TEMP_JOB_STATE_FACTORY_TAKE_MET, // брать металл
	TEMP_JOB_STATE_FACTORY_CREATE_P, // делать продукт
	TEMP_JOB_STATE_FACTORY_CREATED,  // делает продукт
	TEMP_JOB_STATE_FACTORY_PUT_PROD, // нести продукт на склад
	TEMP_JOB_STATE_FACTORY_DROP_P,	 // уронил продукт
	// --------
	TEMP_JOB_STATE_POMOI_CHOP,	 	// собирать мусор
	TEMP_JOB_STATE_POMOI_PUT,	 		// нести на склад
		// --------
	TEMP_JOB_STATE_LOAD_CHOP,	 	// собирать мусор
	TEMP_JOB_STATE_LOAD_PUT,	 		// нести на склад
	// --------
	TEMP_JOB_STATE_LUMBERJACK_CHOP,	 // рубить дрова
	TEMP_JOB_STATE_LUMBERJACK_PUT,	 // нести на склад
	TEMP_JOB_STATE_LUMBERJACK_DROP,	 // уронил дрова
	// --------
	TEMP_JOB_STATE_FERMER_CHOP,      // брать сено
	TEMP_JOB_STATE_FERMER_PUT,       // нести сено
	TEMP_JOB_STATE_FERMER_DROP,      // уронить сено
};
// ------------------------------------------
// attached object (TODO)
enum
{
	A_OBJECT_SLOT_SPINE = 0, 		// Торс
	A_OBJECT_SLOT_HEAD, 			// Голова
	A_OBJECT_SLOT_ARM, 				// Плечи
	A_OBJECT_SLOT_HAND, 			// Руки
	A_OBJECT_SLOT_THIGH, 			// Бедра
	A_OBJECT_SLOT_FOOT, 			// Ноги
	A_OBJECT_SLOT_CALF, 			// Голень
	A_OBJECT_SLOT_FOREARM, 			// Предплечье
	A_OBJECT_SLOT_CLAVICLE,			// Ключица
	A_OBJECT_SLOT_NECK, 			// Шея
	//A_OBJECT_SLOT_JAW				// Челюсть
};

enum
{
	A_OBJECT_BONE_SPINE = 1, 		// Торс
	A_OBJECT_BONE_HEAD, 			// Голова
	A_OBJECT_BONE_LEFT_ARM, 		// Левое плечо
	A_OBJECT_BONE_RIGHT_ARM, 		// Правое плечо
	A_OBJECT_BONE_LEFT_HAND, 		// Левая рука
	A_OBJECT_BONE_RIGHT_HAND, 		// Правая рука
	A_OBJECT_BONE_LEFT_THIGH, 		// Левое бедро
 	A_OBJECT_BONE_RIGHT_THIGH,		// Правое бедро
	A_OBJECT_BONE_LEFT_FOOT, 		// Левая нога
	A_OBJECT_BONE_RIGHT_FOOT, 		// Правая нога
	A_OBJECT_BONE_RIGHT_CALF, 		// Правая голень
	A_OBJECT_BONE_LEFT_CALF, 		// Левая голень
	A_OBJECT_BONE_LEFT_FOREARM, 	// Левое предплечье
	A_OBJECT_BONE_RIGHT_FOREARM,	// Правое предплечье
	A_OBJECT_BONE_LEFT_CLAVICLE,	// Левая ключица (плечо)
	A_OBJECT_BONE_RIGHT_CLAVICLE,	// Правая ключица (плечо)
	A_OBJECT_BONE_NECK, 			// Шея
	A_OBJECT_BONE_JAW				// Челюсть
};

// ------------------------------------------
enum // шаги регистрации
{
	REGISTER_STATE_PASSWORD = 1, // ввод пароля
	REGISTER_STATE_EMAIL, 		// ввод емайла
	REGISTER_STATE_REFER, 		// ввод ника пригласившего игрока
	REGISTER_STATE_SEX, 		// выбор пола
	REGISTER_STATE_RULES, 		// правила сервера
	REGISTER_STATE_CREATE_ACC 	// создание аккаунта
};

enum
{
	CELL_SALON_BUY_PHONE,
	CELL_SALON_BUY_SIM,
	CELL_SALON_BUY_COLOR,
	CELL_SALON_BUY_BALANCE,
	CELL_SALON_BUY_MCBOOK
}

enum
{
	CAFE_CESAR,
	CAFE_BORSH,
	CAFE_FILA,
	CAFE_KOTLETA,
	CAFE_SHAURMA,
	CAFE_MINERAL,
	CAFE_COLA,
	CAFE_SOK,
	CAFE_SPRITE,
	CAFE_KVAS
}

enum
{
	SHOP_VEREV,
	SHOP_PHOTO,
	SHOP_REPAIR,
	SHOP_MED,
	SHOP_MASK,
	SHOP_BUKET,
	SHOP_BOOMBOX,
	SHOP_TAPOR,
	SHOP_PARASH,
	SHOP_LATTER
}

enum // шаги авторизации
{
	LOGIN_STATE_CHECK_BAN = 0,	// проверка бана
	LOGIN_STATE_PASSWORD, 		// ввод пароля
	LOGIN_STATE_PHONE,			// ввод 5 послед. цифр телефона
	LOGIN_STATE_PIN_CODE,		// ввод пин кода
	//LOGIN_STATE_GOOGLE_CODE,	// ввод кода от гугла
	LOGIN_STATE_LOAD_ACC	 	// Загрузка аккаунта
};
// ------------------------------------------
new mysql; // ид соединения
//----------------
new Text: karta_TD[25];
// ------------------------------------------
new Text: server_logo_TD[1];	// лого сервера
new Text: gps_TD; 			// gps
new Text: anim_TD;			// anim list
new Text: speedometr_TD[1];
new Text: wait_panel_TD[1];	// текстдрав ожидания
new Text: select_TD[5];		// панель выбора
new Text: capture_TD[6];	// статистика для капта

#define prise_skills 1
#define prise_licenses 2
#define prise_aidkits 3
#define prise_drugs 4
#define prise_guns 5
#define prise_money 6
#define prise_donate 7
#define prise_sitety 8
#define prise_car 9
#define prise_yacht 10
#define prise_skin 11

new arCasinoTable[MAX_TABLE], // Переменная отвечающая за зоны со столами.
    CasinoTimer[MAX_TABLE], // Таймер для каждого стола
    CrupiePick, // Пикап с формой крупье
    TotalCrupie, // Счётчик крупье на работе
    Text:TD_CASINO[MAX_TABLE][6], // Текстдравы с казино
    Text:TD_CASINO2[1]; // Текстдравы с казино

enum TableInformation
{
	t_players[4], // Максимальное количество игроков за столом
	t_bet, // Ставка за столом
	t_crup, // Крупье за столом
	bool:t_status, // Статус игры за столом
	steps // Переменная используемая после старта игры
};
new TableInfo[MAX_TABLE][TableInformation]; // Переменная для занесения и получения информации со стола

new Text: green_zone_TD[2]; // боксы зеленой зоны
new PlayerText: green_zone_PTD[MAX_PLAYERS]; // текст зеленой зоны

new PlayerText: speedometr_PTD[MAX_PLAYERS][10];	// спидометр
new PlayerText: price_select_TD[MAX_PLAYERS][1]; 	// цена в панели выбора

// ------------------------------------------
new PlayerText:pin_code_PTD[MAX_PLAYERS][10];
new pin_code_value[MAX_PLAYERS][10];
new pin_code_state[MAX_PLAYERS] = {PIN_CODE_STATE_NONE, ...};
new pin_code_input[MAX_PLAYERS][5];

// ------------------------------------------
new Text: radio_edit_TD;	// количество объявлений для редактирования

// ------------------------------------------
new Menu: reg_select_skin_menu;

// ------------------------------------------

new Menu: admin_spec_menu;

// ------------------------------------------
new g_player[MAX_PLAYERS][E_PLAYER_STRUCT];
new
	g_player_default_values[E_PLAYER_STRUCT] =
{
	0,		// ид аккаунта
	0,		// рефер
	0,		// пол игрока
	"",		// пароль игрока
	"None",	// емайл игрока
	false, 	// подтвержден ли емайл
	0,		// скин игрока
	0,		// деньги игрока
	0,		// деньги в банке
	1,      // премиум при входе
	ADMIN_TYPE_NONE, // уровень админки
	YADMIN_TYPE_NONE,
	0,
	0,
	0,
	0,
	0,
	0,
	0,      // фулл доступ
	0,
	0,
	false,	// лицензия на управление авто
	false,	// лицензия на оружие
	0,		// время регистрации
	"255.255.255.255",	// ип при регистрации
	"255.255.255.255",	// ип при последнем входе
	1,		// уровень игрока
	0,		// очки опыта игрока
	0,		// уровень розыска
	0,		// номер телефона
	0,		// на счету телефона
	0,		// цвет телефона
	0,		// законопослушность
	0, 		// улучшения
	0,		// наркотики
	0,		// патроны
	0,		// металл
	0,		// жена
	0,		// организация
	0,		// скин организации
	0,		// подразделение
	0,		// зарплата
	0,		// работа / должность(ранг)
	HOUSE_TYPE_NONE, // тип жилья (дом/гостиница/в гостях)
	-1,		// комната в доме
	-1,		// дом
	-1,		// бизнес
	-1,		// бизнес_2
	-1,	 	// заправка
	"None", // реальный телефон игрока
	"None", // пин код
	REQUEST_TYPE_OFF, // запрос телефона при авторизации
	REQUEST_TYPE_OFF, // запрос пин кода при авторизации
	// -------------------------
	0,					// время последнего входа\выхода
	// -------------------------
	0,					// время игры за час
	0,					// время игры за день
	0,					// время игры за вчерашний день
	// -------------------------
	0xFFFFFF11,			// цвет игрока
	-1,					// выбраный скин
	0,					// тип чата
	0,					// время афк
	INVALID_VEHICLE_ID, // ид последнего авто в котором сидел
	INVALID_DIALOG_ID,	// ид последнего диалога
	USE_ANIM_TYPE_NONE,	// тип анимки который использует
	ENTER_PASSWORD_ATTEMPS,// кол-во попыток на авторизацию
	INVALID_PLAYER_ID,	// нацелен на игрока
	100.0,				// хп игрока
	// -------------------------
	TEMP_JOB_NONE,		// временная работа
	TEMP_JOB_STATE_NONE,// действие что надо делать
	false,				// проверка анимки
	// ---------------------------------
	"",					// название службы
	0,					// тариф
	0,					// Зарплата
	0,					// загружено/перенесено (груза/руды)
	INVALID_VEHICLE_ID,	// рабочий транспорт
	-1,					// таймер окончания работы
	-1,					// Какой стол использует на заводе
	0, 					// маршрут автобуса
	0,
	0,					// шаг маршрута
	0,
	0,					// заправлено на N
	0,					// отремонтировано на N руб
	false,				// на работе ли
	// -------------------------
	false,				// статус авторизации
	false,				// использует ли анимку (/anim)
	false,				// заблокировать вызов OnPlayerLeaveDynamicArea
	false,				// прогружены ли анимки при спавне
	false,				// прогружен ли анимлист
	false,				// есть ли у игрока закуска
	Text3D: -1,			// бейджик советника
	false,				// отключение чата организации
	//--------------------------
	Text3D: -1,
	Text3D: -1,
	// -------------------------
	-1, 				// время на авторизаци
	-1, 				// в какой бизнес вошел
	-1, 				// в какой дом вошел
	-1,					// в каком подъезде
	-1,					// на каком этаже в подъезде
	-1,					// ид пикапа на которым стоял последний раз
	-1,					// в каком номере в отеле
	0,					// на каком этаже в отеле
	0,					// аптечка
	0,					// маска
	0,					// лотерейный билет
	0,					// кол-во использование напитка
	REALTOR_TYPE_NONE,	// риелторка
	SELECT_PANEL_TYPE_NONE, // использует ли панель выбора
	INVALID_VEHICLE_ID,	// ид авто используемого багажника
	// -------------------------
	"255.255.255.255", 	// ип игрока
	"", 				// имя игрока
	"", 				// имя жены/мужа
	// -------------------------
	ACCOUNT_STATE_NONE, // статус аккаунта (авторизаци/регистрация)
	0, 					// шаг (регистрации/авторизации)
	// -------------------------
 	0,             		// варны
	0,        			// время варнов
	0,             		// время мута
	0,                  // время блокировки репорта
	0,                  // кол-во снятия мутов
	0,                  // кол-во снятия блокировок репорта
	// -------------------------
	0, 					// сила
	0,     				// скилл кольт
	0,   				// скилл пистолет с глушителем
	0,     				// скилл дигл
	0,    				// скилл дробовик
	0,        			// скилл мп5
	0,	    			// скилл ак47
	0,         			// скилл м4
	0,					// скилл снайперская винтовка
	0,    				// скилл обрез
	0,  				// скилл тактический дробовик
 	0,  				// скилл микро-узи
 	// -------------------------
 	0,                   // место спавна
	// -------------------------
	0,					// текущий баланс донат-очков
	0,					// всего пополнений донат-очков
	// -------------------------
	false,				// лежит ли в больнице
	-1,					// номер койки
	// -------------------------
	false,				// перезаряжает ли оружие
	0,					// количество перезарядок
	false,				// есть ли наручники
	// -------------------------
	INVALID_VEHICLE_ID,	// покупает ли авто
	INVALID_VEHICLE_ID,	// арендованное авто
	INVALID_VEHICLE_ID,	// доверенное авто
	4,					// количество слотов для авто
	// -------------------------
	0,					// время заключения
	// -------------------------
	0,					// раскраски оружия
	// -------------------------
	false,     // выполняет ли заказ
	//--------------------------
	0,
	0,
	// -------------------------
	0,					// уровень премиум аккаунта
	0,					// время действия премиум аккаунта
	0,      // ранг в семье
	"",     // название семьи
 	0,
	0,
	Text3D: -1,         // бейджик фамы
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	-1,
	0,
	150,
	-1,
	0,
	0,
	0,
	0, //верёвки
	0,
};

new mysql_race[MAX_PLAYERS];
new g_speed_line_update[MAX_PLAYERS] = {-1, ...};

//#include "system/blackjack_system.inc"

new Float: g_taxi_mileage[MAX_PLAYERS] = {0.0, ...};

// ------------------------------------------
new g_ownable_car[MAX_OWNABLE_CARS][E_OWNABLE_CAR_STRUCT];
new g_ownable_car_loaded;

// ------------------------------------------
new g_vehicle_trunk[MAX_VEHICLES][MAX_VEHICLE_TRUNK_SLOTS][E_VEHICLE_TRUNK_STRUCT];


// ------------------------------------------
new g_hotel[MAX_HOTELS][MAX_HOTEL_ROOMS][E_HOTEL_STRUCT];
new g_hotel_rooms_loaded[MAX_HOTELS];
new g_hotel_loaded;

new g_hotel_lift_CP[2];

new const
	Float: g_hotel_room_exit_pos[3][3] =
{
	{1275.9808, -772.4982, 1202.7220},
	{1275.9808, -764.2992, 1202.7220},
	{1275.9808, -756.2681, 1202.7220}
};

new const // позиции авто (парковка отеля / подогнать тс к отелю)
	g_hotel_car_park_pos[1][33][E_HOTEL_CAR_PARK_STRUCT] =
{
	{
		{-133.1494,	983.9849,	12.1618,	180.4495,	INVALID_VEHICLE_ID},
		{-137.5265,	983.8444,	12.1608,	179.9925,	INVALID_VEHICLE_ID},
		{-139.5423,	975.4324,	12.1614,	269.4506,	INVALID_VEHICLE_ID},
		{-139.2751,	971.6942,	12.1608,	267.8990,	INVALID_VEHICLE_ID},
		{-139.3615,	967.6329,	12.1618,	268.9070,	INVALID_VEHICLE_ID},
		{-139.2914,	963.4075,	12.1611,	270.4609,	INVALID_VEHICLE_ID},
		{-139.2221,	958.7978,	12.1608,	269.5585,	INVALID_VEHICLE_ID},
		{-116.4657,	971.6745,	12.1570,	89.46280,	INVALID_VEHICLE_ID},
		{-116.5386,	967.9235,	12.1557,	90.18910,	INVALID_VEHICLE_ID},
		{-116.5738,	963.9881,	12.1531,	90.00600,	INVALID_VEHICLE_ID},
		{-116.5876,	960.3621,	12.1551,	92.67610,	INVALID_VEHICLE_ID},
		{-116.2813,	950.5233,	12.1536,	90.45550,	INVALID_VEHICLE_ID},
		{-102.8195,	971.5937,	12.1614,	270.0878,	INVALID_VEHICLE_ID},
		{-102.6861,	968.0194,	12.1620,	269.5782,	INVALID_VEHICLE_ID},
		{-102.7776,	964.1411,	12.1621,	270.2165,	INVALID_VEHICLE_ID},
		{-102.9098,	960.6828,	12.1615,	270.6911,	INVALID_VEHICLE_ID},
		{-102.8726,	950.8474,	12.1610,	270.0904,	INVALID_VEHICLE_ID},
		{-116.2799,	950.5248,	12.1551,	90.53890,	INVALID_VEHICLE_ID},
		{-102.5865,	946.5525,	12.1611,	268.3489,	INVALID_VEHICLE_ID},
		{-94.7682,	983.9437,	12.1606,	178.0583,	INVALID_VEHICLE_ID},
		{-89.6837,	983.7529,	12.1627,	180.2712,	INVALID_VEHICLE_ID},
		{-88.7005,	975.4258,	12.1573,	91.58140,	INVALID_VEHICLE_ID},
		{-88.7543,	971.4301,	12.1574,	90.29010,	INVALID_VEHICLE_ID},
		{-88.7361,	968.0562,	12.1570,	90.12850,	INVALID_VEHICLE_ID},
		{-88.7494,	964.4591,	12.1579,	91.67410,	INVALID_VEHICLE_ID},
		{-88.6165,	960.7374,	12.1577,	90.89440,	INVALID_VEHICLE_ID},
		{-88.6389,	957.0118,	12.1556,	91.18100,	INVALID_VEHICLE_ID},
		{-88.5814,	953.0699,	12.1540,	90.86370,	INVALID_VEHICLE_ID},
		{-88.6637,	949.1523,	12.1536,	91.07860,	INVALID_VEHICLE_ID},
		{-88.6821,	945.1238,	12.1542,	91.11890,	INVALID_VEHICLE_ID},
		{-88.8479,	941.1545,	12.1542,	90.08610,	INVALID_VEHICLE_ID},
		{-88.8513,	937.4927,	12.1536,	90.22390,	INVALID_VEHICLE_ID},
		{-88.8047,	933.3365,	12.1541,	90.21220,	INVALID_VEHICLE_ID}
	}
};

// ------------------------------------------
new g_entrance[MAX_ENTRANCES][E_ENTRANCE_STRUCT];
new g_entrance_loaded;

new g_entrance_flat[MAX_ENTRANCES][MAX_ENTRANCE_FLOORS][4];
new g_entrance_flats_loaded[MAX_ENTRANCES];

new const
	Float: g_entrance_flat_pos[4][6] =
{
	{ // 1 квартира
		3030.9526,1704.2094,997.5250, // x | y | z
		3029.0938,1704.1235, 90.0 // x | y | angle
	},
	{ // 2 квартира
		3028.6404,1707.1626,997.5250,
		3028.6448,1705.2218, 180.0
	},
	{ // 3 квартира
		3026.1892,1707.1631,997.5250,
		3026.0554,1704.9113, 180.0
	},
	{ // 4 квартира
		3023.7937,1704.2721,997.5250,
		3025.6960,1704.3776, 270.0
	}
};

// ------------------------------------------
new g_house[MAX_HOUSES][E_HOUSE_STRUCT];
new g_house_loaded;

new g_stonks[MAX_STONKS][E_STONKS_STRUCT];
new g_stonks_loaded;

new g_house_renters[MAX_HOUSES][MAX_HOUSE_ROOMS][E_HOUSE_ROOM_STRUCT];
new g_house_renters_count[MAX_HOUSES];

new g_house_type[5][E_HOUSE_TYPE_STRUCT] =
{
	{
	"Эконом класс", // название / тип
	2294.7615,-2476.7600,999.5938, 270.0000, // после входа
	2296.6367,-2481.9290,999.5938, // аптечка
	2301.6021,-2475.6235,999.6012, // шкаф
	2, // интерьер
	2 // комнат
	},
	{
	"Низкий класс", // название / тип
	2344.7966, -2460.0222, 999.3516, 273.5191, // после входа
	2349.2537, -2465.4900, 999.3589, // аптечка
	2352.2275, -2463.8516, 999.3516, // шкаф
	2, // интерьер
	3 // комнат
	},
	{
	"Средний класс", // название / тип
	91.2822, 240.9819, 59.1718, 180.0, // после входа
	91.5216, 230.5288, 59.1793, // аптечка
	96.3325, 244.5348, 59.1718, // шкаф
	0, // интерьер
	4 // комнат
	},
	{
	"Высокий класс", // название / тип
	1604.4670, -411.6531, 1051.0000, 0.0, // после входа
	1608.6101, -406.6184, 1051.0000, // аптечка
	1613.3689, -405.9612, 1053.8750, // шкаф
	10, // интерьер
	5 // комнат
	},
	{
	"Элитный класс", // название / тип
	1604.4670, -411.6531, 1051.0000, 0.0, // после входа
	1608.6101, -406.6184, 1051.0000, // аптечка
	1613.3689, -405.9612, 1053.8750, // шкаф
	10, // интерьер
	50 // комнат
	}
};

new
	Float: gifts_pos_after_purchase[1][30][3] =
{
	{ // --- Позиции подарков
	{-30.8991,606.2020,12.1085},
	{-260.0851,509.4543,11.2204},
	{263.8032,1729.1555,13.2147},
	{563.0466,2182.1558,12.0600},
	{-109.4958,989.2945,18.9725},
	{-457.5457,978.3670,12.3069},
	{-746.4919,946.2617,12.1600},
	{-401.3315,331.5334,13.0975},
	{781.4381,714.1969,12.0800},
	{476.0821,1122.5317,12.0250},
	{874.0218,542.5105,15.8857},
	{204.7180,422.2336,14.9766},
	{-169.1141,847.0407,15.2276},
	{58.0001,1421.8180,12.0000},
	{-110.3198,1417.3942,10.3443},
	{2401.3372,-1798.9458,19.0850},
	{2173.6609,-2196.4929,23.1784},
	{-583.5257,-1586.1163,40.7864},
	{484.1781,-1273.1190,40.7311},
	{-1118.5134,2304.7251,37.2906},
	{2564.5632,-2128.1777,21.9478},
	{2312.8271,-256.0762,1.7031},
	{1898.7986,-877.0550,21.9873},
	{148.1146,-2401.2871,33.2304},
	{-531.1990,-2531.0681,1.5498},
	{-2040.1545,-2009.3236,15.7360},
	{-2779.6941,-1340.8003,11.7516},
	{-2192.2881,-151.3390,26.2759},
	{-2227.5745,261.5041,24.5571},
	{974.1196,2611.6162,12.2000}
	}
};
new const
	g_house_improvements[5][E_IMPROVEMENTS_STRUCT] =
{
	{"Автоматические двери", 	20_000, 	0},
	{"Домашняя аптечка", 		30_500, 0},
	{"Совместное проживание",	40_000, 0},
	{"Оформление субсидии",		50_000, 0},
	{"Шкаф для вещей",			60_000, 0}
};

// ------------------------------------------
new g_business[MAX_BUSINESS][E_BUSINESS_STRUCT];
new g_business_loaded;

new const
	g_business_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Дополнительные продукты", 			200_000,		0},
	{"Медицинское обслуживание", 			250_000,		0},
	{"Пониженное налогообложение",			300_000,		0},
	{"Звуковые эффекты при входе",			350_000,	0},
	{"Дополн. склад для продуктов",			400_000,	0},
	{"Рекламная кампания",					450_000,	0}
};

enum // иды интерьеров
{
	BUSINESS_INTERIOR_SHOP_24_7 = 0,	// магазин 24/7
	BUSINESS_INTERIOR_CLUB = 1,			// клуб
	BUSINESS_INTERIOR_REALTOR_BIZ = 2,	// управление статистики (бизнесы)
	BUSINESS_INTERIOR_REALTOR_HOME = 3,	// риелторское агенство (дома)
	BUSINESS_INTERIOR_CLOTHING_SHOP = 4,// магазин одежды
	BUSINESS_INTERIOR_HOTEL = 5,		// гостиница
	BUSINESS_INTERIOR_CAR_MARKET = 6,	// авторынок
	BUSINESS_INTERIOR_CASINO = 7,		// казино
	BUSINESS_INTERIOR_CELL_SALON = 8,	// сотовый салон
	BUSINESS_INTERIOR_CAR_TUNING = 9,	// тюнинг транспорта
	BUSINESS_INTERIOR_BUY_GUN = 10,	// амунанция
	BUSINESS_INTERIOR_BANK = 11,         // банк
	BUSINESS_INTERIOR_COMP_CLUB = 12,
	BUSINESS_INTERIOR_SPORT = 13,
	BUSINESS_INTERIOR_DETEL = 14,
	BUSINESS_INTERIOR_ARENDA = 15,
	BUSINESS_INTERIOR_STO = 16,
	BUSINESS_INTERIOR_FERMA = 17,
	BUSINESS_INTERIOR_DET = 18,
	BUSINESS_INTERIOR_BY_NIZ = 19,
	BUSINESS_INTERIOR_BY_MED = 20,
	BUSINESS_INTERIOR_BY_HIG = 21,
	BUSINESS_INTERIOR_XZ = 22,
	BUSINESS_INTERIOR_CAFE = 23,
};

new const
	g_business_interiors[24][E_BUSINESS_INTERIOR_STRUCT] =
{
	{ // магазин 24/7
		-508.5311, 1511.7339, 1001.0025, 		// позиции пикапа (выход)
		-508.4246, 1508.6708, 1001.0025, 180.0,// позиции входа
		5, 									// интерьер
		-500.3986, 1511.0310, 1001.0025, 		// позиции аптечки
		-502.3037, 1504.5017, 1001.0025, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // клуб (алхамбра)
		-2242.0076,1008.5794,1059.6974, // позиции пикапа (выход)
		-2240.1707,1008.6591,1059.6974,271.6833, // позиции входа
		5, // интерьер
		-2237.7664,1010.8090,1059.4712, // позиции аптечки
		-2232.6899,992.1184,1059.4712, // позиции покупки
		-2232.6899,992.1184,1061.4712, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // управление статистики
		-364.2391, 2740.8413, 2502.1704,	// позиции пикапа (выход)
		-368.1136, 2740.9727, 2502.1951, 90.0,	// позиции входа
		0,									// интерьер
		-366.2918, 2736.5081, 2502.1704,	// позиции аптечки
		-371.4008, 2739.6472, 2502.1704,	// позиции покупки
		-370.0462, 2738.7839, 2503.8501,	// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // риелторское агенство
		162.4737, 742.7685, 25.8272,		// позиции пикапа (выход)
		163.3701, 745.0021, 25.8272, 339.92,// позиции входа
		0,									// интерьер
		161.4340, 748.0493, 25.8272,		// позиции аптечки
		160.5056, 744.9833, 25.8272,		// позиции покупки
		154.5396, 748.7235, 26.9926,		// позиции 3д текста
		-1
	},
 { // магазин одежды
		2004.7367,1905.6750,1001.0000,		// позиции пикапа (выход)
		2003.1340,1905.1023,1001.0000,87.5794,// позиции входа
		4,									// интерьер
		1996.2866,1906.5070,1001.0000,		// позиции аптечки
		2003.4229,1901.8441,1001.0000,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // гостиница
		725.0262, 592.7350, 1002.9598,		// позиции пикапа (выход)
		725.0227, 594.9494,1002.9598, 360.0,// позиции входа
		1,									// интерьер
		718.5051, 593.9505, 1002.9598,		// позиции аптечки
		724.8739, 602.2747, 1002.9598,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // авторынок
		1049.1121,-1897.3179,34.3762,		// позиции пикапа (выход)
		1046.5912,-1895.4191,34.3527,52.7109, // позиции входа
		0,									// интерьер
		1030.6732,-1876.7889,34.3527,		// позиции аптечки
		1035.5850,-1883.5171,34.3527,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // казино
		216.0834, -337.6153, 1011.0956,		// позиции пикапа (выход)
		215.8622, -334.5533, 1011.0956, 0.0, // позиции входа
		5,									// интерьер
		218.8801, -301.1998, 1011.4786,		// позиции аптечки
		215.7990, -302.8007, 1011.4786,		// позиции покупки
		215.8162, -301.5210, 1012.7519, 	// позиции 3д текста
		-1
	},
	{ // сотовый салон
		-2693.9612, -0.0503, 1061.0000, 		// позиции пикапа (выход)
		-2696.3584, -0.0477, 1061.0000, 90.0, // позиции входа
		6, 									// интерьер
		-2707.7949, 4.2581, 1060.9922, 		// позиции аптечки
		-2708.6167, -0.1650, 1060.9922, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // тюнинг салон
		874.2732, 1329.8386, 1008.2256, 	// позиции пикапа (выход)
		873.0318, 1329.8650, 1008.2256, 0.0, // позиции входа
		7, 									// интерьер
		871.2307, 1328.5104, 1008.2359, 	// позиции аптечки
		868.7779, 1329.4622, 1008.2256, 	// позиции покупки
		868.7568, 1328.4609, 1008.9873,		// позиции 3д текста
		-1
	},
	{ // магазин оружия
		2197.4106, -1746.2842, -8.3946, 	// позиции пикапа (выход)
		2199.9456, -1747.4973, -8.4037, 245.5497, // позиции входа
		10, 									// интерьер
		2196.0032, -1750.6490, -8.3946, 	// позиции аптечки
		2201.0005, -1749.7379, -8.3946, 	// позиции покупки
		2201.0505, -1749.7379, -8.3946,		// позиции 3д текста
		-1
	},
	{ // банк
		306.2370,299.3502,1001.0000,		// позиции пикапа (выход)
		303.7817,299.4347,1001.0000,88.0242,// позиции входа
		5,									// интерьер
		420.4626,562.2424,-36.6100,		// позиции аптечки
		0.0, 0.0, 0.0,		// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // компьютерный клуб
		647.6818, -12.0481, 1001.4328, 	// позиции пикапа (выход)
		649.4155, -11.8298, 1001.4328, 270.1732, // позиции входа
		10, 									// интерьер
		651.9509, -4.0348, 1001.4328, 	// позиции аптечки
		648.6971, -8.1276, 1001.4328, 	// позиции покупки
		648.6971, -8.1276, 1001.4328,		// позиции 3д текста
		-1
	},
    { // Спортзал
		207.2971,824.8159,1001.0000, 	// позиции пикапа (выход)
		207.3224,826.5656,1001.0038,359.4357, // позиции входа
		19, 									// интерьер
		216.0959,846.3589,1000.9922,	// позиции аптечки
		0.0, 0.0, 0.0,	 	// позиции покупки
		0.0, 0.0, 0.0,			// позиции 3д текста
		-1
	},
	{ // детейл старый
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // аренда авто
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // СТО new
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // ферма
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // новый детейлинг
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу низ
		2285.8457,1802.5986,1000.9609, 	// позиции пикапа (выход)
		2290.1001,1803.0746,1000.9609, 270.0, // позиции входа
		4, 									// интерьер
		2307.5640,1753.4691,1001.0000, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу сред
		1587.1837,1836.6561,996.5703, 	// позиции пикапа (выход)
		1587.1583,1830.3068,996.5703,178.9150, // позиции входа
		4, 									// интерьер
		1575.3284,1777.5909,996.5703, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу элит
		-1587.7252,995.5857,1001.1563, 	// позиции пикапа (выход)
		-1587.7893,998.9899,1001.1563, 0.0, // позиции входа
		4, 									// интерьер
		-1592.8986,1019.0237,1001.1563,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // стройка
		0.0, 0.0, 0.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		4, 									// интерьер
		0.0,0.0,1110.0,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // кафе
		0.0, 0.0, 0.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		4, 									// интерьер
		0.0,0.0,1110.0,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	}
};
// Управление статистики
new Text3D: g_business_realtor_label;

new g_business_realtor_list[2048];
new g_business_realtor_list_idx[MAX_BUSINESS];
new biz_area[MAX_BUSINESS];
new home_area[MAX_HOUSES];

#define ObjectSlot				7
#define DistanceMusic           25.0

enum box_info
{
			box_object,
			box_music,
	Float:	box_x,
	Float:	box_y,
	Float:	box_z,
	Text3D: box_label
}
new BoxInfo[MAX_PLAYERS][box_info];
// --------------------

// Риелторское агенство
new Text3D: g_house_realtor_label;
new g_house_realtor_list[2048];
// --------------------

// магазин одежды
new const
	g_business_clothing_skins[2][40][2] =
{
	{// М,Скины
    	{154, 	  170000},
    	{155, 	  170000},
     	{156, 	  170000},
    	{110, 	  180000},
 	    {117, 	  190000},
     	{73, 	  230000},
     	{98, 	  250000},
    	{295, 	  250000},
     	{296, 	  250000},
     	{203, 	  350000},
     	{204, 	  350000},
		{29, 	  500000},
		{46, 	  500000},
		{68, 	  500000},
		{82, 	  560000},
     	{83, 	  560000},
     	{84, 	  560000},
      	{221, 	  740000},
      	{222, 	  780000},
       	{223, 	  900000},
       	{249, 	  900000},
       	{294, 	  970000},
      	{15308,   990000},
 	    {15304,   1100000},
    	{15307,   1300000},
       	{15302,   1400000},
     	{293, 	  1500000},
      	{15309,   1600000},
      	{15305,   1900000},
       	{15312,   2100000},
        {15303,   2200000},
        {15311,   2300000},
       	{15314,   2350000},
       	{15306,   2400000},
       	{15315,   2800000},
      	{228, 	  3000000},
     	{15300,   3200000},
     	{15301,   3400000},
        {15313,   4000000},
        {15310,   5000000}

	},
	{// Ж,Скины
		{31, 	50000},
		{38, 	50000},
		{39, 	50000},
		{53, 	50000},
		{129, 	50000},
		{130, 	50000},
		{54, 	50000},
		{88, 	55000},
		{89, 	65000},
		{151, 	75000},
		{152, 	95000},
		{12, 	100000},
    	{90, 	100000},
		{91, 	110000},
		{92, 	120000},
		{93, 	125000},
		{55, 	130000},
		{56, 	130000},
		{75, 	135000},
		{138, 	135000},
		{226, 	140000},
		{140, 	150000},
		{169, 	150000},
		{150,   180000},
		{195,   185000},
		{87,    190000},
   	   	{192, 	240000},
   	  	{193, 	245000},
   	   	{246, 	255000},
   	   	{257, 	265000},
		{41, 	300000},
		{216, 	330000},
		{233, 	350000},
	  	{263, 	380000},
		{214, 	450000},
		{237, 	480000},
	    {85, 	1000000},
	    {15318, 	1500000},
	    {15317, 	2000000},
	    {15319, 	3000000}
	}
};
new const
	g_business_sound[5] =
{
	17001,
	4203,
	21000,
	1135,
	1137
};


new g_business_gps[MAX_BUSINESS_GPS][E_BUSINESS_GPS_STRUCT];
new g_business_gps_count;
new bool: g_business_gps_init;

// ------------------------------------------
new g_fuel_station[MAX_FUEL_STATIONS][E_FUEL_STATION_STRUCT];
new g_fuel_station_loaded;

new const
	g_fuel_station_improvements[4][E_IMPROVEMENTS_STRUCT] =
{
	{"Емкость хранилища топлива I", 	150_500, 	0},
	{"Емкость хранилища топлива II", 	340_000, 0},
	{"Емкость хранилища топлива III",	780_000, 0},
	{"Отмена акцизного сбора", 			1040_000, 0}
};

// ------------------------------------------
new g_order[MAX_FUEL_STATIONS + MAX_BUSINESS][E_ORDER_STRUCT]; // заказы

new
	Float: g_med_bed_pos[][] = // позиции коек
{
	{430.1326, 1700.3933, 1001.6250},
	{426.3923,1700.0839, 1001.6250},
	{426.5665,1695.8234, 1001.6250},
	{430.1284,1695.6166, 1001.6250},
	{431.8658,1695.6968, 1001.6250},
	{435.4816,1695.9199, 1001.6250},
	{435.5240,1700.5588, 1001.6250},
	{431.8103,1700.9086, 1001.6250},
	{440.8421,1701.0095, 1001.6250},
	{437.0890,1700.7637, 1001.6250},
	{436.9731,1695.6979, 1001.6250},
	{440.7428,1696.0071, 1001.6250},
	{435.9330,1709.5024, 1001.6250},
	{439.3062,1709.3865, 1001.6250},
	{435.9662,1714.3098, 1001.6250},
	{439.3566,1714.2744, 1001.6250},
	{430.2705,1714.2532, 1001.6250},
	{434.0141,1714.2157, 1001.6250},
	{430.3193,1709.1953, 1001.6250},
	{434.4680,1709.6266, 1001.6250}
};
new g_med_bed_used[sizeof g_med_bed_pos] = {false, ...}; // занята ли койка
new Text3D: g_med_bed_label[sizeof g_med_bed_pos]; // текст койки

// ------------------------------------------
new
	Float: g_casino_table_pos[][] = // позиции столиков в казино
{
	{203.9476,-288.0615,1011.7900},
	{204.5841,-282.9256,1011.7900},
	{201.1470,-277.1536,1011.7900},
	{197.9208,-280.2674,1011.7900},
	{198.1707,-285.5460,1011.7900},
	{197.7222,-291.1371,1011.7900}
};
new g_casino_area[sizeof g_casino_table_pos]; // зона для использования /dice

// ------------------------------------------
enum
{
	ARMORY_TYPE_ARMOR = 0,
	ARMORY_TYPE_POLICE,
	ARMORY_TYPE_SECURITY
}

enum E_ARMORY_STRUCT
{
	A_DESCRIPTION[21],
	A_TYPE,
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z
}

new g_armory[5][E_ARMORY_STRUCT] =
{
	{"Воинская часть", ARMORY_TYPE_ARMOR, 311.2022,2928.9771,999.4766},
	{"Охрана правительства", ARMORY_TYPE_SECURITY, -2524.2407,1481.2822,1080.4944},
	{"ДПС", ARMORY_TYPE_POLICE, 875.7951, 2096.1982, 2721.8101},
	{"ППС", ARMORY_TYPE_POLICE, 2512.6992,1403.9711,1000.0214},
	{"ФСИН", ARMORY_TYPE_POLICE, -1784.2542,-2833.0803,19.2475}
};


// ------------------------------------------
#if defined RAND_WEATHER
new const
	g_weather[5][E_WEATHER_STRUCT] =
{
	{"ясная погода", 18, 	22},
	{"туман", 		 9, 	15},
	{"гроза", 		 8, 	17},
	{"ясная погода", 3, 	21},
	{"ясная погода", 1, 	23}
};
#endif

// ------------------------------------------
new g_player_setting[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];
new
	g_settings_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_OFF,
	SETTING_TYPE_ON
};

// ------------------------------------------
new g_player_gps[MAX_PLAYERS][E_PLAYER_GPS_STRUCT];
new
	g_gps_default_values[E_PLAYER_GPS_STRUCT] =
{
	GPS_STATUS_OFF,
	0.0,
	0.0,
	0.0
};

// ------------------------------------------
new const
	gps_public_places[15][E_GPS_STURCT] = // общественные места
{
    {1932.5382,1930.3793,15.6825, 24}, // Автошкола
	{1915.3258,2301.2603,15.5697, 24}, // Военкомат
	{2597.5601,-627.4660,12.3025, 	35}, // Автосалон "Низкий"
	{2326.0901,-1804.3500,22.4540, 	24}, // Автосалон "Средний"
	{1848.5205,2800.0142,12.1400, 55}, // Автосалон "Высокий"
	{-42.8289,925.0478,12.3321, 55}, // Салон воздушного транспорта
	{272.3471,-196.2970,3.2110, 55}, // Салон водного транспорта
	{-2241.7244,266.5900,24.5337, 55}, // Мото-Вело рынок
	{-2478.3271,2514.2371,46.4807, 55}, // Церковь
	{-239.8577,408.6191,14.2379, 55}, // Стадион
	{652.9271,2260.3232,12.0900, 	56}, // Рынок одежды
	{2497.3511,-319.9716,1.0860, 	56}, // Магазин оружия "Гарель"
	{2199.7095,-1771.2864,21.9619, 	56}, // Магазин оружия "Южный"
	{-2722.8621,-1342.0740,9.8674, 	56}, // Утилизация транспорта
	{-2767.8069,-1355.7389,9.8750, 	56} // Свалка

};

new const
	gps_transport[8][E_GPS_STURCT] = // транспортные узлы
{
	{841.8733,593.8214,15.8857, 	42}, // Ж/Д Вокзал Арзамаса
	{401.2787,1540.2919,12.1425, 	42}, // Автовокзал Арзамаса
	{-2472.3604,2838.9167,37.7199, 	42}, // Автовокзал Эдово
	{-482.6339,-1563.6407,41.0500, 	42}, // Автовокзал Бусаево
	{-2152.7932,-26.6614,26.7506, 	42}, // Автовокзал Южный
	{398.0066,-2331.2654,22.1630, 	42}, // Аэропорт Южный
	{-3851.6140,-5650.2808,7.8277, 	5},  // Аэропорт Майами
	{-1950.5817,2922.9744,5.9990, 	5}   // Порт Эдово
};

new const
	gps_state_organizations[8][E_GPS_STURCT] = // государственные организации
{
    {1779.3113,-2274.1074,10.8263, 	19}, // Дорожно-патрульная служба
	{189.7313,1445.7600,12.0100, 	30}, // Патрульно-постовая служба
	{540.0930,2858.5691,7.1949, 	30}, // Войсковая часть 091945
	{397.4090,1725.0508,11.9987,  30}, // Больница Арзамас
	{2403.7739,-2659.5410,21.9886, 	22}, // Больница Южный
	{-2703.8201,2732.0725,37.6602, 	42}, // ТРК "Ритм"
	{-2465.0830,1546.9559,53.0278, 	18},  // Правительство
    {-1703.3787,-2808.7634,14.1562 ,18} // Тюрьма
};

new const
	gps_gangs[3][E_GPS_STURCT] = // Базы банд и мафий
{
	{-202.2052,-1082.4509,41.0400, 	62}, // ОПГ "Центральное"
	{-2339.0620,160.4700,21.4261, 	61}, // ОПГ "Западное"
	{-2636.2278,2911.1460,37.6400, 	60}  // ОПГ "Северное"
};

new const
	gps_jobs[7][E_GPS_STURCT] = // по работе
{
	{962.0076,1592.5294,12.0900, 	11}, // Лесопилка
	{1665.9846,694.2512,13.7845, 	11}, // Ферма
	{116.3123,1672.5155,11.9725, 11}, // Грузчик
	{1987.2761,1023.0977,16.6964, 11},  // Рыбалка
	{2691.5610,2050.9458,9.2763, 51}, // Уборщик мусора
	{2563.5049,-2069.7883,21.9640, 	40}, // Грузчик вагонов
	{153.3422,-933.4910,40.5400, 	40} // Частная ферма
};

new const
	gps_banks[6][E_GPS_STURCT] = // банки
{
	{416.5710,573.5310,13.0119, 	52}, // Центральный банк
	{-2579.7283,2872.3232,37.6340, 52}, // Частный банк 'Развитие'
	{1850.3700,2039.3000,15.8850, 52},  // Частный банк 'Вектор'
	{2381.5200,-1901.9399,21.9330, 	52}, // Частный банк 'Рубль'
	{2360.5901,-2139.3799,23.0419, 	52},  // Частный банк 'Развитие'
	{-400.3099,-1160.9276,41.0600, 	52}  // Частный банк 'Вектор'
};

new const
	gps_entertainment[2][E_GPS_STURCT] = // развлечения
{
	{-2198.5500,-300.8070,23.5148, 	37}, // Казино 'Бендер'
	{2238.5701,-1717.0699,23.5537, 	37} // Казино 'Южный Бендер'

};

// ------------------------------------------
new help_info[14][E_HELP_INFO_STRUCT] =
{
	{
		"О проекте",
		""SERVER_NAME" RolePlay - один из начинающих проектов\n"\
		"многопользовательской GTA Criminal Russia Multiplayer. В настоящее\n"\
		"время у нас работает сервер, а увлекательные особенности игрового\n"\
		"процесса привлекают все больше и больше новых игроков.\n\n"\
		"Мы постарались объединить лучшие элементы ролевой игры SA-MP с\n"\
		"новыми идеями и возможностями. Вы сможете выбрать любимую\n"\
		"работу, или даже открыть свой собственный бизнес, зарабатывая\n"\
		"неплохие деньги. Может Вам захочется вступить в одну из организаций\n"\
		"и начать карьерный рост. Или же можно просто приятно провести\n"\
		"время, приняв участие в гонках, или сыграв с друзьями в морской бой.\n\n"\
		"Мы уверены, что "SERVER_NAME" RolePlay поможет Вам приятно провести пару\n"\
		"свободных часов за онлайн-игрой!"
	},
	{
		"Безопасность",
		"Ваш аккаунт - это ваша собственность. Никому не давайте свой пароль,\n"\
		"иначе Вы рискуете утратить все свои достижения. Не скачивайте\n"\
		"дополнительные программы - моды, читы, трейнеры. Все они\n"\
		"создаются злоумышленниками только с одной целью - заполучить\n"\
		"доступ к Вашему аккаунту.\n\n"\
		"Игроки "SERVER_NAME" RolePlay могут использовать расширенные настройки\n"\
		"безопасности,  которые практически исключает возможность взлома.\n"\
		"Подробнее: команда {66CCFF}/menu > Настройки безопасности."
	},
	{
		"Основы игры",
		"Играя на сервере, Вы получаете очки опыта. При накоплении их\n"\
		"определенного количества происходит переход на следующий уровень.\n"\
		"С каждым новым уровнем открываются новые возможности и\n"\
		"становятся доступны более интересные функции.\n\n"\
		"Для просмотра статистики воспользуйтесь командой /menu. В игровом\n"\
		"процессе постоянно нужно будет пользоваться подобными командами.\n"\
		"Они вводятся в игровой чат (F6) через косую черту, например /anim\n"\
		"/help и т. п. Введите /menu, далее выберите пункт \"Список команд\". Там\n"\
		"расположен полный перечень команд, а также кнопка \"Описание команд\"\n"\
		"для пояснения каждой из них."
	},
	{
		"RolePlay",
		"RolePlay - это такой вид игры, в котором у каждого есть своя роль. Будь\n"\
		"то таксист, водитель автобуса или шахтер, полицейский или мафиози,\n"\
		"член банды или военный. Каждый игрок определяет, кем он хочет быть.\n\n"\
		"RolePlay (RP) режим подразумевает знание некоторых правил и\n"\
		"понятий, несоблюдение которых влечет за собой наказания. С этой\n"\
		"информацией можно ознакомиться на нашем форуме, там же можно\n"\
		"задать все интересующие Вас вопросы по игровому процессу."
	},
	{
		"Первые шаги",
		"Первым делом необходимо заработать деньги. В государстве есть\n"\
		"предприятия, куда Вы сможете устроиться на первое время. Это шахта,\n"\
		"завод и городской склад. Работая там, Вы не только получите прибыль,\n"\
		"но и поддержите экономическую цепочку государства. А еще Вы\n"\
		"найдете новых друзей и получите немало удовольствия.\n\n"\
		"Все эти места можно найти, используя команду /gps. Добраться до\n"\
		"нужного объекта Вам поможет автобусный  транспорт. Прямо с ЖД\n"\
		"вокзала ходит автобус до шахты, а  до склада может подбросить любой\n"\
		"городской маршрут. Чтобы узнать подробнее о автобусных схемах,\n"\
		"введите команду /bushelp.\n\n"\
		"После того, как Вы заработаете деньги, отправляйтесь в автошколу и\n"\
		"сдавайте экзамен на права. Они позволят купить или арендовать\n"\
		"автомобиль, устроиться на более высокооплачиваемую и интересную\n"\
		"работу. Сдача на права стоит 600 рублей, перед поездкой в автошколу\n"\
		"убедитесь, что имеете такую сумму."
	},
	{
		"Общение",
		"Во время игры вам постоянно придется взаимодействовать с людьми. Существует 2\n"\
		"вида чатов:\n\n"\
		"\t1. IC (In Character) - общение внутри игры и только для внутренних игровых\n"\
		"\tситуаций. Чат вызывается клавишей F6.\n"\
		"\t2. OOC (Out Of Character) - все, что касается реального, не игрового мира.\n"\
		"\tНажмите F6, далее введите команду /n и свое сообщение. Оно выделится в\n"\
		"\tдвойные скобки.\n\n"\
		"Помимо этого, существуют много других способов общения. Вы можете звонить по\n"\
		"телефону или отправлять SMS сообщения. Вступив в организацию, появится\n"\
		"возможность связываться с сотрудниками по рации, а также масса других\n"\
		"интересных функций.\n\n"\
		"Информацию о командах общения можете узнать в соответствующем разделе меню:\n"\
		"{66CCFF}/menu > Список команд"
	},
	{
		"Транспорт",
		"Транспортная система - одна из важнейших в стране. С ее помощью возможна\n"\
		"стабильная работа большинства предприятий и организаций.\n\n"\
		"Основной вид транспорта - это автобус. Маршруты проложены по всему\n"\
		"государству и связывают все населенные пункты и предприятия.\n"\
		"Такси - наиболее удобный вид транспорта. Вы сможете добраться до любого места,\n"\
		"однако такая поездка будет стоить значительно дороже, чем на автобусе.\n"\
		"Поезд - быстрый и недорогой вид транспорта. Вы за несколько минут сможете\n"\
		"добраться до любой станции, но составы курсируют не так часто.\n\n"\
		"Государственной транспортной компании всегда требуются новые работники. О\n"\
		"вакансиях и требованиях можно узнать в ближайшей мэрии (/gps)."
	},
	{
		"Государственная система",
		"Вся игровая жизнь проходит под контролем правительства -\n"\
		"основной организации в государстве. В ее состав входят мэрии трех\n"\
		"городов и администрация Президента. Раз в месяц проходят\n"\
		"выборы, где каждый имеет право голоса. А перед этим проводится не\n"\
		"менее интересная избирательная кампания, где кандидаты на пост\n"\
		"Президента устраивают дебаты, концерты и митинги, завоевывая\n"\
		"своих новых избирателей…\n\n"\
		"Государственную систему и ее значение не опишешь несколькими\n"\
		"предложениями. Политическая жизнь необычайно насыщенная, и Вы\n"\
		"сами убедитесь в этом с первых дней жизни у нас!"
	},
	{
		"Жилье",
		"По всему государству расположены жилые дома, которые можно купить.\n"\
		"Каждый дом имеет свою стоимость, которую определяют множество\n"\
		"факторов. Можно купить вагончик за небольшие деньги, или отдать\n"\
		"миллионы за роскошный особняк в элитном районе.\n\n"\
		"Если у Вас есть дом, то вы сможете приобрести машину, или купить\n"\
		"дополнительные улучшения, такие как шкаф для хранения вещей или\n"\
		"автоматические двери. И это только некоторые возможности жилья.\n\n"\
		"В зависимости от престижности дома, с Вас будет взиматься ежедневная\n"\
		"квартплата. Если долгое время на счету будет сохраняться отрицательный\n"\
		"баланс, есть вероятность, что работники мэрии выселят Вас."
	},
	{
		"Бизнес и АЗС",
		"Вы можете открыть собственный бизнес, и зарабатывать неплохие\n"\
		"деньги. Это может быть небольшая пекарня, магазин одежды или\n"\
		"развлекательный центр, столовая, парикмахерская, либо обычная\n"\
		"продуктовая лавка. Или вы захотите стать совладельцем крупной сети\n"\
		"супермаркетов, ресторанов или театров. В нашей стране существует\n"\
		"огромное количество разнообразных предприятий.\n\n"\
		"Имея бизнес, перед Вами откроются большие возможности для\n"\
		"привлечения новых клиентов, что будет постоянно повышать Ваши\n"\
		"доходы. Вы сможете регулировать цены, улучшать различные\n"\
		"характеристики своего предприятия, одновременно проводя борьбу с\n"\
		"конкурентами.\n\n"\
		"АЗС (автозаправочные станции) - особый тип бизнеса, доходы от\n"\
		"которого значительно выше, чем от обычных предприятий. Для\n"\
		"нормальной работы АЗС нужно постоянно заключать контракты со\n"\
		"службой доставки топлива. Бизнесмен может владеть обычным\n"\
		"предприятием и АЗС одновременно."
	},
	{
		"Банки, хранение средств",
		"Каждый игрок получает свой счет в банке. На него перечисляется\n"\
		"зарплата и прочие доходы. Этот счет называется основным, и доступен в\n"\
		"любом банкомате.\n\n"\
		"Помимо этого, Вы можете воспользоваться услугами профессиональных\n"\
		"банков, найти которые поможет GPS. Там можно открыть до 8\n"\
		"дополнительных счетов. Каждый из них имеет свой номер, который\n"\
		"выдается банком при создании счета. Зная его, любой игрок может\n"\
		"перечислить вам деньги, даже если вы оффлайн. Например, можно\n"\
		"создать счет с названием \"Благотворительность\", написать об открытии\n"\
		"благотворительной организации через СМИ, сообщить номер счета, и\n"\
		"любой сможет перечислить на него деньги в отделении банка или через\n"\
		"банкомат.\n\n"\
		"Дополнительные счета можно настраивать, устанавливать защиту\n"\
		"PIN-кодом, изменять названия а также просматривать подробную\n"\
		"историю операций."
	},
	{
		"Организации",
		"В нашей стране работает большое количество организаций. Они могут\n"\
		"быть как официальными (правительство, МВД, мин. Обороны, мин.\n"\
		"Здравоохранения, ТВ и радио), так и неофициальными (банды и мафии).\n\n"\
		"При достижении определенного уровня, Вы можете вступить в любую из\n"\
		"организаций. Руководство некоторых может выдвигать и дополнительные\n"\
		"требования для вступления. Например, если Вы хотите попасть в банду,\n"\
		"то Вам придется продемонстрировать свое умение владеть оружием. А\n"\
		"если Вы видите себя в роли редактора объявлений, то нужно красиво и\n"\
		"грамотно писать. О дополнительных требованиях сообщит руководство\n"\
		"организации во время набора сотрудников.\n\n"\
		"После вступления, Вам будет доступно продвижение по карьерной\n"\
		"лестнице, постепенно откроются новые возможности. С каждым повышением\n"\
		"будет увеличиваться Ваша зарплата и статус в обществе. Вы найдете\n"\
		"новых друзей, а со временем сможете занять одну из руководящих\n"\
		"должностей. Жизнь в организации необычайно интересная и разнообразная!"
	},
	{
		"Работы",
		"В мэрии вашего города работает отдел занятости, где Вы можете\n"\
		"устроиться на любую работу. Следует обратить внимание, что некоторые\n"\
		"работы доступны при достижении определенного уровня. Вы не можете\n"\
		"одновременно быть оформленным на работу в мэрии и состоять в\n"\
		"организации.\n\n"\
		"Помимо основных работ существуют и дополнительные. К ним относятся\n"\
		"работы на шахте, заводе и складе. Такие работы можно совмещать с\n"\
		"основными и зарабатывать больше денег. Используйте команду /gps для\n"\
		"того, чтобы найти места расположения различных работ. На месте вы\n"\
		"получите подробные инструкции, как и что следует делать."
	},
	{
		"Развлечения",
		"Если у вас появилось свободное время и желание, то рекомендуем вам\n"\
		"посетить одно из развлекательных мероприятий. Каждые 3 часа\n"\
		"проводятся гонки, поучаствовать в которых может любой желающий.\n"\
		"Сейчас команда разработчиков проекта готовит и другие, не менее\n"\
		"интересные развлечения!\n\n"\
		"Помимо событий по расписанию, администраторы сервера очень часто\n"\
		"проводят разного рода мероприятия, участвовать в которых не только\n"\
		"интересно, но и выгодно - победители получают ценные подарки.\n\n"\
		"О проведении того или иного развлекательного мероприятия вы узнаете\n"\
		"заранее из информационных сообщений в общем чате."
	}
};
new help_info_items[35 * (sizeof help_info) + 1];
new help_info_CP;

// ------------------------------------------
new info_pickup[8][E_INFO_PICKUP_STRUCT] =
{
	// -------------------------------
	{
		"Шахта",
		"Тут Вы можете устроиться на работу шахтером.\n"\
		"Для этого найдите служебное помещение на заднем дворе шахты,\n"\
		"там Вам выдадут спецодежду и необходимый инструмент, а также\n"\
		"расскажут что делать дальше.\n\n"\
		"Шахта специализируется на добыче железной руды, из которой\n"\
		"потом в кузнице получают металл. Он широко применяется на\n"\
		"других предприятиях, поэтому регулярная добыча руды очень важна\n"\
		"для экономики государства.",
		"О шахте",
		0x66CCFFFF,
		-945.4503,1225.7882,10.5244
	},
	{
		"О подземной добыче",
		"Ученые выяснили что руда, которая находится в подземных залежах\n"\
		"намного качественнее той,  которую добывают на поверхности.\n"\
		"Именно поэтому было принято решение построить шахтовый\n"\
		"подъемник для подземной добычи.\n\n"\
		"В связи со сложностью подземных работ шахтерам полагается\n"\
		"премия за каждую партию руды, которая была добыта под землей.",
		"Подземная\nдобыча",
		0xFFCD00FF,
		-2557.5530,305.7109,-15.7709
	},
	{
		"О применении металла",
		"Полученный на шахте металл достаточно широко применяется\n"\
		"различными организациями, однако основной потребитель - это\n"\
		"завод по производству продуктов. Более подробно о назначении\n"\
		"этого предприятия можно узнать, приехав туда (/gps).\n\n"\
		"Для нормальной работы заводу постоянно требуется металл,\n"\
		"транспортировкой которого занимается его служба доставки. На\n"\
		"этом складе развозчики закупают металл для предприятия.",
		"Развозчики\nметалла",
		0xFFCD00FF,
		-931.5583,1234.7357,10.5244
	},
	// -------------------------------
	{
		"Завод по производству продуктов",
		"Здесь находится одно из важнейших предприятий в государстве - завод\n"\
		"по производству продуктов. От его регулярной работы зависит\n"\
		"деятельность всего частного бизнеса.\n\n"\
		"В данный момент можно устроиться на одну из двух специальностей -\n"\
		"работник производственного цеха или службы доставки. На месте Вы\n"\
		"найдете более подробную информацию о каждой из них.",
		"О заводе\nпо производству\nпродуктов",
		0xFFCD00FF,
		-1055.7217, 2142.2402, 38.0322
	},
	{
		"Завод - Склад исходных материалов",
		"На заводе хранятся материалы, которые используются работниками цеха\n"\
		"для изготовления продуктов, а также готовые продукты. Исходные\n"\
		"материалы доставляются на завод его службой доставки. Чтобы\n"\
		"устроиться туда на работу, пройдите в раздевалку рядом, далее\n"\
		"на территории завода подойдите и выберите транспорт в зависимости\n"\
		"от того, что именно Вы хотите привезти на завод.\n\n"\
		"Материалы покупаются за свой личный счёт, а Ваша выручка - это\n"\
		"разница, которая выходит при продаже материалов заводу.",
		"Работа в\nслужбе доставки",
		0xFFCD00FF,
		-1084.9386, 2167.1868, 38.0369
	},
	{
		"Завод - Производственный цех",
		"Чтобы начать рабочий день пройдите к любой раздевалке. Там же\n"\
		"можно закончить его и получить выручку. Далее пройдите к\n"\
		"раздаточному столу (отмечены желтыми маркерами), возьмите\n"\
		"металл, после чего отправляйтесь на любое свободное место в центре\n"\
		"цеха. Топливо, необходимое для изготовления продукта, автоматически\n"\
		"подается к каждому столу, и Вам не нужно брать его дополнительно.\n\n"\
		"Чем больше Вы работаете в цеху, тем выше ваши навыки производства,\n"\
		"и тем меньше шанс создать бракованный продукт. Навык будет\n"\
		"увеличиваться по мере создания новых продуктов.",
		"Работа в\nпроизводственном цеху",
		0xFFCD00FF,
		317.1251, -210.3592, 1006.5694
	},
	// -------------------------------
	{
		"Нефтезавод",
		"На нефтезаводе можно приобрести топливо для завода по производству\n"\
		"продуктов или для развоза его по заправочным станциям. Работают 2\n"\
		"линии, выбрать нужную Вам помогут указатели.\n\n"\
		"Запасы хранилища нефтезавода постоянно пополняются по мере\n"\
		"добычи и очистки нефти.",
		"Нефтезавод",
		0xFFCD00FF,
		1023.0947, 637.6918, 12.0272
	},
	// -------------------------------
 {
		"Работа лесоруба",
		"На этой работе Вы можете подзаработать денег, но для этого нужна\n"\
		"хорошая физическая подготовка и выносливость. Вашей задачей будет\n"\
		"рубить деревья на одинаковые по размеру куски и относить их на\n"\
		"склад. Чтобы устроиться на работу - пройдите в раздевалку рядом\n"\
		"и переоденьтесь в рабочую форму\n\n"\
		"Чем больше Вы нарубите деревьев и отнесете их на склад - тем\n"\
		"больше будет Ваш заработок",
		"{99FF99}Информация\n{ff9933}Лесоруб",
		0xff9933FF,
  		974.5491, 1573.0360, 12.5100
	}
};

// ------------------------------------------
new g_server_radio[7][E_SERVER_RADIO_STRUCT] =
{
	{
		"Радио Мелодия",
		"http://online-radiomelodia.tavrmedia.ua/RadioMelodia.m3u"
	},
	{
		"Kiss FM (UA)",
		"http://kissfm.ua/v3/kiss-2.m3u"
	},
	{
		"Радио Шансон",
		"http://radio02-cn03.akadostream.ru:8108/shanson128.mp3"
	},
	{
		"Радио RadmiX RolePlay",
		"http://online.radiorecord.ru:8101/rr_128"
	},
	{
		"Sky Radio",
		"http://stream05.akaver.com/skyradio_hi.mp3"
	},
	{
		"DFM Radio",
		"http://striiming.trio.ee/dfm64.mp3.m3u"
	},
	{
		"Rock Online",
		"http://skycast.su:2007/rock-online.m3u"
	}
};
new g_server_radio_items[37 * (sizeof g_server_radio) + 1];

new
	Float: g_jail_positions[3][4] =
{
	{643.6463,1619.0217,473.1300, 90.0},
	{643.6463,1619.0217,473.1300, 180.0},
	{643.6463,1619.0217,473.1300, 180.0}
}; // 406.3124,1540.0973,12.1425,84.3108 - позиция выхода

// ------------------------------------------
new anim_list[74][E_ANIM_LIST_STRUCT] =
{
	{"Танец 1",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 2",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 3",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 4", 						"",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 5",							"DANCING",			"DAN_Left_A",			4.0, true,  0, 0, 0, 0},
	{"Танец 6",							"DANCING",			"dnce_M_a",				4.0, true,  0, 0, 0, 0},
	{"Махать рукой",					"ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю",					"BEACH",			"bather",				4.0, true,  0, 0, 0, 0},
	{"Походка пьяного",					"PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0},
	{"Кувыркаться",						"ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1},
	{"Попрощаться",						"ped",				"endchat_03",			4.0, true,  1, 1, 1, 0},
	{"Читать рэп",						"benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0},
	{"Укрыться",						"ped",				"cower", 				3.0, true,  0, 0, 0, 0},
	{"Подложить бомбу",					"BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0},
	{"Надеть маску",					"SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0},
	{"Вытянуть руку перед собой",		"SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0},
	{"Сложить руки вместе",				"COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0},
	{"Съел что-то не то...",			"FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0},
	{"Перекусить",						"FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0},
	{"Шлепнуть кому-то по заднице",		"SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0},
	{"Предложить наркотики",			"DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0},
	{"Эффект электрошокера",			"CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0},
	{"Мужское курение",					"SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Женское курение",					"SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Присесть",						"BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0},
	{"Восточное единоборство",			"PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0},
	{"Выпить напиток",					"BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0},
	{"Расслаблено сесть",				"BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0},
	{"Поза вратаря",					"BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0},
	{"Facepalm",						"MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0},
	{"Элемент восточного танца",		"BSKTBALL",			"BBALL_idle",			4.0, true,  0, 0, 0, 0},
	{"Позвать кого-то",					"CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0},
	{"Руки вверх!",						"PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0},
	{"Спать на боку",					"CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0},
	{"Спать на спине",					"CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0},
	{"Смотреть по сторонам",			"DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0},
	{"Облокотиться на бок",				"GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0},
	{"Толкнуть боком",					"GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0},
	{"Раздумье",						"GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0},
	{"Лечь, оперевшись на ладонь",		"BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0},
	{"Сесть на стул",					"INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0},
	{"Сидеть уставшим за компьютером",	"INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть за столом",				"INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть и печатать",				"INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0},
	{"Взять что-то и рассмотреть",		"INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0},
	{"Сесть, закинув ногу на ногу",		"JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0},
	{"Отказаться от чего-либо",			"KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0},
	{"Поцелуй 1",						"KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 2",						"KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 3",						"KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0},
	{"Размахивать руками на месте",		"LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0},
	{"Искуственное дыхание",			"MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0},
	{"Пощечины для лежачего",			"MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0},
	{"Подглядывать через что-то",		"MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0},
	{"Движения тореодора",				"MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0},
	{"Сесть на стул (2)",				"MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0},
	{"Сесть на стул (3)",				"ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0},
	{"Смотреть наверх",					"ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0},
	{"Указать рукой наверх",			"ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0},
	{"Быть в страхе",					"ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0},
	{"Призывать к чему-либо",			"ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0},
	{"Сходить по-маленькому",			"PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0},
	{"Гангстерский жест",				"GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0},
	{"Голосовать на остановке",			"ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0},
	{"Удар ногой",						"POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0},
	{"Стучаться в дверь",				"POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0},
	{"Устроить бунт",					"RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0},
	{"Пританцовывать",					"RAPPING",			"RAP_C_Loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю (2)",				"SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0},
	{"Плохое самочувствие",				"SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0},
	{"Приветствие 1",					"RIOT",				"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0},
	{"Приветствие 2",					"GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 3",					"GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 4",					"GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0}
};
new anim_list_items[34 * (sizeof(anim_list)+1) + 1];
new
	g_anim_libs[38][13] =
{
	"BAR",
	"BASEBALL",
	"BEACH",
	"BENCHPRESS",
	"BLOWJOBZ",
	"BOMBER",
	"BSKTBALL",
	"CAMERA",
	"CARRY",
	"COP_AMBIENT",
	"CRACK",
	"CRIB",
	"DANCING",
	"DEALER",
	"FOOD",
	"GANGS",
	"GHANDS",
	"GRAVEYARD",
	"INT_HOUSE",
	"INT_OFFICE",
	"INT_SHOP",
	"JST_BUISNESS",
	"KISSING",
	"LOWRIDER",
	"MEDIC",
	"MISC",
	"ON_LOOKERS",
	"OTB",
	"PARK",
	"PAULNMAC",
	"PED",
	"POLICE",
	"RAPPING",
	"RIOT",
	"SHOP",
	"SMOKING",
	"SWAT",
	"SWEET"
};

// ------------------------------------------
new map_icons[13][E_MAP_ICONS_STRUCT] =
{
	{117.5701, 1673.5845,  11.9800, 	11},	// грузчик
	{-948.3215, 1224.2800,  10.5244, 	11}, 	// шахтер
	{1934.0605,1938.6450,16.0539, 	36}, 	// автошкола
	//{414.0169,  588.0422,  11.5527, 	52}, 	// Центральный банк арзамаса
	//{-194.2551,629.3170,11.4776, 	24}, 	// отдел кадров (устройство на работу)
	{399.4401, 1726.5481,  12.1003, 	22}, 	// больница Арзамаса
	{210.2719, 	1472.5919, 	12.6686, 	30},	// ГИБДД
	{1777.9568, -2269.8176,  10.8263, 	30},	// УМВД
 	{-2464.7283, 1544.4351,  53.0278, 	19}, 	// Правительство
	{-1085.168, 2182.3547, 	38.0679, 	51},  	// завод
	{-2243.6758, 263.2350, 24.5337, 55}, 	// Мото-Вело рынок
	{2325.1411,-1788.7749,22.3169, 55}, // авторынок "арзамас"
	{2596.5276, -640.1475, 12.3025, 55}, 	// авторынок "батырево"
	{146.0771,-954.0016,40.9170,    53},     // частная ферма
	{1919.4358,2304.0698,15.5697,	42}     // военкомат
};
new g_teleport[42][E_TELEPORT_STRUCT] =
{
    {"ГТРК «Ритм»", -2709.1516,2733.4182,37.6602, 0, -2715.7451, 2727.5413, 999.5078, 269.7591, 1, 69}, // вход в ТРК
	{"", -2718.3999, 2727.5486, 999.5078, 69, -2707.6863,2732.8467,37.6602, 0.00, 0, 0}, // выход из ТРК
	// -------------------------------------------------------------------------------
	// -------------------
	{"Стадион", -236.8071,408.3662,14.2830, 0, -140.5103, 395.4778, 1001.0000, 95.5560, 1, 0}, // вход в Стадион
	{"", -137.6778,395.2314,1001.0000, 0, -239.3561,408.3936,14.2461,75.9723, 0, 0}, // выход из Стадиона
	// -------------------------------------------------------------------------------
	{"Федеральная\nСлужба Исполнений Наказаний", -1810.0074,-2877.6965,22.6314, 0, -1813.2711, -2876.0510, 22.6460, 63.3664, 0, 0}, // Вход ФСИН
	{"",-1810.8726,-2877.2639,22.6460, 0, -1808.3999, -2878.4211, 22.6281, 241.6339, 0, 0}, // Выход ФСИН
	// -------------------------------------------------------------------------------
	{"Проходная", -1786.5482,-2873.1545,13.8938, 0, -1788.1593,-2875.7788,13.8938,143.5362, 0, 0}, // Проходная ФСИН вход
	{"", -1787.1229,-2874.5974,13.8938, 0, -1784.3188,-2870.0166,13.8938,305.7374, 0, 0}, // Выход с проходной ФСИН
	//--------------------------------------------------------------------------------
	//{"Центр занятости", -193.3146,624.1332,12.0010, 0, 489.8380, -12.5441, 1052.0000, 358.9150, 1, 4},
	//{"", 489.8348, -15.8222, 1052.0000, 4, -192.6339,627.1646,12.0010,358.3594, 0, 0},
	//-----------------------------------------------------------------------------------207.3224,826.5656,1001.0038,359.4357,
	{"Вход в больницу", 419.2628,1747.7078,21.0424, 0, 441.1416,1705.1367,1001.0000,90.0, 3, 5},
	{"Выход на крышу", 443.2307,1705.0769,1001.0000, 5, 419.1524,1746.1851,21.0380, 170.0000, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	// -------------------------------------------------------------------------------
	{"Вход в больницу", 410.1217,1721.4606,21.0389, 0, 414.7213,1697.2114,1001.0000,267.4599, 3, 5},
	{"Выход на крышу", 412.3455,1697.2816,1001.0000, 5, 412.0363,1720.9791,21.0380, 256.4593, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	// -------------------------------------------------------------------------------
	{"Городская больница", 403.0397,1723.4918,12.2724, 0, 417.4515,1696.5631,1001.0000, 0.0, 3, 5},
	{"", 417.3105,1694.5424,1001.0000, 5, 399.9062,1724.2375,12.0924,72.4485, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	// -------------------------------------------------------------------------------
	 //======[больница г.Южный============
 	{"больница г.Южный", 2403.8708,-2656.5151,22.2756, 0, 417.2722,1696.8584,1001.0000, 0.0, 3, 5},
	{"", 417.2587,1694.5411,1001.0000, 5, 2403.9500,-2659.4148,21.9886,181.3546, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	//============================
	{"Лифт\n{33CC00}1 этаж", 417.8792, 1742.1666, -53.8500, -1, 416.7893,1737.4160,-14.0784,163.0029, -1, -1},
	{"Лифт\n{33CC00}2 этаж", 417.7155,1740.3840,-14.0784, -1, 417.0959,1739.3732,-53.8500,161.5858, -1, -1},
	//=====================================================================================================
	//{"Центральный\nБанк", 418.8865,572.0838,13.0119, 0, 303.7817,299.4347,1001.0000,88.0242, 5, 16}, // вход в Центральный Банк Арзамаса
	//{"", 306.2370,299.3502,1001.0000, 16, 416.9048,572.9172,13.0119, 68.00, 0, 0}, // выход из Центральный Банк Арзамаса
	// -------------------------------------------------------------------------------
    {"Казарма\n{33CC00}'Армейская'", 338.1666,2927.6721,7.4233, 0, 317.9288,2933.6672,999.4766,0.0, 1, 22}, // вход в казарму
	{"", 317.7869,2930.5464,999.4766, 22, 337.9993,2925.5193,7.2982,175.7594, 0, 0}, // выход из казармы
	// ------------------------------------------------------------------------------
    {"Столовая\n{33CC00}'Армейская'", 390.4323,2858.9849,7.4287, 0, 393.3072,2867.7070,999.4688,267.5214, 1, 20}, // Вход в столовую МО
	{"", 390.9559,2867.7114,999.4844, 20, 387.8917,2858.6716,7.3047,89.1336, 0, 0}, // Выход со столовой МО
	//------------------------------------------------------------------------------
	{"Мед-пункт\n{33CC00}'Армейский'", 417.6210,2926.5542,7.4233, 0, 428.7844,2935.0559,999.5078,88.9666, 1, 23}, // вход в мед-пункт МО
	{"", 431.6185,2935.0408,999.5078, 23, 416.8508,2923.8188,7.3047,179.6880, 0, 0}, // Выход с мед-пунка МО
	// -------------------------------------------------------------------------------
	{"Здание\nДорожно-патрульной службы", 1775.3497,-2274.0618,11.0294, 0, 904.8409, 2088.8264, 2721.8018, 90.0, 1, 5}, // вход ДПС
	{"", 906.5211, 2088.8450, 2721.8018, 5, 1776.8285,-2273.9387,11.0294,258.1017, 0, 0}, // выход ДПС
	// -------------------------------------------------------------------------------
	{"Здание\nПатрульно-постовой службы", 185.2671,1446.6707,12.3578, 0, 2479.5635,1388.5884,1000.0408, 0.0, 4, 6}, // вход ППС
	{"", 2480.2617,1385.6453,1000.0530, 6, 187.6046, 1446.1509, 12.0100, 260.0693, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход ППС
 	// -------------------------------------------------------------------------------
	// -------------------------------------------------------------------------------
	{"Церковь", -2478.2612,2518.5479,46.6686, 0, -1293.3381,735.7744,2002.0037,181.7841, 5, 23},
	{"", -1293.4255,738.3327,2002.0037, 23, -2478.3037,2515.9275,46.4331,178.0475, 0, 0},
	//----------------------------------------------------------------------------------
 	{"Правительство\nобласти", -2464.2288,1542.4948,53.0278, 0, -2500.8599,1468.4968,1080.5190, 0.8444, 5, 21}, // Правительство вход
	{"", -2500.8672,1464.9657,1080.5190, 21, -2465.0701,1546.9366,53.0278, 90.0000, 0, 0}, // выход из Правительства
	// -------------------------------------------------------------------------------
	{"Центральное ОПГ", -196.2611,-1078.4705,41.0400, 0, 2557.3525, -1852.1796, 2522.8152, 0.0, 7, 1}, // Арзамасская ОПГ вход
	{"", 2557.3513, -1854.0551, 2522.8152, 1, -197.3667,-1080.7216,41.0300,150.0880, 0, 0}, // Арзамасская ОПГ выход
	// -------------------------------------------------------------------------------
	//{"Военкомат", 1919.4358,2304.0698,15.5697, 0, -1809.4722,-1382.3430,1597.9100,1.1084, 7, 3}, // военкомат вход
	//{"", -1809.3483,-1384.6478,1597.9100, 3, 1917.9813,2303.2090,15.5697, 120.4762, 0, 0}, // военкомат выход
	//-------------------------------------------------------------------
	//{"Спортзал", 2350.0869,-2138.3147,22.5854, 0, -332.9270,440.3335,2513.6201,92.1932, 3, 18}, // армия вход в склад
	//{"", -330.3326,440.3643,2513.6201, 18, 2349.7517,-2141.4951,21.9596,178.0475, 0, 0}, // армия
	// -------------------------------------------------------------------------------
	{"Западное ОПГ", -2356.5979,150.7329,21.4445, 0, -2616.3389, 2907.5034, 2738.6248, 270.0, 7, 2}, // Батыревская ОПГ вход
	{"", -2614.4797, 2907.4226, 2738.6248, 2, -2353.9238,150.2818,21.4445,258.6240, 0, 0}, // Батыревская ОПГ выход
	// -------------------------------------------------------------------------------
	{"Северное ОПГ", -2632.3489,2911.1221,37.6400, 0, 2337.0112, 407.0067, 2824.9211, 90.0, 7, 3}, // Лыткаринская ОПГ вход
	{"", 2338.9392, 407.0079, 2824.9211, 3, -2634.3479,2910.9287,37.6400,91.8676, 0, 0}, // Лыткаринская ОПГ выход

	{"Военкомат", 1919.4358,2304.0698,15.5697, 0, -1809.4722,-1382.3430,1597.9100,1.1084, 7, 3}, // военкомат вход
	{"", -1809.3483,-1384.6478,1597.9100, 3, 1917.9813,2303.2090,15.5697, 120.4762, 0, 0}, // военкомат выход

	{"Автошкола", 1928.9601,1930.5726,15.7747, 0, 2004.6975,-1994.6841,1001.2400,225.9155, 4, 3}, // Автошкола вход
	{"", 2002.6439,-1992.5829,1001.2400, 3, 1933.2070,1930.3019,15.6825,268.0475, 0, 0} // Автошкола выход
	// -------------------------------------------------------------------------------
};
new g_teleport_object[MAX_PLAYERS][2];

#define MAX_WHEAT 13

enum WheatInfo
{
	Float: wheat_x,
	Float: wheat_y,
	Float: wheat_z,
	Float: wheat_rotz,
	wheat_state,
	wheat_value
}
new Float: WheatPos[MAX_WHEAT][WheatInfo] =
{
	{145.0, -894.4, 40.1, 17.9, 0, 10},
	{142.1, -885.0, 40.1, 17.9, 0, 10},
	{134.6, -897.8, 40.1, 17.9, 0, 10},
	{126.9, -900.1, 40.1, 17.9, 0, 10},
	{120.8, -894.5, 40.1, 17.9, 0, 10},
	{123.0, -901.3, 40.1, 17.9, 0, 10},
	{128.5, -891.9, 40.1, 17.9, 0, 10},
	{128.5, -891.9, 40.1, 17.9, 0, 10},
	{133.4, -890.3, 40.1, 17.9, 0, 10},
	{156.0, -891.1, 40.1, 17.9, 0, 10},
	{153.7, -884.4, 40.1, 17.9, 0, 10},
	{159.2, -882.5, 40.1, 17.9, 0, 10},
	{150.3, -911.8, 40.1, 17.9, 0, 10}
};
new wheat_id[MAX_WHEAT];
new wheat_time[MAX_WHEAT];
new Text3D: wheat_label[MAX_WHEAT];

// ------------------------------------------
enum
	E_TELEPORT_LIST
{
	TL_NAME[27],
	Float: TL_POS_X,
	Float: TL_POS_Y,
	Float: TL_POS_Z
};

new
	g_teleport_list[][E_TELEPORT_LIST] =
{
	{"ППС",					189.3872,1446.6946,12.0100},
	{"Гостиница 2",					188.0826,495.0762,12.0010},
	{"Канализация",				594.2696, -450.0134, 975.0784},
	{"Ком. помещение",		 	587.5798, -349.8280, 977.448},
	{"Вентиляция",		 		607.7148, -314.8979, 976.4209},
	{"Хранилище",				897.7623, -786.0826, 1000.8899},
	{"База Автомехаников",		1175.0863, 2506.8088, 12.4769},
	{"Казино",					-105.6111,941.6457,12.1494},
	{"Тайный инт в Лыткарино",	-2424.5818, 2846.3291, 40.7908},
	{"Квартира, средний класс",	648.2059, -12.0030, 1001.7723},
	{"Квартира, высокий класс",	574.6052, 0.7850, 1001.8796},
	{"Дом, средний класс", 		237.0204, -137.1225, 999.0594},
	{"Респавн №1",				537.7201,1676.0344,19.1206},
	{"ФСИН", -1791.9889,-2777.7490,39.9753},
	{"Респавн №2",				-89.0553,304.6467,12.1026},
	{"Эдово",					-2368.0400,2730.2029,37.7892},
	{"Лыткарино",				-2452.0974,172.7007,21.1570},
	{"Батырево",				1857.3860,2248.2798,15.2729},
	{"Салон сотовой связи",		662.4909, -11.8230, 1010.8436}
	// {"Подьезд",					630.4014, -176.7587, 997.6467}
};

// ------------------------------------------
new driving_tutorial[4][E_DRIVING_TUTORIAL_STRUCT] =
{
	{
		"Управление системами автомобиля",
		"{669900}Ниже приведен перечень клавиш управления транспортом и их описание:\n\n"\
		"{3399FF}Левый Ctrl\t{FFFFFF}завести или заглушить двигатель\n"\
		"{3399FF}Левый Alt\t{FFFFFF}включить или выключить фары\n"\
		"{3399FF}Правый Ctrl\t{FFFFFF}открыть или закрыть машину {9966FF}(только для домашней машины)\n"\
		"{3399FF}Num 4\t\t{FFFFFF}включить или выключить ограничитель скорости\n"\
		"{3399FF}Num 8\t\t{FFFFFF}управление капотом и багажником {9966FF}(если они имеются у данной модели)\n"\
		"{3399FF}Num 2\t\t{FFFFFF}заправить транспорт {9966FF}(подробнее в следующих разделах)\n\n"\
		"{FFFF00}Постарайтесь запомнить назначения клавиш управления\n"\
		"Когда будете готовы нажмите \"Далее\""
	},
	{
		"Панель индикаторов",
		"{FFFFFF}Панель индикаторов появляется в правом нижнем углу экрана как только вы заходите в любой транспорт\n"\
		"Она информирует водителя о его текущем состоянии. Итак, рассмотрим основные элементы этой панели:\n\n"\
		"{FFFF00}Значок капельки-текущее состояние топлива\n"\
		"{3366FF}Значок ключа-текущее состояние авто\n"\
		"{00CCFF}\n"\
		"{006699}1000\t\t{FFFFFF}показывает \"здоровье\" транспорта. Если у него нет повреждений, то оно будет равно 1000\n\n"\
		"{FFFF00}На второй строчке находятся цветовые индикаторы:\n"\
		"{00CC00}Open\t\t{FFFFFF}(или {FF3300}Close{FFFFFF}) показывают открыт или закрыт транспорт\n"\
		"{FF3300}max\t\t{FFFFFF}загорается красным при включенном ограничителе скорости\n"\
		"E\t\tзагорается красным при низком уровне бензина в баке\n"\
		"{CC99CC}S\t\t{FFFFFF}загорается пурпурным при включенной сигнализации\n"\
		"{009933}M\t\t{FFFFFF}индикатор включенного двигателя\n"\
		"L\t\tиндикатор включенного света фар\n"\
		"B\t\tзагорается красным при открытом багажнике или капоте\n\n"\
		"{9966FF}Примечания:\n"\
		"1. Панель индикаторов обновляется раз в секунду\n"\
		"2. Выключенные индикаторы во втором ряду {FFFFFF}белого {9966FF}цвета"
	},
	{
		"Заправка и ремонт",
		"{FFFFFF}Транспорт время от времени необходимо заправлять. Сделать это можно двумя способами:\n\n"\
		"{FFFF00}1. На заправочной станции\n"\
		"{FFFFFF}Для этого подъедьте к ней и нажмите {3366FF}Num 2{FFFFFF}. Каждое нажатие заправляет ваш транспорт на 10 литров\n\n"\
		"{FFFF00}2. Заправка с канистры\n"\
		"{FFFFFF}Такой способ подойдет если автомобиль не может ездить из-за отсутствия бензина\n"\
		"Найдите ближайшую заправку и напишите {3366FF}/buyfuel{FFFFFF}. Вы получите канистру емкостью 15 литров\n"\
		"После этого просто подойдите к транспорту, который хотите заправить. 15 литров вполне хватит чтобы доехать до ближайшей заправки\n\n"\
		"{66CCCC}Полезные советы:\n"\
		"1. Бензобак может вместить максимум 150 литров бензина. Это хватит на 50 минут беспрерывной работы двигателя\n"\
		"2. Всегда выключайте двигатель когда выходите из машины или долго стоите на месте! Этим вы намного уменьшите расход бензина\n"\
		"3. Чтобы не бежать за канистрой бензина если бензобак опустел можно вызвать механика (/c)\n\n"\
		"{99CC66}Починить транспорт можно в любом покрасочном салоне либо вызвав механика (/c)\n"\
		"Обратите внимание, что если купленный или арендованный вами транспорт взорвется, то придется покупать или арендовать его заново!"
	},
	{
		"Правила дорожного движения",
		"{66CC00}1. Общие положения\n"\
		"{FFFFFF}Обгон транспортных средств разрешен только с левой стороны\n"\
		"При этом водитель должен убедиться что встречная полоса свободна на достаточном для обгона расстоянии\n"\
		"При ДТП водителям рекомендуется вызвать полицию (/c) и дождаться приезда ДПС\n"\
		"{66CC00}2. Скорость движения\n"\
		"{FFFFFF}Ограничение скорости движения в пределах городов и поселков 50 км/ч\n"\
		"За пределами населенных пунктов ограничений скорости нет\n"\
		"Для соблюдения скоростного режима рекомендуется пользоваться ограничителем скорости, который включается клавишей {3366FF}Num 4\n"\
		"{66CC00}3. Остановка и стоянка\n"\
		"{FFFFFF}Остановка и стоянка транспортных средств разрешается только на обочине дороги или в специально отведенных для этого местах\n"\
		"За нарушение этого правила ваш автомобиль может быть отправлен на штрафстоянку\n"\
		"{66CC00}4. ДПС\n"\
		"{FFFFFF}При виде автомобиля с включенной сиреной водитель обязан снизить скорость и прижаться к обочине\n"\
		"Водитель обязан предъявить работнику ДПС документы, которые он попросит"
	}
};

new const
	g_ostanovka[14][E_OST_STRUCT] =
{
	{-527.1439, 960.4191, 11.0000, 180.0},
	{-355.3593, 624.9027, 10.9943, -8.0},
	{188.9087, 822.6100, 10.9987, -20.0},
	{-39.1347, 909.0502, 11.1431, -20.0},
	{421.5296, 1951.3121, 6.8208, 70.0},
	{-457.9447, 1231.0685, 17.4199, -5.0},
	{1880.4998, 2088.6189, 14.8307, 90.0},
	{2101.3455, 2947.5771, 11.1331, 180.0},
	{2013.0243, 1317.7867, 25.5246, 180.0},
	{2893.5012, 490.9197, 23.4728, 93.0},
	{2436.8955, -781.6520, 11.5396, 0.0},
	{954.3122, -733.2476, 39.8515, 17.0},
	{-506.4674, -1667.4541, 39.9777, 148.0},
	{-2363.1611, 2494.8374, 42.0439, 207.0}
};

new const
	g_ferm_car[7][E_FER_STRUCT] =
{
	{1647.3988,627.0963,16.1266,0.0},
	{1652.5632,626.9904,16.1256,0.0},
	{1657.5375,627.3453,16.1260,0.0},
	{1662.8005,626.9750,16.1258,0.0},
	{1667.5024,627.3765,16.1263,0.0},
	{1674.3234,626.7551,16.1260,0.0},
	{1642.7064,626.9388,16.1264,0.0}
};

new const
	Float: driving_exam_route[17][3] = // маршрут практики
{
	{1900.7908,1919.1426,15.6825}, // 1
	{1896.2399,1929.8578,15.6825},
	{1886.9697,1938.0577,15.6825},
	{1899.6377,1952.3391,15.6825},
	{1943.9271,1945.5989,15.6825},
	{1965.2697,1968.2080,15.9516},
	{1925.0671,2055.1104,16.0615},
	{1798.2020,2055.2830,16.0659},
	{1772.2804,2131.1018,16.2177},
	{1770.8986,2213.6902,16.0989}, //10
	{1830.0009,2225.8489,16.0133},
	{1882.1818,2225.3032,16.1027},
	{1888.9912,2172.4089,16.0873},
	{1889.0834,2063.8489,16.0790},
	{1961.8196,2041.6542,16.0634},
	{1965.1128,1956.2479,16.0272},
	{1938.8502,1943.8624,15.8810}
};

new driving_exam[12][E_DRIVING_EXAM_STRUCT] =
{
	{
		"Что означает слово двигатель на панели индикаторов?",
		"Включенные фары\n"\
		"Выключенные фары\n"\
		"Вкл/выкл двигатель\n"\
		"Открытый багажник\n"\
		"Закрытый багажник\n"\
		"Включенная сигнализация\n"\
		"Открытый капот",
		3
	},
	{
		"Какой клавишей вкл. и откл. фары?",
		"Левый Ctrl\n"\
		"Левый Alt\n"\
		"Правый Ctrl\n"\
		"Num 2\n"\
		"Num 4",
		2
	},
	{
		"Ограничение скорости движения по городу:",
		"50 км/ч\n"\
		"60 км/ч\n"\
		"70 км/ч\n"\
		"80 км/ч\n"\
		"90 км/ч",
		1
	},
	{
		"Чтобы заправиться на заправочной станции надо:",
		"Вызвать механика\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ни один из вариантов не подходит",
		5
	},
	{
		"Как включить или выключить двигатель?",
		"Ввести команду {0099CC}/buyfuel\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Ввести команду {0099CC}/start\n"\
		"Нажать {0099CC}Num 2\n"\
		"Все ответы неверны",
		2
	},
	{
		"Что означает Значок капельки: 45 на панели индикаторов?",
		"Текущая скорость {0099CC}45 км/ч\n"\
		"Уровень повреждений авто {0099CC}45 единиц\n"\
		"Цвет транспорта {0099CC}45\n"\
		"В бензобаке осталось {0099CC}45 литров\n"\
		"Нет правильного ответа",
		4
	},
	{
		"Что можно сделать, чтобы сократить расход бензина?",
		"Выйти из машины\n"\
		"Выключить двигатель\n"\
		"Отключить фары / сигнализацию\n"\
		"Включить ограничитеть скорости\n"\
		"Закрыть машину\n"\
		"Отремонтировать транспорт",
		2
	},
	{
		"Как открыть или закрыть домашнюю машину?",
		"Нажать {0099CC}Num 8\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Ввести команду {0099CC}/buyfuel\n"\
		"Все ответы неверны",
		3
	},
	{
		"При полном бензобаке время работы двигателя?",
		"20 минут\n"\
		"30 минут\n"\
		"40 минут\n"\
		"50 минут\n"\
		"1 час\n"\
		"более 1 часа",
		4
	},
	{
		"Как включить или выключить ограничитель скорости?",
		"Клавишей {0099CC}Num 2\n"\
		"Клавишей {0099CC}Num 4\n"\
		"Клавишей {0099CC}H\n"\
		"Клавишей {0099CC}левый Ctrl\n"\
		"Нет правильных ответов",
		2
	},
	{
		"Что означает значок ключика на панели индикатора?",
		"Уровень бензина.\n"\
		"Был открыт капот или багажник\n"\
		"Была включена сигнализация\n"\
		"Низкий уровень бензина в баке\n"\
		"Уровень \"здоровья\" авто.\n"\
		"Включены фары",
		5
	},
	{
		"При виде автомобиля с включенной сиреной вы:",
		"Продолжите движение с нормальной скоростью\n"\
		"Продолжите движение снизив скорость\n"\
		"Увеличите скорость\n"\
		"Попытаетесь скрыться\n"\
		"Среди предложенных вариантов нет правильного",
		5
	}
};
new driving_exam_CP; // чекпоинт сдачи на права

new g_player_driving_exam[MAX_PLAYERS][E_PLAYER_DRIVING_EXAM_STRUCT];
new g_driving_exam_default_values[E_PLAYER_DRIVING_EXAM_STRUCT] = {-1, ...};

// ------------------------------------------
new const
	g_atm[4][E_ATM_STRUCT] =
{
	{-510.197, 1506.33, 1000.57, 90.00},
	{2237.04, -1720.73, 22.61, 90.00},
	{2261.11, -2104.73, 21.5887, -90.00},
	{2392.84 , -2311.0 , 21.721, 0.00}
};
new const
	atm_item_sum[7] = {100, 200, 500, 1000, 2000, 5000, 10000};

// ------------------------------------------
enum
{
	GATE_ID_DRIVING_SCHOOL = 0, // автошкола
	GATE_ID_DPS,				// ДПС
	GATE_ID_PPS,				// ППС
	GATE_ID_ARMY,				// воинская часть
}
new
	g_gate[MAX_GATES][E_GATE_STRUCT] =
{
	{"АШ", GATE_TYPE_BARRIER, 1906.5250, 2248.1470, 14.6375, 90.0, 0.0, 0.0, 0.0, 0.0, GATE_STATUS_CLOSE, {966, 968}} //,
};
new g_gate_button[MAX_GATES][2];
new g_gate_buttons_count;

// ------------------------------------------
new g_bank_account[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];
new g_player_bank_transfer[MAX_PLAYERS][E_BANK_TRANSFER_STRUCT];

// ------------------------------------------
new g_player_listitem[MAX_PLAYERS][32];
new g_listitem_values[sizeof(g_player_listitem[])] = {0, ...};

new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};
// ------------------------------------------
new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const
	g_offer_default_values[E_PLAYER_OFFER_STURCT] =
{
	INVALID_PLAYER_ID,	// отправленое предложение игроку
	INVALID_PLAYER_ID, 	// входящее предложение от игрока
	OFFER_TYPE_NONE, 	// входящее предложение
	{-1, -1} 			// значение входящего предложения
};

// ------------------------------------------
new g_player_phone_call[MAX_PLAYERS][E_PHONE_CALL_STRUCT];
new
	g_phone_call_default_values[E_PHONE_CALL_STRUCT] =
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	true
};

// ------------------------------------------
new g_player_phone_book[MAX_PLAYERS][MAX_PHONE_BOOK_CONTACTS][E_PHONE_BOOK_STRUCT];

new g_player_phone_book_contacts[MAX_PLAYERS] = {0, ...};
new g_player_phone_book_select_cont[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new bool: g_player_phone_book_init[MAX_PLAYERS] = {false, ...};

new bool: g_admin_ears;
// ------------------------------------------
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] =
{
	0,
	0
};

// ------------------------------------------
new g_bus_routes[4][E_BUS_ROUTE_STRUCT] =
{
    {"Завод",					0, 0},
    {"Арзамас — Шахта", 		0, 0},
	{"Арзамас — Лесопилка", 	0, 0},
	{"Междугородный",			0, 0}
};
new g_bus_routes_list[40 * (sizeof g_bus_routes) + 1];

new g_bus_route[sizeof g_bus_routes][128][E_BUS_ROUTE_STEP_STRUCT] =
{
	{ // Арзамас — Завод
		{804.0963,759.3428,11.5305, false}, // Остановка. Начало
		{807.1755,796.6493,11.5641, false},
		{781.3264,807.5077,11.5999, false},
		{777.8690,819.6682,11.5316, true}, // Остановка. У начала
		{788.4371,866.4033,11.6193, false},
		{783.4990,922.7868,11.6198, false},
		{724.8358,993.2124,11.6059, false},
		{653.1397,1069.6758,11.6175, false},
		{561.9534,1134.0715,11.6187, false},
		{449.6951,1146.5718,11.5336, false},
		{329.1326,1160.0376,11.5335, false},
		{298.2704,1177.5603,11.5327, false},
		{309.5753,1272.1222,25.1132, false},
		{315.7555,1380.6211,25.1481, false},
		{330.3693,1529.8469,11.5333, false},
		{343.0248,1663.2931,11.5401, false},
		{375.4905,1668.9850,11.5333, false},
		{503.5475,1655.0031,11.5790, true}, // Остановка. Ж/Д
		{489.3311,1671.6630,11.5805, false},
		{431.1419,1677.8170,11.5810, false},
		{355.8469,1680.8859,11.5314, false},
		{259.5001,1690.6257,11.5322, false},
		{181.8215,1607.5934,11.5337, false},
		{167.0842,1536.0015,11.5199, false},
		{205.3887,1520.2244,11.5335, false},
		{197.9151,1469.6622,11.5450, true}, // Остановка. ДПС
		{190.1873,1427.9275,11.5637, false},
		{163.9051,1426.8372,11.5826, false},
		{122.8895,1341.6932,11.5332, false},
		{96.6886,1215.3988,11.5352, false},
		{57.0523,1018.1173,11.5311, false},
		{27.1411,928.3366,11.5312, true}, // Остановка
		{13.8773,892.2931,11.5308, false},
		{-41.1742,903.9217,11.5342, false},
		{-102.4958,927.5821,11.5341, false},
		{-133.8530,940.9750,11.5408, true}, // Остановка. Диана
		{-183.8621,958.4486,11.5337, false},
		{-306.6450,978.6062,11.5342, false},
		{-371.0784,988.8942,11.5317, false},
		{-372.4652,1165.7811,11.8071, false},
		{-438.3715,1225.9684,17.1975, false},
		{-576.4442,1247.1815,20.2868, false},
		{-705.8118,1352.2239,20.2824, false},
		{-842.2934,1505.1222,23.4898, false},
		{-1079.2939,1587.7079,34.6537, false},
		{-1258.3180,1735.7507,35.0802, false},
		{-1273.3208,1829.1630,47.9041, false},
		{-1116.6130,1916.5510,45.3853, false},
		{-937.7880,1950.7174,45.3854, false},
		{-928.0551,1994.3236,42.8219, false},
		{-1014.0432,2057.9045,39.3367, false},
		{-1050.4742,2141.9661,37.5642, false},
		{-1054.7905,2188.3250,37.6235, true}, // Остановка. Завод
		{-1061.1486,2167.9629,37.5780, false},
		{-1020.0714,2094.6267,41.5694, false},
		{-937.3565,2001.8298,42.3229, false},
		{-937.0294,1956.2084,45.3855, false},
		{-1083.1884,1939.5122,45.3857, false},
		{-1187.5752,1884.4073,45.3857, false},
		{-1277.6946,1835.0138,47.8955, false},
		{-1255.6719,1686.1691,35.0179, false},
		{-1115.2577,1586.8229,35.0175, false},
		{-832.9486,1488.2214,22.4248, false},
		{-716.5996,1343.6909,20.2838, false},
		{-543.3049,1228.0764,20.2832, false},
		{-443.8060,1213.6299,17.1999, false},
		{-385.3225,1078.7760,11.5347, false},
		{-381.1606,987.6623,11.5335, false},
		{-348.7059,964.4541,11.5347, false},
		{-177.1574,940.5574,11.5372, false},
		{86.4576,841.9703,11.5345, false},
		{203.3397,802.2369,11.5338, false},
		{251.4614,863.7733,11.5351, false},
		{293.7149,1139.5114,11.5326, false},
		{379.9212,1146.9272,11.5334, false},
		{490.6891,1136.0294,11.6247, false},
		{579.8975,1121.5365,11.6111, false},
		{681.5302,1036.2469,11.6320, false},
		{772.9662,929.1800,11.6632, false},
		{789.5692,883.0237,11.6275, false},
		{777.8110,808.4282,11.5681, false},
		{803.6309,781.3038,11.5477, false}, // Конец. На начало
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Военный завод
		{785.8178,733.8877,11.5791, false},
		{791.5625,803.0234,11.6428, false},
		{780.6000,820.5082,11.5576, true}, // Остановка
		{782.2230,850.4604,11.6209, false},
		{797.8289,905.1847,11.6307, false},
		{735.5002,980.0391,11.6114, false},
		{668.3276,1057.2330,11.6193, false},
		{628.2550,1090.2228,11.6125, false},
		{558.3439,1134.0463,11.6268, false},
		{460.2363,1145.8254,11.5322, false},
		{312.0343,1162.4246,11.5330, false},
		{298.6253,1186.1451,11.8133, false},
		{311.8743,1304.6932,25.1465, false},
		{319.2766,1420.3534,24.8471, false},
		{328.4369,1513.4751,11.5330, false},
		{339.8739,1631.2836,11.5335, false},
		{361.1027,1670.5613,11.5337, false},
		{499.2119,1655.4762,11.5790, true}, // Остановка. Ж/Д
		{483.3976,1672.8696,11.5811, false},
		{358.6141,1685.3270,11.5333, false},
		{352.4224,1712.0112,11.5332, false},
		{407.0217,1857.8940,10.7249, false},
		{453.1217,2003.7932,5.4445, false},
		{524.8339,2178.4915,11.5330, false},
		{611.4445,2339.9956,11.5314, false},
		{721.7032,2492.1174,11.5331, false},
		{928.3762,2613.5100,11.5328, false},
		{1057.4771,2689.3472,11.5322, false},
		{1087.8593,2705.2639,11.5312, true}, // Остановка. Механики
		{1142.6873,2739.4819,11.5327, false},
		{1256.6520,2791.2935,11.5326, false},
		{1356.3508,2886.7231,11.5327, false},
		{1486.0658,2952.2690,11.5334, false},
		{1692.0784,2952.7112,11.5336, false},
		{1914.5933,2952.6221,11.5322, false},
		{2058.9854,2952.4248,11.8603, false},
		{2069.7026,2919.9446,12.2003, false},
		{1973.4771,2761.8638,14.6938, false},
		{1811.7389,2578.0510,14.7418, false},
		{1772.3623,2473.5608,15.4931, false},
		{1806.0780,2480.2139,15.2224, false},
		{1812.7412,2514.3738,15.1960, true}, // Остановка. МЧС
		{1783.1885,2519.0115,15.1971, false},
		{1759.0511,2495.6106,15.4911, false},
		{1841.2544,2375.0576,15.4712, false},
		{1886.6233,2291.0061,15.4862, false},
		{1885.6765,2241.8660,15.4848, true}, // Остановка. Автошкола
		{1887.0750,2164.2449,15.3981, false},
		{1886.0106,2065.0347,15.4061, false},
		{1918.8690,2052.6516,15.4023, false},
		{1962.1838,2013.8074,15.4443, false},
		{1961.6436,1916.9833,15.0466, false},
		{2003.5902,1903.0016,15.0450, false},
		{2125.3281,1904.3101,15.4286, false},
		{2258.8311,1903.8417,15.4487, false},
		{2357.8098,1907.3590,15.4196, false},
		{2372.2461,1815.7744,3.9887, false},
		{2374.5317,1772.6249,-1.5149, true}, // Остановка. Шахта
		{2378.6646,1806.1595,2.6092, false},
		{2377.6704,1896.5450,14.9163, false},
		{2510.3728,1894.5598,15.7670, false},
		{2658.1067,1894.8307,15.7658, false},
		{2732.9934,1895.0286,15.7915, false},
		{2758.0222,1960.3650,16.5103, false},
		{2765.5271,2139.8530,17.4811, false},
		{2744.9497,2430.8582,15.0301, false},
		{2700.9429,2674.8462,16.2729, false},
		{2651.3350,2814.2864,19.6743, false},
		{2444.3723,2951.4492,22.7301, false},
		{2128.1565,2967.6182,10.9400, false},
		{1806.9750,2968.4924,11.5330, false},
		{1506.0865,2967.6211,11.5317, false},
		{1333.6772,2880.7810,11.5333, false},
		{1216.1221,2792.5459,11.5331, false},
		{895.8690,2610.9192,11.5325, false},
		{649.9877,2442.0422,11.5330, false},
		{475.1823,2114.6855,10.9737, false},
		{390.2416,1851.0229,11.1688, false},
		{320.9989,1534.4823,11.5325, false},
		{296.8673,1243.0820,24.1259, false},
		{328.7727,1152.7751,11.5334, false},
		{543.6455,1130.1685,11.6124, false},
		{643.2175,1071.0590,11.6220, false},
		{737.5670,968.7892,11.6173, false},
		{793.5345,902.0283,11.6005, false},
		{770.5798,836.4699,11.5224, false},
		{791.3061,803.1495,11.6429, false},
		{801.8435,770.3690,11.5319, true}, // Остановка. На начало
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Товарный порт
		{780.4178,727.2006,11.6021, false},
		{798.3979,800.8493,11.6381, false},
		{780.1346,821.4786,11.5538, true}, // Остановка.
		{797.7029,888.6456,11.6051, false},
		{673.8666,1050.9592,11.6403, false},
		{573.7012,1132.0703,11.6548, false},
		{309.1552,1161.7903,11.5405, false},
		{306.6163,1246.9374,24.7787, false},
		{317.6702,1398.3157,25.1483, false},
		{336.0221,1584.2373,11.5332, false},
		{391.7831,1667.9263,11.5810, false},
		{501.4952,1654.9908,11.5792, true}, // Остановка. Ж/Д
		{467.4220,1669.4408,11.5811, false},
		{357.7765,1680.7673,11.5335, false},
		{266.1915,1690.1921,11.5330, false},
		{170.3249,1547.4205,11.5339, false},
		{93.1306,1169.7964,11.5354, false},
		{49.4706,984.1645,11.5333, false},
		{28.5538,931.5492,11.5411, true}, // Остановка.
		{19.1627,890.9694,11.5343, false},
		{96.5565,836.9958,11.5344, false},
		{192.6803,801.1299,11.5343, false},
		{178.9009,713.8533,11.5345, false},
		{122.1390,555.6907,11.5334, false},
		{154.6347,516.4274,11.5359, false},
		{233.3019,485.1019,11.5314, true}, // Остановка.
		{374.0205,431.1635,13.1213, false},
		{530.7493,376.7204,24.7750, false},
		{616.2057,143.1509,24.8471, false},
		{632.8180,-108.0908,13.5322, false},
		{684.5417,-176.1120,3.8981, false},
		{939.5273,-173.5067,3.8265, false},
		{1131.1257,-172.2897,3.8225, false},
		{1297.7870,-220.1640,3.8427, false},
		{1642.6250,-225.6595,3.7952, true}, // Остановка. МЧС
		{1785.7213,-224.0345,3.8294, false},
		{1793.1658,-281.3170,3.8178, false},
		{1857.9297,-312.3727,12.8249, false},
		{2039.8502,-329.4668,16.5561, false},
		{2111.2561,-488.9375,16.5540, false},
		{2121.5532,-652.9269,16.5321, false},
		{2139.5938,-802.5333,14.3969, false},
		{2182.0945,-811.3425,14.4699, false},
		{2386.7263,-798.0540,12.3403, false},
		{2400.5815,-755.9683,11.8368, false},
		{2427.1692,-617.4779,11.9096, true}, // Остановка. Лесорубы
		{2395.2302,-647.2762,11.8409, false},
		{2394.9399,-773.0400,11.8373, false},
		{2324.7573,-790.0723,12.6925, false},
		{2171.1777,-804.1882,14.3471, false},
		{2138.3821,-757.6460,14.4885, false},
		{2132.2083,-561.0246,16.5556, false},
		{2092.4204,-376.5380,16.5570, false},
		{1896.9425,-297.6446,16.5329, false},
		{1799.3170,-281.2733,3.8201, false},
		{1769.4387,-218.6841,3.8279, false},
		{1529.4707,-218.4079,3.8221, false},
		{1208.8314,-189.7240,3.8389, false},
		{884.9227,-168.7566,3.8019, false},
		{694.2114,-160.4446,3.8801, false},
		{647.6750,-98.5738,14.9823, false},
		{638.9136,85.5042,26.2247, false},
		{585.8060,358.9880,24.7759, false},
		{467.1305,413.2276,24.7821, false},
		{199.2020,514.2813,11.5329, false},
		{138.2974,538.3425,11.5330, false},
		{139.1546,572.7580,11.5344, false},
		{149.9627,595.9069,11.5312, true}, // Остановка
		{171.7104,657.4917,11.5327, false},
		{236.5534,826.3988,11.5343, false},
		{277.9897,997.0731,11.7726, false},
		{293.8099,1139.3777,11.5327, false},
		{391.7524,1145.9104,11.5334, false},
		{565.0103,1128.1143,11.6137, false},
		{662.4227,1054.6722,11.6063, false},
		{771.2302,930.1013,11.6353, false},
		{789.8817,885.7687,11.6138, false},
		{788.1815,804.4682,11.6427, false},
		{791.0405,758.6101,11.5322, true}, // Остановка. В конец
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ЖД Вокзал ЛС — Автошкола
		{787.9899,737.3123,11.5710, false},
		{793.3630,802.1804,11.6428, false},
		{780.4693,821.8019,11.5442, true}, // Остановка
		{798.4664,891.6359,11.6129, false},
		{777.0601,930.0786,11.6229, false},
		{676.1186,1049.5214,11.6240, false},
		{579.9954,1128.9869,11.6161, false},
		{312.6412,1161.5272,11.5302, false},
		{305.7333,1242.8467,24.1905, false},
		{328.4750,1513.5687,11.5329, false},
		{342.3961,1660.9371,11.5325, false},
		{513.0868,1695.3979,11.5476, true}, // Остановка. Ж/Д Арзамас
		{481.3032,1673.3887,11.5806, false},
		{357.2000,1685.8246,11.5335, false},
		{398.0929,1833.5394,11.4720, false},
		{493.0337,2119.4668,11.2766, false},
		{665.3842,2440.8296,11.5328, false},
		{1040.7347,2679.5566,11.5327, false},
		{1084.5813,2703.6069,11.5290, true}, // Остановка. Механики
		{1178.5232,2759.8821,11.5312, false},
		{1367.8978,2902.7573,11.5328, false},
		{1617.1583,2952.2393,11.5329, false},
		{2010.3989,2952.2800,12.0703, false},
		{2070.5879,2924.1306,12.0026, false},
		{1760.0981,2546.4333,14.7490, false},
		{1767.3916,2483.2244,15.4942, false},
		{1806.6837,2479.9934,15.2230, false},
		{1814.6934,2512.1545,15.1823, true}, // Остановка. Автовокзал Батырево
		{1766.5570,2509.9673,15.2375, false},
		{1803.5001,2430.9045,15.4893, false},
		{1885.8512,2243.0408,15.4826, true}, // Остановка. Автошкола
		{1886.0441,2065.9612,15.4069, false},
		{1957.3859,2043.8644,15.4010, false},
		{1962.4486,1914.6210,15.0558, false},
		{2039.8900,1904.8533,15.4537, false},
		{2285.5439,1904.1499,15.4653, false},
		{2374.9858,1770.2043,-1.6893, true}, // Остановка. Шахта
		{2378.3889,1806.2183,2.6175, false},
		{2371.7773,1891.0868,15.3369, false},
		{2502.8794,1893.8397,15.7669, false},
		{2732.8333,1895.5476,15.7916, false},
		{2731.6873,1778.2247,15.3588, false},
		{2554.7383,1502.4097,11.8261, false},
		{2680.1140,1131.4674,19.4727, false},
		{2850.3950,739.0171,31.4996, false},
		{2898.8374,230.6370,12.1628, false},
		{2897.7466,-158.5092,24.1596, false},
		{2822.4792,-355.3473,26.3462, false},
		{2765.8787,-442.3799,23.0099, true}, // Остановка. У Гарели
		{2740.4727,-561.4509,23.2926, false},
		{2605.1946,-727.5572,12.4791, false},
		{2471.5764,-784.3000,11.8714, true}, // Остановка. Анашан
		{2267.1509,-792.5616,13.1236, false},
		{2052.6919,-832.4374,15.3386, false},
		{1836.0454,-952.8130,13.6815, false},
		{1745.2719,-978.0508,11.8243, false},
		{1706.8506,-814.2382,34.0767, false},
		{1557.1355,-687.5613,40.8769, false},
		{1270.7510,-635.9218,40.8940, false},
		{946.0969,-740.0735,40.4627, false},
		{832.7188,-774.3143,40.0398, true}, // Остановка. Корякино
		{568.1791,-858.9227,32.6240, false},
		{155.3385,-988.5547,40.4751, false},
		{-200.0290,-1185.5417,40.4756, false},
		{-439.1202,-1582.6089,40.4808, false},
		{-476.0527,-1640.8954,40.4473, true}, // Остановка. Бусаево
		{-601.8219,-1867.0111,40.4838, false},
		{-733.5305,-2230.3132,40.9539, false},
		{-734.6354,-2363.3152,38.6685, false},
		{-969.1361,-2421.0542,30.9774, false},
		{-1169.9259,-2478.7441,28.0161, false},
		{-1290.1781,-2505.9141,28.0137, false},
		{-1559.1868,-2374.3394,28.2283, false},
		{-1947.1075,-2117.1072,16.4737, false},
		{-2244.3979,-1747.0317,10.1017, false},
		{-2469.0754,-1417.8335,9.4151, false},
		{-2603.2778,-1275.6914,8.7736, false},
		{-2590.4954,-1160.1410,16.6581, false},
		{-2589.7524,-823.7059,29.2303, false},
		{-2637.9370,-410.8065,24.6845, false},
		{-2654.8884,-54.1762,10.4663, false},
		{-2658.8003,197.2989,10.4648, false},
		{-2564.9153,231.0769,12.3016, false},
		{-2397.9492,232.0039,16.8059, false},
		{-2259.1260,215.5012,24.0472, false},
		{-2212.2849,193.4742,24.0604, true}, // Остановка. Лыткарино
		{-2263.0046,224.2567,23.9677, false},
		{-2560.5115,237.5524,12.4220, false},
		{-2647.8083,269.1061,12.8730, false},
		{-2630.2310,639.0733,12.8736, false},
		{-2641.8301,880.2888,12.8752, false},
		{-2654.6033,1092.2378,12.8751, false},
		{-2497.8696,1262.8240,14.4634, false},
		{-2341.2803,1700.3708,52.5478, false},
		{-2387.7502,1777.2646,52.5545, true}, // Остановка. Кремль
		{-2565.1953,1895.2128,52.5480, false},
		{-2626.2312,2000.1528,52.5475, false},
		{-2609.6714,2299.9053,52.5271, false},
		{-2440.1873,2476.7908,42.8585, false},
		{-2373.6965,2561.7986,42.0734, false},
		{-2373.8145,2746.8027,36.9760, false},
		{-2458.7029,2815.8057,36.9642, false},
		{-2488.0146,2825.8862,37.1673, false},
		{-2477.0903,2836.7332,37.1635, true}, // Остановка. Эдово
		{-2511.1621,2822.4543,36.9658, false},
		{-2386.0806,2811.4109,36.9635, false},
		{-2379.3640,2596.0176,42.0872, false},
		{-2345.0049,2512.1946,42.2063, false},
		{-2110.6428,2492.1580,39.2072, false},
		{-1828.6377,2491.4763,48.3243, false},
		{-1653.6299,2496.0674,42.434, false},
		{-1477.2354,2388.6394,43.9515, false},
		{-1393.5088,2207.4861,45.1462, false},
		{-1308.1812,1877.5199,42.4691, false},
		{-1210.6033,1619.9750,35.0147, true}, // Остановка
		{-951.2002,1530.2247,28.9315, false},
		{-714.3251,1339.3547,20.2827, false},
		{-543.6758,1228.1691,20.2812, false},
		{-386.0414,1155.8013,11.5202, false},
		{-381.0251,988.7273,11.5319, false},
		{-283.9621,968.2222,11.5340, false},
		{3.8998,878.4814,11.5407, false},
		{374.4273,736.4326,11.5336, false},
		{518.6818,681.0500,11.5329, false},
		{709.2870,653.0804,11.5337, false},
		{787.5905,804.1089,11.6397, false},
		{796.8284,755.3444,11.5307, true}, // Остановка. На начало
		{0.0, 0.0, 0.0, false}
	}
};

// ------------------------------------------
new g_temp_jobs[8][E_TEMP_JOB_STRUCT] =
{
    {122.8705,1665.5835,11.9725, 		5000,	{27, 198}},  	// грузчик
	{-2547.1499,315.9477,-15.7640, 		2000,	{16, 198}},  	// шахтер
	{-1088.2688, 2167.4514, 38.0373, 	2000,	{16, 198}}, 	// завод (служба доставки)
	{264.9694, -215.0847, 1006.5694, 	1000, {258, 198}},  	// завод
	{2670.2024, 2077.8396, 8.0782, 	    3000,  {37, 41}},
	{2567.2446, -2061.1614, 21.9245, 	    3000,  {16, 198}},
 	{973.8169, 1580.0791, 12.5103, 	    10000,{161, 198}},		// лесоруб
	{-439.8116,-1479.1514,3041.0100,		20000, {161, 198}}    // ферма
};

// ---------------------------------------
new const
	Float: loader_job_unload_cp[2][3] = // позиции загрузки (грузчик)
{
	{123.8582,1681.7891,6.1441},
	{116.6058,1682.4241,6.1508}
};

new const
	loader_job_attach_obj[3][E_LOADER_JOB_ATTACH_OBJ_STRUCT] = // грузы (аттач) (грузчик)
{
	{1271,	0.044,	0.238,	-0.246, 	-110.6, 4.4,	-15.1},
	{2912,	-0.192,	0.225,	-0.295, 	-15.5, 	78.3, 	-6.3},
	{2912,	-0.035,	0.156,	-0.246, 	-112.4,	-1.1,	-12.4}
};

new loader_job_area; // зона порта (грузчик)

// ---------------------------------------
new const
	Float: miner_job_load_pos[12][3] = // позиции загрузки (шахтер)
{
	{-2356.0146, 305.7356, -16.6097},
	{-2340.7490, 299.3799, -17.3427},
	{-2350.4976, 287.7560, -17.5309},
	{-2342.8169, 283.4503, -16.9091},
	{-2327.5500, 291.7040, -17.2260},
	{-2318.9883, 290.0369, -17.3081},
	{-2314.9695, 282.2800, -16.9994},
	{-2320.3093, 276.6367, -17.2911},
	{-2325.9856, 271.0159, -17.7371},
	{-2351.9478, 304.3510, -17.1377},
	{-2344.1338, 301.0893, -16.6733},
	{-2343.0308, 287.8077, -16.8458}
};
new miner_job_load_cp[sizeof miner_job_load_pos] = {-1, ...};
new miner_carriage[1][E_MINER_CARRIAGE_STRUCT] =
{
	{-2375.1228, 294.7194, -15.4815, -2548.1228, 294.7194, -15.4815, false, 0, -1}
};
new miner_job_area; // зона шахты (шахтер)

// ---------------------------------------
new Text3D: factory_store_label[2];

new factory_job_area;
new factory_put_zone;
new
	Float: factory_take_metall_pos[5][3] =
{
	{305.7406, -199.4771, 1006.5694},
	{300.1811, -199.4061, 1006.5694},
	{316.2808, -215.5371, 1006.5694},
	{306.0207, -219.4838, 1006.5694},
	{264.5123, -208.1692, 1006.5694}
};
new factory_desk[16][E_FACTORY_DESK_STRUCT];

// ---------------------------------------
new const
	Float: lumberjack_job_chop_cp[15][2] =
{
	{965.0106,1653.1444},
	{958.7408,1649.9896},
	{950.2076,1646.7640},
	{952.0360,1630.5216},
	{947.9209,1618.0022},
	{939.3055,1618.0784},
	{923.2740,1618.7035},
	{914.7445,1620.4099},
	{980.4582,1626.1537},
	{976.8768,1610.4199},
	{963.2822,1605.2108},
	{979.5535,1651.1121},
	{910.9739,1641.0089},
	{911.4091,1636.2573},
	{907.2287,1628.2643}
};

new const
	Float: fermer_job_chop_cp[9][3] =
{
	{1550.6417,592.7999,15.9206},
	{1547.6688,609.4649,15.9206},
	{1553.4082,642.1102,15.9206},
	{1538.3589,660.8503,15.9206},
	{1551.5924,679.8952,15.9206},
	{1543.1272,711.3235,15.9206},
	{1529.5884,723.3226,15.9282},
	{1545.8151,757.9183,15.9206},
	{1529.4720,764.8444,15.9206}

};

// ------------------------------------------
new Cache: charity_cache_data; 	// кэш пожертвований
new g_last_pay_day_time; 		// время последнего пейдея
new g_last_lottery_time; 		// время последнего розыгрыша лотереи
new g_last_m_timer_time;		// время последнего 1-мин таймера

// ------------------------------------------
new const
	numeric_name[7][11] =
{
	"первого",
	"второго",
	"третьего",
	"четвертого",
	"пятого",
	"шестого",
	"седьмого"
};

new const
	job_name[5][18] =
{
	"Безработный",
	"Водитель автобуса",
	"Таксист",
	"Автомеханик",
	"Дальнобойщик"
};

new const
	month_name[12][8 + 1] =
{
	"января",
	"февраля",
	"марта",
	"апреля",
	"мая",
	"июня",
	"июля",
	"августа",
	"сентября",
	"октября",
	"ноября",
	"декабря"
};

new const
	day_name[7][12] =
{
	"Понедельник",
	"Вторник",
	"Среда",
	"Четверг",
	"Пятница",
	"Суббота",
	"Воскресенье"
};

new join_to_job_CP; // прием на работу


new army_ammo_CP; // взятие патронов со склада воинской части
new yz_bil_CP;
new yz_posad_CP;
new mia_bil_CP;
new mia_posad_CP;
new samolet_CP;
// ------------------------------------------
new const
	g_item_type[7][E_ITEM_STRUCT] =
{
	{"Error",		"ххх", 	false},
	{"Деньги", 		"руб", 	true},
	{"Канистра", 	"л", 	false},
	{"Аптечка", 	"шт", 	true},
	{"Металл", 		"кг", 	true},
	{"Патроны", 	"шт", 	true},
	{"Наркотики", 	"г", 	true}
};

enum // типы предметов
{
	ITEM_TYPE_NONE = 0,	// пустой слот
	ITEM_TYPE_MONEY = 1, // деньги
	ITEM_TYPE_JERRICAN, // канистра
	ITEM_TYPE_MED, // аптечка
	ITEM_TYPE_METALL, // металл
	ITEM_TYPE_AMMO,	// патроны
	ITEM_TYPE_DRUGS, // наркотики
}

// ------------------------------------------
new const
	g_player_improvements[5][E_IMPROVEMENTS_STRUCT] =
{
	{"Выносливость", 	250_000, 	5},
	{"Решительность", 	500_000, 	8},
	{"Рюкзак", 			750_000, 	11},
	{"Мастер вождения", 1000_000, 	15},
	{"Полная экипировка",1500_000, 	17}
};

new chat_message[5][128 + 1];
new const
	reg_skin_data[2][6] = // скины при регистрации
{
	{78,135,137,212,213,230}, // мужские
	{77,89,130,196,197,31} // женские
};

new const
	Float: spawn_pos_data[4][4] = // позиции спавнов
{
	{843.0772,601.0900,15.8857,90.2642},	// Арзамас 407.4102,1539.9807,12.1425, 90.00
	{407.4102,1539.9807,12.1425, 90.00},	// Арзамас (авто-вокзал) / 3 лвл
	{2382.8149,-2330.9619,22.1525,270.1579},  // Южный
	{-492.8541,-1553.1908,41.8000,56.4770}	// Эдово / 10 лвл
};

stock GetSkillBar(amount)
{
	new tmp_bar[101];
	if(!amount) return tmp_bar;
 	for(new i = 0; i < amount; i++)
		strcat(tmp_bar, "|");

 	return tmp_bar;
}

stock ShowPlayerSkills(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new tmp_skills[1560];
	format
	(
	    tmp_skills,
	    sizeof(tmp_skills),
	    "Сила\t\t%d%s\t%s\n\
	    {99ff66}\
		Colt 45\t\t%d%s\t%s\n\
		SD Pistol\t%d%s\t%s\n\
	    Desert Eagle\t%d%s\t%s\n\
	    Shotgun\t%d%s\t%s\n\
	    MP5\t\t%d%s\t%s\n\
	    AK47\t\t%d%s\t%s\n\
	    M4\t\t%d%s\t%s\n\
	    Sniper Rifle\t%d%s\t%s\n\
		Sawnoff\t%d%s\t%s\n\
		Combat SG\t%d%s\t%s\n\
		Micro Uzi\t%d%s\t%s\
	    ",
	    GetPlayerData(playerid, P_POWER), "%",
	    GetSkillBar(GetPlayerData(playerid, P_POWER)),
	    GetPlayerData(playerid, P_SKILL_COLT), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COLT)),
		GetPlayerData(playerid, P_SKILL_SDPISTOL), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SDPISTOL)),
		GetPlayerData(playerid, P_SKILL_DEAGLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_DEAGLE)),
		GetPlayerData(playerid, P_SKILL_SHOTGUN), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SHOTGUN)),
		GetPlayerData(playerid, P_SKILL_MP5), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MP5)),
		GetPlayerData(playerid, P_SKILL_AK47), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_AK47)),
		GetPlayerData(playerid, P_SKILL_M4), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_M4)),
		GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE)),
		GetPlayerData(playerid, P_SKILL_SAWNOFF), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SAWNOFF)),
		GetPlayerData(playerid, P_SKILL_COMBAT_SG), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COMBAT_SG)),
		GetPlayerData(playerid, P_SKILL_MICRO_UZI), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MICRO_UZI))
	);
	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Навыки владения оружием", tmp_skills, "Закрыть", "");

	return 1;
}

stock GetPlayerSkillAmount(playerid, skill_index)
{
	new amount;

	switch(skill_index)
	{
		case 0: amount = GetPlayerData(playerid, P_POWER);
		case 1: amount = GetPlayerData(playerid, P_SKILL_COLT);
		case 2: amount = GetPlayerData(playerid, P_SKILL_SDPISTOL);
		case 3: amount = GetPlayerData(playerid, P_SKILL_DEAGLE);
		case 4: amount = GetPlayerData(playerid, P_SKILL_SHOTGUN);
		case 5: amount = GetPlayerData(playerid, P_SKILL_MP5);
		case 6: amount = GetPlayerData(playerid, P_SKILL_AK47);
		case 7: amount = GetPlayerData(playerid, P_SKILL_M4);
		case 8: amount = GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE);
		case 9: amount = GetPlayerData(playerid, P_SKILL_SAWNOFF);
		case 10: amount = GetPlayerData(playerid, P_SKILL_COMBAT_SG);
		case 11: amount = GetPlayerData(playerid, P_SKILL_MICRO_UZI);
	}

	return amount;
}

stock SetPlayerSkillAmount(playerid, skill_index, amount)
{
	switch(skill_index)
	{
		case 0: SetPlayerData(playerid, P_POWER, amount);
		case 1: SetPlayerData(playerid, P_SKILL_COLT, amount);
		case 2: SetPlayerData(playerid, P_SKILL_SDPISTOL, amount);
		case 3: SetPlayerData(playerid, P_SKILL_DEAGLE, amount);
		case 4: SetPlayerData(playerid, P_SKILL_SHOTGUN, amount);
		case 5: SetPlayerData(playerid, P_SKILL_MP5, amount);
		case 6: SetPlayerData(playerid, P_SKILL_AK47, amount);
		case 7: SetPlayerData(playerid, P_SKILL_M4, amount);
		case 8: SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, amount);
		case 9: SetPlayerData(playerid, P_SKILL_SAWNOFF, amount);
		case 10: SetPlayerData(playerid, P_SKILL_COMBAT_SG, amount);
		case 11: SetPlayerData(playerid, P_SKILL_MICRO_UZI, amount);
	}

	return 1;
}

stock ShowTeleportList(playerid)
{
	new list_text[34 * (sizeof g_teleport_list)];
	new dest[36];

	for(new i; i < sizeof g_teleport_list; i ++)
	{
		format(dest, sizeof dest, "%d. %s\n", i + 1, GetTeleportListData(i, TL_NAME));
		strcat(list_text, dest);
	}

	Dialog(playerid, DIALOG_TELEPORT_LIST, DIALOG_STYLE_LIST, "{ffcd00}Телепорт лист", list_text, "Выбрать", "Выход");
	return 1;
}

stock CreateTicket(playerid, amount, issuer[], description[])
{
	new query[190];

	mysql_format(mysql, query, sizeof query, "INSERT INTO tickets (uid, amount, issuer, description) VALUES (%d, %d, '%s', '%s')",
	GetPlayerAccountID(playerid), amount, issuer, description);
	mysql_query(mysql, query, false);

	return 1;
}

stock PayTicket(playerid, ticketid)
{
	new query[90],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d LIMIT 1", ticketid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	new uid = cache_get_field_content_int(0, "uid"),
		amount = cache_get_field_content_int(0, "amount"),
		status = cache_get_field_content_int(0, "status"),
		desc[64];

	cache_get_field_content(0, "description", desc);

	cache_delete(result);

	if(!rows)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф не найден");

	if(uid != GetPlayerAccountID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф выписан не Вам");

	if(status)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф уже оплачен");

	if(GetPlayerBankMoney(playerid) < amount)
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств на основном банковском счету для оплаты штрафа");

	GivePlayerMoneyEx(playerid, -amount, "Оплата штрафа", true, true);

	mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE id=%d", ticketid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы оплатили штраф №%d (%s)", ticketid, desc);
	SendClientMessage(playerid, 0x66CC33FF, query);

	return 1;
}

stock CreateRadar(playerid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:zone_x, Float:zone_y, Float:zone_z, limit, modelid)
{
	new radar_id = g_radars_created;

	SetRadarData(radar_id, R_OBJECT, CreateDynamicObject(modelid, x, y, z, rx, ry, rz));

	SetRadarData(radar_id, R_ZONE, CreateDynamicSphere(zone_x, zone_y, zone_z, 40.0));

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "- Регистратор скорости №%d -\n\n{FFFFFF}Ограничение: %d км/ч\n{888888}Установил: %s", radar_id, limit, GetPlayerNameEx(playerid));

	SetRadarData(radar_id, R_LABEL, CreateDynamic3DTextLabel(fmt_text, 0x3399FFFF, x, y, z + 3.0, 50.0));

	SetRadarData(radar_id, R_POS_X, x);
	SetRadarData(radar_id, R_POS_Y, y);
	SetRadarData(radar_id, R_POS_Z, z);
	SetRadarData(radar_id, R_POS_RX, rx);
	SetRadarData(radar_id, R_POS_RY, ry);
	SetRadarData(radar_id, R_POS_RZ, rz);
	SetRadarData(radar_id, R_ZONE_X, zone_x);
	SetRadarData(radar_id, R_ZONE_Y, zone_y);
	SetRadarData(radar_id, R_ZONE_Z, zone_z);

	SetRadarData(radar_id, R_LIMIT, limit);

	g_radars_created ++;

	return 1;
}

stock RemoveRadar(radar_id)
{
	DestroyDynamic3DTextLabel(GetRadarData(radar_id, R_LABEL));

	DestroyDynamicArea(GetRadarData(radar_id, R_ZONE));

	DestroyDynamicObject(GetRadarData(radar_id, R_OBJECT));

	g_radar[radar_id] = g_radar_default_values;

	if(radar_id == g_radars_created - 1 && radar_id != 0)
		g_radars_created --;

	return 1;
}

stock CheckRadars(playerid)
{
	new Float: speed = GetPlayerSpeed(playerid);

	for(new idx; idx < g_radars_created; idx ++)
	{
		if(!IsValidDynamicObject(GetRadarData(idx, R_OBJECT))) continue;
		if(GetPVarInt(playerid, "radar_detected") > gettime()) continue;

		if(IsPlayerInRangeOfPoint(playerid, 40.0, GetRadarData(idx, R_POS_X), GetRadarData(idx, R_POS_Y), GetRadarData(idx, R_POS_Z)))
		{
			if(speed > (GetRadarData(idx, R_LIMIT) + 20))
			{
				new fmt_text[35],
					excess;

				excess = floatround(speed) - GetRadarData(idx, R_LIMIT);

				format(fmt_text, sizeof fmt_text, "Превышение скорости на %d км/ч", excess);

				CreateTicket(playerid, excess * 250, "Регистратор скорости", fmt_text);

				GameTextForPlayer(playerid, "~w~ЊPE‹‘ЋE®…E CKOPOC¦…~n~~r~‹‘ OЋ¦PAЃO‹A®‘", 4000, 3);

				SetPVarInt(playerid, "radar_detected", gettime() + 5);

				break;
			}
		}
	}
	return 1;
}

stock SendAdvert(playerid, message[])
{
	new ad_id = g_advert_created;

	SetAdvertData(ad_id, A_CREATOR, 	playerid);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, message);

	g_advert_created ++;

	return 1;
}

stock DeleteAdvert(ad_id)
{
	if(!(0 <= ad_id <= g_advert_created - 1)) return 0;

	SetAdvertData(ad_id, A_CREATOR, 	INVALID_PLAYER_ID);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, "");

	if(ad_id == g_advert_created - 1 && ad_id != 0)
		g_advert_created --;

	return 1;
}

stock UpdateReporterText()
{
	new count,
		fmt_text[15];

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		count ++;
	}

	format(fmt_text, sizeof fmt_text, "%d~n~Edit", count);

	TextDrawSetString(radio_edit_TD, fmt_text);
}

stock GetPlayerOwnableCar(playerid, idcar)
{
	return cars_g[playerid][idcar];
}

stock GetPlayerOwnableCarListitem(playerid)
{
	return cars_g[playerid][GetPVarInt(playerid, "listitem_car")];
}

stock GetPlayerOwnableCarLast(playerid)
{
	return cars_g[playerid][GetPVarInt(playerid, "lli")];
}

stock NoIL(playerid)
{
	for(new c = 0; c<35; c++)
	{
    	if(GetPlayerOwnableCar(playerid, c) == INVALID_VEHICLE_ID) return c;
    }
    return 0;
}

stock Float:D_PlayerVehicle(playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,PX,PY,PZ);
		GetVehiclePos(vehicleid, X,Y,Z);
		new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
		return Distance;
	}
	return 0.0;
}

stock GetAdvertIndexInQueue(ad_id)
{
	new index;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		index ++;

		if(idx != ad_id) continue;
	}

	return index;
}

stock SendLog(playerid = INVALID_PLAYER_ID, type, desc[])
{
	new fmt_log[512];

	mysql_format(mysql, fmt_log, sizeof fmt_log, "INSERT INTO action_log (acc_id, uip, type, description, time) VALUES (%d, '%s', %d, '%s', %d)",
	GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), type, desc, gettime());

	mysql_query(mysql, fmt_log, false);

	return 1;
}

stock GetTruckIndex(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 609)
		return 0;

	else if(GetVehicleModel(vehicleid) == 514 || GetVehicleModel(vehicleid) == 584)
		return 1;

	else
		return -1;
}

stock StartSpectate(playerid, for_player)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));

	TogglePlayerSpectating(playerid, true);

	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
		//ShowSpeedometrTD(playerid);
	}
	else PlayerSpectatePlayer(playerid, for_player);

	//ShowMenuForPlayer(admin_spec_menu, playerid);

	return 1;
}
stock StopSpectate(playerid)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);

	return 1;
}

stock UpdateSpectate(playerid, disconnect)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerAdminEx(i) < 1) continue;
		else if(GetPlayerSpectateData(i, S_PLAYER) != playerid) continue;

		if(disconnect)
		{
			StopSpectate(i);
			GameTextForPlayer(i, "~r~~h~player disconnect", 4000, 4);
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			//ShowSpeedometrTD(playerid);
		}
		else
		{
			//HideSpeedometrTD(playerid);
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

// ---------------------------------------------------------------

new const
	weapon_names[47][30] =
{
	"Пусто",
	"Кастет",
	"Клюшка для гольфа",
	"Дубинка",
	"Нож",
	"Бита",
	"Лопата",
	"Кий",
	"Катана",
	"Бензопила",
	"Фиолетовый дилдо",
	"Дилдо",
	"Вибратор",
	"Серебряный вибратор",
	"Цветы",
	"Топор",
	"Граната",
	"Дымовая граната",
	"Коктейль молотова",
	"Пусто",
	"Пусто",
	"Пусто",
	"Пистолет",
	"Пистолет с глушителем",
	"Пустынный орёл",
	"Дробовик",
	"Обрез",
	"Тактический дробовик",
	"Micro-Uzi",
	"MP5",
	"AK-47",
	"M4",
	"TEC-9",
	"Винтовка",
	"Снайперская винтовка",
	"РПГ",
	"Самонаводящаяся установка",
	"Огнемет",
	"Миниган",
	"C4",
	"Кнопка детонатора",
	"Баллончик",
	"Огнетушитель",
	"Фотоаппарат",
	"Очки ночного видения",
	"Очки с тепловизором",
	"Парашют"
};

new const
	weapon_dialog_tabulation[47][7] =
{
	"\t\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t"
};

// ---------------------------------------------------------------
new const
	skill_name[12][16] =
{
	"Сила",
	"Colt 45",
	"SD Pistol",
	"Desert Eagle",
	"Shotgun",
	"MP5",
	"AK47",
	"M4",
	"Sniper Rifle",
	"Sawnoff",
	"Combat SG",
	"Micro Uzi"
};

// ---------------------------------------------------------------
enum
{
	LOG_TYPE_ADMIN_CHAT = 1,
	LOG_TYPE_ADMIN_ANSWER,
	LOG_TYPE_ADMIN_ACTION,
	LOG_TYPE_SET_ADMIN,
	LOG_TYPE_SET_LEADER,
	LOG_TYPE_SMS_CHAT,
	LOG_TYPE_OOC_CHAT,
	LOG_TYPE_REPORT,
	LOG_TYPE_FRACTION,
	LOG_TYPE_SUPERADMIN_ACTION
}

// ---------------------------------------------------------------
new
	g_donate_prices[0] =
{
	30000, 50, 50, 25, 10, 500, 1, 100, 250, 200, 777, 499, 20
}; // цены на товары в меню Дополнительно

enum
{
	DONATE_PRICE_MONEY = 0,
	DONATE_PRICE_NAME,
	DONATE_PRICE_WARNS,
	DONATE_PRICE_DRUGS,
	DONATE_PRICE_LAW_ABIDING,
	DONATE_PRICE_PHONE_NUMBER,
	DONATE_PRICE_SKILLS,
	DONATE_PRICE_CAR_NUMBER,
	DONATE_PRICE_CAR_SLOT,
	DONATE_PRICE_LIC_PACK,
	DONATE_PRICE_SKIN,
	DONATE_PRICE_ADMINS,
	DONATE_PRICE_REGION
}

enum
{
	DONATE_PRICE_PACK1,
	DONATE_PRICE_PACK2,
	DONATE_PRICE_PACK3,
	DONATE_PRICE_PACK4
}
// ---------------------------------------------------------------
new
	g_doubling[3] =
{
	1, 1, 1
};

enum
{
	DOUBLING_DONATE = 0,
	DOUBLING_EXP,
	DOUBLING_WAGE,
}
// ---------------------------------------------------------------
enum
	E_BETCH_DATA
{
	B_OBJ,
	BSTATUS,
	B_MODEL,
	BM_NAME[120],
	Float: B_CLOSED[6],
	Text3D:BULABEL,
};

new
	b_betch[45][E_BETCH_DATA] =
	{
	{-1,1,1543,"Мусор", {2673.3042, 2054.3040, 5.9358}},
	{-1,1,1544,"Мусор", {2670.9260, 2057.7607, 5.8358}},
	{-1,1,1546,"Мусор", {2665.9414, 2057.9873, 5.6608}},
	{-1,1,1546,"Мусор", {2666.9407, 2059.1609, 5.7288}},
	{-1,1,1551,"Мусор", {2665.0342, 2064.5024, 5.8009}},
	{-1,1,1582,"Мусор", {2666.9971, 2057.3357, 5.6089}},
	{-1,1,1582,"Мусор", {2669.6099, 2051.2771, 5.6879}},
	{-1,1,1582,"Мусор", {2674.6775, 2046.3026, 5.9269}},
	{-1,1,1462,"Мусор", {2671.3955, 2074.2288, 5.8573}},
	{-1,1,10213,"Мусор", {2674.5615, 2058.8291, 6.0676}},
	{-1,1,10213,"Мусор", {2671.5283, 2069.2444, 5.9076}},
	{-1,1,10214,"Мусор", {2668.8157, 2072.1182, 5.7876}},
	{-1,1,10214,"Мусор", {2666.5100, 2066.9939, 5.6916}},
	{-1,1,10245,"Мусор", {2669.3630, 2064.0251, 5.8846}},
	{-1,1,10265,"Мусор", {2669.6348, 2062.3579, 6.0856}},
	{-1,1,10265,"Мусор", {2672.0374, 2047.7028, 6.0696}},
	{-1,1,10269,"Мусор", {2669.5503, 2045.1637, 5.8006}},
	{-1,1,10269,"Мусор", {2670.8660, 2044.6165, 5.8646}},
	{-1,1,10270,"Мусор", {2674.6294, 2038.2340, 6.4721}},
	{-1,1,10270,"Мусор", {2686.5085, 2040.8230, 7.5195}},
	{-1,1,10270,"Мусор", {2691.3870, 2056.0542, 8.4747}},
	{-1,1,10270,"Мусор", {2691.5940, 2062.3127, 8.5197}},
	{-1,1,10269,"Мусор", {2683.9209, 2074.2854, 6.9540}},
	{-1,1,10265,"Мусор", {2681.9268, 2080.6196, 6.7530}},
	{-1,1,10265,"Мусор", {2674.3428, 2083.4534, 6.1266}},
	{-1,1,10265,"Мусор", {2705.5718, 2056.2852, 11.5244}},
	{-1,1,10269,"Мусор", {2687.9575, 2031.9741, 7.4795}},
	{-1,1,10269,"Мусор", {2689.4292, 2034.0864, 7.7295}},
	{-1,1,806,"Камыш", {2677.08, 2094.78, 7.53}},
	{-1,1,806,"Камыш", {2675.47, 2093.54, 7.53}},
	{-1,1,806,"Камыш", {2674.37, 2091.92, 7.53}},
	{-1,1,806,"Камыш", {2679.20, 2096.31, 7.35}},
	{-1,1,806,"Камыш", {2669.41, 2091.10, 7.53}},
	{-1,1,806,"Камыш", {2664.59, 2093.99, 4.53}},
	{-1,1,806,"Камыш", {2679.59, 2093.29, 7.53}},
	{-1,1,806,"Камыш", {2651.15, 2067.67, 4.23}},
	{-1,1,806,"Камыш", {2659.54, 2083.10, 5.43}},
	{-1,1,806,"Камыш", {2663.86, 2065.44, 5.50}},
	{-1,1,806,"Камыш", {2669.33, 2040.07, 7.02}},
	{-1,1,806,"Камыш", {2668.81, 2043.05, 7.02}},
	{-1,1,806,"Камыш", {2671.40, 2039.95, 7.23}},
	{-1,1,806,"Камыш", {2660.41, 2047.73, 6.20}},
	{-1,1,806,"Камыш", {2665.75, 2068.95, 7.02}},
	{-1,1,806,"Камыш", {2652.49, 2059.76, 5.11}},
	{-1,1,806,"Камыш", {2672.51, 2036.21, 7.16}}

	};
enum
	E_LOD_DATA
{
	L_OBJ,
	LSTATUS,
	L_MODEL,
	LM_NAME[120],
	Float: L_CLOSED[6],
	Text3D:LULABEL,
};

new
	l_lod[26][E_LOD_DATA] =
	{
	{-1,1,1558,"Ящик", {2545.81, -2027.86, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2027.88, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2030.46, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2032.95, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2035.46, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2037.72, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2040.15, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2030.46, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2032.95, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2035.46, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2037.72, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2040.15, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2044.69, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2044.69, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2046.79, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2048.80, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2051.06, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2053.30, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2055.48, 23.68}},
	{-1,1,1558,"Ящик", {2547.79, -2057.69, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2055.48, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2053.30, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2051.06, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2048.80, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2046.79, 23.68}},
	{-1,1,1558,"Ящик", {2545.81, -2057.69, 23.68}}

	};
// ---------------------------------------------------------------
// иды фрак
enum
{
	TEAM_NONE = 0,
 // ----
	TEAM_GOVERNMENT, // Правительство
	// ----
	TEAM_ARMY, // Воинская часть
	// ----
	TEAM_HOSPITAL, // Городская больница
	// ----
	TEAM_RADIO, // ГТРК «Ритм»
	// ----
	TEAM_DPS, // ДПС
	TEAM_PPS, // ППС
 TEAM_PJ, // ФСИН
	// ----
 TEAM_OPG_ARZAMASKAYA = 8, // Центральное ОПГ
	TEAM_OPG_BATYREVSKAYA = 9, // Северное ОПГ
	TEAM_OPG_LYTKARINSKAYA = 10 // Заподное ОПГ
};

new const
	team_names[9][28] =
{
	"Нет",
	"Правительство",
	"Воинская часть",
	"Больница",
	"ГТРК Ритм",
	"МВД",
	"Центральное ОПГ",
	"Западное ОПГ",
	"Северное ОПГ"
};

new const
	team_colors[11] = // цвета
{
	0xFFFFFF11, // Гражданин / безработный
	0xCCFF00FF, // Правительство
	0x996633FF, // Воинская часть
	0xFF6666FF, // Городская больница
	0xFF6600FF, // ГТРК «Ритм»
	0x0000FFFF, // Отдел полиции №1 (ДПС)
	0x0000FFFF, // Отдел полиции №2 (ППС)
	0x0000FFFF, // Фсин
	0x009900FF, // Центральное ОПГ
	0x6666FFFF, // Северное ОПГ
	0xFFCD00FF  // Заподное ОПГ
};

new const
	team_subdivision_name[4][32] =
{
	"Нет",
	"ДПС",
	"ППС",
	"ФСИН"
};

enum
	E_ORG_DATA
{
	O_NAME[32],
	O_SKINS[10],
	O_WOMEN_SKIN,
	Float: O_SPAWN[4],
	Float: O_REPOSITORY_POS[3],
	O_SPAWN_INT,
	O_SPAWN_VW
};
new
	g_organization[10][E_ORG_DATA] =
{
 	{"Правительство",							{164, 165, 57, 208, 147, 227, 187, 187, 187, 187}, 141, 		{-2519.4226,1480.6204,1080.4944,90.0}, 		{0.0, 0.0, 0.0}, 					5, 21},
	{"Мин. Обороны",							{287, 179, 30, 253, 255, 61, 61, 61, 61,  61}, 191, 	{343.9309,2935.2080,999.4844,89.2135}, 	    {248.9328,2867.2319,7.4449}, 	1, 22}, // 363.3209,2962.0662,1.7700
	{"Городская больница",						{275, 275, 275, 276, 276, 276, 276, 276, 70,   70},	91, 	{418.9713,1710.7025,1001.0000,273.5817}, 		{0.0, 0.0, 0.0}, 					3, 5},
 	{"ТРК «Ритм»",								{170, 188, 188, 171, 189, 217, 217, 217, 59,   57},	172, 	{-2699.1589,2718.5935,999.5078,0.0}, 	{0.0, 0.0, 0.0}, 					1, 69},
	{"Отдел полиции №1 (ДПС)",				    {15324, 15323, 15333, 15332, 15328, 15326, 15325, 15329, 15331, 288},	93, 	{883.7992,2087.8728,2721.8101,1.4526}, 		{0.0, 0.0, 0.0}, 					1, 5},
	{"Отдел полиции №2 (ППС)",					{15341, 15342, 15343, 15344, 15340, 15347, 15348, 15349, 15350, 288}, 93, 	{2498.1772, 1406.4055, 1000.0214, 180.0}, 	{0.0, 0.0, 0.0}, 					4, 6},
	{"ФСИН", 									{128, 86, 286, 286, 286, 286, 286, 286, 286, 286}, 224, 	    {-1791.3435,-2829.7483,19.2475,152.3280}, 	{0.0, 0.0, 0.0}, 					0, 0},
	{"Центральное ОПГ",							{125, 111, 124, 124, 126, 113, 113, 113, 113, 113},	298, 	{-209.0494,-1074.2775,41.0300,145.7013}, 		{2567.1689, -1846.9983, 2522.8423}, 0, 0},
	{"Западное ОПГ",							{121, 122, 123, 120, 120, 120, 120, 120, 120, 120},	90, 	{-2343.5361,149.9583,21.4120,345.9233}, 	{-2626.3762, 2912.3970, 2738.6248},	0, 0},
	{"Северное ОПГ",							{117, 127, 112, 112, 112, 112, 112, 112, 112, 112},	56, 	{-2636.3562,2911.2236,37.6400,89.4888}, 		{2326.1282, 405.3908, 2824.9443},	0, 0}
};


new const
	rank_names[10][10][50] =
{
	// Правительство области
	{"Водитель", "Охранник", "Начальник Охраны", "Секретарь", "Советник", "Лицензер", "Адвокат", "Депутат", "Вице-губернатор", "Губернатор"},

	// Воинская часть
	{"Рядовой", "Ефрейтор", "Сержант", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"},

	// Городская больница
	{"Интерн", "Парамедик", "Фельдшер", "Нарколог", "Педиатр", "Терапевт", "Травматолог", "Хирург", "Заведующий", "Глав. врач"},

	// СМИ
	{"Практикант", "Фотограф", "Журналист", "Корреспондент", "Ведущий", "Редактор", "Маркетолог", "Менеджер", "Продюсер", "Директор"},

	// Отдел полиции №1 (ДПС)
	{"Рядовой полиции", "Сержант полиции", "Ст. сержант полиции", "Прапорщик полиции", "Лейтенант полиции", "Ст. лейтенант полиции", "Капитан полиции", "Майор полиции", "Подполковник полиции", "Полковник полиции"},

	// Отдел полиции №2 (ППС)
	{"Рядовой полиции", "Сержант полиции", "Ст. сержант полиции", "Прапорщик полиции", "Лейтенант полиции", "Ст. лейтенант полиции", "Капитан полиции", "Майор полиции", "Подполковник полиции", "Полковник полиции"},

	// Фсин
	{"Сотрудник ФСКН", "Сотрудник УБОП", "Зам. начальника ФСКН", "Зам. начальника УБОП", "Оперативник ЦСН", "Зам. начальника ЦСН", "Начальник ЦСН", "Инспектор ФСБ", "Зам. начальника УФСБ", "Начальник УФСБ"},

	// Арзамасская ОПГ
	{"Пацан", "Шнырь", "Фраер", "Барыга", "Блатной", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"},

	// Батыревская ОПГ
	{"Пацан", "Шнырь", "Фраер", "Барыга", "Блатной", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"},

	// Лыткаринская ОПГ
	{"Пацан", "Шнырь", "Фраер", "Барыга", "Блатной", "Свояк", "Браток", "Смотрящий", "Авторитет", "Вор в законе"}
};

new const
	rank_wages[7][10] =
{
 	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}, // Правительство области
	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}, // Воинская часть
	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}, // Городская больница
	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}, // СМИ
	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}, // Отдел полиции №1 (ДПС)
	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}, // Отдел полиции №2 (ППС)
	{20000, 20000, 20000, 20000, 20000, 20000, 20000, 35000, 65000, 100000}  // ФСИН
};
//new actor[3];
// ------------------------------------------
public: DelGun(playerid) {
	for(new i=0;i<10;i++) {
		GunPlayer[playerid][i][0]=0;
		GunPlayer[playerid][i][1]=0;
	}
	ResetPlayerWeapons(playerid);
	return 1;
}

public: Float:PointToPoint(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2)
{
	return floatsqroot(floatpower(floatabs(floatsub(x2,x)),2)+floatpower(floatabs(floatsub(y2,y)),2)+floatpower(floatabs(floatsub(z2,z)),2));
}

public: Renat()
{
		SendClientMessageToAll( COLOR_WHITE, "{FFD700}[INFO] Уважаемые игроки, минуточку внимания.");
		SendClientMessageToAll( COLOR_WHITE, "{FFD700}[INFO] Напоминаем Вам, что в нашей группе проходит глобальный конкурс");
		SendClientMessageToAll( COLOR_WHITE, "{FFD700}[INFO] На {ffffff}50 призовых мест {FFD700}и на {ffffff}реальные деньги.");
		SendClientMessageToAll( COLOR_WHITE, "{FFD700}[INFO] Наша группа ВК: {ffffff}vk.com/radmix_gtacrmp");
}

public: timerGameZeppelin(playerid)
{

	if (random(100) != 5) { // если выпадет '5' - игра проиграна

		if ( score_game_zeppelin[playerid] <= 5.0 ) score_game_zeppelin[playerid] += 0.01;//если кэф ниже 5 то прибавляем по 1/100 раз в 50 мс
		else score_game_zeppelin[playerid] += 0.10; //в ином случае по 1/10 в 50мс

		bet_static_win[playerid] = score_game_zeppelin[playerid]*bet_zeppelin[playerid];

		new string_game_zeppelin[75];
		format(string_game_zeppelin, sizeof string_game_zeppelin, "%.2fx", score_game_zeppelin[playerid]);
		PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], string_game_zeppelin);
		format(string_game_zeppelin, sizeof string_game_zeppelin, "Ваша ставка: %.0f", bet_static_win[playerid]);
		PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][2], string_game_zeppelin);

		player_timer[playerid] = SetTimerEx("timerGameZeppelin", 5_0, false, "i", playerid);//50ms
	}
	else {
		bet_zeppelin[playerid] = 0.0;
	    PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], "~r~FAIL :(");
		PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][2], "");
	    setGame(playerid, 1);
	}

}

stock gameZeppelinStart(playerid)
{

	score_game_zeppelin[playerid] = 1.0;
	player_timer[playerid] = SetTimerEx("timerGameZeppelin", 5_0, false, "i", playerid);//50ms

    return 1;
}

stock showBoxZeppelin(playerid, int) {

	if ( int ) {
		for(new i; i<2; i++) {
			TextDrawShowForPlayer(playerid,gameTextDraw_all[i]);
		}
	    PlayerTextDrawShow(playerid, gameTextDraw_player[playerid][0]);
	    PlayerTextDrawShow(playerid, gameTextDraw_player[playerid][1]);
		PlayerTextDrawShow(playerid, gameTextDraw_player[playerid][2]);
	    SelectTextDraw ( playerid, 0xFFFFFF80 ) ;
	}
	else {
	    for(new i; i<2; i++) {
	    	TextDrawHideForPlayer(playerid,gameTextDraw_all[i]);
	    }

			//скрываем тд

	    PlayerTextDrawHide(playerid,gameTextDraw_player[playerid][0]);
		PlayerTextDrawHide(playerid,gameTextDraw_player[playerid][1]);
		PlayerTextDrawHide(playerid,gameTextDraw_player[playerid][2]);

		CancelSelectTextDraw(playerid);
		//
		start_game[playerid] = false;//статус игры
		KillTimer(player_timer[playerid]);//убираем таймер
		bet_zeppelin[playerid] = 0;

		PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], "1.00x");
		PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][2], "");
	}
}

stock setGame(playerid, status) { // запуск / остановка игры

	if ( !status ) {

		if (bet_zeppelin[playerid] <= 0) return SendClientMessage(playerid, -1, "Сделайте ставку, прежде чем начать игру!");

		//PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], "BET_________STOP");

		start_game[playerid] = true;

		gameZeppelinStart(playerid);//запускаем игру

	} else {

		if(bet_zeppelin[playerid])	{//проверяем сдлали ставку

			new string_game_zeppelin[35];

			format(string_game_zeppelin, sizeof string_game_zeppelin, "~g~WIN!");
			PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], string_game_zeppelin);

			GivePlayerMoneyEx(playerid, floatround(bet_static_win[playerid]));//Изменить на свою выдачу денег
			/*playerInfo[playerid][money] += floatround(bet_static_win[playerid]);*/
			bet_static_win[playerid] = 0.0;
			bet_zeppelin[playerid] = 0.0;
		}

		//PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], "BET________START");

		start_game[playerid] = false;//статус игры

		KillTimer(player_timer[playerid]);//убираем таймер
	}
	return 1;
}

public: LoadCarNumberOptions() {
	new idx;
	new Cache: result, rows;
	new Model_id;

	result = mysql_query(mysql, "SELECT * FROM car_number_options", true);
	rows = cache_num_rows();


	for(idx = 1; idx <= rows; idx ++) {
		Model_id = cache_get_field_content_int(idx - 1, "Model_ID");
		g_car_num_opt[Model_id][C_Model_ID] = cache_get_field_content_int(idx - 1, "Model_ID");
	    g_car_num_opt[Model_id][C_XF] = cache_get_field_content_float(idx - 1, "x_f");
	    g_car_num_opt[Model_id][C_YF] = cache_get_field_content_float(idx - 1, "y_f");
	    g_car_num_opt[Model_id][C_ZF] = cache_get_field_content_float(idx - 1, "z_f");
	    g_car_num_opt[Model_id][C_XRF] = cache_get_field_content_float(idx - 1, "xr_f");
	    g_car_num_opt[Model_id][C_YRF] = cache_get_field_content_float(idx - 1, "yr_f");
	    g_car_num_opt[Model_id][C_ZRF] = cache_get_field_content_float(idx - 1, "zr_f");
	    g_car_num_opt[Model_id][C_XB] = cache_get_field_content_float(idx - 1, "x_b");
	    g_car_num_opt[Model_id][C_YB] = cache_get_field_content_float(idx - 1, "y_b");
	    g_car_num_opt[Model_id][C_ZB] = cache_get_field_content_float(idx - 1, "z_b");
	    g_car_num_opt[Model_id][C_XRB] = cache_get_field_content_float(idx - 1, "xr_b");
	    g_car_num_opt[Model_id][C_YRB] = cache_get_field_content_float(idx - 1, "yr_b");
	    g_car_num_opt[Model_id][C_ZRB] = cache_get_field_content_float(idx - 1, "zr_b");
	}

	cache_delete(result);
}

stock GetChips(playerid) 
	return g_player[playerid][pCasinoChips];
stock GiveChips(playerid, amount, const logs[]) {
	if (amount == 0) 
		return false;
	g_player[playerid][pCasinoChips] += amount;
	UpdatePlayerDatabaseInt(playerid, "pCasinoChips", GetPlayerData(playerid, pCasinoChips));

	if (amount < 0) 
		format(COMMAND_GLOBAL, sizeof (COMMAND_GLOBAL), "~p~%d", amount);
	else format(COMMAND_GLOBAL, sizeof (COMMAND_GLOBAL), "~p~+%d", amount);

	GameTextForPlayer(playerid, COMMAND_GLOBAL, 500, 1), COMMAND_GLOBAL[0] = EOS;


	return true;
	#pragma unused logs
}

stock TranslateText(string[])
{
new result[128];
for (new i = 0; i < sizeof(result); i++)
{
switch (string[i])
{
case 'а': result[i] = 'a';
case 'А': result[i] = 'A';
case 'б': result[i] = '—';
case 'Б': result[i] = 'Ђ';
case 'в': result[i] = 'ў';
case 'В': result[i] = '‹';
case 'г': result[i] = '™';
case 'Г': result[i] = '‚';
case 'д': result[i] = 'љ';
case 'Д': result[i] = 'ѓ';
case 'е': result[i] = 'e';
case 'Е': result[i] = 'E';
case 'ё': result[i] = 'e';
case 'Ё': result[i] = 'E';
case 'ж': result[i] = '›';
case 'Ж': result[i] = '„';
case 'з': result[i] = 'џ';
case 'З': result[i] = '€';
case 'и': result[i] = 'њ';
case 'И': result[i] = '…';
case 'й': result[i] = 'ќ';
case 'Й': result[i] = '…';
case 'к': result[i] = 'k';
case 'К': result[i] = 'K';
case 'л': result[i] = 'ћ';
case 'Л': result[i] = '‡';
case 'м': result[i] = 'Ї';
case 'М': result[i] = 'M';
case 'н': result[i] = '®';
case 'Н': result[i] = ' ';
case 'о': result[i] = 'o';
case 'О': result[i] = 'O';
case 'п': result[i] = 'Ј';
case 'П': result[i] = 'Њ';
case 'р': result[i] = 'p';
case 'Р': result[i] = 'P';
case 'с': result[i] = 'c';
case 'С': result[i] = 'C';
case 'т': result[i] = '¦';
case 'Т': result[i] = 'Џ';
case 'у': result[i] = 'y';
case 'У': result[i] = 'Y';
case 'ф': result[i] = '~';
case 'Ф': result[i] = 'Ѓ';
case 'х': result[i] = 'x';
case 'Х': result[i] = 'X';
case 'ц': result[i] = '*';
case 'Ц': result[i] = '‰';
case 'ч': result[i] = '¤';
case 'Ч': result[i] = 'Ќ';
case 'ш': result[i] = 'Ґ';
case 'Ш': result[i] = 'Ћ';
case 'щ': result[i] = 'Ў';
case 'Щ': result[i] = 'Љ';
case 'ь': result[i] = '©';
case 'Ь': result[i] = '’';
case 'ъ': result[i] = 'ђ';
case 'Ъ': result[i] = '§';
case 'ы': result[i] = 'Ё';
case 'Ы': result[i] = '‘';
case 'э': result[i] = 'Є';
case 'Э': result[i] = '“';
case 'ю': result[i] = '«';
case 'Ю': result[i] = '”';
case 'я': result[i] = '¬';
case 'Я': result[i] = '•';
default: result[i] = string[i];
}
}
return result;
}

public OnGameModeInit()
{

	vorota_ogorod1 = CreateDynamicObject(10938, 439.50, 2698.33, 10.42, -12.09, 0.00, 0.00);
	vorota_ogorod2 = CreateDynamicObject(10938, 450.944976, 2720.208740, 9.801211, 0.000000, 0.000000, 0.000000);
	vorota_ogorod3 = CreateDynamicObject(10938, 418.823638, 2698.757812, 10.318197, -11.499999, 0.000000, 0.000000);

	//Рыбалка
    //Create3DTextLabel("{FFA500}Информация: {00BFFF}Рыбалка",0x00FFFFDD, 2002.5291,1028.5691,15.2925,20.0,0,1);
	//fishing_info_pickup = CreatePickup(1239, 23, 2002.8326,1028.7748,15.2864, -1);
    //Create3DTextLabel("{FFA500}Магазин: {00BFFF}Рыбный рынок",0x00FFFFDD, 1995.1902,1012.2449,15.1376,20.0,0,1);
 	//fishing_market_pickup = CreatePickup(1274, 23, 1995.1902,1012.2449,15.1376, -1);
	CreateDynamicMapIcon(1995.1902,1012.2449,15.1376, 9, -1);
 	CreateActor(28, 1995.7139,1011.0075,15.0761,333.5676);

	 #if defined _blackjack_included
		blackjack_OnGameModeInit();
	#endif

	//Test_server = 1;



	for(new i; i < MAX_TABLE; i++)
	{
		TableInfo[i][t_players][0] = TableInfo[i][t_players][1] = TableInfo[i][t_players][2] = TableInfo[i][t_players][3] = TableInfo[i][t_crup] = INVALID_PLAYER_ID; // Обнуляем всех игроков и крупье для стола
		TableInfo[i][steps] = 20,TableInfo[i][t_bet] = 0,TableInfo[i][t_status] = false; // Обнуляем переменные на нужные параметры.
	}

    new string[10]; //format(string,sizeof(russtring),"%d",t+1);
	for(new t; t < MAX_TABLE; t++)
	{
		TD_CASINO[t][0] = TextDrawCreate(115.000022, 158.733291, "betcas:back");
		TextDrawLetterSize(TD_CASINO[t][0], 0.000000, 0.000000);
		TextDrawTextSize(TD_CASINO[t][0], 406.000000, 261.000000);
		TextDrawAlignment(TD_CASINO[t][0], 1);
		TextDrawColor(TD_CASINO[t][0], -1);
		TextDrawSetShadow(TD_CASINO[t][0], 0);
		TextDrawSetOutline(TD_CASINO[t][0], 0);
		TextDrawBackgroundColor(TD_CASINO[t][0], 255);
		TextDrawFont(TD_CASINO[t][0], 4);
		TextDrawSetProportional(TD_CASINO[t][0], 0);
		TextDrawSetShadow(TD_CASINO[t][0], 0);

		TD_CASINO[t][1] = TextDrawCreate(238.666809, 321.340728, "betcas:btnbet");
		TextDrawLetterSize(TD_CASINO[t][1], 0.000000, 0.000000);
		TextDrawTextSize(TD_CASINO[t][1], 67.000000, 40.000000);
		TextDrawAlignment(TD_CASINO[t][1], 1);
		TextDrawColor(TD_CASINO[t][1], -1);
		TextDrawSetShadow(TD_CASINO[t][1], 0);
		TextDrawSetOutline(TD_CASINO[t][1], 0);
		TextDrawBackgroundColor(TD_CASINO[t][1], 255);
		TextDrawFont(TD_CASINO[t][1], 4);
		TextDrawSetProportional(TD_CASINO[t][1], 0);
		TextDrawSetShadow(TD_CASINO[t][1], 0);
		TextDrawSetSelectable(TD_CASINO[t][1], true);

		TD_CASINO[t][2] = TextDrawCreate(333.666809, 322.585144, "betcas:btnexit");
		TextDrawLetterSize(TD_CASINO[t][2], 0.000000, 0.000000);
		TextDrawTextSize(TD_CASINO[t][2], 67.000000, 40.000000);
		TextDrawAlignment(TD_CASINO[t][2], 1);
		TextDrawColor(TD_CASINO[t][2], -1);
		TextDrawSetShadow(TD_CASINO[t][2], 0);
		TextDrawSetOutline(TD_CASINO[t][2], 0);
		TextDrawBackgroundColor(TD_CASINO[t][2], 255);
		TextDrawFont(TD_CASINO[t][2], 4);
		TextDrawSetProportional(TD_CASINO[t][2], 0);
		TextDrawSetShadow(TD_CASINO[t][2], 0);
		TextDrawSetSelectable(TD_CASINO[t][2], true);

		format(string,sizeof(string),"%d",t+1);
		TD_CASINO[t][3] = TextDrawCreate(362.666687, 207.837020, string);
		TextDrawLetterSize(TD_CASINO[t][3], 0.516333, 2.122668);
		TextDrawAlignment(TD_CASINO[t][3], 1);
		TextDrawColor(TD_CASINO[t][3], -1);
		TextDrawSetShadow(TD_CASINO[t][3], 0);
		TextDrawSetOutline(TD_CASINO[t][3], 0);
		TextDrawBackgroundColor(TD_CASINO[t][3], 255);
		TextDrawFont(TD_CASINO[t][3], 1);
		TextDrawSetProportional(TD_CASINO[t][3], 1);
		TextDrawSetShadow(TD_CASINO[t][3], 0);

		TD_CASINO[t][4] = TextDrawCreate(335.999938, 248.903747, "не стоит");
		TextDrawLetterSize(TD_CASINO[t][4], 0.549999, 2.168297);
		TextDrawAlignment(TD_CASINO[t][4], 1);
		TextDrawColor(TD_CASINO[t][4], -1);
		TextDrawSetShadow(TD_CASINO[t][4], 0);
		TextDrawSetOutline(TD_CASINO[t][4], 0);
		TextDrawBackgroundColor(TD_CASINO[t][4], 255);
		TextDrawFont(TD_CASINO[t][4], 1);
		TextDrawSetProportional(TD_CASINO[t][4], 1);
		TextDrawSetShadow(TD_CASINO[t][4], 0);

		TD_CASINO[t][5] = TextDrawCreate(273.333312, 270.059326, "0/4");
		TextDrawLetterSize(TD_CASINO[t][5], 0.556999, 2.093630);
		TextDrawAlignment(TD_CASINO[t][5], 1);
		TextDrawColor(TD_CASINO[t][5], -1);
		TextDrawSetShadow(TD_CASINO[t][5], 0);
		TextDrawSetOutline(TD_CASINO[t][5], 0);
		TextDrawBackgroundColor(TD_CASINO[t][5], 255);
		TextDrawFont(TD_CASINO[t][5], 1);
		TextDrawSetProportional(TD_CASINO[t][5], 1);
		TextDrawSetShadow(TD_CASINO[t][5], 0);
	}

	TD_CASINO2[0] = TextDrawCreate(-66.333358, 149.192611, "betcas:enter");
	TextDrawLetterSize(TD_CASINO2[0], 0.000000, 0.000000);
	TextDrawTextSize(TD_CASINO2[0], 371.000000, 252.000000);
	TextDrawAlignment(TD_CASINO2[0], 1);
	TextDrawColor(TD_CASINO2[0], -1);
	TextDrawSetShadow(TD_CASINO2[0], 0);
	TextDrawSetOutline(TD_CASINO2[0], 0);
	TextDrawBackgroundColor(TD_CASINO2[0], 255);
	TextDrawFont(TD_CASINO2[0], 4);
	TextDrawSetProportional(TD_CASINO2[0], 0);
	TextDrawSetShadow(TD_CASINO2[0], 0);

    arCasinoTable[0] = CreateDynamicSphere(185.3693,-295.2961,1012.7419,2.0,-1,-1); // Зона 1 стола
    arCasinoTable[1] = CreateDynamicSphere(185.0401,-300.3588,1012.3210,2.0,-1,-1); // Зона 2 стола
    arCasinoTable[2] = CreateDynamicSphere(204.8426,-331.1871,1011.0000,2.0,-1,-1); // Зона 3 стола
    CrupiePick = CreatePickup(1275,23,194.8879,-302.0543,1011.0156,-1,-1); // Пикап с раздевалкой для крупье
 	//
  //
	//Проадажа скина
	//CreateDynamic3DTextLabel("{ffffff}Рынок \"Одежды\"\n{ffcc00} для ипользование \"/sellmyskin [id игрока] [цена]\"",- 1, 462.0138,832.9946,12.1944, 15.0, INVALID_PLAYER_ID,INVALID_VEHICLE_ID,-1,-1);
    army_ammo_CP = CreateDynamicCP(240.9847,2868.7051,7.4377, 1.5, -1, -1, _, 7.0);
	CreatePickup(1239, 23, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2], -1);
	SetTimer("StartRandomPrize", 1000*60*2,true); // Выдача приза каждые 2 минуты
	CreateDynamic3DTextLabel("Церковь\n\nИспользуйте {FF5533}/wedding чтобы пожениться\nИспользуйте {FF5533}/divorce чтобы развестись", -1, -1293.4110, 717.4692, 2002.0000 + 0.2, 10.0);
	CreateDynamic3DTextLabel("Рынок\n\nИспользуйте {FF5533}/sellmyskin [id] [цена]{ffffff}, чтобы продать свой скин", -1, 652.9271,2260.3232,12.0900 + 0.2, 10.0);
	//---
	CreateDynamic3DTextLabel("Могила Рудика", -1, -2520.8008,2553.0303,44.8944 + 0.2, 10.0);
	CreateDynamic3DTextLabel("Покупка наркотиков", -1, 1754.4694,-973.4464,6.3359 + 0.2, 10.0);
	CreatePickup(1239, 23, 1754.4694,-973.4464,6.3359, -1, PICKUP_ACTION_TYPE_BUY_DRUGS); // PICKUP_ACTION_TYPE_TEAM_RAZDEV
	CreatePickup(1275, 23, 2494.1860,1405.6400,1000.0214, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -2516.8591,1465.3381,1080.5034, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 331.6048,2941.3892,999.4766, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 421.3798,1694.9285,1001.0000, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -2696.5481,2722.2908,999.5078, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, 875.7984,2093.7573,2721.8101, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);
	CreatePickup(1275, 23, -1781.8942,-2834.3538,19.2475, -1, PICKUP_ACTION_TYPE_TEAM_RAZDEV);

	CreateDynamic3DTextLabel("Б/У рынок\nПрежде чем выполнить продажу авто, обговорите все условия\nПосле чего используйте /sellmycar id цена", -1, -1633.8027,1025.8977,997.7969 + 0.2, 10.0);

	CreateDynamic3DTextLabel("Б/У рынок\nПрежде чем выполнить продажу авто, обговорите все условия\nПосле чего используйте /sellmycar id цена", -1, 2304.5803,1757.3826,1001.0000 + 0.2, 10.0);
	CreateDynamic3DTextLabel("Б/У рынок\nПрежде чем выполнить продажу авто, обговорите все условия\nПосле чего используйте /sellmycar id цена", -1, 1575.7394,1772.4160,996.5703 + 0.2, 10.0);

    SetTimer("Podarok", 1200000, true);
	vorota_yuzhnii = CreateDynamicObject(980, 2452.20, -1440.22, 81.78,   0.00, 0.00, 270.00);
    CreatePickup(1239, 23, 2707.5276,-3.6185,1060.9922, -1, PICKUP_ACTION_TYPE_SELLSIM);
	new hour;
	gettime(hour);
    //SetTimer("AutoRestart", 60000, 1);

   	SetTimer("Contein",3600000,true);

	SetTimer("ConteinDelete",3540000,true);
	SetTimer("StartVictor", 600000, 1);
	SetTimer("AddContainers",900000,1);

	createTextDrawToAll();

//	SetTimer("StartViktorina",1000*60,true);


	//-----------------------[cell_salon]---------
	///////////////////////////////////

	SetWorldTime(hour);
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	SendRconCommand("hostname  RadmiX RolePlay | ОБНОВЛЕНИЕ | x3 ДОНАТ");
	SendRconCommand("weburl "SERVER_SITE"");
	SendRconCommand("mapname "SERVER_MAP_NAME"");

	ShowNameTags(true);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	SetNameTagDrawDistance(30.0);
	//Проеби все деньги
	CreateDynamic3DTextLabel("- Игровые автоматы -\n{79cb64}Угадай карту", 0xFFDD00FF, 601.4271,-101.9638,728.1457 + 0.1, 10.0); // аренда велосипеда 00cc99 ff9933
	CreatePickup(1239, 23, 601.4271,-101.9638,728.1457, -1);
	//----слив авто в гос
	CreateDynamic3DTextLabel("Утилизация\n личного транспорта", -1, -2724.1167,-1341.3960,9.8674 + 0.2, 10.0);
	CreatePickup(19133, 23, -2724.1167,-1341.3960,9.8674,-1, PICKUP_ACTION_TYPE_SELL_CAR);
	// streamer

	//Streamer_SetMaxItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 650); // Default: 500

	Streamer_ToggleErrorCallback(true);
	Streamer_SetTickRate(40); // Default: 50

	//LimitPlayerMarkerRadius(200.0);
	//LimitGlobalChatRadius(30.0);
	//Аренда дукати.
	CreateActor(271, 838.3375,585.4003,15.8857,293.4387);
	CreateActor(115, 376.7471,1698.5637,12.0065,286.2005);
	CreateActor(43, 2403.8914,-2345.4219,21.9710,53.6659);
	CreateActor(47, 394.0962,1549.2831,12.0500,233.2333);
	CreateActor(94, 1812.4408,2511.6768,15.6639,121.4216);
	CreateActor(175, 187.5520,1452.2783,12.0100,205.8385);
	CreateActor(176, 2395.6331,-2657.3003,21.9886,218.3720);
	CreateActor(79, -484.7349,-1559.2352,41.1359,239.6584);
	//CreateActor(182, -484.7349,-1559.2352,41.1359,239.6584);
//	CreateDynamic3DTextLabel("Информация", 0xd7994eFF, 2749.8521,-2373.1904,17.9660 + 0.1, 10.0);
//	CreatePickup(1239, 23, 2749.8521,-2373.1904,17.9660, -1, PICKUP_ACTION_TYPE_CONT_INFO);
	//CreateActor(172, 3850.1565,-5640.4126,7.8347,93.2974);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 2403.8914,-2345.4219,21.9710 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 838.3375,585.4003,15.8857 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 376.7471,1698.5637,12.0065 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 394.0962,1549.2831,12.0500 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 1812.4408,2511.6768,15.6639 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 187.5520,1452.2783,12.0100 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, 2395.6331,-2657.3003,21.9886 + 0.6, 4.0);
	CreateDynamic3DTextLabel("\n{ffbf00}'Аренда Мотоцикла'\n'ALT'", 0xFFFFFFFF, -484.7349,-1559.2352,41.1359 + 0.6, 4.0);

	CreateDynamic3DTextLabel("\n{ffbf00}Всё для рыбалки\n'ALT'", 0xFFFFFFFF, 1996.0123,1011.6410,15.0693 + 0.6, 4.0);

	CreateDynamic3DTextLabel("Прием на работу", 0xFFFF00FF, -2507.2598,1477.5762,1080.4944 + 1.8, 10.0);
	join_to_job_CP = CreateDynamicCP(-2507.2598,1477.5762,1080.4944, 1.5, -1, -1, _, 7.0);
 	CreateDynamicObject(19303, 3511.419921, 2731.550048, 113.690002, 0, 0, 0); // дверь ДПС
	CreateDynamicObject(19273, -220.2120, 568.4047, 13.2490, 0.0000, 0.0000, -6.0000); // маппинг мз
	CreateDynamicObject(19273, 2481.9158, -2009.5416, 703.9407, 0, 0, 0); // маппинг мз
	CreateDynamicObject(19273, 1573.7963, -777.5175, 1115.3967, 0.0000, 0.0000, 47.0000); // маппинг право
	CreateDynamic3DTextLabel("Нажмите F", 0xFFFF00FF, 1573.7963, -777.5175 - 0.1, 1115.3967, 10.0); // право
	CreateDynamic3DTextLabel("Нажмите F", 0xFFFF00FF, 2481.7185, -2009.2945 - 0.1, 703.9407, 10.0); // ворота мз
	CreateDynamic3DTextLabel("Нажмите F", 0xFFFF00FF, -220.8144 + 0.7, 568.7041, 12.6515 + 0.5, 10.0); // дверь мз

	//---------------------огороды----------------------------------------//
	CreateObject(10933, 1959.376464, 1274.288452, 23.760429, 0.000000, 0.000000, 175.400115, 300.00);
	CreateObject(10934, 1959.474853, 1274.256835, 23.683946, 0.000000, 0.000000, -4.499999, 300.00);
    CreateObject(10933, 495.634674, 2688.884277, 10.932571, 0.000000, 0.000000, 96.000015, 300.00);
    CreateObject(10934, 495.574188, 2688.813964, 10.957198, 0.000000, 0.000000, -84.800033, 300.00);
    CreateObject(10933, 457.999603, 2698.553710, 10.342751, -10.299998, 0.000000, 0.000000, 300.00);
    CreateObject(10934, 458.063720, 2698.536865, 10.251689, -10.599999, 0.000000, 0.000000, 300.00);
    CreateObject(10933, 185.969680, -555.717529, 9.095530, 0.000000, 0.000000, 54.199993, 300.00);
    CreateObject(10934, 186.044021, -555.708129, 9.121800, 0.000000, 0.000000, 53.899990, 300.00);
    CreateObject(10933, 495.566314, 2720.031738, 9.767864, 0.000000, 0.000000, -179.599990, 300.00);
	CreateObject(10933, 475.737457, 2719.625244, 9.763726, 0.000000, 0.000000, 179.500091, 300.00);
	CreateObject(10933, 454.674377, 2719.978027, 9.762166, 0.000000, 0.000000, -178.299896, 300.00);
	CreateObject(10933, 434.510437, 2719.879882, 9.738874, 0.000000, 0.000000, 178.299957, 300.00);
	CreateObject(10933, 414.369476, 2720.591308, 9.700489, 0.000000, 0.000000, -179.400070, 300.00);
	CreateObject(10933, 392.816711, 2719.853759, 9.714846, 0.000000, 0.000000, -177.299972, 300.00);
	CreateObject(10933, 372.929565, 2720.549072, 9.674776, 0.000000, 0.000000, -179.999893, 300.00);
	CreateObject(10933, 350.620452, 2720.119628, 9.708030, 0.000000, 0.000000, -176.400146, 300.00);
	CreateObject(10933, 327.815673, 2718.666259, 9.768116, 0.000000, 0.000000, -176.800033, 300.00);
	CreateObject(10933, 308.629730, 2720.592529, 9.763746, 0.000000, 0.000000, 179.700149, 300.00);
	CreateObject(10933, 286.898956, 2720.329345, 9.808202, 0.000000, 0.000000, -179.500000, 300.00);
	CreateObject(10933, 271.647827, 2698.525146, 10.352087, -11.699983, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 292.423950, 2698.298828, 10.495933, -11.800002, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 312.445648, 2698.576904, 10.365159, -11.199992, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 332.724761, 2698.346435, 10.419056, -11.699998, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 353.664978, 2698.157470, 10.441528, -12.299996, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 374.755615, 2698.138671, 10.438308, -11.799996, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 395.952545, 2697.975097, 10.457036, -12.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 415.045837, 2698.367431, 10.397344, -11.599993, 0.000000, 0.000000, 300.00);
	CreateObject(10933, 435.741516, 2697.948486, 10.519171, -12.299994, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 495.579650, 2719.995117, 9.860479, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 475.784149, 2719.569580, 9.669904, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 454.780609, 2720.000244, 9.740517, 0.000000, 0.000000, 1.000000, 300.00);
	CreateObject(10934, 434.565429, 2719.829589, 9.745992, 0.000000, 0.000000, -0.799999, 300.00);
	CreateObject(10934, 414.497406, 2720.640869, 9.691312, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 392.817504, 2719.704101, 9.734584, 0.000000, 0.000000, 1.899999, 300.00);
	CreateObject(10934, 372.923980, 2720.416748, 9.708019, 0.000000, 0.000000, 0.299999, 300.00);
	CreateObject(10934, 350.689605, 2720.132324, 9.718215, 0.000000, 0.000000, 2.399999, 300.00);
	CreateObject(10934, 327.998474, 2718.700195, 9.756587, 0.000000, 0.000000, 1.999999, 300.00);
	CreateObject(10934, 308.651458, 2720.555664, 9.675320, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 286.994659, 2720.226318, 9.737805, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 271.409484, 2698.507812, 10.312095, -9.599998, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 292.235900, 2698.315185, 10.408954, -12.300001, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 312.284088, 2698.541503, 10.374680, -12.799993, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 332.796386, 2698.358642, 10.408493, -13.099993, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 353.292541, 2698.143310, 10.428618, -12.200000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 374.825378, 2698.036132, 10.439497, -8.800000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 395.711730, 2697.922119, 10.440088, -10.700003, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 414.980895, 2698.385986, 10.444931, -14.399997, 0.000000, 0.000000, 300.00);
	CreateObject(10934, 435.806976, 2697.933593, 10.510087, -13.000005, 0.000000, 0.000000, 300.00);
	CreateObject(10933, -2181.642089, -1869.286254, 7.546691, 0.000000, 0.000000, 122.699989, 300.00);
	CreateObject(10934, -2181.655517, -1869.344116, 7.538999, 0.000000, 0.000000, -57.299995, 300.00);
	CreateObject(10933, -2263.171386, -1790.044311, 7.536550, 0.000000, 0.000000, 122.900016, 300.00);
	CreateObject(10934, -2263.191162, -1790.095458, 7.536550, 0.000000, 0.000000, -57.600009, 300.00);
	CreateObject(10934, -2280.050781, -1762.138427, 7.536550, 0.000000, 0.000000, -56.400012, 300.00);
	CreateObject(10933, -2280.016601, -1762.044677, 7.536550, 0.000000, 0.000000, 123.999931, 300.00);
	CreateObject(10933, -2317.251220, -1701.401977, 7.536550, 0.000000, 0.000000, -56.699966, 300.00);
	CreateObject(10934, -2317.201660, -1701.413208, 7.536550, 0.000000, 0.000000, -56.299987, 300.00);
	CreateObject(10933, -2315.146972, -1582.352172, 7.536550, 0.000000, 0.000000, -145.399917, 300.00);
	CreateObject(10934, -2314.986328, -1582.325927, 7.536550, 0.000000, 0.000000, 35.599987, 300.00);
	CreateObject(10934, -2299.374267, -1605.651245, 7.536550, 0.000000, 0.000000, 35.499992, 300.00);
	CreateObject(10933, -2299.497070, -1605.697021, 7.536550, 0.000000, 0.000000, -144.299972, 300.00);
	CreateObject(10933, -2251.010009, -1682.463867, 7.544357, 0.000000, 0.000000, -144.300003, 300.00);
	CreateObject(10934, -2250.893066, -1682.426879, 7.544357, 0.000000, 0.000000, 36.299999, 300.00);
	CreateObject(10933, -2218.563720, -1731.086303, 7.536550, 0.000000, 0.000000, -145.199996, 300.00);
	CreateObject(10934, -2218.500732, -1731.080932, 7.536550, 0.000000, 0.000000, 33.700035, 300.00);
	CreateObject(10933, -2201.425537, -1756.584228, 7.544357, 0.000000, 0.000000, -146.600128, 300.00);
	CreateObject(10934, -2201.353759, -1756.592041, 7.536550, 0.000000, 0.000000, 33.800010, 300.00);
	CreateObject(10933, -2122.521728, -1874.534423, 7.518999, 0.000000, 0.000000, -144.600112, 300.00);
	CreateObject(10934, -2122.476318, -1874.545410, 7.538999, 0.000000, 0.000000, 34.500000, 300.00);
	CreateObject(10933, -2106.215087, -1898.831298, 7.528999, 0.000000, 0.000000, -146.299972, 300.00);
	CreateObject(10934, -2106.137451, -1898.789428, 7.538999, 0.000000, 0.000000, 33.900009, 300.00);
	CreateObject(10933, -2047.448730, -1955.444702, 7.538999, 0.000000, 0.000000, 156.899978, 300.00);
	CreateObject(10934, -2047.428344, -1955.498413, 7.538999, 0.000000, 0.000000, -23.200006, 300.00);
	CreateObject(10933, -2036.437744, -1927.411010, 7.538999, 0.000000, 0.000000, 160.000000, 300.00);
	CreateObject(10934, -2036.432250, -1927.368652, 7.538999, 0.000000, 0.000000, -20.700012, 300.00);
	CreateObject(10933, -2029.692138, -1864.971435, 7.538999, 0.000000, 0.000000, -143.200012, 300.00);
	CreateObject(10934, -2029.594726, -1865.007568, 7.538999, 0.000000, 0.000000, 36.799987, 300.00);
	CreateObject(10933, -2079.977050, -1790.210693, 7.616690, 0.000000, 0.000000, -144.400115, 300.00);
	CreateObject(10934, -2079.801269, -1790.174072, 7.546691, 0.000000, 0.000000, 36.000026, 300.00);
	CreateObject(10933, -2096.634033, -1764.718017, 7.538999, 0.000000, 0.000000, -146.500061, 300.00);
	CreateObject(10934, -2096.557861, -1764.689086, 7.538999, 0.000000, 0.000000, 32.800006, 300.00);
	CreateObject(10933, -2128.726318, -1716.629272, 7.544357, 0.000000, 0.000000, -145.000045, 300.00);
	CreateObject(10934, -2128.614257, -1716.636840, 7.544357, 0.000000, 0.000000, 34.900005, 300.00);
	CreateObject(10933, -2215.459960, -1706.121459, 7.544357, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, -2215.418701, -1706.053955, 7.544357, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10933, -2197.474365, -1731.053222, 7.536550, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, -2197.452392, -1731.095581, 7.536550, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10933, -2150.992431, -1802.194458, 7.538999, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, -2150.909912, -1802.242187, 7.538999, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10934, -2119.910644, -1851.497924, 7.538999, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10933, -2119.922607, -1851.465576, 7.538999, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10933, -2098.944335, -1878.478637, 7.538999, 0.000000, 0.000000, 31.800001, 300.00);
	CreateObject(10934, -2098.964111, -1878.526123, 7.538999, 0.000000, 0.000000, 32.199989, 300.00);
	CreateObject(10933, -2349.948486, 2569.564697, 40.749340, 0.000000, 0.000000, 176.700027, 300.00);
	CreateObject(10934, -2350.003417, 2569.760253, 40.749336, 0.000000, 0.000000, 0.000000, 300.00);
	CreateObject(10933, -2347.211669, 2582.616210, 40.972713, 0.000000, 0.000000, -179.199859, 300.00);
	CreateObject(10934, -2347.187255, 2582.604003, 40.990158, 0.000000, 0.000000, 0.000000, 300.00);

	//=====================================================================================================

	CreateDynamicObject(18762, 438.90, 1776.93, 10.70, 0.00, 90.00, 90.00);
	CreateDynamicObject(18762, 438.90, 1784.69, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 438.90, 1785.69, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 438.90, 1781.69, 10.70, 0.00, 90.00, 90.00);
	CreateDynamicObject(18762, 438.90, 1773.93, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 438.90, 1772.93, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(4991, 423.26, 1781.29, 13.55, 0.00, -0.60, 0.00);
	CreateDynamicObject(19074, 428.39, 1782.43, 8.70, 0.00, 180.00, 0.00);
	CreateDynamicObject(19074, 428.41, 1802.43, 8.70, 0.00, 180.00, 0.00);
	CreateDynamicObject(18762, 438.45, 1812.48, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 418.35, 1812.46, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 418.36, 1772.54, 12.57, 0.00, 0.00, 90.00);
	CreateDynamicObject(1965, 438.43, 1789.84, 12.56, 0.00, 0.00, 0.00);
	CreateDynamicObject(1965, 438.44, 1797.15, 12.56, 0.00, 0.00, 0.00);
	CreateDynamicObject(1965, 438.43, 1804.45, 12.56, 0.00, 0.00, 0.00);
	CreateDynamicObject(1965, 438.43, 1808.78, 12.56, 0.00, 0.00, 0.00);
	CreateDynamicObject(1965, 434.75, 1812.46, 12.56, 0.00, 0.00, 90.00);
	CreateDynamicObject(1965, 427.45, 1812.46, 12.56, 0.00, 0.00, 90.00);
	CreateDynamicObject(1965, 422.06, 1812.46, 12.56, 0.00, 0.00, 90.00);
	CreateDynamicObject(1965, 418.38, 1808.80, 12.57, 0.00, 0.00, 180.00);
	CreateDynamicObject(1965, 418.38, 1801.49, 12.57, 0.00, 0.00, 180.00);
	CreateDynamicObject(1965, 418.38, 1794.19, 12.57, 0.00, 0.00, 180.00);
	CreateDynamicObject(1965, 418.38, 1786.88, 12.57, 0.00, 0.00, 180.00);
	CreateDynamicObject(1965, 418.38, 1779.58, 12.57, 0.00, 0.00, 180.00);
	CreateDynamicObject(1965, 418.38, 1776.08, 12.57, 0.00, 0.00, 180.00);
	CreateDynamicObject(1965, 422.06, 1772.55, 12.57, 0.00, 0.00, 270.00);
	CreateDynamicObject(1965, 429.37, 1772.55, 12.57, 0.00, 0.00, 270.00);
	CreateDynamicObject(1965, 434.75, 1772.55, 12.57, 0.00, 0.00, 270.00);
	CreateDynamicObject(970, 420.50, 1791.86, 11.71, 0.00, 0.00, 0.00);
	CreateDynamicObject(970, 424.67, 1791.86, 11.71, 0.00, 0.00, 0.00);
	CreateDynamicObject(970, 436.31, 1791.90, 11.71, 0.00, 0.00, 0.00);
	CreateDynamicObject(966, 438.92, 1782.75, 11.19, 0.00, 0.00, 90.00);
	CreateDynamicObject(968, 438.92, 1782.80, 11.87, 0.00, 11.00, -90.00);
	CreateDynamicObject(1782, 439.36, 1785.21, 11.78, 0.00, 0.00, 90.00);

	//=====================================================================================================

	vorota_fsi = CreateDynamicObject(19313, -1706.75, -2811.60, 16.85, 0.00, 0.00, -27.28); //Ворота фсин
	CreateDynamicObject(2886, -1712.86, -2807.84, 15.07, 0.00, 0.00, 152.00);
	CreateDynamicObject(2886, -1713.75, -2809.10, 15.07, 0.00, 0.00, -30.00);
	vorota_mo = CreateDynamicObject(10423, 537.635, 2858.29, 7.61168, 0.299999, 0.099999, 89.8);

	CreateDynamicObject(2886, 176.3,1381.23,12.48, 0.00, 0.00, 165.8);
	CreateDynamicObject(2886, 180.715,1392.04,12.6526, 0.00, 0.00, 77.3);
	vorota_pps = CreateDynamicObject(980, 179.454,1386.1,13.7843, 0.00, 0.00, 78.1); //Ворота ППС

	vorota_pps1 = CreateDynamicObject(11099, 2486.02, 1381.42, 999.03,0,0,0);
	vorota_pps2 = CreateDynamicObject(11099, 2491.22, 1381.43, 999.031,0,0,0);
	vorota_pps3 = CreateDynamicObject(11099, 2496.44, 1381.39, 999.021,0,0,0);
	CreateDynamic3DTextLabel("{FFFFFF}Нажмите {FFFF00}л.Alt{FFFFFF}\nЧтобы открыть/закрыть ворота", 0xFFFF00FF, -1712.86, -2807.84, 15.07, 5.0);
	CreateDynamic3DTextLabel("{FFFFFF}Нажмите {FFFF00}л.Alt{FFFFFF}\nЧтобы открыть/закрыть ворота", 0xFFFF00FF, -1713.75, -2809.10, 15.07, 5.0);

	CreateDynamic3DTextLabel("{FFFFFF}Нажмите {FFFF00}л.Alt{FFFFFF}\nЧтобы открыть/закрыть ворота", 0xFFFF00FF, 176.3,1381.23,12.48, 5.0);
	CreateDynamic3DTextLabel("{FFFFFF}Нажмите {FFFF00}л.Alt{FFFFFF}\nЧтобы открыть/закрыть ворота", 0xFFFF00FF, 180.715,1392.04,12.6526, 5.0);

	CreateActor(161, 145.3596,-949.1063,40.9170,200.3201);
	CreateDynamic3DTextLabel("Управляющий фермой\n{"#cW"}Поговорить: {2f89f7}л. ALT", 0x66CC00FF, 145.3596,-949.1063,40.9170 + 1.1, 10.0); // Армия вышка 2
	//---------АРЗ
	//CreateDynamic3DTextLabel("Автомастерская\n\nПосигнальте, чтобы заехать", 0xCECECEFF, -427.7569,614.4764,11.7600 + 0.3, 15.0);
	//CreateDynamic3DTextLabel("Автомастерская\n\nПосигнальте, чтобы заехать", 0xCECECEFF, 2152.1909,-1852.3691,18.0943 + 0.3, 15.0);
	//CreateDynamic3DTextLabel("Автомастерская\n\nПосигнальте, чтобы заехать", 0xCECECEFF, -179.1130,-1039.2416,40.4587 + 0.3, 15.0);
	//CreateDynamic3DTextLabel("Автомастерская\n\nПосигнальте, чтобы заехать", 0xCECECEFF, -2544.3708,1075.2622,8.0899 + 0.3, 15.0);

	CreatePickup(19134, 23, 1993.7583,1693.9078,15.9200, -1); // автомастерская
   	CreateDynamic3DTextLabel("{79cb64}/buygun", 0xFFDD00FF, 257.1270,1592.6824,1528.3159 + 0.1, 10.0);
	CreatePickup(1274, 23, 257.1270,1592.6824,1528.3159, -1, PICKUP_ACTION_TYPE_AMMO_BUY);
	//
	army_ammo_CP = CreateDynamicCP(240.9847,2868.7051,7.4377, 1.5, -1, -1, _, 7.0);

	samolet_CP = CreateDynamicCP(-4968.9692,-5002.5908,999.9081, 1.5, -1, -1, _, 8.0);
	CreateDynamic3DTextLabel("{FFFFFF}Выход из самолёта.", 0xFFFF00FF, -4968.9692,-5002.5908,999.9081 + 0.5, 10.0);

	yz_bil_CP = CreateDynamicCP(2781.1370,-2030.5266,21.3944, 1.5, -1, -1, _, 8.0);
	CreateDynamic3DTextLabel("{FFFFFF}Покупка билета на самолёт.\n{fcf400}Рейс: Россия-Майами\nСтоймость билета: 10.000 рублей.", 0xFFFF00FF, 2781.1370, -2030.5266, 21.3944 + 0.5, 10.0);
	yz_posad_CP = CreateDynamicCP(2768.1355,-2007.3105,26.8397, 1.5, -1, -1, _, 8.0);
	CreateDynamic3DTextLabel("{FFFFFF}Вход на регистрацию\n{fcf400}Подойдите, чтобы зарегистрироваться", 0xFFFF00FF, 2768.1355,-2007.3105,26.8397 + 0.5, 10.0);
	mia_bil_CP = CreateDynamicCP(-3819.8647,-5687.4194,7.8325, 1.5, -1, -1, _, 8.0);
	CreateDynamic3DTextLabel("{FFFFFF}Покупка билета на самолёт.\n{fcf400}Рейс: Майами-Россия\nСтоймость билета: 10.000 рублей.", 0xFFFF00FF, -3819.8647,-5687.4194,7.8325 + 0.5, 10.0);
	mia_posad_CP = CreateDynamicCP(-3754.8811,-5718.4077,13.8423, 1.5, -1, -1, _, 8.0);
	CreateDynamic3DTextLabel("{FFFFFF}Вход на регистрацию\n{fcf400}Подойдите, чтобы зарегистрироваться", 0xFFFF00FF, -3754.8811,-5718.4077,13.8423 + 0.5, 10.0);

	CreatePickup(1239, 23, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2], -1);

	CreateDynamic3DTextLabel("- Получение -\n{FFFFFF}номеров на личное ТС", 0x3399FFFF, 894.9863, 2088.8979, 2721.8018 + 1.8, 10.0);
	CreatePickup(1239, 23, 894.9863, 2088.8979, 2721.8018, -1, PICKUP_ACTION_TYPE_GET_CAR_NUM);

    /*//------------[Казино маппинг]
	CreateDynamicObject(18980, 2190.12, -1896.13, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2190.12, -1928.35, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2190.12, -1979.69, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2203.11, -1940.69, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18762, 2190.12, -1943.69, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2236.91, -1940.69, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18980, 2203.12, -1991.69, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18980, 2228.12, -1991.69, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18762, 2246.91, -1991.69, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18762, 2241.91, -1991.68, 18.31,   0.00, 90.00, 0.00);
	CreateDynamicObject(18980, 2248.00, 8286.00, -1978.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18980, 2248.91, -1978.68, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2248.91, -1953.69, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2248.91, -1927.69, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2248.91, -1902.69, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18762, 2248.91, -1887.70, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(18980, 2236.91, -1884.70, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18980, 2211.91, -1884.70, 18.30,   0.00, 90.00, 0.00);
	CreateDynamicObject(18980, 2203.12, -1884.71, 18.31,   0.00, 90.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1908.16, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1902.84, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1897.53, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1892.22, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(19360, 2190.12, -1885.83, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1886.92, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2190.11, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2190.11, -1916.34, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1921.64, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1926.95, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1932.26, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1937.56, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2190.11, -1940.69, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2190.12, -1939.45, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.12, -1948.69, 18.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1945.99, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1950.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2190.11, -1967.68, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1972.99, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1978.30, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2190.12, -1983.60, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1988.92, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2190.12, -1990.46, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2190.11, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2195.42, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2200.71, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2206.02, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2211.32, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2216.61, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2221.90, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2227.20, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2232.49, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2237.78, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2243.09, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2244.21, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2248.92, -1884.71, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2247.41, -1884.71, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2195.42, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2200.71, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2206.02, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2211.32, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2216.61, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2221.90, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2227.20, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2232.49, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2237.78, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2243.09, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2244.21, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2247.41, -1991.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2248.92, -1991.70, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 2190.11, -1910.13, 17.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 2190.11, -1913.27, 17.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 2190.11, -1916.39, 17.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2248.91, -1885.83, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1886.92, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1892.22, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1897.53, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1902.84, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1908.16, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2248.92, -1918.76, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1913.44, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(19452, 2248.91, -1924.05, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1929.34, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1934.64, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1940.69, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19433, 2248.91, -1940.25, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(19452, 2248.91, -1945.98, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1951.27, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1956.57, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1961.87, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1967.15, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1972.45, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2248.91, -1977.74, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(19452, 2248.91, -1987.37, 17.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 2248.92, -1982.59, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2243.62, -1940.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2238.32, -1940.67, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2233.02, -1940.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2227.71, -1940.67, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2226.09, -1940.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2224.90, -1940.67, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2215.12, -1940.67, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19360, 2213.04, -1940.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2210.95, -1940.67, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2205.67, -1940.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(18762, 2200.37, -1940.67, 18.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19452, 2195.07, -1940.69, 17.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(1214, 2190.12, -1965.60, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1964.01, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1962.40, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1960.79, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1959.17, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1957.59, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1955.97, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1954.37, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2190.12, -1952.81, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2217.54, -1940.69, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2219.23, -1940.69, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2220.80, -1940.69, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2222.36, -1940.69, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2223.98, -1940.69, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1214, 2215.98, -1940.69, 17.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(4091, 2215.65, -1964.96, 17.80,   0.00, 0.00, -90.00);
	CreateDynamicObject(4091, 2234.08, -1958.44, 17.80,   0.00, 0.00, 180.00);
	CreateDynamicObject(4091, 2240.61, -1976.87, 17.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(4091, 2222.17, -1983.39, 17.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(4091, 2215.65, -1964.96, 26.02,   0.00, 0.00, -90.00);
	CreateDynamicObject(18809, 2212.99, -1959.30, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(4091, 2222.17, -1983.39, 26.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(4091, 2240.61, -1976.87, 26.02,   0.00, 0.00, 90.00);
	CreateDynamicObject(4091, 2234.08, -1958.44, 26.02,   0.00, 0.00, 180.00);
	CreateDynamicObject(18763, 2209.30, -1952.10, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.30, -1952.10, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.30, -1952.10, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1955.07, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1955.07, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1955.07, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2212.29, -1952.10, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2212.29, -1952.10, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2212.29, -1952.10, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1962.64, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1965.98, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1969.32, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1972.66, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1975.99, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1979.33, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2212.99, -1982.67, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1989.75, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1986.75, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1986.75, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1989.75, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2212.28, -1989.75, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2212.28, -1989.75, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1986.75, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2209.28, -1989.75, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2212.28, -1989.75, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2216.41, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18763, 2246.94, -1952.10, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2243.94, -1952.10, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1955.10, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2243.94, -1952.10, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1952.10, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1955.10, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2243.94, -1952.10, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1952.10, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1955.10, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1986.75, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1989.75, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2243.94, -1989.75, 20.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1986.75, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1989.75, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2243.94, -1989.75, 25.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1986.75, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2246.94, -1989.75, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18763, 2243.94, -1989.75, 30.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2219.75, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2223.07, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2226.39, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2229.71, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2233.05, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2236.37, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2239.70, -1955.78, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2243.26, -1959.30, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1962.64, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1965.98, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1969.32, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1972.66, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1975.99, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1979.33, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2243.26, -1982.67, 7.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18809, 2239.70, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2236.37, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2233.05, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2229.71, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2226.39, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2223.07, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2219.75, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2216.41, -1986.06, 7.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18809, 2223.40, -1970.99, 17.35,   90.00, 0.00, 90.00);
	CreateDynamicObject(1569, 2207.60, -1969.50, 17.81,   0.00, 0.00, -90.00);
	CreateDynamicObject(1569, 2207.60, -1972.50, 17.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 2218.65, -1961.42, 33.26,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 2237.58, -1961.41, 33.25,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 2237.57, -1980.40, 33.26,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 2218.65, -1980.40, 33.25,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 2228.25, -1970.85, 34.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(1693, 2220.01, -1960.45, 36.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1693, 2236.03, -1960.45, 36.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1693, 2236.03, -1980.68, 36.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1693, 2220.01, -1980.68, 36.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2235.22, -1903.76, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2235.22, -1908.49, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2235.22, -1913.29, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2235.22, -1895.58, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2235.22, -1890.86, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2235.22, -1886.08, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1915.87, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1919.04, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1922.20, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1925.40, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1928.66, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1931.81, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1934.99, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2246.83, -1938.26, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1965.48, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1963.96, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1962.34, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1960.74, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1959.14, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1957.52, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1955.94, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1954.34, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1952.74, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1976.51, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1978.11, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1979.69, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1981.33, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1982.93, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2206.25, -1984.55, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2214.59, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2211.41, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2208.20, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2205.03, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2201.83, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2198.61, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2195.42, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2192.20, -1938.60, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2192.20, -1932.82, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1929.64, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1926.43, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1923.19, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1920.03, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1916.81, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1907.64, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1904.46, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1901.23, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1898.07, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1894.85, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1891.67, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2192.20, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2195.42, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2198.61, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2201.83, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2205.03, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2208.20, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2211.41, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2214.59, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2217.77, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2220.99, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2224.19, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2227.41, -1886.82, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19445, 2211.41, -1901.73, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19445, 2211.41, -1911.36, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19445, 2211.41, -1920.98, 16.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19399, 2209.72, -1925.71, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1922.55, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1919.33, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1916.11, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1912.93, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1909.73, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1906.50, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1903.34, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1900.16, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2209.72, -1897.00, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1897.00, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1900.16, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1903.34, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1906.50, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1909.73, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1912.93, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1916.11, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1919.33, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1922.55, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(19399, 2213.10, -1925.71, 16.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(4111, 2191.10, -1989.85, 18.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1783, 2191.05, -1988.21, 18.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(4111, 2191.10, -1986.38, 18.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1783, 2191.05, -1984.72, 18.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(4111, 2191.10, -1982.94, 18.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1783, 2191.05, -1981.28, 18.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(4111, 2191.10, -1979.43, 18.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1783, 2191.05, -1977.78, 18.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(4111, 2191.10, -1975.99, 18.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1783, 2191.05, -1974.36, 18.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(4111, 2191.10, -1972.48, 18.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1783, 2191.05, -1970.73, 18.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 2243.80, -1945.53, 17.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 2233.33, -1945.53, 17.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 2195.87, -1945.97, 17.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19445, 2228.05, -1945.54, 16.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19445, 2232.95, -1941.26, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19445, 2242.58, -1941.26, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19426, 2248.20, -1941.26, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19445, 2232.95, -1950.27, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19445, 2242.58, -1950.27, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19426, 2248.20, -1950.27, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19445, 2248.33, -1945.37, 16.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19445, 2201.05, -1945.90, 16.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19445, 2196.32, -1950.80, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19426, 2190.71, -1950.80, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19445, 2196.15, -1941.28, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19426, 2190.53, -1941.28, 16.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(19445, 2190.70, -1945.90, 16.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2192.91, -1943.20, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2195.81, -1943.25, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2198.90, -1943.12, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2192.79, -1945.92, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2192.87, -1948.76, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2196.50, -1948.74, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2198.90, -1948.71, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2198.86, -1945.89, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2195.86, -1945.98, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2230.25, -1948.29, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2234.29, -1948.29, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2238.13, -1948.20, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2242.15, -1948.29, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2246.05, -1948.20, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2230.25, -1945.30, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2234.29, -1945.30, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2238.13, -1945.30, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2242.15, -1945.30, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2246.05, -1945.30, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2230.25, -1943.25, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2234.29, -1943.25, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2238.13, -1943.25, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2242.15, -1943.25, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, 2246.05, -1943.25, 18.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(737, 2195.87, -1945.97, 17.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(737, 2233.33, -1945.53, 17.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(737, 2243.80, -1945.53, 17.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1988.92, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1978.30, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1967.68, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1950.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1937.56, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1926.95, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1916.34, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1908.16, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1897.53, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.11, -1886.92, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2190.09, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2200.78, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2211.32, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2221.90, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2232.49, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2243.09, -1884.71, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1886.92, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1897.53, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1908.16, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1918.76, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1929.34, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1951.25, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1961.87, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1972.45, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1982.59, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2248.92, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2243.09, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2232.49, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2221.90, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2211.32, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2200.71, -1991.70, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2200.37, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2210.95, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2215.12, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2224.90, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2227.71, -1940.69, 18.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 2238.32, -1940.69, 18.17,   0.00, 0.00, 0.00);
	//---------------------[Автосалон Маппинг]
	new tmpobjid;
	tmpobjid = CreateDynamicObject(1930, 2327.250000, -1789.500000, 23.879999, 0.000000, 0.000000, -45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2337.469970, -1782.829956, 20.459999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4375, "tran_houses", "rus_roof", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2362.439941, -1782.829956, 20.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "bender_brusch", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2337.469970, -1807.829956, 20.459999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4375, "tran_houses", "rus_roof", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2337.469970, -1832.819946, 20.459999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "bender_brusch", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2337.469970, -1848.380004, 20.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "bender_brusch", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2362.439941, -1807.829956, 20.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "bender_brusch", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2362.439941, -1832.819946, 20.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "bender_brusch", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2362.439941, -1848.380004, 20.459999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "bender_brusch", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2300.389892, -1771.229980, 22.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2300.389892, -1774.229980, 21.360000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2303.389892, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2308.340087, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2313.310058, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2318.290039, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2323.270019, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.250000, -1771.229980, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2328.270019, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.270019, -1808.479980, 21.420000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2346.209960, -1771.229980, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1774.209960, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1779.189941, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1785.170043, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.250000, -1782.180053, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1790.160034, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1795.140014, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1800.140014, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.250000, -1803.119995, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1806.109985, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1811.109985, 21.440000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.250000, -1814.089965, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.250000, -1821.449951, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1771.229980, 21.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1771.229980, 21.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1771.229980, 21.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1771.229980, 21.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1771.229980, 21.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2362.139892, -1771.229980, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2272.060058, -1799.339965, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2287.389892, -1799.339965, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2287.389892, -1777.040039, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2287.389892, -1754.770019, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2287.389892, -1732.520019, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2272.060058, -1777.040039, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2272.060058, -1754.770019, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(2591, 2272.060058, -1732.520019, 9.720000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1821.449951, 21.420000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1821.449951, 21.420000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1821.449951, 21.420000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1821.449951, 21.420000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1821.449951, 21.420000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1821.449951, 21.420000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2362.139892, -1821.449951, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2346.209960, -1821.449951, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2362.139892, -1808.459960, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2362.139892, -1783.459960, 20.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1771.229980, 21.440000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1771.229980, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1771.229980, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1771.229980, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1771.229980, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.260009, -1771.250000, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1771.229980, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1774.209960, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1779.189941, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1785.170043, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1790.160034, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1795.140014, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1800.140014, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1806.109985, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1811.109985, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.270019, -1808.479980, 32.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1821.449951, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1821.449951, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1821.449951, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1821.449951, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1821.449951, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1821.449951, 32.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2300.389892, -1799.550048, 21.420000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2300.389892, -1824.530029, 21.420000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2300.389892, -1847.670043, 21.399999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2300.389892, -1860.650024, 22.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2308.340087, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2303.389892, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2313.310058, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2318.290039, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2323.270019, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2328.270019, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2346.209960, -1860.650024, 9.359999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2362.139892, -1860.650024, 9.359999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2322.139892, -1786.489990, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2322.840087, -1785.790039, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2323.530029, -1785.089965, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2324.239990, -1784.390014, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2324.939941, -1783.689941, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2325.629882, -1783.010009, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2326.330078, -1782.319946, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2327.030029, -1781.619995, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2327.719970, -1780.930053, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2328.409912, -1780.260009, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18767, 2329.110107, -1779.550048, 17.020000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4838, "rush_txdpack2", "plitkas", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2324.159912, -1792.699951, 13.399999, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2327.030029, -1795.829956, 23.879999, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.040039, -1786.829956, 13.500000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.040039, -1798.599975, 13.399999, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2365.110107, -1860.650024, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2368.080078, -1860.650024, 22.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2365.110107, -1771.229980, 21.360000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2368.080078, -1771.229980, 22.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2368.080078, -1799.550048, 21.420000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2368.080078, -1824.530029, 21.420000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2368.080078, -1847.670043, 21.399999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2368.080078, -1774.579956, 21.420000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18856, 2327.719970, -1808.739990, 19.860000, 0.000000, 165.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(18856, 2332.239990, -1808.739990, 20.459999, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(18856, 2335.260009, -1824.069946, 19.860000, 0.000000, 165.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(18856, 2335.270019, -1819.520019, 20.459999, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2606, "scroads", "road7", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2606, "scroads", "road7", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2349.360107, -1808.819946, 31.819999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4375, "tran_houses", "rus_roof", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2349.620117, -1783.890014, 31.840000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4375, "tran_houses", "rus_roof", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2343.280029, -1784.050048, 31.860000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4375, "tran_houses", "rus_roof", 0x00000000);
	tmpobjid = CreateDynamicObject(18981, 2343.250000, -1809.050048, 31.840000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4375, "tran_houses", "rus_roof", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1816.949951, 23.879999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1808.969970, 23.879999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1800.979980, 23.879999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1775.709960, 23.879999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1783.680053, 23.879999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2334.659912, -1771.229980, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2342.639892, -1771.229980, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2357.979980, -1771.229980, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2350.020019, -1771.229980, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2357.979980, -1821.449951, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2350.020019, -1821.449951, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2342.639892, -1821.449951, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2334.659912, -1821.449951, 23.879999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.270019, -1808.479980, 26.319999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1795.140014, 26.319999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1790.160034, 26.319999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1785.170043, 26.319999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1779.189941, 26.319999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1774.209960, 26.319999, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1821.449951, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1821.449951, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1821.449951, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1821.449951, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1821.449951, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1821.449951, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2357.979980, -1821.449951, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2350.020019, -1821.449951, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2342.639892, -1821.449951, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2334.659912, -1821.449951, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1816.949951, 28.799999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1808.969970, 28.799999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1800.979980, 28.799999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1783.680053, 28.799999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2330.020019, -1775.709960, 28.799999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(18764, 2332.469970, -1795.050048, 29.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18764, 2332.469970, -1790.060058, 29.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1821.449951, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1821.449951, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1821.449951, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1821.449951, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1821.449951, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1821.449951, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 2330.270019, -1808.479980, 31.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1795.140014, 31.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1790.160034, 31.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1785.170043, 31.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1779.189941, 31.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2330.250000, -1774.209960, 31.000000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1771.229980, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.260009, -1771.250000, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1771.229980, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1771.229980, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1771.229980, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1771.229980, 31.000000, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2333.260009, -1771.229980, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2338.250000, -1771.229980, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2343.229980, -1771.229980, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2349.199951, -1771.229980, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2354.199951, -1771.229980, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(18762, 2359.159912, -1771.229980, 26.319999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4593, "arz_diana", "tile_brown", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2334.659912, -1771.229980, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2342.639892, -1771.229980, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2350.020019, -1771.229980, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2357.979980, -1771.229980, 28.799999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4956, "bat_admin", "bat_admin_sinokn", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(4091, 2337.520019, -1785.020019, 14.600000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2344.040039, -1803.430053, 14.600000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2344.040039, -1814.199951, 14.600000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2347.229980, -1814.199951, 14.600000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2347.229980, -1803.430053, 14.600000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2348.209960, -1785.000000, 14.600000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2359.689941, -1785.069946, 14.600000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19379, 2330.510009, -1792.380004, 25.940000, 0.000000, 90.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1506, 2327.159912, -1789.650024, 21.879999, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19379, 2330.510009, -1792.380004, 21.840000, 0.000000, 90.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2335.389892, -1784.459960, 14.600000, 0.000000, 0.000000, 45.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2333.260009, -1859.339965, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2343.229980, -1859.339965, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2354.199951, -1859.339965, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2365.110107, -1859.339965, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4259, 2350.489990, -1844.109985, 21.430000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2366.469970, -1850.979980, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2366.469970, -1841.719970, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(717, 2366.469970, -1831.619995, 21.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(10070, 2348.610107, -1859.209960, 21.510000, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(10070, 2338.110107, -1859.209960, 21.510000, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(10070, 2359.820068, -1859.209960, 21.510000, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(10070, 2366.139892, -1855.219970, 21.510000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(10070, 2366.139892, -1846.270019, 21.510000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(10070, 2366.139892, -1836.069946, 21.510000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3595, 2330.090087, -1808.890014, 23.479999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1236, 2364.719970, -1772.819946, 21.399999, 356.859985, 0.000000, 3.140000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1219, 2366.689941, -1775.709960, 21.190000, 356.859985, 0.000000, -2.930000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1227, 2363.510009, -1775.869995, 21.709999, 356.859985, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3595, 2335.469970, -1821.449951, 23.479999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1688, 2346.830078, -1805.790039, 33.299999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1688, 2347.560058, -1787.160034, 33.299999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1689, 2347.040039, -1795.290039, 33.299999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1689, 2347.550048, -1812.839965, 33.299999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1692, 2337.620117, -1786.260009, 33.139999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1692, 2337.610107, -1812.000000, 33.139999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1692, 2355.820068, -1812.000000, 33.139999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1692, 2355.820068, -1786.260009, 33.139999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3643, 2329.879882, -1792.969970, 26.059999, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(970, 2330.590087, -1824.069946, 21.469999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(970, 2330.590087, -1858.020019, 21.469999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(970, 2330.590087, -1853.880004, 21.469999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(970, 2330.590087, -1849.760009, 21.469999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1257, 2296.300048, -1812.390014, 22.120000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1793.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1796.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1799.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1802.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1805.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1808.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1811.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1814.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1817.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1820.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1823.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1826.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1829.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1832.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1835.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1838.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1841.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1844.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1847.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -18502.390625, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1850.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1853.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1856.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19353, 2302.659912, -1859.390014, 19.239999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);*/
	//------------[Маппинг Анашан]
	/*tmpobjid = CreateDynamicObject(4091, 2479.689941, -702.640014, 11.869999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 2, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 4, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 6, 7000, "AS_trackpan_tex", "AS_corona", 0x00000000);
	tmpobjid = CreateDynamicObject(4091, 2490.479980, -702.650024, 11.869999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	tmpobjid = CreateDynamicObject(4091, 2490.479980, -702.650024, 20.059999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	tmpobjid = CreateDynamicObject(4091, 2499.149902, -703.590026, 20.040000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2468.929931, -724.250000, 11.199999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4030, "bender_main", "bender_wall_bezh", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2479.409912, -723.590026, 11.199999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4030, "bender_main", "bender_wall_bezh", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2489.899902, -724.260009, 11.199999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4030, "bender_main", "bender_wall_bezh", 0x00000000);
	tmpobjid = CreateDynamicObject(1930, 2476.360107, -719.469970, 20.959999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4030, "bender_main", "bender_red_1", 0x00000000);
	tmpobjid = CreateDynamicObject(1790, 2506.790039, -703.679992, 13.670000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 7000, "AS_trackpan_tex", "AS_White_Separator", 0x00000000);
	tmpobjid = CreateDynamicObject(3033, 2486.050048, -719.469970, 18.340000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4030, "bender_main", "bender_red_1", 0x00000000);
	tmpobjid = CreateDynamicObject(3033, 2466.159912, -719.450012, 18.340000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4030, "bender_main", "bender_red_1", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2504.489990, -716.989990, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2504.560058, -707.419982, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2504.600097, -697.820007, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2504.590087, -688.250000, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2494.120117, -688.229980, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2483.709960, -688.239990, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2473.250000, -688.210021, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2462.800048, -688.210021, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2452.419921, -688.169982, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2452.419921, -697.780029, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2452.399902, -707.289978, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2452.409912, -716.869995, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2462.760009, -714.729980, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2473.239990, -714.700012, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2483.719970, -714.690002, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2494.179931, -714.710021, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2494.280029, -705.200012, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2494.270019, -695.659973, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2462.780029, -697.049987, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2462.770019, -706.609985, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2477.949951, -697.630004, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2477.949951, -707.090026, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2470.919921, -705.179992, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2470.979980, -697.250000, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2486.020019, -697.169982, 27.479999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 2485.699951, -706.419982, 27.469999, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4000, "wolv_genpack", "metpat64", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(4091, 2475.379882, -711.659973, 11.930000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2475.389892, -711.659973, 20.049999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2491.520019, -711.650024, 11.920000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2491.540039, -711.640014, 20.049999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2468.889892, -702.630004, 11.869999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2468.889892, -702.630004, 20.040000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2479.689941, -702.650024, 20.040000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(5301, 2477.820068, -720.049987, 27.280000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2499.149902, -703.750000, 11.869999, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2498.870117, -702.640014, 11.869999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2498.870117, -702.640014, 20.059999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2458.229980, -704.020019, 11.920000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2458.229980, -704.030029, 20.040000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2458.229980, -702.619995, 11.869999, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4091, 2458.250000, -702.619995, 20.030000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(782, 2456.409912, -726.280029, 11.300000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(782, 2493.199951, -726.419982, 11.300000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(970, 2463.649902, -721.559997, 11.760000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(970, 2487.850097, -721.469970, 11.760000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1423, 2444.429931, -775.349975, 12.000000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1508, 2491.149902, -688.280029, 12.920000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1508, 2472.860107, -688.270019, 12.920000, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1569, 2467.760009, -719.419982, 11.289999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1569, 2470.760009, -719.409973, 11.289999, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1569, 2474.580078, -719.409973, 11.289999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1569, 2477.560058, -719.409973, 11.289999, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1569, 2481.709960, -719.419982, 11.289999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1569, 2484.699951, -719.419982, 11.289999, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18809, 2504.310058, -715.989990, 2.339999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18809, 2503.520019, -691.950012, 2.339999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18809, 2453.800048, -691.820007, 2.339999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(18809, 2454.120117, -715.890014, 2.339999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(4322, 2446.239990, -750.840026, 12.680000, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3034, 2491.129882, -688.239990, 15.449999, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(3034, 2472.860107, -688.289978, 15.489999, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2973, 2484.860107, -686.590026, 11.300000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(2973, 2477.939941, -686.880004, 11.300000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1791, 2506.750000, -703.770019, 21.329999, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1792, 2450.620117, -704.159973, 13.020000, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);*/

	new zabor[48];//?????
	zabor[0]=CreateObject(970, 1827.74, 2427.51, 15.39,   0.00, 0.00, 124.00);
	zabor[1]=CreateObject(970, 1825.45, 2430.92, 15.39,   0.00, 0.00, 124.00);
	zabor[2]=CreateObject(970, 1823.16, 2434.31, 15.39,   0.00, 0.00, 124.00);
	zabor[3]=CreateObject(970, 1820.84, 2437.74, 15.39,   0.00, 0.00, 124.00);
	zabor[4]=CreateObject(970, 1818.54, 2441.14, 15.39,   0.00, 0.00, 124.00);
	zabor[5]=CreateObject(970, 1816.23, 2444.57, 15.39,   0.00, 0.00, 124.00);
	zabor[6]=CreateObject(970, 1813.94, 2447.97, 15.39,   0.00, 0.00, 124.00);
	zabor[7]=CreateObject(970, 1813.12, 2449.20, 15.39,   0.00, 0.00, 123.52);
	zabor[8]=CreateObject(970, 1811.23, 2452.84, 15.39,   0.00, 0.00, 112.00);
	zabor[9]=CreateObject(970, 1810.36, 2454.99, 15.39,   0.00, 0.00, 112.00);
	zabor[10]=CreateObject(970, 1807.58, 2457.32, 15.39,   0.00, 0.00, 167.86);
	zabor[11]=CreateObject(970, 1831.05, 2429.89, 15.39,   0.00, 0.00, 124.00);
	zabor[12]=CreateObject(970, 1831.61, 2432.78, 15.39,   0.00, 0.00, 34.00);
	zabor[13]=CreateObject(970, 1835.00, 2435.11, 15.39,   0.00, 0.00, 35.00);
	zabor[14]=CreateObject(970, 1838.41, 2437.45, 15.39,   0.00, 0.00, 34.00);
	zabor[15]=CreateObject(970, 1841.82, 2439.76, 15.39,   0.00, 0.00, 34.00);
	zabor[16]=CreateObject(970, 1845.23, 2442.07, 15.39,   0.00, 0.00, 34.00);
	zabor[17]=CreateObject(970, 1848.64, 2444.38, 15.39,   0.00, 0.00, 34.00);
	zabor[18]=CreateObject(970, 1852.09, 2446.66, 15.39,   0.00, 0.00, 34.00);
	zabor[19]=CreateObject(970, 1853.81, 2447.83, 15.39,   0.00, 0.00, 34.00);
	zabor[20]=CreateObject(970, 1856.98, 2450.43, 15.39,   0.00, 0.00, 45.00);
	zabor[21]=CreateObject(970, 1857.32, 2450.77, 15.39,   0.00, 0.00, 45.00);
	zabor[22]=CreateObject(970, 1859.48, 2454.12, 15.39,   0.00, 0.00, 69.78);
	zabor[23]=CreateObject(970, 1860.19, 2458.16, 15.39,   0.00, 0.00, 90.00);
	zabor[24]=CreateObject(970, 1859.41, 2462.13, 15.39,   0.00, 0.00, 112.32);
	zabor[25]=CreateObject(970, 1859.09, 2462.89, 15.39,   0.00, 0.00, 112.32);
	zabor[26]=CreateObject(970, 1857.17, 2466.50, 15.39,   0.00, 0.00, 123.96);
	zabor[27]=CreateObject(970, 1854.88, 2469.91, 15.39,   0.00, 0.00, 123.96);
	zabor[28]=CreateObject(970, 1852.59, 2473.31, 15.39,   0.00, 0.00, 123.96);
	zabor[29]=CreateObject(970, 1850.29, 2476.74, 15.39,   0.00, 0.00, 123.96);
	zabor[30]=CreateObject(970, 1847.98, 2480.16, 15.39,   0.00, 0.00, 123.96);
	zabor[31]=CreateObject(970, 1845.64, 2483.55, 15.39,   0.00, 0.00, 125.00);
	zabor[32]=CreateObject(970, 1845.03, 2484.43, 15.39,   0.00, 0.00, 125.00);
	zabor[33]=CreateObject(970, 1845.56, 2487.28, 15.39,   0.00, 0.00, 34.00);
	zabor[34]=CreateObject(970, 1807.75, 2461.31, 15.35,   0.00, 0.00, 10.06);
	zabor[35]=CreateObject(970, 1810.51, 2463.62, 15.35,   0.00, 0.00, 69.88);
	zabor[36]=CreateObject(970, 1810.69, 2464.08, 15.35,   0.00, 0.00, 69.88);
	zabor[37]=CreateObject(970, 1812.85, 2467.51, 15.35,   0.00, 0.00, 45.34);
	zabor[38]=CreateObject(970, 1813.91, 2468.58, 15.35,   0.00, 0.00, 45.34);
	zabor[39]=CreateObject(970, 1817.06, 2471.22, 15.35,   0.00, 0.00, 34.42);
	zabor[40]=CreateObject(970, 1820.45, 2473.53, 15.35,   0.00, 0.00, 34.00);
	zabor[41]=CreateObject(970, 1823.87, 2475.84, 15.35,   0.00, 0.00, 34.00);
	zabor[42]=CreateObject(970, 1827.27, 2478.14, 15.35,   0.00, 0.00, 34.00);
	zabor[43]=CreateObject(970, 1830.71, 2480.47, 15.35,   0.00, 0.00, 34.00);
	zabor[44]=CreateObject(970, 1834.13, 2482.78, 15.35,   0.00, 0.00, 34.00);
	zabor[45]=CreateObject(970, 1837.56, 2485.10, 15.35,   0.00, 0.00, 34.00);
	zabor[46]=CreateObject(970, 1840.97, 2487.41, 15.35,   0.00, 0.00, 34.00);
	zabor[47]=CreateObject(970, 1844.39, 2489.72, 15.35,   0.00, 0.00, 34.00);

	new ploshad[11];
	ploshad[0]=CreateObject(19074, 1811.17, 2457.83, 12.33,   0.00, -180.00, 34.74);
	ploshad[1]=CreateObject(19074, 1827.60, 2469.22, 12.33,   0.00, -180.00, 34.74);
	ploshad[2]=CreateObject(19074, 1845.47, 2478.47, 12.33,   0.00, -180.00, 34.74);
	ploshad[3]=CreateObject(19074, 1822.51, 2441.70, 12.33,   0.00, -180.00, 34.74);
	ploshad[4]=CreateObject(19074, 1833.81, 2425.29, 12.33,   0.00, -180.00, 34.74);
	ploshad[5]=CreateObject(19074, 1838.93, 2453.11, 12.33,   0.00, -180.00, 34.74);
	ploshad[6]=CreateObject(19074, 1856.86, 2462.09, 12.33,   0.00, -180.00, 34.74);
	ploshad[7]=CreateObject(19074, 1850.23, 2436.67, 12.33,   0.00, -180.00, 34.74);
	ploshad[8]=CreateObject(19074, 1792.33, 2453.42, 8.36,   0.00, -205.00, 35.00);
	ploshad[9]=CreateObject(19074, 1853.1196, 2499.0049, 8.3452,  0.0000, -205.0000, -145.0000);
	ploshad[10]=CreateObject(19074, 1846.1467, 2412.0920, 8.3502,  0.0000, -205.0000, -235.0000);

	new Lavochka[8];
	Lavochka[0]=CreateObject(1256, 1841.10, 2452.40, 15.42,   0.00, 0.00, 305.50);
	Lavochka[1]=CreateObject(1256, 1831.70, 2446.30, 15.42,   0.00, 0.00, 305.00);
	Lavochka[2]=CreateObject(1256, 1823.10, 2458.50, 15.42,   0.00, 0.00, 124.74);
	Lavochka[3]=CreateObject(1256, 1832.60, 2465.40, 15.42,   0.00, 0.00, 124.74);
	Lavochka[4]=CreateObject(1256, 1823.61, 2434.21, 15.42,   0.00, 0.00, 214.52);
	Lavochka[5]=CreateObject(1256, 1818.08, 2442.36, 15.42,   0.00, 0.00, 214.52);
	Lavochka[6]=CreateObject(1256, 1811.27, 2453.68, 15.42,   0.00, 0.00, 202.10);
	Lavochka[7]=CreateObject(1256, 1830.7753, 2429.6448, 15.4200,   0.00, 0.00, 35.0);

	new Fonari[19];
	Fonari[0]=CreateObject(1232, 1825.30, 2430.74, 16.99,   0.00, 0.00, 0.00);
	Fonari[1]=CreateObject(1232, 1820.69, 2437.65, 16.99,   0.00, 0.00, 0.00);
	Fonari[2]=CreateObject(1232, 1814.92, 2446.15, 16.99,   0.00, 0.00, 0.00);
	Fonari[3]=CreateObject(1232, 1809.42, 2456.71, 16.99,   0.00, 0.00, 0.00);
	Fonari[4]=CreateObject(1232, 1809.65, 2461.82, 16.99,   0.00, 0.00, 0.00);
	Fonari[5]=CreateObject(1232, 1815.24, 2470.20, 16.99,   0.00, 0.00, 0.00);
	Fonari[6]=CreateObject(1232, 1823.80, 2475.98, 16.99,   0.00, 0.00, 0.00);
	Fonari[7]=CreateObject(1232, 1834.01, 2482.95, 16.99,   0.00, 0.00, 0.00);
	Fonari[8]=CreateObject(1232, 1844.27, 2489.88, 16.99,   0.00, 0.00, 0.00);
	Fonari[9]=CreateObject(1232, 1845.86, 2487.27, 16.99,   0.00, 0.00, 0.00);
	Fonari[10]=CreateObject(1232, 1847.02, 2481.93, 16.99,   0.00, 0.00, 0.00);
	Fonari[11]=CreateObject(1232, 1852.75, 2473.38, 16.99,   0.00, 0.00, 0.00);
	Fonari[12]=CreateObject(1232, 1858.52, 2464.82, 16.99,   0.00, 0.00, 0.00);
	Fonari[13]=CreateObject(1232, 1859.64, 2454.00, 16.99,   0.00, 0.00, 0.00);
	Fonari[14]=CreateObject(1232, 1850.43, 2445.34, 16.99,   0.00, 0.00, 0.00);
	Fonari[15]=CreateObject(1232, 1840.19, 2438.40, 16.99,   0.00, 0.00, 0.00);
	Fonari[16]=CreateObject(1232, 1830.10, 2431.49, 16.99,   0.00, 0.00, 0.00);
	Fonari[17]=CreateObject(1232, 1799.46, 2461.09, 16.99,   0.00, 0.00, 0.00);
	Fonari[18]=CreateObject(1232, 1801.84, 2457.44, 16.99,   0.00, 0.00, 0.00);
	//==========================================================================

    for(new i; i < sizeof(WheatPos); i ++)
	{
 		wheat_id[i] = CreateObject(9202, WheatPos[i][wheat_x], WheatPos[i][wheat_y], WheatPos[i][wheat_z] - 0.5, 0.0, 0.0, WheatPos[i][wheat_rotz]);
 		wheat_label[i] = CreateDynamic3DTextLabel("", -1, WheatPos[i][wheat_x], WheatPos[i][wheat_y], WheatPos[i][wheat_z] + 1.0, 10.0);

 		wheat_time[i] = 2 * 60;
	}

	g_last_lottery_time =
	g_last_pay_day_time =
	g_last_m_timer_time = gettime();

	LoadPomoi();
	LoadLoad();
	CityZonesInit();
	CreateTextDraws();
//	CreateBilet();
	CreateMenus();
	CreateVehicles();
	CreateMedBeds();
	CreateCasinoTables();
	CreateArmories();

	CreateGreenZones();

	HelpInfoInit();
	ServerRadioInit();
	AnimListInit();
	BusRoutesInit();
	BanksInit();
	TempJobsInit();
	MapIconsInit();
	InfoPickupsInit();
	TeleportPickupsInit();
	DrivingSchoolInit();
	AtmsInit();
	GatesInit();
	//OstInit();

	#if defined RAND_WEATHER
	SetRandomWeather();
	#endif

	//#if defined _MAP_INCLUDED
	//CreateMAP(); // закомментировал я
	//#endif

	#if defined _GANG_ZONES_INC
	CreateGangZonesCR();
	#endif

	//mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	//mysql = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_BASE, 3306, true, 2);
	mysql = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_BASE, MYSQL_PASS);
	mysql_set_charset("cp1251");
	switch(mysql_errno())
	{
		case 0: print("Подключение к базе данных удалось");
	    case 1044: return print("Подключение к базе данных не удалось [Указано несуществующее имя пользователя]");
	    case 1045: return print("Подключение к базе данных не удалось [Указан неправильный пароль]");
	    case 1049: return print("Подключение к базе данных не удалось [Указана несуществующая база данных]");
	    case 2003: return print("Подключение к базе данных не удалось [Хостинг с базой данных недоступен]");
	    case 2005: return print("Подключение к базе данных не удалось [Указан неправильный адрес хостинга]");
	    default: return printf("Подключение к базе данных не удалось [Неизвестная ошибка. Код ошибки: %d]", mysql_errno());
	}
	UploadAntiCheatSettings();
	LoadServerConfig();
    UpdateCharity();
    RepositoriesLoad();

    LoadEntrances();
    LoadHouses();
   	LoadObjects();
    LoadHousesRenters();
    EntranceStatusInitAll();

	LoadCarNumberOptions();

    LoadFuelStations();
    LoadBusinesses();
    LoadHotels();

    LoadOrders();
    LoadObject();
    LoadFamily();
    LoadGangZones();
    LoadGangRepositories();
	//LoadStonks();

	//LoadOwnableCars();
	//LoadTrunks();

	SetTimer("ClearBanList", 15_000, false);
	SetTimer_("OnSecondTimer", 1000, 0, -1);
	SetTimer_("OnSpeedTimerUp", 100, 0, -1);

	SetTimer_("SpeedBooster", 100, 0, -1);

	CallLocalFunction("HospitalTreatment", "");

	SetGameModeText(SERVER_VERSION);

	return 1;
}

public OnGameModeExit()
{
	#if defined _blackjack_included
		Iter_Clear(blackjackTables);
	#endif
	SaveRepository();

	mysql_close(mysql);
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		new a_state = GetPlayerData(playerid, P_ACCOUNT_STATE);
		if(a_state != ACCOUNT_STATE_REG_SKIN)
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Для игры на сервере Вы должны %s", a_state == ACCOUNT_STATE_REGISTER ? ("пройти регистрацию") : ("авторизироваться"));

			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF6600}Ошибка",
				fmt_str,
				"Закрыть", ""
			);
			Kick:(playerid);
			SendClientMessage(playerid, 0xFF6600FF, fmt_str[8]);
		}
	}
	else if(IsPlayerLogged(playerid))
	{
		//SetPlayerSpawnInit(playerid);
		//SpawnPlayer(playerid);

		SendClientMessage(playerid, 0xFFFF00FF, "Для смены внешности посетите любой магазин одежды");
	}

	return 1;
}

public OnPlayerConnect(playerid)
{

    new hour, minute;
	gettime(hour, minute);
	RouletteStarted[playerid] = 0;//fix ruletki

	SetPVarInt(playerid, "CasinoTable", -1); // Обнуляем игроку номер стола
    SetPVarInt(playerid, "SelectTextDrawEnter", 0); // Деактивируем кликабельность игроку
	SetPVarInt(playerid, "vehselectplayer", INVALID_VEHICLE_ID);

	// PlayAudioStreamForPlayer(playerid,"https://cdn1.mzmdl.com/cuts/45/1b/451b07f6c962e8930cac6f5d246ee61a/64401007/Mirazh_-_Nastupaet_noch_b128f0d263.mp3");

	//====================================доп=======================================

	RemoveBuildingForPlayer(playerid, 2067, 2716.7500, -2454.0200, 21.2635, 0.25);
	RemoveBuildingForPlayer(playerid, 2068, 2716.7500, -2454.0200, 21.2635, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2400.0000, -2550.0000, -50.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2091, 2400.0000, -2550.0000, -50.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2748.8999, -2402.1799, 20.7400, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 2776.6799, -2427.4299, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 635, 2778.0901, -2438.7100, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 636, 2775.2700, -2448.3401, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 635, 2778.3601, -2460.4500, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 2774.9199, -2467.8501, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2783.6599, -2468.0801, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2745.7200, -2412.3601, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2745.5701, -2473.4900, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2745.6399, -2443.4399, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2721.7000, -2478.5200, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2719.2100, -2407.3799, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2692.6799, -2412.2100, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2692.7500, -2470.1799, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2692.8201, -2444.1599, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1245, 2682.8701, -2402.2000, 22.2400, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 2703.5000, -2422.1399, 27.1750, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 2736.3899, -2421.7600, 27.1750, 0.25);
	RemoveBuildingForPlayer(playerid, 1245, 2683.3701, -2494.5100, 22.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2716.7500, -2454.0200, 21.2635, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2704.9900, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2715.5200, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2723.3000, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2731.1201, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2705.5200, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2712.4700, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2726.7400, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2719.1699, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2733.2100, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 4384, -317.8350, 798.0310, 17.4423, 0.25);
	RemoveBuildingForPlayer(playerid, 4385, -317.8350, 798.0310, 17.4423, 0.25);
	RemoveBuildingForPlayer(playerid, 5106, -231.6730, 473.5300, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 5107, -120.4450, 449.2380, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 5109, -235.9890, 373.0920, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 4614, -231.6730, 473.5300, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 4615, -120.4450, 449.2380, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 4616, -235.9890, 373.0920, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 8008, -1600.7700, 1587.6500, -70.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 8030, -1600.7700, 1587.6500, -70.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 3568, -1537.4500, 1838.9200, 43.5550, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, -1899.6500, 1868.9301, 43.5550, 0.25);
	RemoveBuildingForPlayer(playerid, 3570, -1543.3300, 1462.2300, 42.6940, 0.25);
	RemoveBuildingForPlayer(playerid, 3571, -1890.7200, 1459.5601, 37.0910, 0.25);
	RemoveBuildingForPlayer(playerid, 3572, -1665.9399, 1760.5300, 37.0312, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, -1616.4000, 1582.2300, 34.5817, 0.25);
	RemoveBuildingForPlayer(playerid, 3575, -1527.8300, 1611.0200, 40.5860, 0.25);
	RemoveBuildingForPlayer(playerid, 3576, -1790.1899, 1692.8800, 35.3453, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, -1537.4500, 1838.9200, 43.5550, 0.25);
	RemoveBuildingForPlayer(playerid, 3585, -1899.6500, 1868.9301, 43.5550, 0.25);
	RemoveBuildingForPlayer(playerid, 3586, -1543.3300, 1462.2300, 42.6940, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, -1890.7200, 1459.5601, 37.0910, 0.25);
	RemoveBuildingForPlayer(playerid, 3588, -1665.9399, 1760.5300, 37.0312, 0.25);
	RemoveBuildingForPlayer(playerid, 3589, -1616.4000, 1582.2300, 34.5817, 0.25);
	RemoveBuildingForPlayer(playerid, 3590, -1527.8300, 1611.0200, 40.5860, 0.25);
	RemoveBuildingForPlayer(playerid, 3591, -1790.1899, 1692.8800, 35.3453, 0.25);
	RemoveBuildingForPlayer(playerid, 3581, -1552.2800, 1708.3600, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1552.5400, 1677.5601, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1722.4500, 1420.4700, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1734.3101, 1404.3000, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1761.1500, 1404.6801, 35.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1788.0400, 1405.1300, 35.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1815.0000, 1405.0500, 35.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1850.7500, 1426.1200, 34.9707, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1871.2100, 1449.6600, 34.9707, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1883.9301, 1479.2900, 35.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1868.2800, 1505.1700, 35.4000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1841.2900, 1523.1801, 35.4000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1809.0200, 1532.5400, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1780.7100, 1520.5500, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1761.2000, 1501.4700, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1764.5699, 1660.4700, 37.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1801.5601, 1653.2900, 36.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1825.7500, 1687.3199, 35.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1810.0699, 1719.5100, 35.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1744.0100, 1727.5601, 37.1000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1716.7700, 1727.5601, 37.1000, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1552.5400, 1650.9399, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1552.5400, 1624.3199, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1552.5400, 1597.6100, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, -1552.5400, 1570.9900, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3583, -1788.0699, 1738.5500, 35.9900, 0.25);
	RemoveBuildingForPlayer(playerid, 3583, -1826.3600, 1660.2600, 35.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3592, -1552.2800, 1708.3600, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1552.5400, 1677.5601, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1722.4500, 1420.4700, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1734.3101, 1404.3000, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1761.1500, 1404.6801, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1788.0400, 1405.1300, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1815.0000, 1405.0500, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1850.7500, 1426.1200, 34.9707, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1871.2100, 1449.6600, 34.9707, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1883.9301, 1479.2900, 35.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1868.2800, 1505.1700, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1841.2900, 1523.1801, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1809.0200, 1532.5400, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1780.7100, 1520.5500, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1761.2000, 1501.4700, 35.6480, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1764.5699, 1660.4700, 37.3080, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1801.5601, 1653.2900, 37.3080, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1825.7500, 1687.3199, 37.3080, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1810.0699, 1719.5100, 37.3080, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1744.0100, 1727.5601, 37.3080, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1716.7700, 1727.5601, 37.3080, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1552.5400, 1650.9399, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1552.5400, 1624.3199, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1552.5400, 1597.6100, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, -1552.5400, 1570.9900, 37.4430, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, -1788.0699, 1738.5500, 36.5120, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, -1826.3600, 1660.2600, 36.5120, 0.25);
	RemoveBuildingForPlayer(playerid, 3573, -1748.1801, 1373.0100, 37.8291, 0.25);
	RemoveBuildingForPlayer(playerid, 3580, -1696.8700, 1506.0900, 34.9077, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, -1688.8700, 1495.2300, 34.9287, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, -1694.7200, 1493.9800, 34.9287, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, -1703.1600, 1489.3199, 34.9287, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, -1696.3199, 1489.4500, 34.9287, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, -1689.8000, 1489.7600, 34.9287, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, -1723.4301, 1491.3000, 34.9077, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, -1721.7900, 1490.3199, 34.9077, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, -1719.8400, 1489.0400, 34.9077, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1696.5601, 1672.7900, 37.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1702.2600, 1676.6400, 37.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1708.7900, 1679.0100, 37.5656, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1715.6500, 1679.7800, 37.4000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1722.5800, 1679.1100, 37.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1729.1400, 1677.0500, 37.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1735.1899, 1673.6500, 37.1000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1740.5500, 1669.1500, 36.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 3579, -1745.1000, 1663.8199, 36.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3595, -1611.4600, 1544.6899, 36.2602, 0.25);
	RemoveBuildingForPlayer(playerid, 3595, -1611.4600, 1621.5800, 36.2602, 0.25);
	RemoveBuildingForPlayer(playerid, 3595, -1622.2500, 1621.5800, 36.2602, 0.25);
	RemoveBuildingForPlayer(playerid, 3595, -1622.2500, 1544.6899, 36.2602, 0.25);

	//===========================================================================

	RemoveBuildingForPlayer(playerid, 2067, 2716.7500, -2454.0200, 21.2635, 0.25);
	RemoveBuildingForPlayer(playerid, 2068, 2716.7500, -2454.0200, 21.2635, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2748.8999, -2402.1799, 20.7400, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 2776.6799, -2427.4299, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 635, 2778.0901, -2438.7100, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 636, 2775.2700, -2448.3401, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 635, 2778.3601, -2460.4500, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 2774.9199, -2467.8501, 20.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2783.6599, -2468.0801, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2745.7200, -2412.3601, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2745.5701, -2473.4900, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2745.6399, -2443.4399, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2721.7000, -2478.5200, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2719.2100, -2407.3799, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2692.6799, -2412.2100, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2692.7500, -2470.1799, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2692.8201, -2444.1599, 20.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1245, 2682.8701, -2402.2000, 22.2400, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 2703.5000, -2422.1399, 27.1750, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 2736.3899, -2421.7600, 27.1750, 0.25);
	RemoveBuildingForPlayer(playerid, 1245, 2683.3701, -2494.5100, 22.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2716.7500, -2454.0200, 21.2635, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2704.9900, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2715.5200, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2723.3000, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2731.1201, -2447.2400, 25.0200, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2705.5200, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2712.4700, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2726.7400, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2719.1699, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2733.2100, -2450.7500, 30.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 4384, -317.8350, 798.0310, 17.4423, 0.25);
	RemoveBuildingForPlayer(playerid, 4385, -317.8350, 798.0310, 17.4423, 0.25);
	RemoveBuildingForPlayer(playerid, 5106, -231.6730, 473.5300, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 5107, -120.4450, 449.2380, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 5109, -235.9890, 373.0920, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 4614, -231.6730, 473.5300, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 4615, -120.4450, 449.2380, 11.0010, 0.25);
	RemoveBuildingForPlayer(playerid, 4616, -235.9890, 373.0920, 11.0010, 0.25);

	//============================================================================
	RemoveBuildingForPlayer(playerid, 4936, 1996.5500, 1750.5500, 15.0154, 0.25);
	RemoveBuildingForPlayer(playerid, 4950, 1996.5500, 1750.5500, 15.0154, 0.25);
	RemoveBuildingForPlayer(playerid, 4342, 413.1420, 752.0520, 17.8500, 0.25);
	RemoveBuildingForPlayer(playerid, 4356, 413.1420, 752.0520, 17.8500, 0.25);
	RemoveBuildingForPlayer(playerid, 4442, 362.0260, 812.1090, 12.5400, 0.25);
	RemoveBuildingForPlayer(playerid, 4447, 362.0260, 812.1090, 12.5400, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, 109.7200, 1672.5500, 11.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, 110.7770, 1672.3101, 11.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, 94.7795, 1690.5601, 11.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, 94.0897, 1690.6899, 11.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 2011, 2563.8101, -2044.7500, 25.4700, 0.25);
	RemoveBuildingForPlayer(playerid, 2012, 2563.8101, -2044.7500, 25.4700, 0.25);
	RemoveBuildingForPlayer(playerid, 1761, 2556.0000, -2064.5601, 20.9200, 0.25);
	RemoveBuildingForPlayer(playerid, 1761, 2558.0801, -2064.1399, 20.9200, 0.25);
	RemoveBuildingForPlayer(playerid, 1761, 2559.8101, -2064.2400, 20.9200, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2562.8501, -2032.6000, 30.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2562.9399, -2040.0300, 30.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2562.9600, -2047.4600, 30.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2562.8401, -2054.9700, 30.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1949, 2155.7300, -1847.2400, 20.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1951, 2155.7300, -1847.2400, 20.3750, 0.25);
	//RemoveBuildingForPlayer(playerid, 1916, 2307.889, -1817.439, -3.999, 0.250);
	/////----[Просьба Миронова]-------------
    RemoveBuildingForPlayer(playerid, 615, 2446.5801, -1736.9200, 20.3925, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 2419.2200, -1772.7800, 20.3925, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 2431.7400, -1744.3500, 20.3925, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 2385.3201, -1757.4200, 20.3925, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 2391.9800, -1737.1400, 20.3925, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 2429.3899, -1744.9800, 20.3925, 0.25);
	RemoveBuildingForPlayer(playerid, 627, 2327.7800, -1736.5100, 20.7377, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 2373.2100, -1737.2100, 20.4230, 0.25);
	RemoveBuildingForPlayer(playerid, 627, 2444.8999, -1774.8199, 20.7377, 0.25);
	RemoveBuildingForPlayer(playerid, 627, 2419.6899, -1754.5900, 20.7377, 0.25);
	RemoveBuildingForPlayer(playerid, 627, 2379.2500, -1747.1899, 20.7377, 0.25);
	RemoveBuildingForPlayer(playerid, 627, 2417.8999, -1764.4301, 20.7377, 0.25);
	RemoveBuildingForPlayer(playerid, 627, 2382.9299, -1778.5800, 20.7377, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 2322.2400, -1735.9301, 20.9676, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 2445.5400, -1732.2600, 20.6267, 0.25);
	RemoveBuildingForPlayer(playerid, 633, 2332.0701, -1736.2500, 19.8746, 0.25);
	RemoveBuildingForPlayer(playerid, 630, 2323.5500, -1737.0200, 16.4458, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2433.4299, -1777.7100, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2403.3701, -1778.0300, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2374.5000, -1778.9200, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2447.0801, -1778.5200, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2417.6599, -1777.6200, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2353.8601, -1735.7300, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1711, 2388.7300, -1778.1400, 26.9000, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2447.3501, -1739.5500, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2442.1399, -1739.5500, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2437.0200, -1739.5200, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2431.7600, -1739.5400, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2426.5701, -1739.5500, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2421.3401, -1739.5500, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2416.1001, -1739.5601, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2410.8999, -1739.5300, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2405.7100, -1739.5200, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2400.4900, -1739.5200, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2395.2700, -1739.5300, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2390.0701, -1739.5200, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2384.8301, -1739.4800, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2379.6299, -1739.4399, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2374.4600, -1739.4000, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2369.2500, -1739.3700, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2449.9500, -1736.9500, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2449.9500, -1731.7500, 22.1700, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2454.6499, -1760.1200, 20.9500, 0.25);
	RemoveBuildingForPlayer(playerid, 1716, 2454.3601, -1730.3300, 20.9500, 0.25);
	RemoveBuildingForPlayer(playerid, 1219, 2418.6299, -1748.8400, 21.2100, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 2440.6399, -1768.5400, 21.5700, 0.25);
	RemoveBuildingForPlayer(playerid, 808, 2441.2400, -1760.4900, 21.9280, 0.25);
	RemoveBuildingForPlayer(playerid, 874, 2398.8899, -1763.5800, 22.5030, 0.25);
	RemoveBuildingForPlayer(playerid, 803, 2429.2200, -1763.1100, 21.5571, 0.25);
	//RemoveBuildingForPlayer(playerid, 2437, 2167.8201, -2399.4399, 36.7222, 0.25);
	//RemoveBuildingForPlayer(playerid, 2442, 2167.8201, -2399.4399, 36.7222, 0.25);
	//RemoveBuildingForPlayer(playerid, 2437, 2223.4299, -2399.4399, 36.7222, 0.25);
	//RemoveBuildingForPlayer(playerid, 2442, 2223.4299, -2399.4399, 36.7222, 0.25);
	//RemoveBuildingForPlayer(playerid, 2438, 2062.2100, -2383.7900, 37.9580, 0.25);
	//RemoveBuildingForPlayer(playerid, 2443, 2062.2100, -2383.7900, 37.9580, 0.25);
	//RemoveBuildingForPlayer(playerid, 2439, 2060.5500, -2310.6799, 36.4911, 0.25);
	//RemoveBuildingForPlayer(playerid, 2444, 2060.5500, -2310.6799, 36.4911, 0.25);
	//RemoveBuildingForPlayer(playerid, 2440, 2147.4800, -2300.5200, 36.0896, 0.25);
	//RemoveBuildingForPlayer(playerid, 2445, 2147.4800, -2300.5200, 36.0896, 0.25);
	//RemoveBuildingForPlayer(playerid, 2441, 2103.4199, -2417.5000, 20.9399, 0.25);
	//RemoveBuildingForPlayer(playerid, 2446, 2103.4199, -2417.5000, 20.9399, 0.25);
	RemoveBuildingForPlayer(playerid, 1952, 2121.3401, -1829.9900, 22.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1795, 2614.7800, -1690.3000, 26.4000, 0.25);
	RemoveBuildingForPlayer(playerid, 1228, -1701.8900, -2809.0901, 13.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1228, -1703.8600, -2808.1399, 13.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1228, -1700.0900, -2797.4299, 12.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1228, -1701.6801, -2796.3999, 12.7000, 0.25);
	RemoveBuildingForPlayer(playerid, 1228, -1691.4500, -2792.0601, 11.6000, 0.25);
	RemoveBuildingForPlayer(playerid, 1228, -1692.9500, -2791.0500, 11.6000, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, -1701.1400, -2808.0901, 13.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, -1702.9000, -2806.9800, 13.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, -1699.2000, -2796.0000, 12.5500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, -1700.3000, -2794.7000, 12.5500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, -1690.8000, -2790.6699, 11.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 1225, -1692.2400, -2789.7100, 11.4500, 0.25);
	RemoveBuildingForPlayer(playerid, 10011, -1816.8400, -2884.6001, 14.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, -1826.5300, -2881.6499, 13.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, -1819.9399, -2885.1799, 13.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, -1824.0200, -2886.5701, 13.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 3169, -1794.5699, -2869.5400, 14.1200, 0.25);
	RemoveBuildingForPlayer(playerid, 3169, -1772.2500, -2858.3301, 14.1200, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, -1783.4600, -2861.7300, 14.1400, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, -1777.0000, -2867.7200, 14.1400, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, -1773.3500, -2868.3501, 14.1400, 0.25);
	RemoveBuildingForPlayer(playerid, 8701, -2343.9700, 64.7576, 21.9156, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -1657.6801, -2799.6799, 9.6610, 0.25);
	/////////////////////////////////////
	//------[Оружейный]
	RemoveBuildingForPlayer(playerid, 1705, 2486.7900, -1919.1200, 23.6854, 0.25);
	//---Миронов
    RemoveBuildingForPlayer(playerid, 1784, 2456.0801, -1457.8800, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2459.0300, -1457.8900, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2461.9500, -1457.9200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2464.8701, -1457.9301, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2467.7900, -1457.9500, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2470.6699, -1457.9500, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2473.6001, -1457.9200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2476.5400, -1457.9399, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2478.0000, -1456.4500, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2478.0000, -1453.5200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9800, -1450.5699, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9600, -1447.6400, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9299, -1444.7400, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9099, -1441.8199, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9500, -1438.8800, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9099, -1435.9100, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9399, -1433.0200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9500, -1430.1200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 2215, 2453.8201, -1405.9500, 75.0750, 0.25);
	RemoveBuildingForPlayer(playerid, 2217, 2526.5701, -1455.0500, 61.2412, 0.25);
	RemoveBuildingForPlayer(playerid, 2219, 2477.0400, -1459.2000, 59.6698, 0.25);
	RemoveBuildingForPlayer(playerid, 2226, 2453.8201, -1405.9500, 75.0750, 0.25);
	RemoveBuildingForPlayer(playerid, 2228, 2526.5701, -1455.0500, 61.2412, 0.25);
	RemoveBuildingForPlayer(playerid, 2230, 2477.0400, -1459.2000, 59.6698, 0.25);
	RemoveBuildingForPlayer(playerid, 1245, 2474.6699, -1430.9900, 80.7800, 0.25);
	RemoveBuildingForPlayer(playerid, 1795, 2614.7800, -1690.3000, 26.4000, 0.25);
	RemoveBuildingForPlayer(playerid, 4346, 442.4220, 682.3600, 14.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 4360, 442.4220, 682.3600, 14.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 4442, 362.0260, 812.1090, 12.5400, 0.25);
	RemoveBuildingForPlayer(playerid, 4447, 362.0260, 812.1090, 12.5400, 0.25);
	RemoveBuildingForPlayer(playerid, 4443, 2267.0901, -1737.3300, 22.9640, 0.25);
	RemoveBuildingForPlayer(playerid, 5589, 596.3980, -1251.7600, 40.5900, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2456.0801, -1457.8800, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2459.0300, -1457.8900, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2461.9500, -1457.9200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2464.8701, -1457.9301, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2467.7900, -1457.9500, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2470.6699, -1457.9500, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2473.6001, -1457.9200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2476.5400, -1457.9399, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2478.0000, -1456.4500, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2478.0000, -1453.5200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9800, -1450.5699, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9600, -1447.6400, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9299, -1444.7400, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9099, -1441.8199, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9500, -1438.8800, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9099, -1435.9100, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9399, -1433.0200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 1784, 2477.9500, -1430.1200, 79.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 2215, 2453.8201, -1405.9500, 75.0750, 0.25);
	RemoveBuildingForPlayer(playerid, 2226, 2453.8201, -1405.9500, 75.0750, 0.25);
	RemoveBuildingForPlayer(playerid, 1245, 2474.6699, -1430.9900, 80.7800, 0.25);
	RemoveBuildingForPlayer(playerid, 4030, -86.0283, 960.4030, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4031, -86.0283, 960.4030, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4030, -141.4970, 987.1750, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4031, -141.4970, 987.1750, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4346, 442.4220, 682.3600, 14.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 4360, 442.4220, 682.3600, 14.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 635, 386.6920, 744.9590, 9.2000, 0.25);
	RemoveBuildingForPlayer(playerid, 635, 474.3970, 757.1430, 10.8000, 0.25);
	RemoveBuildingForPlayer(playerid, 4366, 441.4700, 696.0350, 11.3500, 0.25);
	RemoveBuildingForPlayer(playerid, 4367, 438.5590, 697.1240, 11.3500, 0.25);
	RemoveBuildingForPlayer(playerid, 4368, 455.1690, 690.8180, 11.2050, 0.25);
	RemoveBuildingForPlayer(playerid, 5589, 596.3980, -1251.7600, 40.5900, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1790.4301, 0.0000, 16.6780, 0.25);
	//=======[Банк Южный]
	RemoveBuildingForPlayer(playerid, 1986, 2351.1399, -2128.6599, 20.9760, 0.25);
	RemoveBuildingForPlayer(playerid, 1988, 2351.1399, -2128.6599, 20.9760, 0.25);
	RemoveBuildingForPlayer(playerid, 1987, 2376.6799, -2134.5500, 20.9760, 0.25);
	RemoveBuildingForPlayer(playerid, 1989, 2376.6799, -2134.5500, 20.9760, 0.25);
	RemoveBuildingForPlayer(playerid, 1983, 2380.0801, -2062.0701, 20.9760, 0.25);
	//======[Сто южный]
	RemoveBuildingForPlayer(playerid, 1952, 2121.3401, -1829.9900, 22.3000, 0.25);
	//==============================================================================

    for(new i = 0; i < AC_MAX_CODES; i++)
        pAntiCheatLastCodeTriggerTime[playerid][i] = -1;

    pAntiCheatSettingsPage{playerid} = 0; // Присваиваем значение 0 переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
    pAntiCheatSettingsEditCodeId[playerid] = -1; // Присваиваем переменной, хранящей идентификатор (ID) кода анти-чита, который редактирует игрок, занчение -1
	gettime(hour, minute);
	Baton[playerid] = false;
	SetPlayerTime(playerid, hour, minute);

	SetPlayerColor(playerid, 0x999999FF);

	for(new idx; idx < sizeof server_logo_TD; idx ++)
		TextDrawShowForPlayer(playerid, server_logo_TD[idx]);

	CreateAvtorizPlayer(playerid);
	CreateRegPlayer(playerid);

	SetPlayerVirtualWorld(playerid, playerid + 0xFF);
	ClearPlayerInfo(playerid);
	RPPoint[playerid] = 0;
	GetPlayerName(playerid, g_player[playerid][P_NAME], 20 + 1);
	GetPlayerIp(playerid, g_player[playerid][P_IP], 16);

	new fmt_text[80];

	GetPlayerVersion(playerid, fmt_text, sizeof fmt_text);
	new connect_ip[32+1];
	GetPlayerIp(playerid,connect_ip,32);
	new num_ip = GetNumberOfPlayersOnThisIP(connect_ip);
	if(num_ip > MAX_IP)
	{
		SendClientMessage(playerid, 0xCECECEFF, "На наш сервер нельзя заходить больше чем на 1 аккаунт одновременно");
		Kick(playerid);
		return 1;
	}

	for(new c = 0; c<35; c++)
		SetPlayerVehicleData(playerid, c, INVALID_VEHICLE_ID);

	GameTextForPlayer(playerid, "~y~Загрузка...", 3500, 4);
	ShowGangZonesForPlayer(playerid);

	#if defined _GANG_ZONES_INC
	ShowForPlayerGangZonesCR(playerid);
	#endif

	InitFly(playerid);

	if(Test_server == 1)
	{
		new query[144],
		Cache: result,
		rows;

		mysql_format(mysql, query, sizeof query, "SELECT * FROM test_user WHERE name='%s'", g_player[playerid][P_NAME]);
		result = mysql_query(mysql, query, true);

		rows = cache_num_rows();

		if(rows)
		{
			SetTimerEx("CheckPlayerAccount", 1000, false, "ii", playerid, mysql_race[playerid]);
		}

		cache_delete(result);

		if(!rows)
		{
			SendClientMessage(playerid, -1, "У вас нет доступа");
			Kick(playerid);
			return 1;
		}
	}
	else
	{
		SetTimerEx("CheckPlayerAccount", 1000, false, "ii", playerid, mysql_race[playerid]);
	}
	SetPVarInt(playerid, "ferma_id", 0);
	return 1;

}
public OnPlayerDisconnect(playerid, reason)
{
	#if defined _blackjack_included
		blackjack_OnPlayerDisconnect(playerid);
	#endif
	UpdatePlayerDatabaseInt(playerid, "pCasinoChips", GetPlayerData(playerid, pCasinoChips));
	if(lstream[playerid])
	{
		SvDeleteStream(lstream[playerid]);
		lstream[playerid] = SV_NULL;
	}
	if(GetPVarInt(playerid, "LoginPlayer") != 1)
	{
		new buffer = GetPlayerLastVehicle(playerid);

	//	new query[300];

		new Float:X, Float:Y, Float:Z;
	  	GetPlayerPos(playerid, X, Y, Z);
	  	SetPVarInt(playerid, "ferma_id", 0);

		//new fmt_message[144];
		//format(fmt_message, sizeof fmt_message, "%f,%f,%f,%d,%d,%d,%d", X, Y, Z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 1, gettime()+300);

		//mysql_format(mysql, query, sizeof query, "UPDATE accounts SET e_player='%s' WHERE name='%e' LIMIT 1", fmt_message, GetPlayerNameEx(playerid));
		//mysql_query(mysql, query, false);

		for(new i = 1; i < MAX_VEHICLES; i++)
		{
		    if(!IsValidVehicle(i)) continue;
		    if(GetVehicleData(i, V_OWRENT) == 0) continue;
		    if(GetVehicleData(i, V_OWRENT) != GetPlayerNameEx(playerid)) continue;
	     	SetVehicleData(i, V_OWRENT, 0);
		    SetVehicleToRespawn(i);
		}

		for(new iz = 0; iz != sizeof containers; iz ++)
		{
			if(containers[iz][C_LAST_BET] != playerid) continue;
			if(containers[iz][CD_STATUS] == 2 || containers[iz][CD_STATUS] == 3)
			{
				DestroyDynamicObject(container[iz]);
				DestroyVehicle(veh_cont[iz]);

				DestroyDynamic3DTextLabel(container_label[iz]);
				DestroyDynamic3DTextLabel(container_label_1[iz]);

				DestroyDynamicObject(container_door[iz]);
				DestroyDynamicObject(container_second_door[iz]);
				DestroyDynamicObject(container_block[iz]);

				containers[iz][C_LAST_BET] = -1;
				containers[iz][C_PRICE_COUNT] = def_cena_cont[iz];

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{D7DF01}Объединенные Арабские Эмираты\n{DBA901}Вес: 3500 кг (№%d)\n{ffffff}Содержимое: {AEB404}Транспорт\n{ffffff}Cтоимость: {B18904}%d руб", iz + 1, containers[iz][C_PRICE_COUNT]);
				container_label[iz] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, containers[iz][C_POS_X], containers[iz][C_POS_Y], containers[iz][C_POS_Z] +3.5, 15.0);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Используйте {DBA901}L.ALT {ffffff}чтобы\nоткрыть торги за контейнер начальная\nстоимость которого составляет: {B18904}%d руб", containers[iz][C_PRICE_COUNT]);
				container_label_1[iz] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, containers[iz][C_POS_X_1], containers[iz][C_POS_Y_1], containers[iz][C_POS_Z_1], 15.0);

				container[iz] = CreateDynamicObject(containers[iz][C_ID], containers[iz][C_POS_X], containers[iz][C_POS_Y], containers[iz][C_POS_Z], 0.00, 0.00, containers[iz][C_POS_A]);

				container_door[iz] = CreateDynamicObject(containers[iz][CD_FIRST_ID], containers[iz][CD_FIRST_POS_X], containers[iz][CD_FIRST_POS_Y], containers[iz][CD_FIRST_POS_Z], 0.00, 0.00, containers[iz][CD_FIRST_POS_A]);
				container_second_door[iz] = CreateDynamicObject(containers[iz][CD_SECOND_ID], containers[iz][CD_SECOND_POS_X], containers[iz][CD_SECOND_POS_Y], containers[iz][CD_SECOND_POS_Z], 0.00, 0.00, containers[iz][CD_SECOND_POS_A]);
				container_block[iz] = CreateDynamicObject(10477, containers[iz][C_B_POS_X], containers[iz][C_B_POS_Y], containers[iz][C_B_POS_Z], 0.00, 0.00, containers[iz][C_B_POS_A]);

				containers[iz][CD_STATUS] = 0;
			}
			else
			{
				containers[iz][C_LAST_BET] = -1;
				containers[iz][CD_STATUS] = 0;
				containers[iz][C_PRICE_COUNT] = def_cena_cont[iz];

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{D7DF01}Объединенные Арабские Эмираты\n{DBA901}Вес: 3500 кг (№%d)\n{ffffff}Содержимое: {AEB404}Транспорт\n{ffffff}Cтоимость: {B18904}%d руб", iz + 1, containers[iz][C_PRICE_COUNT]);
				UpdateDynamic3DTextLabelText(container_label[iz], -1, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Используйте {DBA901}L.ALT {ffffff}чтобы\nоткрыть торги за контейнер начальная\nстоимость которого составляет: {B18904}%d руб", containers[iz][C_PRICE_COUNT]);
				UpdateDynamic3DTextLabelText(container_label_1[iz], -1, STRING_GLOBAL);
			}
		}
		if(buffer != INVALID_VEHICLE_ID)
		{
			if(GetVehicleData(buffer, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{
				if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
				{
					SetVehicleToRespawn(buffer);
				}
			}
		}
		for(new is = 1; is < MAX_VEHICLES; is++)
		{
		    if(!IsValidVehicle(is)) continue;
	 		else if(vodila[is] != playerid || vodila[is] == -1) continue;
	 		else if(GetVehicleData(is, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FERMA_CAR) continue;
	 		else if(IsVehicleOccupied(is)) continue;
			vodila[is] = -1;
			//DestroyVehicleLabel(is);
			SetVehicleToRespawn(is);
		}
		if(IsPlayerInJob(playerid))
		{
			buffer = GetPlayerJobCar(playerid);
			if(buffer != INVALID_VEHICLE_ID)
			{
				SetVehicleToRespawn(buffer);
			}

			if(GetPlayerData(playerid, P_ORDER) != -1)
				SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
		}
		KillEndJobTimer(playerid);
		KillCarJobTimer(playerid);

		buffer = GetPlayerData(playerid, P_FACTORY_USE_DESK);
		SetPlayerFactoryDeskUse(playerid, buffer, false);

		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}

		if(GetPlayerFam(playerid) != 0)
		{
			DestroyDynamic3DTextLabel(g_player[playerid][P_FAM_LABEL]);
			g_player[playerid][P_FAM_LABEL] = Text3D: -1;
	    }

		if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL));
			SetPlayerData(playerid, P_ADVISOR_LABEL, Text3D: -1);
		}
		if(GetPlayerAdminEx(playerid) == 6 && IsValidDynamic3DTextLabel(GetPlayerData(playerid, ADMIN_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, ADMIN_LABEL));
			SetPlayerData(playerid, ADMIN_LABEL, Text3D: -1);
		}
		if(GetPlayerAdminEx(playerid) == 5 && IsValidDynamic3DTextLabel(GetPlayerData(playerid, GAADMIN_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, GAADMIN_LABEL));
			SetPlayerData(playerid, GAADMIN_LABEL, Text3D: -1);
		}

		for(new c = 0; c<35; c++)
		{
			if(GetPlayerOwnableCar(playerid,c) != INVALID_VEHICLE_ID)
			{
				if(SaveOwnableCar(GetPlayerOwnableCar(playerid, c)) != -1)
					UnloadPlayerOwnableCar(playerid, true, c);
			}
		}

		if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(GetPlayerRentCar(playerid));
		}

		new fmt_text[95];

		if(GetPlayerData(playerid, P_CUFFED) && reason != 2)
		{
			new jail_time = (GetPlayerSuspect(playerid) * 5 + 30) * 60;

			SetPlayerData(playerid, P_JAIL, jail_time);
			UpdatePlayerDatabaseInt(playerid, "jail", jail_time);

			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);

			format(fmt_text, sizeof fmt_text, "%s выходит при аресте (+30 минут заключения)", GetPlayerNameEx(playerid));
			SendClientMessageToAll(0xFF5533FF, fmt_text);
		}

		if(GetPVarInt(playerid,"CasinoTable") != -1) // Если игрок находится за столом
		{
			new tableid = GetPVarInt(playerid,"CasinoTable"); // Узнаем номер стола игрока
			for(new i; i < 4; i++) // Проходим все 4 места за столом
			{
				if(TableInfo[tableid][t_players][i] == playerid) // Если игрок обнаружен за определенным слотом стола
				{
					GivePlayerMoneyEx(playerid,TableInfo[tableid][t_bet], "Возврат ставки"); // Возвращаем деньги со ставки игроку (функция GivePlayerMoney может быть другая)
					TableInfo[tableid][t_players][i] = INVALID_PLAYER_ID; // Обнуляем игрока под указанным столом
				}
			}
			if(GetPVarInt(playerid,"CRUPIE") != 0) TableInfo[tableid][t_crup] = INVALID_PLAYER_ID,TotalCrupie--; // Если из игры вышел крупье,то обнуляем крупье за столом.
			Casino_Update(tableid); // Обновляем текстдрав стола
		}

		for(new idx; idx < g_advert_created; idx ++)
		{
			if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

			DeleteAdvert(idx);
		}
		SavePlayerAccount(playerid);
		ClearPlayerInfo(playerid);

		UpdateSpectate(playerid, true);
	}
	else
	{
	    ClearPlayerInfo(playerid);
	}
	return 1;
}
public: OnCheatDetected(playerid, ip_address[], type, code)
{
	if(GetPlayerAdminEx(playerid) < 2 && GetPlayerSkinEx(playerid) <= 399)
	{
	    if(type == AC_GLOBAL_TRIGGER_TYPE_PLAYER)
	    {
	        switch(code)
	        {
	            case 5, 6, 11, 22:
	            {
	                return 1;
	            }
	            case 32: // CarJack
	            {
	                new
	                    Float:x,
	                    Float:y,
	                    Float:z;

	                AntiCheatGetPos(playerid, x, y, z);
	                return SetPlayerPos(playerid, x, y, z);
	            }
	            case 40: // Sandbox
	            {
	                SendClientMessage(playerid, -1, MAX_CONNECTS_MSG);
	                return AntiCheatKickWithDesync(playerid, code);
	            }
	            case 41: // Invalid Version
	            {
	                SendClientMessage(playerid, -1, UNKNOWN_CLIENT_MSG);
	                return AntiCheatKickWithDesync(playerid, code);
	            }
	            default:
	            {
	                if(gettime() - pAntiCheatLastCodeTriggerTime[playerid][code] < AC_TRIGGER_ANTIFLOOD_TIME)
	                    return 1;

	                pAntiCheatLastCodeTriggerTime[playerid][code] = gettime();
	                AC_CODE_TRIGGERED_COUNT[code]++;

	                new
	                    string[88 - 10 + MAX_PLAYER_NAME + 5 + AC_MAX_CODE_NAME_LENGTH + AC_MAX_CODE_LENGTH],
	                    trigger_type = AC_CODE_TRIGGER_TYPE[code];

	                if(trigger_type == AC_CODE_TRIGGER_TYPE_WARNING)
	                {
	                    format(string, sizeof(string), "[Anti-CHEAT] %s[%d] подозревается в использовании чит-программ: %s [code: %03d].", PN(playerid), playerid, AC_CODE_NAME[code], code);
	                    SendMessageToAdmins(string, 0xD2B88FFF);
	                }
	                else // AC_CODE_TRIGGER_TYPE_KICK
	                {
	                    format(string, sizeof(string), "[Anti-CHEAT] %s[%d] был кикнут по подозрению в использовании чит-программ: %s [code: %03d].", PN(playerid), playerid, AC_CODE_NAME[code], code);
	                    SendMessageToAdmins(string, 0xD2B88FFF);

	                    format(string, sizeof(string), "Вы были кикнуты по подозрению в использовании чит-программ: %s [code: %03d].", AC_CODE_NAME[code], code);
	                    SendClientMessage(playerid, -1, string);

	                    AntiCheatKickWithDesync(playerid, code);
	                }
	            }
	        }
	    }
	    else // AC_GLOBAL_TRIGGER_TYPE_IP
	    {
	        AC_CODE_TRIGGERED_COUNT[code]++;

	        new
	            string[58 - 8 + 16 + AC_MAX_CODE_NAME_LENGTH + AC_MAX_CODE_LENGTH];

	        format(string, sizeof(string), "[Anti-CHEAT] IP-адрес %s был заблокирован: %s [code: %03d].", ip_address, AC_CODE_NAME[code], code);
	        SendMessageToAdmins(string, 0xD2B88FFF);
	        BlockIpAddress(ip_address, 0);
	    }
	}
    return 1;
}
// Функция загрузки данных о настройках кодов анти-чита из базы данных
stock UploadAntiCheatSettings()
{
    new
        Cache:cache = mysql_query(mysql, "SELECT * FROM "AC_TABLE_SETTINGS" ORDER BY "AC_TABLE_FIELD_CODE""),
        rows,
        fields,
        tick = GetTickCount();

    cache_get_data(rows, fields);

    if(rows > 0)
    {
        for(new i = 0; i < AC_MAX_CODES; i++)
        {
            AC_CODE_TRIGGER_TYPE[i] = cache_get_field_content_int(i, ""AC_TABLE_FIELD_TRIGGER"");

            if(AC_CODE_TRIGGER_TYPE[i] == AC_CODE_TRIGGER_TYPE_DISABLED)
                EnableAntiCheat(i, 0);
        }

        printf("[MySQL]: Настройки анти-чита успешно загружены (загружено: %d). Потрачено: %dмс.", rows, GetTickCount() - tick);
    }
    else
    {
        print("[MySQL]: Настройки анти-чита не найдены в базе данных. Загрузка мода остановлена - настройте анти-чит.");
        return GameModeExit();
    }

    cache_delete(cache);
    return 1;
}

CMD:cheat(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;
    pAntiCheatSettingsPage{playerid} = 1; // Присваиваем переменной, хранящей номер страницы, на который находится игрок, значение 1 (т.е, теперь игрок на 1-ой странице)
    return ShowPlayer_AntiCheatSettings(playerid); // Показываем игрок главный диалог настроек анти-чита
}

// Функция показа главного меню настроек анти-чита
stock ShowPlayer_AntiCheatSettings(playerid)
{
    static
        dialog_string[42 + 19 - 8 + (AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH + AC_MAX_TRIGGER_TYPE_NAME_LENGTH + 10)*AC_MAX_CODES_ON_PAGE] = EOS;

    new
        triggeredCount = 0,
        page = pAntiCheatSettingsPage{playerid},
        next = 0,
        index = 0;

    dialog_string = "Название\tНаказание\tКол-во срабатываний\n";

    for(new i = 0; i < AC_MAX_CODES; i++)
    {
        if(i >= (page * AC_MAX_CODES_ON_PAGE) && i < (page * AC_MAX_CODES_ON_PAGE) + AC_MAX_CODES_ON_PAGE)
            next++;

        if(i >= (page - 1) * AC_MAX_CODES_ON_PAGE && i < ((page - 1) * AC_MAX_CODES_ON_PAGE) + AC_MAX_CODES_ON_PAGE)
        {
            triggeredCount = AC_CODE_TRIGGERED_COUNT[i];

            format(dialog_string, sizeof(dialog_string), "%s[%s] %s\t%s\t%d\n",
                dialog_string,
                AC_CODE[i],
                AC_CODE_NAME[i],
                AC_TRIGGER_TYPE_NAME[AC_CODE_TRIGGER_TYPE[i]],
                triggeredCount);

            pAntiCheatSettingsMenuListData[playerid][index++] = i;
        }
    }
    if(next) strcat(dialog_string, ""AC_DIALOG_NEXT_PAGE_TEXT"\n");
    if(page > 1) strcat(dialog_string, AC_DIALOG_PREVIOUS_PAGE_TEXT);
    return Dialog(playerid, DIALOG_ANTICHEAT_SETTINGS, DSTH, !"Настройки анти-чита", dialog_string, !"Выбрать", !"Отмена");

}
// Функция показа меню редактирования типа срабатывания определённого кода в анти-чите
stock ShowPlayer_AntiCheatEditCode(playerid, code)
{
    new
        dialog_header[22 - 4 + AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH],
        dialog_string[AC_MAX_TRIGGER_TYPE_NAME_LENGTH*AC_MAX_TRIGGER_TYPES];

    format(dialog_header, sizeof(dialog_header), "Код: %s | Название: %s", AC_CODE[code], AC_CODE_NAME[code]);

    for(new i = 0; i < AC_MAX_TRIGGER_TYPES; i++)
    {
        strcat(dialog_string, AC_TRIGGER_TYPE_NAME[i]);

        if(i + 1 != AC_MAX_TRIGGER_TYPES)
            strcat(dialog_string, "\n");
    }
    return Dialog(playerid, DIALOG_ANTICHEAT_EDIT_CODE, DSL, dialog_header, dialog_string, !"Выбрать", !"Назад");
}
public: podarok()
{

 SendClientMessageToAll(0x3399FFFF, "[Новости]: Внимание! В штате появились секретные подарки");

}
public: SavePlayerAccount(playerid)
{
	new query[760];

	mysql_format
	(
		mysql, query, sizeof query,
		"UPDATE accounts SET last_login=%d,game_for_hour=%d,game_for_day=%d,game_for_day_prev=%d,\
		exp=%d,health=%f,hospital=%d,mute=%d,rmute=%d,jail=%d,ammo=%d,metall=%d,drugs=%d,business=%d,level=%d,donate_current=%d,money=%d,mcbook=%d WHERE id=%d LIMIT 1",
		gettime(),
		GetPlayerData(playerid, P_GAME_FOR_HOUR),
		GetPlayerData(playerid, P_GAME_FOR_DAY),
		GetPlayerData(playerid, P_GAME_FOR_DAY_PREV),
		GetPlayerData(playerid, P_EXP),
		GetPlayerData(playerid, P_HEALTH),
		GetPlayerData(playerid, P_HOSPITAL),
		GetPlayerData(playerid, P_MUTE),
		GetPlayerData(playerid, P_RMUTE),
		GetPlayerData(playerid, P_JAIL),
		GetPlayerData(playerid, P_AMMO),
		GetPlayerData(playerid, P_METALL),
		GetPlayerData(playerid, P_DRUGS),
        GetPlayerData(playerid, P_BUSINESS),
        GetPlayerData(playerid, P_LEVEL),
        GetPlayerData(playerid, P_DONATE_CURRENT),
        GetPlayerData(playerid, P_MONEY),
        GetPlayerData(playerid, P_MCBOOK),
		GetPlayerAccountID(playerid)
	);

	mysql_query(mysql, query, false);

	return 1;
}
public AutoRestart(playerid)
{
   new string[128];
   new h, m, s;
   gettime(h, m, s);
   if(h == 8 && m == 5)
	{
	  format(string, 128, "Внимание сервер будет автоматически перезагружен через 5 минут");
      SendClientMessageToAll(COLOR_ORANGE, string);
	}
   if(h == 8 && m == 5)
	{
       format(string, 128, "Сервер возобновит работу в течении минуты...");
	   SendClientMessageToAll(COLOR_WHITE, string);
	   SellDebtorsProperty();
	   SendRconCommand("gmx");
	   SavePlayerAccount(playerid);

	}
}
public OnPlayerDeath(playerid, killerid, reason)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		return Kick:(playerid, " ");
	}
	#if defined _blackjack_included
		blackjack_OnPlayerDeath(playerid);
	#endif
	if(IsPlayerInJob(playerid))
	{
		EndPlayerJob(playerid);
	}
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		TogglePlayerDynamicCP(playerid, help_info_CP, true);
	}
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}
	if(GetPVarInt(playerid,"dmzona") == 1)
	{
	    				DelGun(playerid);
						AC_GivePlayerWeapon(playerid, PaintGun[random(sizeof(PaintGun))], 3000);

						TI[playerid][tVirtualWorld] = 8;
						TI[playerid][tInterior] = 0;

		    	    	new rand = random(sizeof(DmArenaSpawns));

						SetPlayerPosAC(playerid, DmArenaSpawns[rand][0], DmArenaSpawns[rand][1], DmArenaSpawns[rand][2]+1.5,
							TI[playerid][tVirtualWorld], TI[playerid][tInterior], true);

						SetPlayerHealth(playerid, 100.0);
						SetPlayerColor(playerid,0x56FB4EFF);
						return 1;
	}
	if(GetPVarInt(playerid,"dmzona") == 2)
	{
						DelGun(playerid);
						AC_GivePlayerWeapon(playerid, ArenaGun[5], 3000);

						TI[playerid][tVirtualWorld] = 141;
						TI[playerid][tInterior] = 0;

		    	    	new rand = random(sizeof(DMPositions));

						SetPlayerPosAC(playerid, DMPositions[rand][0], DMPositions[rand][1], DMPositions[rand][2]+1.5, TI[playerid][tVirtualWorld],
							TI[playerid][tInterior], true);

						SetPlayerHealth(playerid, 100.0);
						SetPlayerColor(playerid,0x56FB4EFF);
						return 1;
	}
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
	SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);

	SetPlayerData(playerid, P_HOSPITAL, 		true);

	if(noclipdata[playerid][camera_mode] == CAMERA_MODE_FLY) CancelFlyMode(playerid);

	new fmt_text[120];

	if(killerid == INVALID_PLAYER_ID || reason >= 47 || !reason)
	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPlayerSuspect(playerid) && IsPlayerInPoliceTeam(killerid))
		{
			format(fmt_text, sizeof fmt_text, "[Всем постам] %s %s нейтрализовал преступника %s", GetPlayerJobAndRankName(killerid), GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			SendMessageToPoliceTeam(fmt_text, 0x00CCFFFF);

			JailPlayer(playerid, GetPlayerSuspect(playerid) * 5);

			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);

			SetPlayerSuspectInit(playerid);

			SendClientMessage(playerid, 0x66CC33FF, "Вы были нейтрализованы сотрудником правоохранительных органов");
			SendClientMessage(playerid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
		}

		if(g_capture[C_STATUS])
		{
			if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(killerid) <= TEAM_OPG_LYTKARINSKAYA)
			{
				new area_id = GetGangZoneData(g_capture[C_GANG_ZONE], GZ_AREA);

				if(IsPlayerInDynamicArea(killerid, area_id) && IsPlayerInDynamicArea(playerid, area_id))
				{
					new gang_id[2];

					gang_id[0] = (GetPlayerTeamEx(killerid) - TEAM_OPG_ARZAMASKAYA) + 1;
					gang_id[1] = (GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA) + 1;

					if(gang_id[0] == g_capture[C_ATTACK_TEAM] && gang_id[1] == g_capture[C_PROTECT_TEAM])
						g_capture[C_ATTACKER_KILLS] ++;

					else if(gang_id[0] == g_capture[C_PROTECT_TEAM] && gang_id[1] == g_capture[C_ATTACK_TEAM])
						g_capture[C_PROTECTOR_KILLS] ++;
				}
			}
		}
	}
	if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

		BuyCarTDsHideForPlayer(playerid);
		HidePlayerSelectPanel(playerid);
	}

	SetPlayerJobLoadItems(playerid, 0);
	SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	SetPlayerSpawnInit(playerid);
	SetPlayerSpawnPos(playerid);
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	new Float: health;

	if(issuerid == INVALID_PLAYER_ID) return 1;

	if(GetPVarInt(playerid, "player_in_green_zone"))
	{
		new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

		if(!(TEAM_DPS <= GetPlayerTeamEx(issuerid) <= TEAM_PJ))
		{
			ClearPlayerAnim(issuerid);
			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 5000, false, "i", playerid);

			new fmt_text[220];

			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}"\
				"Предупреждение:\n\n"\
				"Игрок находится в зеленой зоне '{66CC33}%s{FFFFFF}'\n"\
				"Нанесение урона запрещено. При повторных попытках Вы будете кикнуты.",
				g_green_zones[green_zone_id][GZ_NAME]
			);

			Dialog(issuerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF5533}Зеленая зона", fmt_text, "Закрыть", "");


			return 0;
		}
	}

	if(TEAM_DPS <= GetPlayerTeamEx(issuerid) <= TEAM_PJ)
	{
		if(weaponid == WEAPON_NITESTICK)
		{
			SetPlayerAnimation(playerid, 21);
			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);

			new fmt_text[90];

			format(fmt_text, sizeof fmt_text, "Вы оглушили %s на 15 секунд", GetPlayerNameEx(playerid));
			SendClientMessage(issuerid, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s оглушил Вас на 15 секунд", GetPlayerNameEx(issuerid));
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);

			CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
		}
	}

	if(GetPlayerData(issuerid, P_POWER))
	{
		if(!weaponid)
		{
			new Float: armour,
				Float: taken_health;

			GetPlayerHealth(playerid, health);
			GetPlayerArmour(playerid, armour);

			taken_health = GetPlayerData(issuerid, P_POWER) * 0.05;

			if(armour) SetPlayerArmour(playerid, armour - taken_health);
			else SetPlayerHealth(playerid, health - taken_health);
		}
	}

	return 1;
}
public: UnRent(playerid)
{
	SetPlayerData(playerid, P_RENTD, 0);
	return 1;
}

public: Pomoina(playerid)
{
    SendClientMessage(playerid,0x358C7CFF,"[Информация]:{ffffff} Вы успешно собрали 1 ед. предмета: '{358c7c}Мусор{ffffff}'.");
	TogglePlayerControllable(playerid, true);
    SetPlayerAttachedObject(playerid, 1, 1264, 6, 0.189000, -0.014000, 0.000000, 90.000000, -90.500000, 0.000000, 0.2,0.2, 0.2);
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_POMOI_PUT);
	SetPlayerCheckpoint
	(
		playerid,
		2707.6702,
		2050.1260,
		12.2391,
		4.0,
		CP_ACTION_TYPE_POMOI_ROUTE
	);
	AddPlayerData(playerid, P_POMOI_ROUTE_STEP, +, 1);
	return 1;
}

public: Lodina(playerid)
{
    SendClientMessage(playerid,0x358C7CFF,"[Информация]:{ffffff} Вы успешно подобрали 1 ед. предмета: '{358c7c}Ящик{ffffff}'.");
	TogglePlayerControllable(playerid, true);
	new rand = random(sizeof loader_job_attach_obj);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0);
	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, loader_job_attach_obj[rand][L_OBJECT], A_OBJECT_BONE_RIGHT_HAND, loader_job_attach_obj[rand][L_POS_X], loader_job_attach_obj[rand][L_POS_Y], loader_job_attach_obj[rand][L_POS_Z], loader_job_attach_obj[rand][L_ROT_X], loader_job_attach_obj[rand][L_ROT_Y], loader_job_attach_obj[rand][L_ROT_Z], 1.0, 1.0, 1.0, 0);
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOAD_PUT);
	SetPlayerCheckpoint
	(
		playerid,
		2569.1455,
		-2108.8201,
		22.3387,
		4.0,
		CP_ACTION_TYPE_LOAD_ROUTE
	);
	AddPlayerData(playerid, P_LOAD_ROUTE_STEP, +, 1);
	return 1;
}

public: AntiBan(playerid)
{
    SetPlayerData(playerid, P_ANTIBAN, 0);
    return 1;
}

public: KDSet(playerid)
{
    SetPlayerData(playerid, P_KDSET, 0);
    return 1;
}

stock AC_GivePlayerWeapon(playerid, weaponid, ammo) {
	if(IsPlayerConnected(playerid) && IsValidWeaponID(weaponid)) {
		new slot = GetWeaponSlot(weaponid);
		GunPlayer[playerid][slot][0] = weaponid;
		GunPlayer[playerid][slot][1] += ammo;
		GivePlayerWeapon(playerid, weaponid, ammo);
		SetPlayerArmedWeapon(playerid, weaponid);
		return 1;
	}
	return 0;
}

stock GetWeaponSlot(weaponid) {
	switch(weaponid) {
		case 0,1:return 0;
		case 2..9:return 1;
		case 22..24:return 2;
		case 25..27:return 3;
		case 28,29,32:return 4;
		case 30,31:return 5;
		case 33,34:return 6;
		case 35..38:return 7;
		case 16..18,39:return 8;
		case 41..43:return 9;
		case 10..15:return 10;
		case 44..46:return 11;
		case 40:return 12;
	}
	return -1;
}

stock IsValidWeaponID(weaponid) {                                               // Проверка на существующее оружие
	if((weaponid > 0 && weaponid < 19) || (weaponid > 21 && weaponid < 47)) {
		return 1;
	}
	return 0;
}

stock SetBlockColor(blockid, color) {
	if(g_arena_created) {
		b_has_color[blockid] = color;
		SetDynamicObjectMaterial(b_objectid[blockid], 0, 8398, "luxorland", "des_dirt1", color);
	}
}
stock GetBlockColor(blockid) {
	if(g_arena_created) return b_has_color[blockid];
	return -1;
}

stock GetBlockPos(blockid, &Float:pos_x, &Float:pos_y, &Float:pos_z) {
	if(g_arena_created) GetDynamicObjectPos(b_objectid[blockid], pos_x, pos_y, pos_z);
}

stock GetRandomBlock() {
	if(g_arena_created) return random(64);
	return -1;
}

stock SetBlockUniqueID(blockid, uniqueid) {
	if(g_arena_created) b_unique_id[blockid] = uniqueid;
}

public: MinigamePrepare() {
	if(g_game_status == 1) {
  		new null;
		foreach(new i:Player) {
			if(!TI[i][tBlockWars]) continue;
			null++;
		}
		if(null < 2) {
		    foreach(new i:Player) {
				if(!TI[i][tBlockWars]) continue;
				SendClientMessage(i,COLOR_GREY, "Игра 'Capture Blocks' была отменена из-за недостатка участников");
				MinigameReset();
				return 0;
			}
		}
		if(!g_arena_created) {
			new Float:pos[3] = { 540.0, -2140.0, -1.0 };
			new Float:tmp_x = pos[0];

			b_gobjectid[0] = CreateDynamicObject(18981, pos[0] -12.499999, pos[1] -12.499998, pos[2] +1.970000, 0.000000, 90.000000, 0.000000,101);
			SetDynamicObjectMaterial(b_gobjectid[0], 0, 19373, "all_walls", "desgreengrass", 0);
			b_gobjectid[1]= CreateDynamicObject(18981, pos[0] -12.499999, pos[1] +12.500001, pos[2] +1.970000, 0.000007, 89.999992, 270.000000,101);
			SetDynamicObjectMaterial(b_gobjectid[1], 0, 19373, "all_walls", "desgreengrass", 0);
			b_gobjectid[2] = CreateDynamicObject(18981, pos[0] +12.500000, pos[1] +12.500004, pos[2] +1.970000, 0.000006, 90.000000, 180.000030,101);
			SetDynamicObjectMaterial(b_gobjectid[2], 0, 19373, "all_walls", "desgreengrass", 0);
			b_gobjectid[3] = CreateDynamicObject(18981, pos[0] +12.500014, pos[1] -12.499995, pos[2] +1.970000, 0.000005, 90.000000, 90.000068,101);
			SetDynamicObjectMaterial(b_gobjectid[3], 0, 19373, "all_walls", "desgreengrass", 0);

			for(new i; i < 64; i++) {
				b_has_color[i] = 0xFFFFFFFF;
				b_unique_id[i] = -1;
				if(i % 8 == 0 && i != 0) {
					pos[0] = tmp_x;
					pos[1] += 5.7;
				}
				b_objectid[i] = CreateDynamicObject(18764, pos[0] -19.991994, pos[1] -19.991994, pos[2] +0.005, 0.00, 0.00, 0.00,101);
				b_button[i] = CreateDynamicObject(18762, pos[0] -19.991994, pos[1] -19.991994, pos[2] +0.009, 0.00, 0.00, 0.00,101);
				SetDynamicObjectMaterial(b_objectid[i], 0, 8398, "luxorland", "des_dirt1", 0xFFFFFFFF);
				b_pickupid[i] = CreateDynamicPickup(19300, 1, pos[0] -19.991994, pos[1] -19.991994, pos[2] +4.00);
				pos[0] += 5.7;
			}
			g_arena_created = true;
		}
		new Float:x, Float:y, Float:z, j;
		foreach(new i:Player) {
			if(!TI[i][tBlockWars]) continue;
			p_has_color[i] = g_default_colors[j];
			GetBlockPos(g_start_pos[j], x, y, z);
			SetPlayerPosAC(i,x, y, z + 3,101,0);
			TogglePlayerControllable(i, 0);
			SetCameraBehindPlayer(i);
			j++;
		}
		g_game_status = 2;
		SetTimerEx("MinigameCountdown", 1000, 0, "i", 3);
		return 1;
	}
	return 0;
}

public: MinigameCountdown(count) {
	if(g_game_status == 2) {
		if(count > 0) {
			new str[2];
			format(str, sizeof str, "%i", count);
			foreach(new i:Player) {
				if(!TI[i][tBlockWars]) continue;
				if(IsPlayerInRangeOfPoint(i, 30.0, 540.0, -2140.0, -1.0)) {
					GameTextForPlayer(i, str, 2000, 3);
					PlayerPlaySound(i, 1056, 540.0, -2140.0, -1.0);
				}
			}
			count--;
			SetTimerEx("MinigameCountdown", 1000, 0, "i", count);
		}
		else {
			foreach(new i:Player) {
				if(!TI[i][tBlockWars]) continue;
				if(IsPlayerInRangeOfPoint(i, 30.0, 540.0, -2140.0, -1.0)) {
					GameTextForPlayer(i, "~g~START!", 2000, 3);
					PlayerPlaySound(i, 1057, 540.0, -2140.0, -1.0);
					TogglePlayerControllable(i, 1);
				}
				else TI[i][tBlockWars] = false;
			}
			SetTimerEx("MinigameUpdate", 1000, 0, "i", 60);
		}
	}
}

public: MinigameUpdate(seconds) {
	if(g_game_status == 2) {
	    new null;
		foreach(new i:Player) {
			if(!TI[i][tBlockWars]) continue;
			null++;
		}
		if(null < 2) {
		    foreach(new i:Player) {
				if(!TI[i][tBlockWars]) continue;
				SendClientMessage(i,COLOR_GREY, "Игра 'Capture Blocks' была отменена из-за недостатка участников");
				MinigameReset();
				return 0;
			}
		}
		new str[128], red, blue, green, yellow;

		for(new i; i < 64; i++) {
			if(GetBlockColor(i) == 0xFFE61400) red++;
			if(GetBlockColor(i) == 0xFF0066CC) blue++;
			if(GetBlockColor(i) == 0xFF319A31) green++;
			if(GetBlockColor(i) == 0xFFFF7F00) yellow++;
		}
		if(seconds > 10) format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~n~~n~ ~y~Time left: ~w~%d ~n~~r~] ~w~%03d ~b~] ~w~%03d ~g~] ~w~%03d ~y~] ~w~%03d", seconds, red, blue, green, yellow);
		else format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~n~~n~ ~y~Time left: ~r~%d ~n~~r~] ~w~%03d ~b~] ~w~%03d ~g~] ~w~%03d ~y~] ~w~%03d", seconds, red, blue, green, yellow);
		foreach(new i:Player) {
			if(!TI[i][tBlockWars]) continue;
			GameTextForPlayer(i, str, 5000, 3);
		}
		seconds--;
		if(seconds >= 0) SetTimerEx("MinigameUpdate", 1000, 0, "i", seconds);
		else {
			new winner, min_value = 0, u_blocks[MAX_PLAYERS], bool:draw = false;
			for(new j; j < 64; j++) {
				if(GetBlockUniqueID(j) != -1) u_blocks[GetBlockUniqueID(j)]++;
			}

			foreach(new i:Player) {
				if(!TI[i][tBlockWars]) continue;
				if(u_blocks[i] > min_value) {
					winner = i;
					min_value = u_blocks[i];
				}
			}
			foreach(new i:Player) {
				if(!TI[i][tBlockWars]) continue;
				if(winner != i) {
					if(u_blocks[winner] == u_blocks[i]) draw = true;
				}
			}
			if(draw) {
				foreach(new i:Player) {
					if(!TI[i][tBlockWars]) continue;
					SendClientMessage(i, 0x66CC00FF, "Игра 'Capture Blocks' закончилась в ничью");
				}
			}
			else {
				format(str, sizeof str, "Игра 'Capture Blocks' успешно завершена, победитель - "W"%s", GetPlayerNameEx(winner));
				foreach(new i:Player) {
					if(!TI[i][tBlockWars]) continue;
					SendClientMessage(i,CGOLD, str);
				}
			}
			MinigameReset();
		}
	}
	return 1;
}

public: MinigameReset() {
	if(g_game_status != 0) {
		new null;
		foreach(new i:Player) {
			if(!TI[i][tBlockWars]) continue;
			null++;
			if(null > 0) {
				if(g_game_status != 1) {
					GameTextForPlayer(i, " ", 10, 3);
					TogglePlayerControllable(i, 0);
					SetTimerEx("UnFreeze" , 800, false, "i", i);
					SetPlayerPosAC(i,GetPVarFloat(i,"pos_comp_x"),GetPVarFloat(i,"pos_comp_y"),GetPVarFloat(i,"pos_comp_z")+1.5,GetPVarInt(i,"comp_vw"),GetPVarInt(i,"comp_int"));
				}
			}
		}
		g_game_status = 0;
		foreach(new i:Player) {
			if(!TI[i][tBlockWars]) continue;
			TI[i][tBlockWars] = false;
		}
		if(g_arena_created) {
			for(new i; i < 64; i++) {
				DestroyDynamicObject(b_objectid[i]);
				DestroyDynamicObject(b_button[i]);
				DestroyDynamicPickup(b_pickupid[i]);
				if(i < sizeof b_gobjectid) DestroyDynamicObject(b_gobjectid[i]);
			}
			g_arena_created = false;
		}
	}
}

public: UnfreezePlayer(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
	    return DestroyVehicle(vehicleid);

	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		SetVehiclePos
		(
			vehicleid,
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z)
		);
		SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));

		AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_DISKI));

		AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_GIDRA));

		AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_NITRO));

		ChangeVehiclePaintjob(vehicleid, GetOwnableCarData(index, OC_VINIL));

		DestroyDynamicObject(nomerobj_f[index]);
		DestroyDynamicObject(nomerobj_b[index]);

		AttachCarNumber(vehicleid, index);
		SetVehicleNumber(index);
	}
	else
	{
		DestroyVehicleLabel(vehicleid);
		SetVehicleData(vehicleid, V_FUEL, 99.9);
	}
	SetVehicleData(vehicleid, V_LIMIT, true);
	SetVehicleParamsEx(vehicleid, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF);

	if(IsAOwnableCar(vehicleid)) SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));

	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_FACTORY,
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_MECHANIC,
			VEHICLE_ACTION_TYPE_TRUCKER,
			VEHICLE_ACTION_TYPE_FERMA_CAR:
		{
			SetVehicleData(vehicleid, V_ACTION_ID, VEHICLE_ACTION_ID_NONE);

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
				if(GetPlayerJobCar(i) != vehicleid) continue;

				SetPlayerData(i, P_JOB_CAR, INVALID_VEHICLE_ID);
			}
		}
	}
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleCarMarketID(vehicleid) != -1)

	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 300.0);

	return 1;
}
public OnPlayerText(playerid, text[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;

	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}
	if(strlen(text) > 90) return 0;

	new caps;
	if(text[++caps])
	{
		if('A'<=text[caps]<='Z' || 'А'<=text[caps]<='Я')
		{
		    new str_query[144];
			format(str_query, sizeof(str_query), "[{ff0000}CAPS{AFAFAF}] %s[%d] написал капсом %s . ", GetPlayerNameEx(playerid), playerid, text);
			SendMessageToAdmins(str_query, 0x999999FF);
		}
	}

	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);

		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);

		return 0;
	}
	//CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;
	//викторина
	if(strval(text) == Viktorina)
	{
		if(strval(text) == -95490065154681) return SendClientMessage(playerid, -1, "В данный момент не проходит викторина.");
		new str[256],name[24],prize;
		GetPlayerName(playerid,name,sizeof name);
		prize = random(vMaxP);
		format(str,sizeof str,"{c71e00}Викторина: {ffffff}Игрок {c71e00}%s{ffffff} угадал! Ответ был: {c71e00}%d{ffffff}. Он получает: {00ff00}%d рублей",name,Viktorina,prize);
		SendClientMessageToAll(0xFFFFFFFF, str);
		GivePlayerMoneyEx(playerid, prize, "Победа в викторине", true, true);
		Viktorina = -95490065154681;
	}
	//--------
	if(strcmp(text, "мать", true) == 0 || strcmp(text, "слив", true) == 0 || strcmp(text, "Мамке привет", true) == 0 || strcmp(text, "маму ебал", true) == 0 || strcmp(text, "Без мамы", true) == 0 || strcmp(text, "King топ", true) == 0)
	{
		SetPlayerData(playerid, P_MUTE,  60 * 60);
		UpdatePlayerDatabaseInt(playerid, "mute", 60 * 60);
		SendClientMessage(playerid, COLOR_RED, "Ваш чат был заблокирован на 60 минут за отправку запретного слова!");
		SendClientMessage(playerid, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");
		return false;
	}
	//CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;

	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}

	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);

		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);

		return 0;
	}
		else if(!strcmp(text, "(", true))
	{
		Action(playerid, "расстроился", _, false);
	}
		else if(!strcmp(text, "((", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.1, false, 0, 0, 0, 0, 0);

		Action(playerid, "сильно расстроился", _, false);
	}
		else if(!strcmp(text, ")", true))
	{
		Action(playerid, "улыбается", _, false);
	}
		else if(!strcmp(text, "))", true))
	{
		Action(playerid, "смеётся", _, false);
	}
		else if(!strcmp(text, "=0", true))
	{
		Action(playerid, "удивился", _, false);
	}
		else if(!strcmp(text, "xD", true))
	{
		Action(playerid, "валяется от смеха", _, false);
	}
		else if(!strcmp(text, "mq", true))
	{
		new fmt_text[100];

	    format(fmt_text, sizeof fmt_text, "Система забанила игрока %s на 15 дней. Причина: Упоминание родных", GetPlayerNameEx(playerid));
		SendClientMessageToAll(0xFF5533FF, fmt_text);

		AddBan(GetPlayerAccountID(playerid), gettime(), 15, GetPlayerIpEx(playerid), "запрещенные слова", "System");
		BanEx(playerid, "запрещенные слова");
	}
		else SendMessageInChat(playerid, text);

	return 0;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
	if(strcmp("/baton", cmdtext, true, 10) == 0)
	{
		if(Baton[playerid] == false)
		{
		    SetPlayerAttachedObject(playerid, 1, 1214, 6, -0.040454, 0.028840, -0.012862, 2.521301, 76.277267, 70.163467, 0.727886, 1.000000, 0.558441);
		    ApplyAnimation(playerid, "PED", "Driveby_R", 4.1, 0, 1, 1, 1, 1, 1);
		    Baton[playerid] = true;
		}
		else if(Baton[playerid] == true)
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		    Baton[playerid] = false;
		}
		return 1;
	}
	return 0;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK))
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "При продолжении Вы будете отключены от сервера");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
		return 0;
	}

    for(new c = 0; c<35; c++)
	{
		if(vehicleid == GetPlayerOwnableCar(playerid, c))
		{
			SetPVarInt(playerid, "lli", c);
		}
	}

	if(!ispassenger)
	{
		if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
		{
			if(!IsABike(vehicleid))
			{
				ClearAnimations(playerid);
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет прав");
			}
		}

		if(GetPlayerData(playerid, P_CUFFED))
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return SendClientMessage(playerid, 0x999999FF, "Вы закованы в наручники");
		}

		if(IsPlayerInVehicle(GetVehicleData(vehicleid, V_DRIVER_ID), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, V_DRIVER_ID)) == PLAYER_STATE_DRIVER)
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return GameTextForPlayer(playerid, "~r~~h~car is used", 1000, 4);
		}
	}
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid)
			OnPlayerEnterVehicleEx(playerid, vehicleid, !(newstate % 2));
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerLastVehicle(playerid);

		if(vehicleid != INVALID_VEHICLE_ID)
			OnPlayerExitVehicleEx(playerid, vehicleid, !(oldstate % 2));
	}

	UpdateSpectate(playerid, false);
	return 1;
}
public: OnPlayerEnterVehicleEx(playerid, vehicleid, is_driver)
{
	SetPlayerData(playerid, P_LAST_VEHICLE, vehicleid);

	new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

	if(is_driver)
	{
		SetVehicleData(vehicleid, V_DRIVER_ID, playerid);

		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
			if(GetPlayerData(playerid, P_DRIVING_LIC) > 0)
			{
				if(!IsABike(vehicleid))
				{
					SpeedometrShowForPlayer(playerid);
				}
				if(GetVehicleData(vehicleid, V_RENT) != -1)
				{
				    new rcs[205];
				    if(GetVehicleData(vehicleid, V_OWRENT) == 0 && GetVehicleData(vehicleid, V_RENT) != -1)
					{
			            format(rcs, sizeof(rcs), "{ffffff}Этот автомобиль сдаётся в аренду!\n ID авто - [{00ceff}%d{ffffff}]\n Цена аренды - {5da130}%d рублей{ffffff}\n\nВы хотите арендовать данный автомобиль?", vehicleid, GetVehicleData(vehicleid, V_RENTP));
						Dialog(playerid,R_F,DIALOG_STYLE_MSGBOX,"Аренда авто",rcs,"Аренда","Отмена");
					}
					if(GetVehicleData(vehicleid, V_OWRENT) != 0 && GetVehicleData(vehicleid, V_RENT) != -1)
					{
					    if(GetVehicleData(vehicleid, V_OWRENT) == GetPlayerName(playerid, OwnedName, sizeof(OwnedName)))
					    {
			                 GetPlayerName(playerid, OwnedName, sizeof(OwnedName));
			                 format(rcs, sizeof(rcs), "Это транспортное средство арендовано на Вас, {ff8700}%s{ffffff}.",OwnedName);
			                 SendClientMessage(playerid,-1,rcs);
						}
						if(GetVehicleData(vehicleid, V_OWRENT) != GetPlayerName(playerid, OwnedName, sizeof(OwnedName)))
						{
			                 SendClientMessage(playerid,-1,"Это транспортное средство уже арендовано другим игроком.");
			                 RemovePlayerFromVehicle(playerid);
					         TogglePlayerControllable(playerid,1);
						}
				    }
				}

				switch(vehicle_type)
				{
					case VEHICLE_ACTION_TYPE_DRIVING_SCH:
					{
						if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
						{
							SetPVarFloat(playerid, "car_damage", 1000.0);

							SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
							NextDrivingExamRouteCP(playerid);

							SendClientMessage(playerid, 0x66CC00FF, "[Инструктор] Проедьтесь немного по городу");
							SendClientMessage(playerid, 0xFFFF00FF, "Внимание! Если Вы попадете в аварию или выйдете из машины, экзамен будет завершен");
							SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы открыть ворота подайте {0099FF}звуковой сигнал");
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Транспорт принадлежит автошколе");
						}
					}
					case VEHICLE_ACTION_TYPE_FACTORY:
					{
						if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(job_car == INVALID_VEHICLE_ID && action_id == VEHICLE_ACTION_ID_NONE)
							{
								new bool: take_car = true;
								switch(GetVehicleData(vehicleid, V_MODELID))
								{
									case 514:
									{
										CreateVehicleLabel(vehicleid, "Доставка топлива\n{FFFFFF}Загрузка 0 / 8000 л", 0xFF6600FF, 0.0, 2.1, 2.1, 20.0);

										SendClientMessage(playerid, 0x66CC00FF, "Прицепите цистерну и отправляйтесь на нефтезавод для закупки топлива");
										SendClientMessage(playerid, 0xFFFFFFFF, "Убедитесь, что склад не полон и заводу действительно необходимо топливо");
									}
									case 498:
									{
										CreateVehicleLabel(vehicleid, "Доставка металла\n{FFFFFF}Загрузка 0 / 500 кг", 0x3399FFFF, 0.0, 0.0, 1.8, 20.0);

										SendClientMessage(playerid, 0x66CC00FF, "Отправляйтесь на шахту, чтобы закупить металл для завода");
										SendClientMessage(playerid, 0xFFFFFFFF, "Убедитесь, что склад не полон и заводу действительно нужен металл");
									}
									default: take_car = false;
								}
								if(take_car)
								{
									SetVehicleData(vehicleid, V_ACTION_ID, true);
									SetPlayerData(playerid, P_JOB_CAR, vehicleid);
								}
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не работник службы доставки завода");
						}
					}
					case VEHICLE_ACTION_TYPE_BUS_DRIVER: // Водитель автобуса
					{
						if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_BUS_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Автобусный парк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите взять автобус в аренду?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не водитель автобуса");
						}
					}
					case VEHICLE_ACTION_TYPE_TAXI_DRIVER: // Таксист
					{
						if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TAXI_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Таксопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому таксопарку 2000 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не таксист");
						}
					}
					case VEHICLE_ACTION_TYPE_MECHANIC: // Автомеханик
					{
						if(GetPlayerJob(playerid) == JOB_MECHANIC)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_MECHANIC_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");
						}
					}
					case VEHICLE_ACTION_TYPE_TRUCKER: // Дальнобойщик
					{
						if(GetPlayerJob(playerid) == JOB_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не дальнобойщик");
						}
					}
					case VEHICLE_ACTION_TYPE_FERMA_CAR:
					{
					    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
					    {
					        new job_car = GetPlayerJobCar(playerid);
							if(job_car != vehicleid && job_car != INVALID_VEHICLE_ID)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
								return 1;
							}
					        if(job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
					        {
					            SetPlayerData(playerid, P_JOB_CAR, vehicleid);
					            ceno[vehicleid] = 0;
					            vodila[vehicleid] = playerid;
					            new str_t[155];
					            format(str_t, sizeof str_t, "{FFFFFF}Загружено сена %d из 10", ceno[vehicleid]);
								CreateVehicleLabel( vehicleid, str_t, 0xFFFFFFFF, 0.0, 0.0, 1.0, 20 );
					        }
							else KillCarJobTimer(playerid);
					    }
					    else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете фермером");
						}
					}
					case VEHICLE_ACTION_TYPE_GOVS_CAR..VEHICLE_ACTION_TYPE_LYT_CAR:
					{
						if(GetPlayerTeamEx(playerid) != vehicle_type - 9)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_ADMIN_CAR:
					{
						if(action_id != 1)
						{
							if(!GetPlayerAdminEx(playerid))
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
							}
						}
					}
				}
			}
			else
			{
				if(!IsABike(vehicleid))
				{
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, 0x999999FF, "У Вас нет прав");
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, false);

		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BUS_DRIVER, VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
				if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
				{
					if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
					{
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);

						if(vehicle_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								new fmt_str[90];
								g_taxi_mileage[playerid] = 0.0;

								format(fmt_str, sizeof fmt_str, "%s сел в ваше такси. Счетчик включен", GetPlayerNameEx(playerid));
								SendClientMessage(driver, 0x3399FFFF, fmt_str);

								format(fmt_str, sizeof fmt_str, "Вы сели в такси %s. Тариф: %d рублей (оплата за каждые 100 м поездки)", GetPlayerNameEx(driver), tariff);
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);

								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты тарифа");
							}
						}
						else
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
								GivePlayerMoneyEx(driver, tariff, "+ Оплата проезда в автобусе", true, true);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты проезда");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public: OnPlayerExitVehicleEx(playerid, vehicleid, is_driver)
{
	SetPlayerData(playerid, P_LAST_VEHICLE, INVALID_VEHICLE_ID);

	if(is_driver)
	{
		SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

		if(vodila[vehicleid] == playerid && GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
		{
			StartCarJobTimer(playerid, 15000, vehicleid);
			SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
		}

		if(!IsABike(vehicleid))
			SpeedometrHideForPlayer(playerid);

		if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
		{
			DisablePlayerRaceCheckpoint(playerid);

			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{
				SetVehicleToRespawn(vehicleid);
			}
			SetPlayerData(playerid, P_DRIVING_LIC, 0);
			ClearPlayerDrivingExamInfo(playerid);

			SendClientMessage(playerid, 0xFF6600FF, "Вы покинули учебный автомобиль");
			SendClientMessage(playerid, 0xFF0000FF, "Экзамен провален!");

			DeletePVar(playerid, "car_damage");
		}

		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_FACTORY:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
				{
				    if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimer(playerid);
						SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
					}
					if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimer(playerid);
						SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
					}
				}
			}
			case VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в автобус");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_MECHANIC:
			{
				if(GetPlayerJob(playerid) == JOB_MECHANIC)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TRUCKER:
			{
				if(GetPlayerJob(playerid) == JOB_TRUCKER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new Float: hp_vehicle;
    new veh_id = GetPlayerVehicleID(playerid);

    GetVehicleHealth(veh_id, hp_vehicle);

    if (hp_vehicle < 400) SetVehicleHealth(veh_id, 450);

	if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
	{
		SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
		GameTextForPlayer(playerid, "~r~~h~engine off", 4000, 6);

		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_DRIVING_SCH, VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				new Float: health = GetPVarFloat(playerid, "car_damage");

				health -= floatabs((health - hp_vehicle));

				SetPVarFloat(playerid, "car_damage", health);
			}
		}
	}
    return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerCPInfo(playerid, CP_ACTION_TYPE);
	if(IsPlayerInCheckpoint(playerid))
	{
		switch(action_type)
		{
			case CP_ACTION_TYPE_LOADER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ClearAnimations(playerid);
							ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerLoaderJobLoad", 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADER_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);

							SetPlayerLoaderJobLoadCP(playerid);

							new fmt_str[70];
							format(fmt_str, sizeof fmt_str, "Ящик доставлен на склад! Всего перенесено ящиков: {FF9900}%d", GetPlayerJobLoadItems(playerid));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
						}
					}
				}
			}
			case CP_ACTION_TYPE_POMOI_ROUTE:
			{
					 if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_POMOI_PUT)
					{
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

						RemovePlayerAttachedObject(playerid, 1);
						ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);

						SetPlayerData(playerid, P_POMOI_ROUTE_STEP, 0);
						SetPlayerData(playerid, P_POMOI, 0);
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_POMOI_CHOP);

						new fmt_str[256];
						format(fmt_str, sizeof fmt_str, "Вы успешно выбросили мусор! Всего выброшенно: {FF9900}%d шт.", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0x32a44bFF, fmt_str);
						new money = 5000 * g_doubling[2];
						GivePlayerMoneyEx(playerid, money, "Выброс мусора");
						UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
						DisablePlayerCheckpoint(playerid);

				}
			}
			case CP_ACTION_TYPE_LOAD_ROUTE:
			{
					 if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOAD_PUT)
					{
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
						ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);

						SetPlayerData(playerid, P_LOAD_ROUTE_STEP, 0);
						SetPlayerData(playerid, P_POMOI, 0);
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOAD_CHOP);

						new fmt_str[256];
						format(fmt_str, sizeof fmt_str, "Вы успешно отнесли ящик! Всего отнесено: {FF9900}%d шт.", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0x32a44bFF, fmt_str);
						new zp = 5000 * g_doubling[2];
						GivePlayerMoneyEx(playerid, zp, "Перенос ящиков");
						UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
						DisablePlayerCheckpoint(playerid);

				}
			}
			case CP_ACTION_TYPE_LUMBERJACK_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

							SetTimerEx("SetPlayerLumberJackTakeWood", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_TAKE:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
			    {
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

							SetTimerEx("SetPlayerFermerTake", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerRaceCPInfo(playerid, RCP_ACTION_TYPE);
	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsPlayerInRaceCheckpoint(playerid))
	{
		switch(action_type)
		{
			case RCP_ACTION_TYPE_DRIVING_EXAM:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

					if(step >= sizeof driving_exam_route - 1)
					{
						ClearPlayerDrivingExamInfo(playerid);
						DisablePlayerRaceCheckpoint(playerid);

						new Float: health = GetPVarFloat(playerid, "car_damage");
						SetVehicleToRespawn(vehicleid);

						if(health < 900.0)
						{
							SetPlayerData(playerid, P_DRIVING_LIC, 0);

							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Экзамен провален",
								"{FFFFFF}К сожалению, Вам не удалось справиться с практической частью экзамена.\n"\
								"Уровень повреждений машины слишком высокий.\n\n"\
								"В сдедующий раз постарайтесь ехать аккуратнее, соблюдая ПДД.\n"\
								"Ждем Вас на пересдаче!",
								"Ок", ""
							);
						}
						else
						{
							new query[64];
							format(query, sizeof query, "UPDATE accounts SET driving_lic=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								Dialog
								(
									playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
									"{66CC00}Экзамен пройден успешно",
									"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n"\
									"и получаете водительское удостоверение!\n"\
									"{9999FF}На Вашей машине не обнаружено никаких повреждений, либо\n"\
									"они незначительны.\n"\
									"{FFFFFF}Не забывайте клавиши управления транспортом, а также\n"\
									"правила дорожного движения. Они будут постоянно нужны\n"\
									"Вам на дороге. Обучающий раздел в автошколе будет все\n"\
									"время доступен если понадобится какая-либо помощь.",
									"Ок", ""
								);
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, обратитесь к администрации {FF0000}(equ-code 07)");
							}
						}
					}
					else if(step >= 0)
					{
						NextDrivingExamRouteCP(playerid);
					}
				}
			}
			case RCP_ACTION_TYPE_BUS_ROUTE:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
						new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);

						if(g_bus_route[route_id][route_step][BRS_POS_X] == 0.0)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
						}

						if(g_bus_route[route_id][route_step - 1][BRS_STOP])
						{
							new fmt_str[90];
							DisablePlayerRaceCheckpoint(playerid);

							GameTextForPlayer(playerid, "~r~Stop", 4000, 1);
							SendClientMessage(playerid, 0x66CC00FF, "Остановка. Ждите пассажиров");

							format(fmt_str, sizeof fmt_str, "Автобус по маршруту %s отправляется через 10 секунд", g_bus_routes[route_id][BR_NAME]);
							SendMessageInLocal(playerid, fmt_str, 0x669999FF, 45.0);

							SetTimerEx("NextBusRouteCP", 10_000, false, "i", playerid);
						}
						else
						{
							AddPlayerData(playerid, P_JOB_WAGE, +, random(30) + 20);
							NextBusRouteCP(playerid);
						}
					}
				}
			}
			case RCP_ACTION_TYPE_FERMA:
			{
				if(GetPVarInt(playerid,"zagruz") > gettime() ) return SendClientMessage(playerid, 0xFF0000FF, "С момента загрузки сена не прошло ещё 5 минут.");
			    DisablePlayerRaceCheckpoint(playerid);
			    new poluchka = ceno[vehicleid] * 50000;
			    GivePlayerMoneyEx(playerid, poluchka, "Оплата за доставку сена");
			    ceno[vehicleid] = 0;
			    FermaCarUpdate(vehicleid);
			    SendClientMessage(playerid, 0xCECECEFF, "Сено успешно сдано. Отправляйтесь на ферму за новой партией.");
				//new price = ceno[vehicleid] * 70000;
				new ferma = GetPVarInt(playerid, "ferma_id");
			    AddBusinessData(ferma, B_BALANCE, +, poluchka);
				new query[520];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)+poluchka, GetBusinessData(ferma, B_BALANCE), GetPlayerAccountID(playerid), GetBusinessData(ferma, B_SQL_ID));
				mysql_query(mysql, query, false);
			}
			case RCP_ACTION_TYPE_ORDER:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER)
				{
					new order_id = GetPlayerData(playerid, P_ORDER);

					if(IsPlayerInJob(playerid) && order_id != -1)
					{
						if(!GetTruckIndex(vehicleid))
						{
							new biz_id = GetOrderData(order_id, O_COMPANY_ID);

							if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetBusinessData(biz_id, B_EXIT_POS_X), GetBusinessData(biz_id, B_EXIT_POS_Y), GetBusinessData(biz_id, B_EXIT_POS_Z))) return 1;

							if(!GetPlayerJobLoadItems(playerid))
								return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет продуктов");

							new fmt_msg[90];

							if(GetPlayerJobLoadItems(playerid) < GetOrderData(order_id, O_AMOUNT))
							{
								SendClientMessage(playerid, 0xFF9933FF, "Недостаточно продуктов для выполнения заказа");
								format(fmt_msg, sizeof fmt_msg, "Вы загрузили %d шт., а требуется %d шт.", GetPlayerJobLoadItems(playerid), GetOrderData(order_id, O_AMOUNT));
								SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
							}
							else
							{
								AddBusinessData(biz_id, B_PRODS, +, GetOrderData(order_id, O_AMOUNT));

								mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
								mysql_query(mysql, fmt_msg, false);

								SetPlayerData(playerid, P_ORDER, -1);
								DisablePlayerRaceCheckpoint(playerid);

								new salary = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								new income = salary - (GetOrderData(order_id, O_AMOUNT) * 24);

								SendClientMessage(playerid, 0xFFFF00FF, "Заказ выполнен!");

								format(fmt_msg, sizeof fmt_msg, "Вы продали предприятию \"%s\" %d продуктов на сумму %d рублей", GetBusinessData(biz_id, B_NAME), GetOrderData(order_id, O_AMOUNT), salary);
								SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

								format(fmt_msg, sizeof fmt_msg, "Чистая прибыль от этой продажи составляет %d рублей", income);
								SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

								AddPlayerData(playerid, P_JOB_WAGE, +, income);

								SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetOrderData(order_id, O_AMOUNT));
								DeleteOrder(order_id);
							}
						}
						else
						{
							new fs_id = GetOrderData(order_id, O_COMPANY_ID);

							if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetFuelStationData(fs_id, FS_POS_X), GetFuelStationData(fs_id, FS_POS_Y), GetFuelStationData(fs_id, FS_POS_Z))) return 1;

							if(!GetPlayerJobLoadItems(playerid))
								return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет топлива");

							new fmt_msg[90];

							if(GetPlayerJobLoadItems(playerid) < GetOrderData(order_id, O_AMOUNT))
							{
								SendClientMessage(playerid, 0xFF9933FF, "Недостаточно топлива для выполнения заказа");
								format(fmt_msg, sizeof fmt_msg, "Вы загрузили %d л., а требуется %d л.", GetPlayerJobLoadItems(playerid), GetOrderData(order_id, O_AMOUNT));
								SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
							}
							else
							{
								AddFuelStationData(fs_id, FS_FUELS, +, GetOrderData(order_id, O_AMOUNT));

								mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE fuel_stations SET fuels=%d WHERE id=%d", GetFuelStationData(fs_id, FS_FUELS), GetFuelStationData(fs_id, FS_SQL_ID));
								mysql_query(mysql, fmt_msg, false);

								SetPlayerData(playerid, P_ORDER, -1);
								DisablePlayerRaceCheckpoint(playerid);

								new salary = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								new income = salary - (GetOrderData(order_id, O_AMOUNT) * 24);

								SendClientMessage(playerid, 0xFFFF00FF, "Заказ выполнен!");

								format(fmt_msg, sizeof fmt_msg, "Вы продали АЗС \"%s\" %d л. топлива на сумму %d рублей", GetFuelStationData(fs_id, FS_NAME), GetOrderData(order_id, O_AMOUNT), salary);
								SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

								format(fmt_msg, sizeof fmt_msg, "Чистая прибыль от этой продажи составляет %d рублей", income);
								SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

								AddPlayerData(playerid, P_JOB_WAGE, +, income);

								SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetOrderData(order_id, O_AMOUNT));
								DeleteOrder(order_id);
							}
						}
					}
				}
			}

			default:
			{

			}
		}

	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

stock ClearMedBed(playerid, bedid)
{
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		SetPlayerData(playerid, P_OCCUPIED_BED, -1);
	}

	g_med_bed_used[bedid] = false;
	UpdateMedBed(bedid);

	return 1;
}

stock UpdateMedBed(bedid) // обновить койку
{
	new fmt_text[85];

	format(fmt_text, sizeof fmt_text, "Койка №%d\n{00CC00}Свободна\n\n{AAAAAA}Нажмите левый ALT\nчтобы занять ее", bedid + 1);
	UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_text);

	return 1;
}

public: HospitalTreatment()
{
	for(new playerid; playerid < MAX_PLAYERS; playerid ++)
	{
		if(!IsPlayerConnected(playerid)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) continue;

		if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}
		else
		{
			GameTextForPlayer(playerid, "~g~~h~~h~+ 1 HP", 1000, 4);
			SetPlayerChatBubble(playerid, "+1 hp", 0x33CC33FF, 5.0, 1000);

			SetPlayerHealthEx(playerid, 1.0, true);
		}
        if(GetPlayerPrem(playerid) == 1)
        {
            GameTextForPlayer(playerid, "~g~~h~~h~+ 10 HP", 1000, 4);
            SetPlayerChatBubble(playerid, "+10 hp", 0x33CC33FF, 5.0, 1000);
			SetPlayerHealthEx(playerid, 10.0, true);
			}
	}
	SetTimer("HospitalTreatment", (random(5) + 1) * 1000, false);
	return 1;
}

public: OnPlayerChangeWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_NECK);

	new player_tint = GetPlayerData(playerid, P_WEAPON_TINT)[ GetTintIDByWeapon(weaponid) ];

	if(player_tint)
		SetPlayerWeaponTint(playerid, weaponid, player_tint);
}

stock SetPlayerWeaponTint(playerid, weaponid, player_tint)
{
	new tintid = GetTintIDByWeapon(weaponid);

	SetPlayerAttachedObject
	(
		playerid,
		A_OBJECT_SLOT_NECK,
		GetWeaponTintData(tintid, WT_OBJECT),
		A_OBJECT_BONE_RIGHT_HAND,
		GetWeaponTintData(tintid, WT_X),
		GetWeaponTintData(tintid, WT_Y),
		GetWeaponTintData(tintid, WT_Z),
		GetWeaponTintData(tintid, WT_RX),
		GetWeaponTintData(tintid, WT_RY),
		GetWeaponTintData(tintid, WT_RZ),
		GetWeaponTintData(tintid, WT_SCALE_X),
		GetWeaponTintData(tintid, WT_SCALE_Y),
		GetWeaponTintData(tintid, WT_SCALE_Z),
		GetWeaponTint(player_tint)
	);

	return 1;
}

stock GetTintIDByWeapon(weaponid)
{
	new tint;

	switch(weaponid)
	{
		case 22: tint = 0;
		case 23: tint = 1;
		case 24: tint = 2;
		case 25: tint = 3;
		case 27: tint = 4;
		case 28: tint = 5;
		case 29: tint = 6;
		case 30: tint = 7;
		case 31: tint = 8;
		case 32: tint = 9;
		case 33: tint = 10;
		case 35: tint = 11;
		case 36: tint = 12;
		case 38: tint = 13;
	}

	return tint;
}

stock GetWeaponIDByTint(tintid)
{
	new weapon;

	switch(tintid)
	{
		case 0: weapon = 22;
		case 1: weapon = 23;
		case 2: weapon = 24;
		case 3: weapon = 25;
		case 4: weapon = 27;
		case 5: weapon = 28;
		case 6: weapon = 29;
		case 7: weapon = 30;
		case 8: weapon = 31;
		case 9: weapon = 32;
		case 10: weapon = 33;
		case 11: weapon = 35;
		case 12: weapon = 36;
		case 13: weapon = 38;
	}

	return weapon;
}

public: BuyCarPTDUpdate(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

	new type = buy_car_select_color_type[playerid];
	new car_market_id = GetPlayerInBiz(playerid);
	new select_car = buy_car_select_car[playerid];
	new modelid = car_market_data[car_market_id][select_car][0];

	new fmt_td_text[85];
	format(fmt_td_text, sizeof fmt_td_text, "цвет %d", type + 1);

	//PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][3], fmt_td_text);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][2]);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][3]);

	//static const
	//	car_market_name[][] = {"мото-вело", "элитный", "эконом", "средний"};


	format(fmt_td_text, sizeof fmt_td_text, "Цена: %d", GetVehicleInfo(modelid - 400, VI_PRICE));
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][0], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%s", GetVehicleInfo(modelid - 400, VI_NAME));
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][1], fmt_td_text);

//	new color_index = buy_car_select_color[playerid][type];

	//PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][4], rgb_array[color_index]);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][4]);

	//if(--color_index < 0)
	//	color_index = sizeof rgb_array - 1;

	//PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][3], rgb_array[color_index] - 0xAA);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][3]);

//	color_index += 2;
//	if(color_index > sizeof rgb_array - 1)
//		color_index = 1;

	//PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][5], rgb_array[color_index] - 0xAA);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][5]);

	ChangeVehicleColor(GetPlayerData(playerid, P_BUY_CAR), buy_car_select_color[playerid][0], buy_car_select_color[playerid][1]);
	return 1;
}

public: ShowBuyCarInfo(playerid, vehicleid)
{
	new text[275];

	//static const vehicle_class_name[][] = {"Мото-вело", "Эконом", "Средний", "Премиум"};

	new modelid = GetVehicleModel(vehicleid) - 400;
	format
	(
		text, sizeof text,
		"{FFFFFF}Тип автомобиля:\t%s класс\n\
		Название:\t\t%s\n\
		Номер модели:\t%d\n\
		Стоимость аренды:\t{FFFF00}%d руб.\n\
		{FFFFFF}Стоимость покупки:\t{00CC00}%d руб.\n\n\
		{FFFFFF}Для покупки этой модели нажмите \"Купить\"\n\
		Чтобы взять авто в аренду используйте /rentcar",
		"Неопределённый",
		//vehicle_class_name[ GetVehicleInfo(modelid, VI_TYPE) ],
		GetVehicleInfo(modelid, VI_NAME),
		modelid + 400,
		GetVehicleInfo(modelid, VI_PRICE) / 100,
		GetVehicleInfo(modelid, VI_PRICE)
	);

	Dialog(playerid, DIALOG_BIZ_CAR_MARKET_CAR_INFO, DIALOG_STYLE_MSGBOX, "{FF9900}Авторынок", text, "Купить", "Выйти");
	return 1;
}

stock ExitPlayerBuyCarMarket(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;

	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

	new biz_id = GetPlayerInBiz(playerid);

	BuyCarTDsHideForPlayer(playerid);
	HidePlayerSelectPanel(playerid);
	CancelSelectTextDraw(playerid);

	TogglePlayerControllable(playerid, true);

	SetPlayerPosEx(playerid, 1033.8503,-1885.7408,34.3527,143.0967, 0, biz_id + 6000);

	return 1;
}

stock CarMarketShowNextCar(playerid, next = '+')
{
	new biz_id = GetPlayerInBiz(playerid);
	new car_market_id = biz_id;

	if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

	new max_car_index = GetCarMarketMaxIndex(car_market_id);

	if(next == '+')
	{
		if(++buy_car_select_car[playerid] > max_car_index)
			buy_car_select_car[playerid] = 0;
	}
	else
	{
		if(--buy_car_select_car[playerid] < 0)
			buy_car_select_car[playerid] = max_car_index;
	}

	new select_car = buy_car_select_car[playerid];
	new color_1 = buy_car_select_color[playerid][0];
	new color_2 = buy_car_select_color[playerid][1];

	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][select_car][0], 1027.6141,-1892.0331,34.7166,298.6746, color_1, color_2, 0));
	SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
	//LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);

	CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	return 1;
}

stock GetCarMarketMaxIndex(market_id)
{
	new max_index;

	for(new idx; idx < 68; idx ++)
	{
		if(car_market_data[market_id][idx][0] == 0)
			break;

		++ max_index;
	}

	return max_index - 1;
}

public: ChangeColorPTDUpdate(playerid)
{
	return 1;
}

public OnPlayerPickUpPickupEx(playerid, pickupid, action_type, action_id)
{
	//if(pickupid == fishing_market_pickup)
      //  return Dialog(playerid, DLG_FISH_MARKET, DIALOG_STYLE_LIST, "Рыбный рынок", "Удочка (7500)\nПриманка (2000)\nЛеска (2000)", "Купить", "Отмена");
    //if(pickupid == fishing_info_pickup)
      //  return ShowFishingInfo(playerid);
	if(pickupid == CrupiePick) // Если игрок встал на пикап с формой крупье
    {
        if(TotalCrupie >= 10) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Превышен лимит крупье на работе."); // Если на работе больше 10 крупье,то выводим сообщение.
        if(GetPVarInt(playerid,"CRUPIE") == 0) SendClientMessage(playerid,0x008000FF,"Вы взяли форму крупье."),SetPVarInt(playerid,"CRUPIE",GetPlayerSkin(playerid)),SetPlayerSkin(playerid,171),TotalCrupie++; // Если игрок не является на работе,то выдаём форму
        else SendClientMessage(playerid,0x008000FF,"Вы положили форму крупье."),SetPlayerSkin(playerid,GetPVarInt(playerid,"CRUPIE")),DeletePVar(playerid,"CRUPIE"),TotalCrupie--; // А иначе забираем форму
    }
	if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		return 0;
	}

	if(IsPlayerInRangeOfPoint(playerid, 3, 848.8577,575.5246,15.8932))
	{
		GivePlayerMoneyEx(playerid, -25000, "Вы успешно арендовали велосипед. Приятной поездки!", true, true);
		new vehicleid, Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		vehicleid = CreateVehicle(510, x, y, z, 0, 0, 0, 0, 0);
		PutPlayerInVehicle(playerid, vehicleid, 0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 3, -2681.6731,182.9798,12.2701))
	{
		GivePlayerMoneyEx(playerid, -25000, "Вы успешно арендовали велосипед. Приятной поездки!", true, true);
		new vehicleid, Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		vehicleid = CreateVehicle(510, x, y, z, 0, 0, 0, 0, 0);
		PutPlayerInVehicle(playerid, vehicleid, 0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
	{
		SetPlayerData(playerid, P_LAST_PICKUP, pickupid);

		switch(action_type)
		{
			case PICKUP_ACTION_TYPE_TELEPORT:
			{
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				{
					switch(GetTeleportData(action_id, T_ACTION_TYPE))
					{
						case T_ACTION_TYPE_BLOCK_LEAVE_AREA:
						{
							SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, true);
						}
						case T_ACTION_TYPE_END_JOB:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
						}
						case T_ACTION_TYPE_LEAVE_HOSPITAL:
						{
							if(GetPlayerData(playerid, P_HOSPITAL))
							{
								if(GetPlayerHealthEx(playerid) < 70.0) return SendClientMessage(playerid, -1, "Медперсонал не может отпустить Вас в таком состоянии. Отправляйтесь на лечение");
								else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									SendClientMessage(playerid, 0x66CC00FF, "Вы выписались из больницы");
									ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
								}
								SetPlayerData(playerid, P_HOSPITAL, false);
							}
						}
						case T_ACTION_TYPE_LEAVE_PPS:
						{
							if(GetPlayerData(playerid, P_JAIL))
							{
								SendClientMessage(playerid, 0x999999FF, "Время заключения не истекло");

								SetPlayerSpawnPos(playerid);

								return 1;
							}
						}
					}

					SetPlayerPosEx
					(
						playerid,
						GetTeleportData(action_id, T_POS_X),
						GetTeleportData(action_id, T_POS_Y),
						GetTeleportData(action_id, T_POS_Z),
						GetTeleportData(action_id, T_ANGLE),
						GetTeleportData(action_id, T_INTERIOR),
						GetTeleportData(action_id, T_VIRTUAL_WORLD)
					);
				}
			}
			case PICKUP_ACTION_TYPE_BUY_DRUGS:
			{
				if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
					return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

			    Dialog(playerid, DIALOG_BUY_DRUGS, DIALOG_STYLE_INPUT, "Покупка наркотиков", "Введите количество наркотиков, которые хотите купить в поле ниже:\n\n{AFAFAF}Цена за 1 гр. наркотиков - 70 руб", "Далее", "Отмена");
			}
			case PICKUP_ACTION_TYPE_TEAM_RAZDEV:
			{
				if(GetPlayerTeamEx(playerid) == TEAM_NONE) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
				Dialog(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться?\nУчтите что за то что вы будете не в форме в рабочее время, вас могут наказать.", "Далее", "Отмена");
			}
			case PICKUP_ACTION_TYPE_DRIVING_TUTO:
			{
				ShowPlayerDrivingTutorial(playerid);
			}
			case PICKUP_ACTION_TYPE_ATM:
			{
				ShowPlayerATMDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_BANK:
			{
				if(action_id)
				{
					callcmd::bank(playerid, "");
				}
				else ShowPlayerPayForRentDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_TEMP_JOB:
			{
				new job = GetPlayerTempJob(playerid);
				if(job != action_id && IsPlayerInJob(playerid) || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
				{
					job = TEMP_JOB_NONE - 1;
				}

				switch(action_id)
				{
					case TEMP_JOB_LOADER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADER_START, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа грузчика",
								"{FFFFFF}Вы хотите устроиться на работу грузчиком?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADER_END, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа грузчика",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться сюда закончите текущую работу");
					}
					case TEMP_JOB_MINER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_START, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа шахтера",
								"{FFFFFF}Вы хотите устроиться на работу шахтера?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_END, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа шахтера",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_FACTORY_TRUCKER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Завод",
								"{FFFFFF}Вы хотите начать работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Завод",
								"{FFFFFF}Закончить работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_FACTORY:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Завод",
								"{FFFFFF}Вы хотите начать работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Завод",
								"{FFFFFF}Закончить работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_POMOI:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_POMOI_ST, DIALOG_STYLE_MSGBOX,
								"Работа уборщика",
								"{FFFFFF}Вы хотите устроиться на работу уборщика пляжа?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_POMOI_END, DIALOG_STYLE_MSGBOX,
								"Работа уборщика",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}

					}
					case TEMP_JOB_FERMER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FERMER_ST, DIALOG_STYLE_MSGBOX,
								"{"#cGold"}Работа фермера",
								"{"#cW"}Вы хотите устроиться на работу фермером?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FERMER_END, DIALOG_STYLE_MSGBOX,
								"{"#cGold"}Работа фермера",
								"{"#cW"}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_LOAD:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOAD_ST, DIALOG_STYLE_MSGBOX,
								"Работа грузчика",
								"{FFFFFF}Вы хотите устроиться на работу грузчика?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOAD_END, DIALOG_STYLE_MSGBOX,
								"Работа грузчика",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}

     }
         case TEMP_JOB_LUMBERJACK:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_ST, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа лесоруба",
								"{FFFFFF}Вы хотите устроиться на работу лесоруба?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_END, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Работа лесоруба",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
				}
      }
			case PICKUP_ACTION_TYPE_INFO_PICKUP:
			{
				Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					GetInfoPickupData(action_id, IP_TITLE),
					GetInfoPickupData(action_id, IP_INFO),
					"Ок", ""
				);
			}
			case PICKUP_ACTION_TYPE_MINER_SELL_M:
			{
				ShowPlayerBuyMetalDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_FACTORY_MET:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					new j_state = GetPlayerTempJobState(playerid);
					switch(j_state)
					{
						case TEMP_JOB_STATE_FACTORY_TAKE_MET:
						{
							new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
							new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

							new take_metall = random(2) + 1;
							if(factory_metal > take_metall && factory_fuel > (take_metall * 6))
							{
								SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal - take_metall);
								UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

								new fmt_str[16];
								SetPVarInt(playerid, "factory_take_metall", take_metall);

								format(fmt_str, sizeof fmt_str, "~b~~h~+%d kg", take_metall);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATE_P);
							}
							else GameTextForPlayer(playerid, "~r~no fuel or metal", 4000, 1);
						}
						case TEMP_JOB_STATE_FACTORY_CREATE_P:
						{
							SendClientMessage(playerid, 0x999999FF, "Вы уже взяли металл");
						}
					}
				}
			}
			case PICKUP_ACTION_TYPE_LUMBERJACK_P:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
					{
						//new desk;

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 0);

						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);

						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

						new fmt_text[65];

						format(fmt_text, sizeof fmt_text, "Дрова доставлены на склад! Всего перенесено дров: {FF9900}%d шт", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0x66CC00FF, fmt_text);

						SetPlayerLumberJackChopCP(playerid);
					}
				}
   }

			case PICKUP_ACTION_TYPE_FUEL_STATION:
			{
				ShowPlayerBuyJerricanDialog(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_FERMER_P:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
			    {
			        if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_PUT)
			        {
			            SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_CHOP);
			            ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 0);

			            RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
			            //SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);

			            SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

			            new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

			            SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount + 1);

			            new fmt_text[74];

			            format(fmt_text, sizeof fmt_text, "Сено доставлено на склад! Всего перенесено сена: {2f89f7}%d стог(a).", GetPlayerJobLoadItems(playerid));
			            SendClientMessage(playerid, -1, fmt_text);

			            SetPlayerFermerChopCP(playerid);
					}
			    }
			}
			case PICKUP_ACTION_TYPE_BIZ_ENTER:
			{
				SetPVarInt(playerid, "pickup_biz", action_id);
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_FLA:
			{
				SetPVarInt(playerid, "pickup_enter", action_id);
			}
			case PICKUP_ACTION_TYPE_BIZ_EXIT:
			{
				new in_biz = GetPlayerInBiz(playerid);
				if(in_biz != -1)
				{
					new type = GetBusinessData(in_biz, B_INTERIOR);
					if(action_id == type)
					{
						SetPlayerPosEx
						(
							playerid,
							GetBusinessData(in_biz, B_EXIT_POS_X),
							GetBusinessData(in_biz, B_EXIT_POS_Y),
							GetBusinessData(in_biz, B_EXIT_POS_Z),
							GetBusinessData(in_biz, B_EXIT_ANGLE),
							0,
							0
						);
						SetPlayerInBiz(playerid, -1);

						if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
						{
							new vehicleid = GetPlayerOwnableCarLast(playerid);

							if(vehicleid != INVALID_VEHICLE_ID)
							{
								SetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][1], vehicle_temp_position[playerid][2]);
								SetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);

								LinkVehicleToInterior(vehicleid, 0);
								SetVehicleVirtualWorld(vehicleid, 1);
							}
						}
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_HEALTH:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -0)
				{
					if(businessid == action_id)
					{
						new time = gettime();
						if(GetPVarInt(playerid, "biz_health_use") <= time)
						{
							new price = BIZ_HEALTH_SERVICE_PRICE;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[155];

								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_PRODS)-1 : 0, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_BALANCE)+price : 0, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -price, "Использование аптечки в бизнесе", false, true);

									if(GetBusinessData(businessid, B_PRODS) >= 1)
									{
										AddBusinessData(businessid, B_PRODS, -, 1);
										AddBusinessData(businessid, B_BALANCE, +, price);
									}
									SetPlayerHealthEx(playerid, 99.0);
									SetPVarInt(playerid, "biz_health_use", time + 90); // 90 сек (1:30 минут)

									mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), time, price, IsBusinessOwned(businessid));
									mysql_query(mysql, query, false);
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 24)");
							}
							else SendClientMessage(playerid, 0x999999FF, "Услуги медпункта стоят 150 рублей");
						}
						else SendClientMessage(playerid, 0x999999FF, "Недавно Вы уже пользовались услугами медпункта");

						// SetPlayerHealthEx(playerid, 95.0);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_SHOP_247:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SHOP_24_7)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_CELL_SALON:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CELL_SALON)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_HOUSE:
			{
				ShowPlayerHouseInfo(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_HOUSE_HEALTH:
			{
				new houseid = GetPlayerInHouse(playerid);
				if(houseid != -1)
				{
					new type = GetHouseData(houseid, H_TYPE);

					if(IsPlayerInRangeOfPoint(playerid, 4.0, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z)))
					{
						SetPlayerHealthEx(playerid, 100.0);
						GameTextForPlayer(playerid, "~b~~h~100 hp", 3000, 1);
					}
				}
			}
			case PICKUP_ACTION_TYPE_REALTOR_HOME:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_REALTOR_HOME)
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{99CC00}Номера свободных домов",
							g_house_realtor_list,
							"Закрыть", ""
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CLOTHING:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CLOTHING_SHOP)
					{
						ShowPlayerClothingShopPanel(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_SELLSIM:
			{
			    Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					"{FF6666}Продажа SIM-карты игроку",
					"}Продать SIM-карту можно в любом магазине 24/7\n\n\
					Для того чтобы продать SIM-карту используйте: /sellsim\n\
					{Вы и покупатель должны находиться в магазине.",
					"Закрыть", ""
				);
			}
			case PICKUP_ACTION_TYPE_INFO_BOLKA:
			{
			    Dialog(playerid, DIALOG_BOLNICA, DIALOG_STYLE_LIST, "Больница", "1. Информация\n2. Экспресс лечение\n3. Оформить мед. карту", "Выбрать", "Закрыть");
			}
			case PICKUP_ACTION_TYPE_SELL_CAR:
			{
			    callcmd::sellcar(playerid, "");
			}
			case PICKUP_ACTION_TYPE_BIZ_PC_CLUB:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_COMP_CLUB)
					{
						ShowPlayerCompClubPanel(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_PC_GAME:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_COMP_CLUB)
					{
						if(GetPVarInt(playerid,"comp_game") <= unix) return SendClientMessage(playerid, 0xCECECEFF, "Купите билет для игры");

						Dialog
						(
							playerid,
							DIALOG_COMP_GAME,
							DSL,""P"Game Menu",""P"1."W" Capture Blocks\n"P"2."W" DM - Арена\n"P"3."W" Гонка Вооружений", "Выбрать", "Закрыть"
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_MARK:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}На территории авторынка могут находиться не все модели транспорта, которые\n\
					можно приобрести (некоторые отсутствуют из-за того, что их взяли на прокат)\n\
					Нажмите кнопку \"Далее\" чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_ENT:
			{
				EnterPlayerToEntrance(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_EXI:
			{
				new entranceid = GetPlayerInEntrance(playerid);
				if(entranceid != -1)
				{
					if(GetPlayerInEntranceFloor(playerid) == 0)
					{
						SetPlayerPosEx
						(
							playerid,
							GetEntranceData(entranceid, E_EXIT_POS_X),
							GetEntranceData(entranceid, E_EXIT_POS_Y),
							GetEntranceData(entranceid, E_EXIT_POS_Z),
							GetEntranceData(entranceid, E_EXIT_ANGLE),
							0,
							0
						);

						SetPlayerInEntrance(playerid, -1);
						SetPlayerInEntranceFloor(playerid, -1);
					}
				}
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_LIF:
			{
				new entranceid = GetPlayerInEntrance(playerid);
				if(entranceid != -1)
				{
					new floor = GetPlayerInEntranceFloor(playerid);
					if(floor != -1)
					{
						ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_ENT:
			{
				SetPlayerPosEx(playerid, 5.4881, -27.7033, 1085.9291, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_EXI:
			{
				SetPlayerPosEx(playerid, 5.4975, -26.3967, 1080.9968, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_GET_CAR_NUM:
			{
				if(GetPlayerOwnableCarLast(playerid) == INVALID_VEHICLE_ID)
				{
					if(GetPlayerOwnableCars(playerid) == 0)
						SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
					else
						SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
				}
				else
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid),
						index = GetVehicleData(vehicleid, V_ACTION_ID);

					if(!strcmp(g_ownable_car[index][OC_NUMBER], "------"))
					{
						Dialog
						(
							playerid, DIALOG_OWNABLE_CAR_NUMBER, DIALOG_STYLE_MSGBOX,
							"{FFCD00}Получение номеров",
							"{FFFFFF}Стоимость покупки номеров для Вашего ТС составит 5000 руб",
							"Купить", "Выйти"
						);
					}
					else
						SendClientMessage(playerid, 0x999999FF, "На Вашем ТС уже есть номерные знаки");
				}
			}
			case PICKUP_ACTION_TYPE_GIFT:
			{
   				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, 0, 0, 0, 0);

			    new rand = random(30);

				switch(rand)
				{
				    case 1..2:
				    {
				        SendClientMessage(playerid, 0xCECECEFF, "Вы нашли подарок. Ваш приз: Оружейные навыки.");

	  	        		SetPlayerData(playerid, P_SKILL_SDPISTOL, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", 100);

				        SetPlayerData(playerid, P_SKILL_DEAGLE, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", 100);

				        SetPlayerData(playerid, P_SKILL_SHOTGUN, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", 100);

				        SetPlayerData(playerid, P_SKILL_MP5, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", 100);

				        SetPlayerData(playerid, P_SKILL_AK47, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", 100);

				        SetPlayerData(playerid, P_SKILL_M4, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", 100);

				        SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 100);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", 100);
						RouletteStarted[playerid] = 0;
				    }
				    case 7..8:
				    {
						new money_count = RandomEx ( 5, 45 ) ;

						new query_string[148];

						GivePlayerDonate(playerid, money_count, "Приз подарка", true, true);

						format(query_string, sizeof (query_string), "Вы нашли подарок. Ваш приз: %d RCoins", money_count);

						SendClientMessage(playerid, 0xCECECEFF, query_string);
						RouletteStarted[playerid] = 0;
					}
					case 9..10:
					{
						new drugs_count = RandomEx(1, 5);

						AddPlayerData(playerid, P_EXP, +, drugs_count);

						if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
						{
							SetPlayerData(playerid, P_EXP, 0);
							AddPlayerData(playerid, P_LEVEL, +, 1);
							SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
							SetPlayerLevelInit(playerid);
						}
						new query_string[168];
					    RouletteStarted[playerid] = 0;

						format(query_string, sizeof query_string, "Вы нашли подарок. Ваш приз: %d очков опыта.", drugs_count);

						SendClientMessage(playerid, 0xCECECEFF, query_string);
					}
					case 11..12:
					{
						new money_count = RandomEx ( 50000, 1000000 ) ;

				        GivePlayerMoneyEx(playerid, money_count, "Приз подарка", true, true);

						new dialog_string[168];
						RouletteStarted[playerid] = 0;

						format(dialog_string, sizeof dialog_string, "Вы нашли подарок. Ваш приз: %d рублей.", money_count);
						SendClientMessage(playerid, 0xCECECEFF, dialog_string);

					}
				}
			}
			case PICKUP_ACTION_TYPE_MINER_CARRI:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER
				&& GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!miner_carriage[0][MC_STATUS])
					{
						new fmt_str[64];

						new rand = random(45) + 16;
						new items = GetPlayerJobLoadItems(playerid) + rand;

						RemovePlayerAttachedObjects(playerid);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

						ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
						SetPlayerJobLoadItems(playerid, items);

						format(fmt_str, sizeof fmt_str, "Вы доставили в вагонетку {FF9900}%d кг {66CC00}руды", rand);
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Общее количество добытого сырья: {FF9900}%d кг", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
						SetPlayerChatBubble(playerid, fmt_str, 0x66CC00FF, 10.0, 2000);

						miner_carriage[0][MC_ORE_COUNT] += rand;

						if(miner_carriage[0][MC_ORE_COUNT] >= 10000)
						{
							DestroyPickup(miner_carriage[0][MC_PICKUP_ID]);
							miner_carriage[0][MC_PICKUP_ID] = -1;

							SetTimerEx("MinerCarriageMove", 7_000, false, "i", 0);

							UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0xFFFF00FF, "Ожидание...");
						}
						else
						{
							format(fmt_str, sizeof fmt_str, "Загрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[0][MC_ORE_COUNT]);
							UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0x66CC00FF, fmt_str);
						}

						SetPlayerMinerJobLoadCP(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_GANG_REPOSIT:
			{
				if(GetPlayerTeamEx(playerid) != (action_id + TEAM_OPG_ARZAMASKAYA - 1))
					return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому складу");

				Dialog
				(
					playerid, DIALOG_GANG_REPOSITORY, DIALOG_STYLE_LIST,
					"{FFCD00}Склад банды",
					"\
					{00CC00}1. Положить наркотики\n\
					{00CC00}2. Положить патроны\n\
					{00CC00}3. Положить металл\n\
					{00CC00}4. Положить деньги\n\
					5. Взять наркотики\n\
					6. Взять патроны\n\
					7. Взять металл\n\
					8. Взять деньги\n\
					",
					"Выбрать", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_ARMORY:
			{
				switch(action_id)
				{
					case ARMORY_TYPE_ARMOR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_ARMY)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						new Float: armour;

						GetPlayerArmour(playerid, armour);

						if(armour > 20.0)
							return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть бронежилет");

						SetPlayerArmour(playerid, 100.0);
					}
					case ARMORY_TYPE_SECURITY:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						if(!(1 <= GetPlayerJob(playerid) <= 3))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам службы охраны");

						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"{FFCD00}Оружейный склад",
							"1. Взять дубинку\n"\
							"2. Взять маску\n"\
							"3. Взять бронежилет\n"\
							"4. Взять пистолет с глушителем\n"\
							"5. Взять Desert Eagle\n"\
							"6. Взять MP5\n"\
							"7. Взять дробовик",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_POLICE:
					{
						new armory_index;

						switch(GetPlayerVirtualWorld(playerid))
						{
							case 5: armory_index = 0;
							case 6: armory_index = 1;
							case 0: armory_index = 2;
						}

						if(GetPlayerTeamEx(playerid) != (TEAM_DPS + armory_index))
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"{FFCD00}Оружейный склад",
							"1. Взять дубинку\n"\
							"2. Взять маску\n"\
							"3. Взять бронежилет\n"\
							"4. Взять пистолет с глушителем\n"\
							"5. Взять Desert Eagle\n"\
							"6. Взять MP5\n"\
							"7. Взять дробовик\n"\
							"8. Взять AK47\n"\
							"9. Взять винтовку",
							"Взять", "Отмена"
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_CONT_INFO:
			{
			    Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					"{d7994e}Информация о контейнерах",
					"Каждый день в {d7994e}12:00, 15:00, 19:00 и 21:00 в порт доставляется партия контейнеров.\n\n\
					Любой желающий может поставить ставку на контейнер и получить из него ценные вещи.\n\
					Торг за контейнеры идёт {d7994e}30 секунд, что достаточно, для того чтобы поторговаться за него.\n\n\
					{999999}Контейнеры не делятся на типы и категории, содержимое зависит от привозной страны.\nИз любого контейнера может выпасть: {d7994e}одежда, аксессуары, автомобиль и тому подобное.",
					"Закрыть", ""
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_TUN:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_TUNING, DIALOG_STYLE_LIST,
					"{FFCD00}Станция тех.обслуживания",
					"1. Перекраска транспорта\t{00CC00}100000 руб\n"\
					"2. Смена дисков\t\t\t{00CC00}250000 руб",
					"Выбрать", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_GUN:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_BUY_GUN, DIALOG_STYLE_LIST,
					"{FFCD00}Магазин оружия",
					"1. Desert-Eagle\t\t{00CC00}150000 руб\n"\
					"2. ShotGun\t\t{00CC00}100000 руб\n"\
					"3. Снайперская винтовка\t{00CC00}350000 руб\n"\
					"4. MP-5\t\t\t{00CC00}50000 руб\n"\
					"5. SD-Pistol\t\t{00CC00}75000 руб\n"\
					"6. Бронежилет\t\t{00CC00}350000 руб",
					"Купить", "Отмена"
				);
				}
   			}
		}
	return 1;
}

public: HidePlayerSelectPanelPriceTimer(playerid)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_NONE)
	{
		HidePlayerSelectPanelPrice(playerid);
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return HideMenuForPlayer(admin_spec_menu, playerid);

		new fmt_text[100],
			spec_player = GetPlayerSpectateData(playerid, S_PLAYER);

		switch(row)
		{
			case 0, 5: StopSpectate(playerid);
			case 1:
			{
				StartSpectate(playerid, spec_player);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 2:
			{
				ShowPlayerStats(spec_player, playerid);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 3:
			{
				callcmd::slap(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 4:
			{
				format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  R-IP  %s",
				GetPlayerNameEx(spec_player), spec_player, GetPlayerPing(spec_player), GetPlayerIpEx(spec_player), GetPlayerData(spec_player, P_REG_IP));
				SendClientMessage(playerid, 0x00CC66FF, fmt_text);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
		}
	}


	if(GetPlayerMenu(playerid) == reg_select_skin_menu)
    {
		if(!IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
			{
				new sex = GetPlayerSex(playerid);
				new select_skin = GetPlayerSelectSkin(playerid);

				switch(row)
				{
					case 0:
					{
						if(++select_skin >= sizeof reg_skin_data[] || !reg_skin_data[sex][select_skin])
						{
							select_skin = 0;
						}
					}
					case 1:
					{
						if(--select_skin < 0)
						{
							select_skin = sizeof(reg_skin_data[])-1;

							if(!sex)
								select_skin -= 0;
						}
					}
					case 2:
					{
						SetPlayerData(playerid, P_SKIN, reg_skin_data[sex][select_skin]);

						new query[90];
						format(query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_MONEY, 500);
							SetPlayerData(playerid, P_SELECT_SKIN, -1);

							HideMenuForPlayer(reg_select_skin_menu, playerid);

							SetPlayerSpawnInit(playerid);
							SpawnPlayer(playerid);

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
							SetPlayerInit(playerid);

							SendClientMessage(playerid, 0xFFFF00FF, "Рекомендуем прочитать раздел {FF3300}Помощь по игре.{FFFF00} Он находится слева от Вас");
							SendClientMessage(playerid, 0xFFFF00FF, "В нем Вы найдете всю интересующую Вас информацию. Удачи и приятной игры!");
//							SendClientMessage(playerid, 0x07f0e4FF, "[INFO]:{FFFFFF} Вам был выдан {07f0e4}PREMIUM{FFFFFF}. Используйте: {07f0e4}/premium");

							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 01)");
					}
				}

				SetPlayerSelectSkin(playerid, select_skin, reg_skin_data[sex][select_skin]);
				ShowMenuForPlayer(reg_select_skin_menu, playerid);
			}
		}
    }
	return 1;
}

public OnPlayerExitedMenu(playerid)
{

	if(GetPlayerMenu(playerid) == reg_select_skin_menu)
	{
		if(!IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
			{
				ShowMenuForPlayer(reg_select_skin_menu, playerid);
			}
		}
	}
	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
		{
			ShowMenuForPlayer(admin_spec_menu, playerid);
		}
	}
	return 1;
}
public OnPlayerSpawn(playerid)
{
    if(GetPVarInt(playerid, "first_spawn") == 0)
	{
	    new fmt_text[300];
	    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_text, true);
		new rows = cache_num_rows();
		if(rows < 10)
		{
			cars_slot[playerid] = rows;
		}
		SetPVarInt(playerid, "first_spawn", 1);
	}
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_HOTEL_FLOOR, 	-1);
	SetPlayerData(playerid, P_IN_HOTEL_ROOM, 	-1);
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);

	SetPlayerSkillsInit(playerid);

	if(GetPVarInt(playerid, "EPLAYER"))
	{
		SetPlayerPosEx(playerid, GetPVarFloat(playerid,"e_X"), GetPVarFloat(playerid,"e_Y"), GetPVarFloat(playerid,"e_Z"), 0.0, GetPVarInt(playerid,"e_Int"), GetPVarInt(playerid,"e_Virt"));

//        fraction_duty ( playerid ) ;

		DeletePVar(playerid,"e_X");
		DeletePVar(playerid,"e_Y");
		DeletePVar(playerid,"e_Z");
		DeletePVar(playerid,"e_Int");
		DeletePVar(playerid,"e_Virt");
		DeletePVar(playerid,"e_HBC");
		DeletePVar(playerid, "e_time");
		DeletePVar(playerid,"EPLAYER");
		return 1;
	}

	if(GetPVarInt(playerid,"dmzona") == 1)
	{
	    				DelGun(playerid);
						AC_GivePlayerWeapon(playerid, PaintGun[random(sizeof(PaintGun))], 3000);

						TI[playerid][tVirtualWorld] = 8;
						TI[playerid][tInterior] = 0;

		    	    	new rand = random(sizeof(DmArenaSpawns));

						SetPlayerPosAC(playerid, DmArenaSpawns[rand][0], DmArenaSpawns[rand][1], DmArenaSpawns[rand][2]+1.5,
							TI[playerid][tVirtualWorld], TI[playerid][tInterior], true);

						SetPlayerHealth(playerid, 100.0);
						SetPlayerColor(playerid,0x56FB4EFF);
						return 1;
	}
	if(GetPVarInt(playerid,"dmzona") == 2)
	{
						DelGun(playerid);
						AC_GivePlayerWeapon(playerid, ArenaGun[5], 3000);

						TI[playerid][tVirtualWorld] = 141;
						TI[playerid][tInterior] = 0;

		    	    	new rand = random(sizeof(DMPositions));

						SetPlayerPosAC(playerid, DMPositions[rand][0], DMPositions[rand][1], DMPositions[rand][2]+1.5, TI[playerid][tVirtualWorld],
							TI[playerid][tInterior], true);

						SetPlayerHealth(playerid, 100.0);
						SetPlayerColor(playerid,0x56FB4EFF);
						return 1;
	}

  	if(!IsPlayerLogged(playerid))
	{
		if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
		{
			new sex = bool: GetPlayerSex(playerid);

			TogglePlayerControllable(playerid, false);
			SetPlayerSelectSkin(playerid, 0, reg_skin_data[sex][0]);

			SetPlayerPosEx(playerid, 1992.8246,1898.4010,1001.0000,358.8916, 4, _, false);
			//SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1210, A_OBJECT_BONE_RIGHT_FOREARM, 0.535, 0.01, 0.1, 45.0, 270.0, 318.0, 1.0, 1.0, 1.0, 0);

			SetPlayerCameraPos(playerid, 1992.870117,1901.877075,1002.250);
			SetPlayerCameraLookAt(playerid, 1993.102905,1892.338867,999.2, 2);

			ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_REG_SKIN);
			ShowPlayerSelectPanelPrice(playerid, -1);

			PlayerTextDrawSetString(playerid, price_select_TD[playerid][0], SERVER_NAME_RP);
			//ShowMenuForPlayer(reg_select_skin_menu, playerid);
		}
	}
	else
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SetPlayerSpawnPos(playerid);

		if(GetPlayerData(playerid, P_HOSPITAL)) SetPlayerHealthEx(playerid, 15.0);

		if(!GetPlayerData(playerid, P_ANIMS_INIT))
		{
			PreLoadPlayerAnims(playerid);
			SetPlayerData(playerid, P_ANIMS_INIT, true);
		}

		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			SetPlayerColorInit(playerid);
			SetPlayerData(playerid, P_MASK, 0);
		}
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(newinteriorid > 0 && oldinteriorid == 0)
	{
		PlayerTextDrawHide(playerid, city_zone_PTD[playerid]);
	}
	else PlayerTextDrawShow(playerid, city_zone_PTD[playerid]);
	if(!newinteriorid)
    {
        new hour;
        gettime(hour, _, _);
        SetPlayerTime(playerid, hour, 0);
        return 1;
    }
    SetPlayerTime(playerid, 12, 0);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
		#if defined _blackjack_included
			if(blackjack_OnPlayerKStateChange(playerid, newkeys, oldkeys)) return true;
		#endif
        if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
        {
            if(IsPlayerInRangeOfPoint(playerid, 5, 1657.3654,692.2846,16.4430))
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
	            if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
	            {
	                if(ceno[vehicleid] > 0) return SendClientMessage(playerid, -1, "Вы должны сначало полностью выгрузиться.");
	                new cenof = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);
	                if(cenof <= 0)
	                {
	                    SendClientMessage(playerid, -1, "На складе нет сена");
	                    return 1;
	                }
					if(cenof < 10 && cenof >= 0)
					{
						ceno[vehicleid] = cenof;
					    SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, 0);
					    SendClientMessage(playerid, -1, "Вы забрали всё сено со склада");
					    FermerRepositoryUpdate();
					    FermaCarUpdate(vehicleid);
						SetPVarInt(playerid,"zagruz",gettime() + 300);
					    SetPlayerRaceCheckpoint
						(
							playerid,
							2,
							-1057.2186,
							2165.3706,
							38.0416,
							0.0,
							0.0,
							0.0,
							4.0,
							RCP_ACTION_TYPE_FERMA
						);
					    return 1;
					}
					SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, cenof - 10);
					ceno[vehicleid] = 10;
					FermerRepositoryUpdate();
	    			FermaCarUpdate(vehicleid);
	    			SendClientMessage(playerid, -1, "Сено загружено в вашу машину. Отправляйтесь на отмеченое место.");
					SetPVarInt(playerid,"zagruz",gettime() + 300);
	    			SetPlayerRaceCheckpoint
					(
							playerid,
							2,
							-1057.2186,
							2165.3706,
							38.0416,
							0.0,
							0.0,
							0.0,
							4.0,
							RCP_ACTION_TYPE_FERMA
					);
	            }
	        }
         	for(new idx; idx < g_business_loaded; idx ++)
			{
				if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_DET)
				{
					if(IsPlayerInRangeOfPoint(playerid, 5, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z)))
					{
						new vehicleid = GetPlayerVehicleID(playerid);

						new vehicleid1 = GetPlayerOwnableCarLast(playerid);

						if(vehicleid1 != GetPlayerVehicleID(playerid))
						return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

						SetVehiclePos(vehicleid, -6.5363,504.1650,1001.0000);
						SetVehicleZAngle(vehicleid, 180.0);
						TogglePlayerControllable(playerid, 0);

						SetPlayerInterior(playerid, 3);
						SetPlayerVirtualWorld(playerid, playerid + 1);

						LinkVehicleToInterior(vehicleid, 3);
						SetVehicleVirtualWorld(vehicleid, playerid + 1);

						SetPlayerCameraPos(playerid,-2.687625,496.940307,1002.128173);
						SetPlayerCameraLookAt(playerid,-9.190624,504.381317,1000.597);

						if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_STO)
						{
							for(new idxs; idxs < sizeof tuning_TD; idxs ++)
							TextDrawShowForPlayer(playerid, tuning_TD[idxs]);

							SetPVarInt(playerid, "sto_id", idx);

							SendClientMessage(playerid, 0xCECECEFF, "Добро пожаловать в тюнинг центр!");
						}

						if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_DET)
						{
							SetPVarInt(playerid, "det_id", idx);
							SetPVarInt(playerid, "det_vinil", 4);
							TextDrawShowForPlayer(playerid, Vinyl_TD[0]);

							ShowDetTextDraw(playerid);

							SendClientMessage(playerid, 0xCECECEFF, "Добро пожаловать в детейлинг центр!");
						}

						SelectTextDraw(playerid, 0xFFFFFFAA);
					}
				}
				if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY)
				{
					if(IsPlayerInRangeOfPoint(playerid, 6.5, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z)))
					{
						//new vehicleid = GetPlayerVehicleID(playerid);

						new vehicleid1 = GetPlayerOwnableCarLast(playerid);

						if(vehicleid1 != GetPlayerVehicleID(playerid))
						return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
						/*if(GetBusinessData(idx, B_INTERIOR) == 19)
						{
							SendClientMessage(playerid, -1, "Заехал в низкий бу");
						}
						if(GetBusinessData(idx, B_INTERIOR) == 20)
						{
							SendClientMessage(playerid, -1, "Заехал в средний бу");
						}
						if(GetBusinessData(idx, B_INTERIOR) == 21)
						{
							SendClientMessage(playerid, -1, "Заехал в высокий бу");
						}*/
						SetPVarInt(playerid, "by_id", idx);
						SetPVarInt(playerid, "by_int", GetBusinessData(idx, B_INTERIOR));
						//DIALOG_SELL_CAR
						Dialog(playerid, DIALOG_SELL_CAR, DIALOG_STYLE_INPUT, "Авторынок", "Хотите вытсавить свой транспорт на продажу?\n\nЗа сколько вы хотите продать своё транспортное средство?\nЦена не должна быть меньше 3.000 рублей и выше 100.000.000 рублей", "Готово", "Закрыть");
					}
				}
			}
	}
		if(PRESSED(KEY_NO))
	callcmd::no(playerid, "");

		if(PRESSED(KEY_YES))
	callcmd::yes(playerid, "");


	   	if(GetPVarType(playerid, "FlyMode"))
	{
		if(newkeys & KEY_JUMP) ShowPlayerFlyPolet(playerid);
	}
    	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
				if(GetPlayerSettingData(playerid, S_VEH_CONTROL) == SETTING_TYPE_ON)
			{
				if(PRESSED(KEY_HANDBRAKE | KEY_FIRE)) // правый ctrl
					{
						if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
					{
						callcmd::lock(playerid, "1");
					}
				}
				if(PRESSED(KEY_ACTION))
				{
					callcmd::e(playerid, "");
				}
				if(PRESSED(KEY_FIRE))
				{
					callcmd::l(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_UP)) // num 8
				{
					callcmd::b(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_DOWN)) // num 2
				{
					callcmd::i(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_LEFT)) // num 4
				{
					callcmd::sl(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_RIGHT)) // num 6
				{
					callcmd::alarm(playerid, "");
				}
			}
				if(PRESSED(KEY_SUBMISSION))
			{
				if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCarLast(playerid)))
				{
					new job_car = GetPlayerJobCar(playerid);
					if(IsPlayerInVehicle(playerid, job_car))
					{
						new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
						new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

						new job_id = GetPlayerJob(playerid);
						if(job_id == car_type)
						{
							switch(job_id)
							{
								case JOB_BUS_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
											"{FFCD00}Стоимость проезда",
											"{FFFFFF}Сколько будет стоить проезд?\n"\
											"Укажите цену от 0 до 100 рублей",
											"Далее", "Отмена"
										);
									}
								}
								case JOB_TAXI_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер таксопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
											"{FFCD00}Название такси",
											"{FFFFFF}Придумайте название для вашего такси\n"\
											"Максимальная длина 15 символов\n\n"\
											"Если вы не хотите как-то называться\n"\
											"нажмите кнопку \"Пропустить\"",
											"Далее", "Пропустить"
										);
									}
								}
								case JOB_MECHANIC:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Автомеханик",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_MECHANIC_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер",
											"{FFFFFF}Вы хотите начать работу автомеханика?",
											"Да", "Нет"
										);
									}
								}
								case JOB_TRUCKER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TRUCKER_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}Дальнобойщик",
											"{FFFFFF}Вы хотите начать работу дальнобойщика?",
											"Да", "Нет"
										);
									}
								}
							}
						}
					}
				}
				else callcmd::car(playerid, "");
			}
				if(HOLDING(KEY_CROUCH))
			{
				CallLocalFunction("CheckNearestGate", "i", playerid);
			}
		}
	}
		else
	{
		if(PRESSED(KEY_FIRE))
		{
			if(GetPlayerData(playerid, P_SNACK))
			{
				SetPlayerData(playerid, P_SNACK, false);

				SetPlayerHealthEx(playerid, 25.0, true);
				GameTextForPlayer(playerid, "~g~~h~+25 hp", 2500, 6);

				ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 0, 0, 0, 0, 0);
				SetTimerEx("T_RemovePlayerAttachedObject", 3000, false, "ii", playerid, A_OBJECT_SLOT_HAND);
			}
			if(GetPlayerData(playerid, P_DRINK_STEP) >= 1)
			{
				AddPlayerData(playerid, P_DRINK_STEP, -, 1);
				if(!GetPlayerData(playerid, P_DRINK_STEP))
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -16.3325,1366.5874,975.0951))
			{
				if(GetPVarInt(playerid,"comp_game") <= unix) return SendClientMessage(playerid, 0xCECECEFF, "Купите билет для игры");

				Dialog
				(
					playerid,
					DIALOG_COMP_GAME,
					DSL,""P"Game Menu",""P"1."W" Capture Blocks\n"P"2."W" DM - Арена\n"P"3."W" Гонка Вооружений", "Выбрать", "Закрыть"
				);
			}
		if(PRESSED(KEY_SPRINT))
		{
			if(IsPlayerUseAnim(playerid))
			{
				ClearPlayerUseAnim(playerid);
			}

			if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_INTERIOR);
					new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);

					TogglePlayerSpectating(playerid, false);

					if(GetPlayerData(playerid, P_REALTOR_TYPE) == REALTOR_TYPE_BIZ)
					{
						PlayerTeleportInit(playerid, 331.0103, 662.5683, 49.7290, 67.7277);
						SetPlayerPosEx(playerid, 331.0103, 662.5683, 49.7290, 67.7277, interior, businessid + 255, false);
					}
					else
					{
						PlayerTeleportInit(playerid, 160.7020, 745.5962, 25.8272, 159.1750);
						SetPlayerPosEx(playerid, 160.7020, 745.5962, 25.8272, 159.1750, interior, businessid + 255, false);
					}
				}
				SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
			}
		}
		if(newkeys == 16) // Если игрок нажал Enter
		{
			for(new t; t < sizeof(arCasinoTable); t++) // Обходим все столы
			{
				if(IsPlayerInDynamicArea(playerid, arCasinoTable[t])) // Если игрок находится в зоне возле стола
				{
					if(GetPVarInt(playerid,"CRUPIE") != 0) // Если игрок является крупье
					{
						if(TableInfo[t][t_crup] != INVALID_PLAYER_ID) return SendClientMessage(playerid,0x808080FF,"Данный стол уже занят!"); // Думаю тут всё понятно
						TableInfo[t][t_crup] = playerid; // Присваиваем ид крупье для стола
						new string[128]; // Массив для оповещения ниже
						format(string,sizeof(string),"Вы успешно заняли стол №%d. Для управления столом нажмите на кнопку 'Ставка'",t+1); // Форматируем оповещение
						SendClientMessage(playerid,0x808080FF,string); // Выводим оповещение
					}
					for(new i; i < 1; i++) TextDrawHideForPlayer(playerid, TD_CASINO2[i]); // Прячем текстдравы с оповещение возле стола
					for(new i; i < 6; i++) TextDrawShowForPlayer(playerid, TD_CASINO[t][i]); // Показываем текстдрав самого стола
					SelectTextDraw(playerid, 0xFFFFFFFF),SetPVarInt(playerid, "SelectTextDrawEnter", 1),SetPVarInt(playerid,"CasinoTable",t); // Включаем кликабельность,статус нажатого текстдрава и присваиваем значение под каким столом игрок
				}
			}
		}
		if(PRESSED(KEY_WALK))
		{
			if(IsPlayerInRangeOfPoint(playerid, 100.0, 428.8445,1704.5200,1001.0000))
			{
				new bedid = -1;

				for(new i; i < sizeof g_med_bed_pos; i++)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
					bedid = i;
					break;
				}

				if(bedid == -1) return 1;
				else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
				else if(GetPlayerHealthEx(playerid) >= 95.0)
				{
					return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
				}
				else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

				else
				{
					SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

					g_med_bed_used[bedid] = true;

					new fmt_msg[85];

					format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{FFCC00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
					UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_msg);

					format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
					SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

					SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
				}
			}
			for(new idx = 0;idx < 45;idx ++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5,b_betch[idx][B_CLOSED][0], b_betch[idx][B_CLOSED][1], b_betch[idx][B_CLOSED][2]))
			    if(b_betch[idx][BSTATUS] == 1)
				{
    				if(GetPlayerTempJob(playerid) != TEMP_JOB_POMOI) return 1;
    				if(GetPlayerData(playerid, P_POMOI) == 1) return SendClientMessage(playerid,-1,"Вы уже подобрали мусор!");
				    b_betch[idx][BSTATUS] = 0;
				    SetPlayerData(playerid, P_POMOI, 1);
					SetTimerEx("ReturnPomoi", 180000, false, "i", idx);
					DestroyDynamicObject(b_betch[idx][B_OBJ]);
					DestroyDynamic3DTextLabel(b_betch[idx][BULABEL]);
					TogglePlayerControllable(playerid, false);
					SetTimerEx("Pomoina", 2500, false, "i", playerid);
					SetPlayerAnimation(playerid, 13);
				}
			}
			for(new idx = 0;idx < 26;idx ++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5,l_lod[idx][L_CLOSED][0], l_lod[idx][L_CLOSED][1], l_lod[idx][L_CLOSED][2]))
			    if(l_lod[idx][LSTATUS] == 1)
				{
    				if(GetPlayerTempJob(playerid) != TEMP_JOB_LOAD) return 1;
    				if(GetPlayerData(playerid, P_POMOI) == 1) return SendClientMessage(playerid,-1,"Вы уже подобрали ящик!");
				    l_lod[idx][LSTATUS] = 0;
				    SetPlayerData(playerid, P_POMOI, 1);
					SetTimerEx("ReturnLoad", 180000, false, "i", idx);
					DestroyDynamicObject(l_lod[idx][L_OBJ]);
					DestroyDynamic3DTextLabel(l_lod[idx][LULABEL]);
					TogglePlayerControllable(playerid, false);
					SetTimerEx("Lodina", 2500, false, "i", playerid);
					SetPlayerAnimation(playerid, 13);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1812.4408,2511.6768,15.6639))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00}Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
			}
  			if(IsPlayerInRangeOfPoint(playerid, 3.0, 394.0962,1549.2831,12.0500))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00} Аренда Мотоцикла {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2403.8647,-2343.7966,21.9710))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00} Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
			}
			if(IsPlayerInRangeOfPoint(playerid,	3.0, 187.5520,1452.2783,12.0100))
			{
					Dialog
					(
					playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00} Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 376.7471,1698.5637,12.0065))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00} Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
		    }
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 838.3375,585.4003,15.8857))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00}Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
		    }
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 2395.6331,-2657.3003,21.9886))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00}Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, -484.7349,-1559.2352,41.1359))
		    {
					Dialog
					(
						playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX,
						"{ffffff}** {ffbf00}Аренда Мотоцикла  {ffffff}**",
						"{FFFFFF}Вы хотите арендовать Мотоцикл?",
						"Да", "Нет"
					);
			}
			if(GetPlayerNearestATM(playerid) != -1)
			{
				ShowPlayerATMDialog(playerid);
			}
			if(GetPlayerInHouse(playerid) != -1)
			{
				new houseid = GetPlayerInHouse(playerid);
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 1)
				{
					ExitPlayerFromHouse(playerid, 1.1);
				}
			}

			if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
			{
				new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
				new action_id = GetPickupInfo(pickupid, P_ACTION_ID);

				if(IsPlayerInRangeOfPoint(playerid, 1.7, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
				{
					switch(GetPickupInfo(pickupid, P_ACTION_TYPE))
					{
						case PICKUP_ACTION_TYPE_ENTRANCE_FLA:
						{
							new entranceid = GetPlayerInEntrance(playerid);
							new floor = GetPlayerInEntranceFloor(playerid);

							if(entranceid != -1 && floor >= 1)
							{
								ShowPlayerHouseInfo(playerid, g_entrance_flat[entranceid][floor - 1][action_id]);
							}

							SetPlayerData(playerid, P_LAST_PICKUP, -1);
						}
						case PICKUP_ACTION_TYPE_HOTEL_ROOM:
						{
							new hotel_id = GetPlayerInHotelID(playerid);
							new floor = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);

							if(hotel_id != -1 && floor >= 1)
							{
								new room_id = ((floor-1)*12) + action_id;
								EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
							}
						}
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 35000000.0, 1958.2014,1274.4449,27.5825))
			{
				for(new i; i < sizeof(WheatPos); i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, WheatPos[i][wheat_x], WheatPos[i][wheat_y], WheatPos[i][wheat_z]))
					{
						if(WheatPos[i][wheat_state] == 1)
						{
							if(WheatPos[i][wheat_value] > 0)
							{
								if(GetPVarInt(playerid, "wheat_tools") == 0) return SendClientMessage(playerid, 0xFF6666FF, "У Вас нет инструмента для сбора урожая");
								if(GetPVarInt(playerid, "wheat_take") > 0) return 1;

								ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

								SetPVarInt(playerid, "wheat_take", 1);

								SetTimerEx("SetPlayerFermerTakeWheat", (random(5) + 10) * 300, false, "ii", playerid, i);
							}
						}
						else
						{
							SendClientMessage(playerid, -1, "Урожай ещё не созрел");
							new msg[44];
							format(msg, 44, "ID: %d", i);
							SendClientMessage(playerid, -1, msg);
						}
					}
				}
			}
			if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
			{
				ExitPlayerFromHotelRoom(playerid);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 145.3596,-949.1063,40.9170))
		    {
				Dialog(playerid, DIALOG_PLAYER_FARMING, DIALOG_STYLE_LIST, "{79cb64}Выберите действие", "{79cb64}1. {"#cW"}Продать пшеницу {79cb64}[ 1шт = 2000 руб ]\n{79cb64}2. {"#cW"}Купить инструмент для сборка пшеницы {79cb64}[ 5000 руб]", "Выбрать", "Закрыть");
		    }
		   // if(GetPlayerNearestOST(playerid) != -1)
		   // {
			//	ShowPlayerOstanovkaDialog(playerid);
		   // }
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1996.0123,1011.6410,15.0693))
		    {
				Dialog(playerid, DIALOG_RIBALKA, DIALOG_STYLE_LIST, "{79cb64}Всё о рыбалке", "Купить снасти для рыбалки\nИнформация для рыбаков", "Выбрать", "Закрыть");
		    }
			if(IsPlayerInRangeOfPoint(playerid, 100.0, -1933.2642,2929.2478,5.9990))
			{
				for(new i = 0; i != sizeof containers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1]) && containers[i][CD_STATUS] == 0)
					{
						/*if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
						{
							SendClientMessage(playerid, 0x999999FF, "Для участия в торгах сначало выгрузите свой транспорт с сервера.");
							return 1;
						}*/
						for(new is = 0; is != sizeof containers; is ++)
						{
							if(containers[is][C_LAST_BET] != playerid) continue;
							if(containers[is][C_LAST_BET] == playerid)
							{
								SendClientMessage(playerid, -1, "Вы не можете поставить ставку больше чем на 1 контейнер!");
								return 1;
							}
						}
						new str_c[450];
						format(str_c, sizeof str_c,
						"{ffffff}Вы готовы объявить о начале торгов за этот контейнер?\n\n"\
						"\t{ffffff}Цена за этот контейнер сейчас составляет:{8A4B08} %d руб\n\n"\
						"{ffffff}Укажите цену выше первоначальной:", containers[i][C_PRICE_COUNT]);
						Dialog
						(
							playerid, DIALOG_PLAYER_BUY_CONTAINER, DIALOG_STYLE_INPUT, "{4B610B}Аукцион за контейнер", str_c,
							"Далее", "Закрыть"
						);
					}
					if(IsPlayerInRangeOfPoint(playerid, 3.0, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1]) && containers[i][CD_STATUS] == 3)
					{
						if(containers[i][C_LAST_BET] != playerid) return SendClientMessage(playerid, -1, "Принять решение по поводу авто может только владелец контейнера.");
						new str_c[450];
						new proc[20];
						format(proc, sizeof proc, "20%");
						new port = GetVehicleInfo(container_car[i] - 400, VI_PRICE) / 100 * 20;
						format(str_c, sizeof str_c,
						"{ffffff}-Государственная стоймость: {A38128}%d руб\n{ffffff}-Стоймость в порту: {A38128}%d руб{B25520}(-%s)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", GetVehicleInfo(container_car[i] - 400, VI_PRICE), GetVehicleInfo(container_car[i] - 400, VI_PRICE) - port, proc);
						Dialog
						(
							playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
							"Выбор", "Отмена"
						);
					}
					if(IsPlayerInRangeOfPoint(playerid, 3.0, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1]) && containers[i][CD_STATUS] == 2)
					{
						if(containers[i][C_LAST_BET] != playerid) return SendClientMessage(playerid, -1, "Открыть контейнер может только его владелец!");
						DestroyDynamicObject(container_block[i]);
						MoveDynamicObject(container_door[i], containers[i][CD_FIRST_POS_X] + 0.001, containers[i][CD_FIRST_POS_Y], containers[i][CD_FIRST_POS_Z], 5, 0.000, 0.000, -127.000);
						MoveDynamicObject(container_second_door[i], containers[i][CD_SECOND_POS_X] + 0.001, containers[i][CD_SECOND_POS_Y], containers[i][CD_SECOND_POS_Z], 5, 0.000, 0.000, 127.000);
						format
						(
							STRING_GLOBAL, sizeof STRING_GLOBAL,
							"{769A37}Транспортное средство\n{FFFFFF}Используйте {A7934C}L.ALT {FFFFFF}чтобы\nпринять решение по этому транспорту"
						);

						UpdateDynamic3DTextLabelText(container_label_1[i], -1, STRING_GLOBAL);
						containers[i][CD_STATUS] = 3;
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 150.0, -2754.5454,-1341.7721,14.7186))
			{
				for(new i = 0; i != sizeof svalka; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, svalka[i][S_POS_X], svalka[i][S_POS_Y], svalka[i][S_POS_Z]) && svalka[i][SV_STATUS] == 0)
					{
						/*if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
						{
							SendClientMessage(playerid, 0x999999FF, "Для участия в торгах сначало выгрузите свой транспорт с сервера.");
							return 1;
						}*/
						for(new is = 0; is != sizeof containers; is ++)
						{
							if(svalka[is][S_LAST_BET] != playerid) continue;
							if(svalka[is][S_LAST_BET] == playerid)
							{
								SendClientMessage(playerid, -1, "Вы не можете поставить ставку больше чем на 1 авто!");
								return 1;
							}
						}
						new str_c[450];
						format(str_c, sizeof str_c,
						"{ffffff}Вы готовы начать торговаться за это авто?\n\n"\
						"{ffffff}Цена за это авто сейчас:{8A4B08} %d руб\n\n"\
						"{ffffff}Укажите цену выше, чтобы начать торговаться:", svalka[i][S_PRICE_COUNT]);
						Dialog
						(
							playerid, DIALOG_PLAYER_BUY_SVALKA, DIALOG_STYLE_INPUT, "{4B610B}Аукцион за авто", str_c,
							"Поставить", "Не хочу"
						);
					}
					if(IsPlayerInRangeOfPoint(playerid, 3.0, svalka[i][S_POS_X], svalka[i][S_POS_Y], svalka[i][S_POS_Z]) && svalka[i][SV_STATUS] == 2)
					{
						if(svalka[i][S_LAST_BET] != playerid) return SendClientMessage(playerid, -1, "Принять решение по поводу авто может только владелец.");
						new str_c[450];
						new proc[20];
						format(proc, sizeof proc, "20%");
						new port = GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) / 100 * 20;
						new str[75];
						format(str, sizeof str, "{ffffff}Действие с авто: {c99a32}%s", GetVehicleInfo(svalka_car[i] - 400, VI_NAME));
						format(str_c, sizeof str_c,
						"{ffffff}Государственная стоймость авто: {8A4B08}%d руб\n{ffffff}Стоймость на свалке: {8A4B08}%d руб{FFA500}(-%s)\n{FFFFFF}Выберите действие для данного авто\n{ffffff}1. Оставить себе\n{ffffff}2. Продать на свалке", GetVehicleInfo(svalka_car[i] - 400, VI_PRICE), GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) - port, proc);
						Dialog
						(
							playerid, DIALOG_PLAYER_CAR_SVALKA, DIALOG_STYLE_LIST, str, str_c,
							"Выбор", "Отмена"
						);
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, -1712.6439,-2807.4465,14.5918) || IsPlayerInRangeOfPoint(playerid, 2.0, -1714.0022,-2809.7322,14.5905))
		    {
		        ClearAnimations(playerid);
		        if(GetPlayerTeamEx(playerid) == TEAM_PJ)
		        {
			        if(vorota_status == 0)
			        {
			            MoveDynamicObject(vorota_fsi,-1706.7485, -2811.6006, 26.8489,1.0,0.0000, 0.0000, -27.2800);
			            SendClientMessage(playerid, -1, "Вы открыли ворота.");
			            vorota_status = 1;
			            return 1;
			        }
					else
					{
					    MoveDynamicObject(vorota_fsi,-1706.7485, -2811.6006, 16.8489,1.0,0.0000, 0.0000, -27.2800);
			            SendClientMessage(playerid, -1, "Вы закрыли ворота.");
			            vorota_status = 0;
			            return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, -1, "Вам не доступна данная функция");
				    return 1;
				}
		    }
	        if(IsPlayerInRangeOfPoint(playerid, 5.0, 439.502777, 2698.338378, 10.421770) || IsPlayerInRangeOfPoint(playerid, 5.0, 439.502777, 2699.338378, 10.421770))
	  		{
		        ClearAnimations(playerid);
		        if(GetPlayerHouse(playerid) == 526)
		        {
			        if(vorota_status == 0)
			        {
						MoveDynamicObject(vorota_ogorod1,439.502777, 2698.338378, 8.021770,1.2, 0.000000, 0.000000, 137);//меняешь координаты на открытие каждую из сторон ворот, после значения z ставишь 1.0, это скорость открывания
			            SendClientMessage(playerid, -1, "Вы открыли двери своего огорода.");
			            vorota_status = 1;
			            return 1;
			        }
					else
					{
                        MoveDynamicObject(vorota_ogorod1,439.50, 2698.33, 10.42,1.2, 0.000000);
			            SendClientMessage(playerid, -1, "Вы закрыли двери своего огорода.");
			            vorota_status = 0;
			            return 1;
					}
				}
				else
			     {
				    SendClientMessage(playerid, -1, "Вы не владелец этого огорода");
				    return 1;
			     }
    		}
    		if(IsPlayerInRangeOfPoint(playerid, 5.0, 450.944976, 2720.208740, 9.801211) || IsPlayerInRangeOfPoint(playerid, 5.0, 450.944976, 2720.208740, 9.801211))
	  		{
		        ClearAnimations(playerid);
		        if(GetPlayerHouse(playerid) == 543)
		        {
			        if(vorota_status == 0)
			        {
						MoveDynamicObject(vorota_ogorod2,450.944976, 2720.208740, 7.801211,1.2, 0.000000, 0.000000, 137);//меняешь координаты на открытие каждую из сторон ворот, после значения z ставишь 1.0, это скорость открывания
			            SendClientMessage(playerid, -1, "Вы открыли двери своего огорода.");
			            vorota_status = 1;
			            return 1;
			        }
					else
					{
                        MoveDynamicObject(vorota_ogorod2,450.944976, 2720.208740, 9.801211,1.2, 0.000000, 0.000000, 300.00);
			            SendClientMessage(playerid, -1, "Вы закрыли двери своего огорода.");
			            vorota_status = 0;
			            return 1;
					}
				}
				else
			     {
				    SendClientMessage(playerid, -1, "Вы не владелец этого огорода");
				    return 1;
			     }
    		}
    		if(IsPlayerInRangeOfPoint(playerid, 5.0, 418.823638, 2698.757812, 10.318197) || IsPlayerInRangeOfPoint(playerid, 5.0, 418.823638, 2698.757812, 10.318197))
	  		{
		        ClearAnimations(playerid);
		        if(GetPlayerHouse(playerid) == 527)
		        {
			        if(vorota_status == 0)
			        {
						MoveDynamicObject(vorota_ogorod3,418.823638, 2700.757812, 10.318197,1.2, 0.000000, 0.000000, 137);//меняешь координаты на открытие каждую из сторон ворот, после значения z ставишь 1.0, это скорость открывания
			            SendClientMessage(playerid, -1, "Вы открыли двери своего огорода.");
			            vorota_status = 1;
			            return 1;
			        }
					else
					{
                        MoveDynamicObject(vorota_ogorod3,418.823638, 2698.757812, 10.318197,1.2, 0.000000, 0.000000, 300.00);
			            SendClientMessage(playerid, -1, "Вы закрыли двери своего огорода.");
			            vorota_status = 0;
			            return 1;
					}
				}
				else
			     {
				    SendClientMessage(playerid, -1, "Вы не владелец этого огорода");
				    return 1;
			     }
    		}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 537.2849,2858.4858,7.3047))
		    {
		        ClearAnimations(playerid);
		        if(GetPlayerTeamEx(playerid) == TEAM_ARMY)
		        {
			        if(vmo_status == 0)
			        {
			            MoveDynamicObject(vorota_mo,537.679,2852.07,7.60004,0.6, 0, 0, 90.3);
			            vmo_status = 1;
			            return 1;
			        }
					else
					{
				    	MoveDynamicObject(vorota_mo,537.635, 2858.29, 7.61168,0.6, 0.299999, 0.099999, 89.8);
			            vmo_status = 0;
			            return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, -1, "Вам не доступна данная функция");
				    return 1;
				}
		    }
			if(IsPlayerInRangeOfPoint(playerid, 6.5, 179.7242,1385.2543,12.0349) || IsPlayerInRangeOfPoint(playerid, 6.5, 2493.1482,1383.4828,1000.0214))
			{
				if(GetPlayerTeamEx(playerid) == TEAM_PPS)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, 181.2999,1391.8586,12.0385) || IsPlayerInRangeOfPoint(playerid, 2.0, 176.5078,1381.6685,12.0100))
					{
						ClearAnimations(playerid);
						if(vorota_statu == 0)
						{
							MoveDynamicObject(vorota_pps,181.731,1396.96,13.7843,1.0,0.0000, 0.0000, 78.1);
							SendClientMessage(playerid, -1, "Вы открыли ворота.");
							vorota_statu = 1;
							return 1;
						}
						else
						{
							MoveDynamicObject(vorota_pps,179.454,1386.1,13.7843,1.0,0.0000, 0.0000, 78.1);
							SendClientMessage(playerid, -1, "Вы закрыли ворота.");
							vorota_statu = 0;
							return 1;
						}
					}
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 2487.1697,1381.8058,1000.0214))
					{
						ClearAnimations(playerid);
						if(obezyana_status1 == 0)
						{
							MoveDynamicObject(vorota_pps1,2484.69, 1381.41, 999.04,0.4, 0, 0, 0);
							obezyana_status1 = 1;
							return 1;
						}
						else
						{
							MoveDynamicObject(vorota_pps1,2486.02, 1381.42, 999.03,0.4,0,0,0);
							obezyana_status1 = 0;
							return 1;
						}
					}
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 2492.3794,1381.8080,1000.0214))
					{
						ClearAnimations(playerid);
						if(obezyana_status2 == 0)
						{
							MoveDynamicObject(vorota_pps2,2490.05, 1381.42, 999.031,0.4,0,0,0);
							obezyana_status2 = 1;
							return 1;
						}
						else
						{
							MoveDynamicObject(vorota_pps2,2491.22, 1381.43, 999.031,0.4,0,0,0);
							obezyana_status2 = 0;
							return 1;
						}
					}
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 2497.5918,1381.8079,1000.0214))
					{
						ClearAnimations(playerid);
						if(obezyana_status3 == 0)
						{
							MoveDynamicObject(vorota_pps3,2495.23, 1381.39, 999.031,0.4,0,0,0);
							obezyana_status3 = 1;
							return 1;
						}
						else
						{
							MoveDynamicObject(vorota_pps3,2496.44, 1381.39, 999.021,0.4,0,0,0);
							obezyana_status3 = 0;
							return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "Вам не доступна данная функция");
					return 1;
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 2451.8010,-1441.0946,80.8300))
			{
		        if(GetPlayerHouse(playerid) == 247)
		        {
			        if(vorota_yuzh == 0)
			        {
                        MoveDynamicObject(vorota_yuzhnii,2452.20, -1440.22, 77.05,1.0,   0.00, 0.00, 270.00);
			            SendClientMessage(playerid, -1, "Вы открыли ворота.");
			            vorota_yuzh = 1;
			            return 1;
			        }
					else
					{
                        MoveDynamicObject(vorota_yuzhnii,2452.20, -1440.22, 81.78,1.0,   0.00, 0.00, 270.00);
			            SendClientMessage(playerid, -1, "Вы закрыи ворота.");
			            vorota_yuzh = 0;
			            return 1;
					}
				}
				else
			     {
				    SendClientMessage(playerid, -1, "Вам не доступна данная функция");
				    return 1;
			     }
			}
			if(IsPlayerInRangeOfPoint(playerid, 35.0, 146.6161,-899.5974,40.5400))
			{
				for(new i; i < sizeof(WheatPos); i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, WheatPos[i][wheat_x], WheatPos[i][wheat_y], WheatPos[i][wheat_z]))
					{
						if(WheatPos[i][wheat_state] == 1)
						{
							if(WheatPos[i][wheat_value] > 0)
							{
								if(GetPVarInt(playerid, "wheat_tools") == 0) return SendClientMessage(playerid, 0xFF6666FF, "У Вас нет инструмента для сбора урожая");
								if(GetPVarInt(playerid, "wheat_take") > 0) return 1;

								ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

								SetPVarInt(playerid, "wheat_take", 1);

								SetTimerEx("SetPlayerFermerTakeWheat", (random(5) + 10) * 300, false, "ii", playerid, i);
							}
						}
						else
						{
							SendClientMessage(playerid, -1, "Урожай ещё не созрел");
							new msg[44];
							format(msg, 44, "ID: %d", i);
							SendClientMessage(playerid, -1, msg);
						}
					}
				}
			}
		}

		if(PRESSED(KEY_WALK))
	 	{
			new biz_id = GetPVarInt(playerid, "pickup_biz");
			new enter_id = GetPVarInt(playerid, "pickup_enter");
			new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
			new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, GetPickupInfo(enter_id, P_POS_X), GetPickupInfo(enter_id, P_POS_Y), GetPickupInfo(enter_id, P_POS_Z)))
			{
				new entranceid = GetPlayerInEntrance(playerid);
				new floor = GetPlayerInEntranceFloor(playerid);

				if(entranceid != -1 && floor >= 1)
				{
					ShowPlayerHouseInfo(playerid, g_entrance_flat[entranceid][floor - 1][action_id]);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z)))
			{
				if(GetPlayerInBiz(playerid) == -1)
				{
					new i_paid_biz = GetPlayerUseListitem(playerid);

					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
					{
						new oc_id = GetPlayerOwnableCarLast(playerid);

						if(oc_id == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCarLasts(playerid) == 0)
								SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");

							return 1;
						}
						else
						{
							new Float: veh_x,
								Float: veh_y,
								Float: veh_z;

							GetVehiclePos(oc_id, veh_x, veh_y, veh_z);

							if(!IsPlayerInRangeOfPoint(playerid, 15.0, veh_x, veh_y, veh_z))
							{
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт слишком далеко от Вас");

								return 1;
							}
						}
					}

					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_ARENDA || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_DET)
     				{
						//SendClientMessage(playerid, -1, "Вуаля");
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAFE)
					{
     					for(new i; i < 11; i++)
						{
						    PlayerTextDrawShow(playerid, cafe_PTD[playerid][i]);
						}
						SetPVarInt(playerid, "cafe", 1);
			   			SelectTextDraw(playerid, -1);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_XZ)
					{
						SendClientMessage(playerid, -1, "Это предприятие находится на стадии строительства. Туда нельзя.");
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_METRO) return ShowMetroList(playerid);
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_FERMA)
					{
					    if(GetPVarInt(playerid, "ferma_id") == 0)
						{
						    SetPVarInt(playerid, "ferma_id", biz_id);
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FERMER_ST, DIALOG_STYLE_MSGBOX,
								"{"#cGold"}Работа фермера",
								"{"#cW"}Вы хотите устроиться на работу фермером?",
								"Да", "Нет"
							);
						}
						else if(GetPVarInt(playerid, "ferma_id") != 0)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FERMER_END, DIALOG_STYLE_MSGBOX,
								"{"#cGold"}Работа фермера",
								"{"#cW"}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else
						{
						    new msg[20];
						    format(msg, sizeof msg, "%d", GetPVarInt(playerid, "ferma_id"));
							SendClientMessage(playerid, 0xFF6600FF, msg);
						}
					    return 1;
					}

					if(IsBusinessOwned(biz_id))
					{
						if(GetBusinessData(biz_id, B_OWNER_ID) != GetPlayerAccountID(playerid))
						{
							if(GetBusinessData(biz_id, B_LOCK_STATUS))
								return GameTextForPlayer(playerid, "~w~business~n~~r~closed", 4000, 1);

							if(GetBusinessData(biz_id, B_ENTER_PRICE) > 0 && i_paid_biz != biz_id)
							{
								new fmt_str[128];
								SetPVarInt(playerid, "biz_enter", biz_id + 1);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вход платный и составляет {FF9900}%d руб\n"\
									"{99FF00}Вы уверены что хотите войти сюда?",
									GetBusinessData(biz_id, B_ENTER_PRICE)
								);
								return Dialog(playerid, DIALOG_BIZ_ENTER, DIALOG_STYLE_MSGBOX, GetBusinessData(biz_id, B_NAME), fmt_str, "Да", "Нет");
							}
						}
					}
					EnterPlayerToBiz(playerid, biz_id);
				}
			}
		}
		if(PRESSED(KEY_HANDBRAKE | KEY_WALK))
		{
			new targetid = GetPlayerTargetPlayer(playerid);
			//new targetid = playerid;

			if(targetid != INVALID_PLAYER_ID && !GetPlayerWeapon(playerid))
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);

				new fmt_str[64];
				format(fmt_str, sizeof fmt_str, "{FFCD00}Действия (%s)", GetPlayerNameEx(targetid));

				Dialog
				(
					playerid, DIALOG_ACTION, DIALOG_STYLE_LIST,
					fmt_str,
					"1. Приветствие\n\
					2. Показать паспорт\n\
					3. Показать лицензии\n\
					4. Показать навыки",
					"Выбрать", "Закрыть"
				);
			}
		}
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "have_jerrican") == 1 && GetPlayerSpeed(playerid) == 0.0)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);

					Dialog
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK | KEY_HANDBRAKE))
		{
			if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
			{
				callcmd::car(playerid, "");
			}
		}
		else if(PRESSED(KEY_CTRL_BACK))
		{
			CallLocalFunction("cmd_trunk", "i", playerid);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(( newkeys & KEY_FIRE || (oldkeys & 128 && newkeys & 16)))
			{
				if(GetPlayerWeapon(playerid)!=43 && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_SPRUNK &&  GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_SMOKE_CIGGY && GetPlayerSpecialAction(playerid)!=SPECIAL_ACTION_DRINK_BEER)
				{
					if(!IsPlayerInPoliceTeam(playerid) && !GetPlayerData(playerid, P_LAST_DIALOG))
					{
						for(new i; i < 16; i++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 100.0, AntiDm[i][zX], AntiDm[i][zY], AntiDm[i][zZ]))
							{
							    if(AntiDm[i][zStatus] == 1)
							    {
									if(GetPlayerVirtualWorld(playerid)!=11 && GetPlayerVirtualWorld(playerid)!=12 && GetPlayerVirtualWorld(playerid)!=13)
									{
										if(DMStatus[playerid] == 1) return true;

										ApplyAnimation(playerid, "FAT", "IDLE_tired", 4.0, 0, 0, 0, 1, 0);
	         							Dialog
								 		(
										 	playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										 	"Подсказка",
											 "В этом месте запрещено {FF5533}драться/стрелять.\n\
											 Если вы продолжите, то вы будете кикнуты!\n\n\
											 Продолжить игру можно через: 5 секунд!",
											 "Принять", ""
									 	);

	         							SetTimerEx("DialogDMZZ", 1000, false, "i", playerid);
										DMStatus[playerid] = 1;
										return true;
									}
								}
							}
						}
					}
				}
			}
		}
	}
		return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}
public OnPlayerUpdate(playerid)
{
	//if(GetPlayerMoney(playerid) > 30000000 && !GetPlayerWeapon(playerid) && !IsPlayerInAnyVehicle(playerid))
    //{
    //	SetPlayerAttachedObject(playerid,3,1210,5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);
    //}
   // else RemovePlayerAttachedObject(playerid, 3);

	if(setgravity{playerid} && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
            if(GetPlayerAnimationIndex(playerid) == 1130 || GetPlayerAnimationIndex(playerid) == 1132 || GetPlayerAnimationIndex(playerid) == 1195)
            {
                new Float:x[3];
                GetPlayerVelocity(playerid, x[0], x[1], x[2]);
                if(!moving{playerid} || x[2] == 0.0)
                {
                        velZ[playerid] = x[2];
                        moving{playerid} = true;
                        falltime[playerid] = GetTickCount();
                }
                new time = GetTickCount()-falltime[playerid];
                x[2] = (gravity[playerid]*time)/1000.0;
                if(x[2] > 1.17) x[2] = 1.17;
                SetPlayerVelocity(playerid, x[0], x[1], velZ[playerid]-x[2]);
            }
            else moving{playerid} = false;
	    }
	SetPlayerData(playerid, P_AFK_TIME, 0);
//	SpeedometrLineInit(playerid);
	if(IsPlayerDriver(playerid))
	{
		new keys, gas_brake, left_right;

		GetPlayerKeys(playerid, keys, gas_brake, left_right);

		new pedal_type = PEDAL_TYPE_NONE;

		if((keys & KEY_SPRINT) && !(keys & KEY_JUMP || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_GAS;

		else if(keys & KEY_JUMP && !(keys & KEY_SPRINT || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_BRAKE;

		player_press_pedal[playerid] = pedal_type;
	}
	if(GetPVarInt(playerid, "SelectTextDrawEnter")) SelectTextDraw(playerid, 0xFFFFFFFF); // Если у игрока активирована клибкальность и он закрыл её,то включаем снова.
	if(GetPVarInt(playerid, "CRUPIE") != 0 && !IsPlayerInRangeOfPoint(playerid,500.0,214.1954,-302.4986,1011.4063)) SetPlayerSkin(playerid,GetPVarInt(playerid,"CRUPIE")),DeletePVar(playerid,"CRUPIE"),SendClientMessage(playerid, 0x808080FF, "[Рулетка]: Вы потеряли форму крупье."); // Если крупье вышел в форме из казино.

	if(noclipdata[playerid][camera_mode] == CAMERA_MODE_FLY)
	{
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);

		if(noclipdata[playerid][mode_mode] && (GetTickCount() - noclipdata[playerid][last_move] > 100))
		{
		    MoveCamera(playerid);
		}

		if(noclipdata[playerid][u_dold] != ud || noclipdata[playerid][l_rold] != lr)
		{
			if((noclipdata[playerid][u_dold] != 0 || noclipdata[playerid][l_rold] != 0) && ud == 0 && lr == 0)
			{
				StopPlayerObject(playerid, noclipdata[playerid][fly_object]);
				noclipdata[playerid][mode_mode]      = 0;
				noclipdata[playerid][acce_lmul]  = 0.0;
			}
			else
			{

				noclipdata[playerid][mode_mode] = GetMoveDirectionFromKeys(ud, lr);
				MoveCamera(playerid);
			}
		}
		noclipdata[playerid][u_dold] = ud; noclipdata[playerid][l_rold] = lr;
		return 0;
 }
	if(GetPlayerTempJobCheckAnim(playerid))
	{
		new anim_index = GetPlayerAnimationIndex(playerid);

 		NoRoof(playerid);
		switch(GetPlayerTempJob(playerid))
		{
			case TEMP_JOB_LOADER:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 1189 || anim_index == 1224))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 260 || anim_index == 1275 || anim_index == 1276 || anim_index == 1289))
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_DROP_LOAD);
				}
			}
			case TEMP_JOB_MINER:
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!(anim_index == 616 || anim_index == 1189 || anim_index == 1224))
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
				}
			}
			case TEMP_JOB_FACTORY:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 949 || anim_index == 1189 || anim_index == 1224 || anim_index == 1257 || anim_index == 1269))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 1196 || anim_index == 1275 || anim_index == 1276 || anim_index == 1269 || anim_index == 1283))
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_DROP_P);
				}
			}
			case TEMP_JOB_LUMBERJACK:
			{
				if(!(anim_index == 1189 || anim_index == 1224 || anim_index == 260 || anim_index == 1275 || anim_index == 1276))
				{
					anim_index = -1;
				}

				if(anim_index == -1)
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_DROP);
			}
			default:
			{
				SetPlayerTempJobCheckAnim(playerid, false);
			}
		}
	}

	if(GetPVarInt(playerid, "test") == 1)
	{
		new fmt_str[64];

		format(fmt_str, sizeof fmt_str, "a_index: %d", GetPlayerAnimationIndex(playerid));
		SendClientMessage(playerid, 0xCECECEFF, fmt_str);
	}

	if(GetPlayerWeaponState(playerid) == 2) SetPlayerData(playerid, P_WEAPON_RELOADING, false);
	if(GetPlayerWeaponState(playerid) == 3 && !GetPlayerData(playerid, P_WEAPON_RELOADING))
	{
		SetPlayerData(playerid, P_WEAPON_RELOADING, true);

		switch(GetPlayerWeapon(playerid))
		{
			case 22:
			{
				if(GetPlayerData(playerid, P_SKILL_COLT) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][0]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[0] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][0] = 0;

						AddPlayerData(playerid, P_SKILL_COLT, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_colt", GetPlayerData(playerid, P_SKILL_COLT));

						SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
					}
				}
			}
			case 23:
			{
				if(GetPlayerData(playerid, P_SKILL_SDPISTOL) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][1]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[1] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][1] = 0;

						AddPlayerData(playerid, P_SKILL_SDPISTOL, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", GetPlayerData(playerid, P_SKILL_SDPISTOL));

						SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
					}
				}
			}
			case 24:
			{
				if(GetPlayerData(playerid, P_SKILL_DEAGLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][2]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[2] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][2] = 0;

						AddPlayerData(playerid, P_SKILL_DEAGLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", GetPlayerData(playerid, P_SKILL_DEAGLE));

						SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
					}
				}
			}
			case 25:
			{
				if(GetPlayerData(playerid, P_SKILL_SHOTGUN) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][3]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[3] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][3] = 0;

						AddPlayerData(playerid, P_SKILL_SHOTGUN, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", GetPlayerData(playerid, P_SKILL_SHOTGUN));

						SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
					}
				}
			}
			case 29:
			{
				if(GetPlayerData(playerid, P_SKILL_MP5) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][4]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[4] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][4] = 0;

						AddPlayerData(playerid, P_SKILL_MP5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", GetPlayerData(playerid, P_SKILL_MP5));

						SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
					}
				}
			}
			case 30:
			{
				if(GetPlayerData(playerid, P_SKILL_AK47) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][5]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[5] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][5] = 0;

						AddPlayerData(playerid, P_SKILL_AK47, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", GetPlayerData(playerid, P_SKILL_AK47));

						SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
					}
				}
			}
			case 31:
			{
				if(GetPlayerData(playerid, P_SKILL_M4) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][6]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[6] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][6] = 0;

						AddPlayerData(playerid, P_SKILL_M4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", GetPlayerData(playerid, P_SKILL_M4));

						SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
					}
				}
			}
			case 34:
			{
				if(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][7]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[7] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][7] = 0;

						AddPlayerData(playerid, P_SKILL_SNIPER_RIFLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));

						SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
					}
				}
			}
			case 26:
			{
				if(GetPlayerData(playerid, P_SKILL_SAWNOFF) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][8]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[8] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][8] = 0;

						AddPlayerData(playerid, P_SKILL_SAWNOFF, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", GetPlayerData(playerid, P_SKILL_SAWNOFF));

						SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
					}
				}
			}
			case 27:
			{
				if(GetPlayerData(playerid, P_SKILL_COMBAT_SG) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][9]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[9] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][9] = 0;

						AddPlayerData(playerid, P_SKILL_COMBAT_SG, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", GetPlayerData(playerid, P_SKILL_COMBAT_SG));

						SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
					}
				}
			}
			case 28:
			{
				if(GetPlayerData(playerid, P_SKILL_MICRO_UZI) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][10]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[10] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][10] = 0;

						AddPlayerData(playerid, P_SKILL_MICRO_UZI, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", GetPlayerData(playerid, P_SKILL_MICRO_UZI));

						SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	while(strfind(inputtext, "%", true) != -1)
		strdel(inputtext, strfind(inputtext,"%",true), strfind(inputtext,"%",true) + 1);

	while(strfind(inputtext, "%s", true) != -1)
		strdel(inputtext, strfind(inputtext,"%s",true), strfind(inputtext,"%s",true) + 2);

	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	//рыбалка
	if(dialogid == DLG_FISH_MARKET)
    {
        if(response == 0)
            return 1;
        switch(listitem)
        {
            case 0:
            {
                if(GetPlayerMoney(playerid) < 7500)
                    return SendClientMessage(playerid, -1, "Недостаточно денег.");
                SendClientMessage(playerid, -1, "Удочка куплена!");
                GameTextForPlayer(playerid, "~r~-50$", 1200, 1);
				new ydkaa = GetPlayerData(playerid, P_YDKA);
				new ydkaaa = ydkaa + 1;
          		SetPlayerData(playerid, P_YDKA, ydkaaa);
				UpdatePlayerDatabaseInt(playerid, "ydka", ydkaaa);
                new query[200];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET ydka = ydka+1 WHERE name = '%s'", GetPlayerNameEx(playerid));
				mysql_query(mysql, query, false);
                return GivePlayerMoneyEx(playerid, -7500);
            }
            case 1:
            {
                if(GetPlayerMoney(playerid) < 2000)
                    return SendClientMessage(playerid, -1, "Недостаточно денег.");
                if(fishing_bait[playerid])
                    return SendClientMessage(playerid, -1, "Вы уже купили приманку!");
                fishing_bait[playerid] = 1;
                SendClientMessage(playerid, -1, "Приманка куплена!");
                //GameTextForPlayer(playerid, "~r~-20000$", 1200, 1);
                return GivePlayerMoneyEx(playerid, -2000);
            }
            case 2:
            {
                if(GetPlayerMoney(playerid) < 2000)
                    return SendClientMessage(playerid, -1, "Недостаточно денег.");
                if(fishing_line[playerid])
                    return SendClientMessage(playerid, -1, "Вы уже купили леску!");
                fishing_line[playerid] = 1;
                SendClientMessage(playerid, -1, "Леска куплена!");
                //GameTextForPlayer(playerid, "~r~-20000$", 1200, 1);
                return GivePlayerMoneyEx(playerid, -2000);
            }
        }
    }
	while(strfind(inputtext, "%", true) != -1)
		strdel(inputtext, strfind(inputtext,"%",true), strfind(inputtext,"%",true) + 1);

	while(strfind(inputtext, "%s", true) != -1)
		strdel(inputtext, strfind(inputtext,"%s",true), strfind(inputtext,"%s",true) + 2);

	//CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new last_dialog = GetPlayerData(playerid, P_LAST_DIALOG);
	SetPlayerData(playerid, P_LAST_DIALOG, INVALID_DIALOG_ID);

	if(last_dialog == dialogid)
	{
		switch(dialogid)
		{
			case DIALOG_ANTICHEAT_SETTINGS: // Главное меню настроект анти-чита
            {
                if(!response) // Если игрок закрыл диалог
                {
                    pAntiCheatSettingsPage{playerid} = 0; // Присваиваем значение 0 переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
                    return 1; // Закрываем диалог
                }

                if(!strcmp(inputtext, AC_DIALOG_NEXT_PAGE_TEXT)) // Если игрок нажал на кнопку перелистывания на следующую страницу
                {
                    pAntiCheatSettingsPage{playerid}++; // Инкрементируем (прибавляем 1) значение переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
                }
                else if(!strcmp(inputtext, AC_DIALOG_PREVIOUS_PAGE_TEXT)) // Если игрок нажал на кнопку перелистывания на предыдущую страницу
                {
                    pAntiCheatSettingsPage{playerid}--; // Декрементируем (убавляем 1) значение переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
                }
                else // Если игрко выбрал какой-либо из кодов анти-чита
                {
                    pAntiCheatSettingsEditCodeId[playerid] = pAntiCheatSettingsMenuListData[playerid][listitem]; // Присваиваем переменной, хранящей номер кода анти-чита, который редактирует игрок, номер кода, который он выбрал
                    return ShowPlayer_AntiCheatEditCode(playerid, pAntiCheatSettingsEditCodeId[playerid]); // Показываем игроку диалог настройки кода анти-чита
                }
                return ShowPlayer_AntiCheatSettings(playerid); // Относится к выбору следующей и предыдущей страницы. Заново показываем игроку главное меню настройки анти-чита.
            }
			case DIALOG_RIBALKA:
			{
				if(!response) return 1;
				else
				{
				    switch(listitem)
					{
				    	case 0:
				    	{
				    	    Dialog(playerid, DLG_FISH_MARKET, DIALOG_STYLE_LIST, "Рыбный рынок", "Удочка (7500)\nПриманка (2000)\nЛеска (2000)", "Купить", "Отмена");
				    	}
				    	case 1:
				    	{
				    	    SendClientMessage(playerid, 0xC0C0C0FF, "=================[ {FFFFFF}Рыбалка{C0C0C0} ]================");
    						SendClientMessage(playerid, 0xC0C0C0FF, "/fish {FFFFFF}- начать/остановить рыбалку"), SendClientMessage(playerid, 0xC0C0C0FF, "/rod {FFFFFF}- убрать/достать удочку");
				    	}
				    }
				}
			}
			case DIALOG_PLAYER_BUY_CONTAINER:
			{
				if(!response) return 1;

				for(new i = 0; i != sizeof containers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1]))
					{
						if(containers[i][C_TIME_COUNT] <= 3 && containers[i][C_TIME_COUNT] > 0)
						{
							SendClientMessage(playerid, -1, "До открытия контейнера меньше меньше 3-х секунд, ставки закрыты.");
							return 1;
						}
						if(containers[i][CD_STATUS] != 0) return SendClientMessage(playerid, -1, "Контейнер уже куплен!");
						if(strval(inputtext) < containers[i][C_PRICE_COUNT] + 150000 || GetPlayerMoneyEx(playerid) < containers[i][C_PRICE_COUNT] + 150000)
						{
							if(GetPlayerMoneyEx(playerid) < containers[i][C_PRICE_COUNT] + 150000)
							{
								SendClientMessage(playerid, -1, "Упс, у вас не хватит денег на ставку.");
							}
							if(containers[i][CD_STATUS] != 0) return SendClientMessage(playerid, -1, "Контейнер уже куплен!");
							if(strval(inputtext) < containers[i][C_PRICE_COUNT] + 150000)
							{
								new mess[200];
								format(mess, sizeof mess, "Следующая ставка не может быть меньше чем %d", containers[i][C_PRICE_COUNT] + 150000);
								SendClientMessage(playerid, -1, mess);
							}

							new str_c[450];
							format(str_c, sizeof str_c,
							"{ffffff}Вы готовы объявить о начале торгов за этот контейнер?\n\n"\
							"\t{ffffff}Цена за этот контейнер сейчас составляет:{8A4B08} %d руб\n\n"\
							"{ffffff}Укажите цену выше первоначальной:", containers[i][C_PRICE_COUNT]);
							Dialog
							(
								playerid, DIALOG_PLAYER_BUY_CONTAINER, DIALOG_STYLE_INPUT, "{4B610B}Аукцион за контейнер", str_c,
								"Далее", "Закрыть"
							);
						}

						else
						{
							if(containers[i][CD_STATUS] != 0) return SendClientMessage(playerid, -1, "Контейнер уже куплен!");
							containers[i][C_PRICE_COUNT] = strval(inputtext);
							containers[i][C_TIME_COUNT] = 30;

							containers[i][C_LAST_BET] = playerid;
						}
					}
				}
			}
			case DIALOG_PLAYER_BUY_SVALKA:
			{
				if(!response) return 1;

				for(new i = 0; i != sizeof svalka; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, svalka[i][S_POS_X], svalka[i][S_POS_Y], svalka[i][S_POS_Z]))
					{
						if(svalka[i][S_TIME_COUNT] <= 3 && svalka[i][S_TIME_COUNT] > 0)
						{
							SendClientMessage(playerid, -1, "До конца аукциона меньше меньше 3-х секунд, ставки закрыты.");
							return 1;
						}
						if(svalka[i][SV_STATUS] != 0) return SendClientMessage(playerid, -1, "Авто уже куплено!");
						if(strval(inputtext) < svalka[i][S_PRICE_COUNT] + 1500 || GetPlayerMoneyEx(playerid) < svalka[i][S_PRICE_COUNT] + 1500)
						{
							if(GetPlayerMoneyEx(playerid) < svalka[i][S_PRICE_COUNT] + 1500)
							{
								SendClientMessage(playerid, -1, "Упс, у вас не хватит денег на ставку.");
							}
							if(svalka[i][SV_STATUS] != 0) return SendClientMessage(playerid, -1, "Авто уже куплено!");
							if(strval(inputtext) < 0) return SendClientMessage(playerid, -1, "Поставте нормальную ставку!");
							if(strlen(inputtext) < 1 || strlen(inputtext) > 9) return SendClientMessage(playerid, -1, "Поставте нормальную ставку! (Не больше 9 цифр)");
							if(strval(inputtext) < svalka[i][S_PRICE_COUNT] + 1500)
							{
								new mess[200];
								format(mess, sizeof mess, "Следующая ставка не может быть меньше чем %d", svalka[i][S_PRICE_COUNT] + 1500);
								SendClientMessage(playerid, -1, mess);
							}

							new str_c[450];
							format(str_c, sizeof str_c,
							"{ffffff}Вы готовы начать торговаться за это авто?\n\n"\
							"{ffffff}Цена за это авто сейчас:{8A4B08} %d руб\n\n"\
							"{ffffff}Укажите цену выше, чтобы начать торговаться:", svalka[i][S_PRICE_COUNT]);
							Dialog
							(
								playerid, DIALOG_PLAYER_BUY_SVALKA, DIALOG_STYLE_INPUT, "{4B610B}Аукцион за авто", str_c,
								"Поставить", "Не хочу"
							);
						}

						else
						{
							if(svalka[i][SV_STATUS] != 0) return SendClientMessage(playerid, -1, "Авто уже куплено!");
							svalka[i][S_PRICE_COUNT] = strval(inputtext);
							svalka[i][S_TIME_COUNT] = 30;

							svalka[i][S_LAST_BET] = playerid;
						}
					}
				}
			}
			case DIALOG_PLAYER_CAR_SVALKA:
			{
				if(!response) return 1;

				for(new i = 0; i != sizeof svalka; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, svalka[i][S_POS_X], svalka[i][S_POS_Y], svalka[i][S_POS_Z]))
					{
						switch(listitem)
						{
							case 0:
							{
								new str_c[450];
								new proc[20];
								format(proc, sizeof proc, "20%");
								new port = GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) / 100 * 20;
								new str[85];
								format(str, sizeof str, "{ffffff}Действие с авто: {c99a32}%s", GetVehicleInfo(svalka_car[i] - 400, VI_NAME));
								format(str_c, sizeof str_c,
								"{ffffff}Государственная стоймость авто: {8A4B08}%d руб\n{ffffff}Стоймость на свалке: {8A4B08}%d руб{FFA500}(-%s)\n{FFFFFF}Выберите действие для данного авто\n{ffffff}1. Оставить себе\n{ffffff}2. Продать на свалке", GetVehicleInfo(svalka_car[i] - 400, VI_PRICE), GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) - port, proc);
								Dialog
								(
									playerid, DIALOG_PLAYER_CAR_SVALKA, DIALOG_STYLE_LIST, str, str_c,
									"Выбор", "Отмена"
								);
							}
							case 1:
							{
								new str_c[450];
								new proc[20];
								format(proc, sizeof proc, "20%");
								new port = GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) / 100 * 20;
								new str[85];
								format(str, sizeof str, "{ffffff}Действие с авто: {c99a32}%s", GetVehicleInfo(svalka_car[i] - 400, VI_NAME));
								format(str_c, sizeof str_c,
								"{ffffff}Государственная стоймость авто: {8A4B08}%d руб\n{ffffff}Стоймость на свалке: {8A4B08}%d руб{FFA500}(-%s)\n{FFFFFF}Выберите действие для данного авто\n{ffffff}1. Оставить себе\n{ffffff}2. Продать на свалке", GetVehicleInfo(svalka_car[i] - 400, VI_PRICE), GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) - port, proc);
								Dialog
								(
									playerid, DIALOG_PLAYER_CAR_SVALKA, DIALOG_STYLE_LIST, str, str_c,
									"Выбор", "Отмена"
								);
							}
							case 2:
							{
								new str_c[450];
								new proc[20];
								format(proc, sizeof proc, "20%");
								new port = GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) / 100 * 20;
								new str[85];
								format(str, sizeof str, "{ffffff}Действие с авто: {c99a32}%s", GetVehicleInfo(svalka_car[i] - 400, VI_NAME));
								format(str_c, sizeof str_c,
								"{ffffff}Государственная стоймость авто: {8A4B08}%d руб\n{ffffff}Стоймость на свалке: {8A4B08}%d руб{FFA500}(-%s)\n{FFFFFF}Выберите действие для данного авто\n{ffffff}1. Оставить себе\n{ffffff}2. Продать на свалке", GetVehicleInfo(svalka_car[i] - 400, VI_PRICE), GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) - port, proc);
								Dialog
								(
									playerid, DIALOG_PLAYER_CAR_SVALKA, DIALOG_STYLE_LIST, str, str_c,
									"Выбор", "Отмена"
								);
							}
							case 3:
							{
								new price = random(1);

								switch(price)
								{
									case 0:
									{
										STRING_GLOBAL[0] = EOS;

										format
										(
											STRING_GLOBAL, sizeof STRING_GLOBAL,
											"INSERT INTO ownable_cars \
											(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
											VALUES \
											('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
											GetPlayerAccountID(svalka[i][S_LAST_BET]),
											svalka_car[i],
											0,
											0,
											svalka_spawn_vehicle_buy[i][CS_POS_X],
											svalka_spawn_vehicle_buy[i][CS_POS_Y],
											svalka_spawn_vehicle_buy[i][CS_POS_Z],
											svalka_spawn_vehicle_buy[i][CS_POS_A],
											gettime()
										);

										mysql_query(mysql, STRING_GLOBAL, true);
									}
								}
								DestroyVehicle(veh_sval[i]);

								DestroyDynamic3DTextLabel(svalka_label[i]);

								svalka[i][S_LAST_BET] = -1;
								svalka[i][SV_STATUS] = 1;
								svalka[i][S_PRICE_COUNT] = 1700000;

								SendClientMessage(playerid, -1, "{ffffff}Поздравляем с приобритением! Ваше авто стоит на парковке за свалкой.");
							}
							case 4:
							{
								new port = GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) / 100 * 20;
								//new cena_prod = GetVehicleInfo(container_car[i], VI_PRICE) -= port;
								GivePlayerMoneyEx(playerid, GetVehicleInfo(svalka_car[i] - 400, VI_PRICE) - port, "Продажа авто на свалке");
								DestroyVehicle(veh_sval[i]);

								DestroyDynamic3DTextLabel(svalka_label[i]);

								svalka[i][S_LAST_BET] = -1;
								svalka[i][SV_STATUS] = 1;
								svalka[i][S_PRICE_COUNT] = 1700000;
							}
						}
					}
				}
			}
			case DIALOG_PLAYER_CAR_CONTAINER:
			{
				if(!response) return 1;

				for(new i = 0; i != sizeof containers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1]))
					{
						switch(listitem)
						{
							case 0:
							{
								new str_c[450];
								new proc[20];
								format(proc, sizeof proc, "20%");
								new port = GetVehicleInfo(container_car[i] - 400, VI_PRICE) / 100 * 20;
								format(str_c, sizeof str_c,
								"{ffffff}-Государственная стоймость: {A38128}%d руб\n{ffffff}-Стоймость в порту: {A38128}%d руб{B25520}(-%s)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", GetVehicleInfo(container_car[i] - 400, VI_PRICE), GetVehicleInfo(container_car[i] - 400, VI_PRICE) - port, proc);
								Dialog
								(
									playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
									"Выбор", "Отмена"
								);
							}
							case 1:
							{
								new str_c[450];
								new proc[20];
								format(proc, sizeof proc, "20%");
								new port = GetVehicleInfo(container_car[i] - 400, VI_PRICE) / 100 * 20;
								format(str_c, sizeof str_c,
								"{ffffff}-Государственная стоймость: {A38128}%d руб\n{ffffff}-Стоймость в порту: {A38128}%d руб{B25520}(-%s)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", GetVehicleInfo(container_car[i] - 400, VI_PRICE), GetVehicleInfo(container_car[i] - 400, VI_PRICE) - port, proc);
								Dialog
								(
									playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
									"Выбор", "Отмена"
								);
							}
							case 2:
							{
								new str_c[450];
								new proc[20];
								format(proc, sizeof proc, "20%");
								new port = GetVehicleInfo(container_car[i] - 400, VI_PRICE) / 100 * 20;
								format(str_c, sizeof str_c,
								"{ffffff}-Государственная стоймость: {A38128}%d руб\n{ffffff}-Стоймость в порту: {A38128}%d руб{B25520}(-%s)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", GetVehicleInfo(container_car[i] - 400, VI_PRICE), GetVehicleInfo(container_car[i] - 400, VI_PRICE) - port, proc);
								Dialog
								(
									playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
									"Выбор", "Отмена"
								);
							}
							case 3:
							{
								new price = random(1);

								switch(price)
								{
									case 0:
									{
										STRING_GLOBAL[0] = EOS;

										format
										(
											STRING_GLOBAL, sizeof STRING_GLOBAL,
											"INSERT INTO ownable_cars \
											(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
											VALUES \
											('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
											GetPlayerAccountID(containers[i][C_LAST_BET]),
											container_car[i],
											1,
											1,
											container_spawn_vehicle_buy[i][CS_POS_X],
											container_spawn_vehicle_buy[i][CS_POS_Y],
											container_spawn_vehicle_buy[i][CS_POS_Z],
											container_spawn_vehicle_buy[i][CS_POS_A],
											gettime()
										);

										mysql_query(mysql, STRING_GLOBAL, true);
									}
								}
								DestroyVehicle(veh_cont[i]);

								DestroyDynamicObject(container[i]);

								DestroyDynamic3DTextLabel(container_label_1[i]);

								DestroyDynamicObject(container_door[i]);
								DestroyDynamicObject(container_second_door[i]);

								containers[i][C_LAST_BET] = -1;
								containers[i][CD_STATUS] = 1;
								containers[i][C_PRICE_COUNT] = def_cena_cont[i];
							}
							case 4:
							{
								new port = GetVehicleInfo(container_car[i] - 400, VI_PRICE) / 100 * 20;
								//new cena_prod = GetVehicleInfo(container_car[i], VI_PRICE) -= port;
								GivePlayerMoneyEx(playerid, GetVehicleInfo(container_car[i] - 400, VI_PRICE) - port, "Продажа авто в порту");
								DestroyVehicle(veh_cont[i]);

								DestroyDynamicObject(container[i]);

								DestroyDynamic3DTextLabel(container_label_1[i]);

								DestroyDynamicObject(container_door[i]);
								DestroyDynamicObject(container_second_door[i]);

								containers[i][C_LAST_BET] = -1;
								containers[i][CD_STATUS] = 1;
								containers[i][C_PRICE_COUNT] = def_cena_cont[i];
							}
						}
					}
				}
			}
            case DIALOG_ANTICHEAT_EDIT_CODE: // Меню настройки определённого кода анти-чита
            {
                if(!response) // Если игрок закрыл диалог
                {
                    pAntiCheatSettingsEditCodeId[playerid] = -1; // Присваиваем переменной, хранящей идентификатор (ID) кода анти-чита, который редактирует игрок, занчение -1
                    return ShowPlayer_AntiCheatSettings(playerid); // Показываем игроку главное меню настроек анти-чита
                }

                new
                    item = pAntiCheatSettingsEditCodeId[playerid]; // Создаём локальную переменную item, которая примет значение кода анти-чита, который редактирует игрок

                if(AC_CODE_TRIGGER_TYPE[item] == listitem) // Если игрок пытается присвоить коду уже присвоенный ему тип срабатывания
                    return ShowPlayer_AntiCheatSettings(playerid); // Показываем главное меню настроек анти-чита

                if(AC_CODE_TRIGGER_TYPE[item] == AC_CODE_TRIGGER_TYPE_DISABLED && listitem != AC_CODE_TRIGGER_TYPE_DISABLED)
                    EnableAntiCheat(item, 1);

                AC_CODE_TRIGGER_TYPE[item] = listitem; // Если же игрок выбрал другой тип срабатывания - присваиваем его переменной

                new sql_querys[101 - 4 + 1 + 2];

                // Форматируем запрос об обновлении данных указаного кода анти-чита в базу данных
                format(sql_querys, sizeof(sql_querys), "UPDATE "AC_TABLE_SETTINGS" SET `"AC_TABLE_FIELD_TRIGGER"` = '%d' WHERE `"AC_TABLE_FIELD_CODE"` = '%d'",
                    listitem,
                    item);

                mysql_function_query(mysql, sql_querys, false, "", ""); // Отправляем запрос в базу данных
                return ShowPlayer_AntiCheatSettings(playerid); // Показываем главное меню настроек анти-чита
            }
		    case 5456:
			{
			    if(!response)
			    {
			        SendClientMessage(GetPVarInt(playerid,"PlayerInvite1"),-1,"Игрок отказался");
			        return DeletePVar(playerid,"PlayerInvite1");
			    }
			    new person = GetPVarInt(playerid,"PlayerInvite1");
			    SetPlayerData(playerid, P_FAM, GetPlayerFam(person));
			    UpdatePlayerDatabaseInt(playerid, "pfam", GetPlayerFam(person));
			    new str[144];
				format(str,sizeof(str),"[%s] %s новый член семьи",FamInfo[GetPlayerFam(playerid)][fName],GetPlayerNameEx(playerid));
			    for(new i=0; i < MAX_PLAYERS; i++)
				{
					if(!IsPlayerConnected(i)  || GetPlayerFam(i) != GetPlayerFam(playerid)) continue;
					SendClientMessage(i,0x2E64FEFF,str);
				}
				DeletePVar(playerid,"PlayerInvite1");

			}
			case DIALOG_LOGIN: // Авторизация
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
				{
					if(response)
					{
						new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
						new str_len = strlen(inputtext);
						new bool: wrong_password = false;

						switch(login_step)
						{
							case LOGIN_STATE_PASSWORD:
							{
								if(1 <= str_len <= 16)
								{
									// str_len = strlen(GetPlayerData(playerid, P_PASSWORD));
									if(!str_len || strcmp(inputtext, GetPlayerData(playerid, P_PASSWORD), false) != 0)
									{
										wrong_password = true;
										login_step --;
										ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
									}
								}
								else if(strlen(inputtext) > 16 || strlen(inputtext) < 1)
								{
									SendClientMessage(playerid,-1,"Введите коректный пароль");
									wrong_password = true;
									login_step --;
									ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
								}
								else login_step --;
							}
							case LOGIN_STATE_PHONE:
							{
								str_len = strlen(GetPlayerData(playerid, P_SETTING_PHONE));
								if(!str_len || strcmp(GetPlayerData(playerid, P_SETTING_PHONE)[str_len - 5], inputtext) != 0)
								{
									wrong_password = true;
									login_step--;
								}
							}
							default:
								return 1;
						}
						if(wrong_password)
						{
							ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
						}
						else
						{
							SetPVarInt(playerid, "passest", 1);
							PlayerTextDrawHide(playerid, avtoriz_PTD[playerid][2]);
							PlayerTextDrawSetString(playerid, avtoriz_PTD[playerid][2], "......");
							PlayerTextDrawShow(playerid, avtoriz_PTD[playerid][2]);
						}
						//ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
					}
					else Kick:(playerid);
				}
			}
			case DIALOG_REGISTER: // Регистрация
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REGISTER)
				{
					new reg_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
					new str_len = strlen(inputtext);

					switch(reg_step)
					{
						case REGISTER_STATE_PASSWORD: // ввод пароля
						{
							if(str_len)
							{
								if(!(6 <= str_len <= 15))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Длина пароля должна быть от 6 до 15 символов\n"\
										"Рекомендуется использовать русские и латинские буквы, а также любые знаки",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(strfind(inputtext, "%") != -1 || strfind(inputtext, " ") != -1)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Введенный Вами пароль содержит недопустимые символы или пробелы",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(IsNumeric(GetPlayerNameEx(playerid)))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Ваш ник не должен содержать цифры. Измените его и повторите регистрацию",
										"Повтор", ""
									);
									return Kick:(playerid);
								}
								else
								{
									format(g_player[playerid][P_PASSWORD], 16, "%s", inputtext);
									PlayerTextDrawHide(playerid, registr_PTD[playerid][6]);
									PlayerTextDrawSetString(playerid, registr_PTD[playerid][6], g_player[playerid][P_PASSWORD]);
									PlayerTextDrawShow(playerid, registr_PTD[playerid][6]);
									SetPVarInt(playerid, "regpass", 1);
								}
							}
							else reg_step --;
						}
						case REGISTER_STATE_EMAIL: 		// ввод емайла
						{
							if(str_len)
							{
								if(!IsValidMail(inputtext, str_len))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Адрес электронной почты введен неверно",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								new query[128];
								new Cache: result, is_email_exist;

								mysql_format(mysql, query, sizeof query, "SELECT email FROM accounts WHERE email='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query);

								is_email_exist = cache_num_rows();
								cache_delete(result);

								if(is_email_exist)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}Ошибка",
										"{FFFFFF}Этот адрес электронной почты уже привязан к другому аккаунту",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else
								{
									format(g_player[playerid][P_EMAIL], 61, "%s", inputtext);
									PlayerTextDrawHide(playerid, registr_PTD[playerid][7]);
									PlayerTextDrawSetString(playerid, registr_PTD[playerid][7], g_player[playerid][P_EMAIL]);
									PlayerTextDrawShow(playerid, registr_PTD[playerid][7]);
									SetPVarInt(playerid, "regmail", 1);
								}
							}
							else reg_step --;
						}
						case REGISTER_STATE_REFER: 		// ввод ника пригласившего игрока
						{
							if(response)
							{
								if(2 <= str_len <= 20)
								{
									new query[75];
									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
									result = mysql_query(mysql, query);

									if(cache_num_rows())
										SetPlayerData(playerid, P_REFER, cache_get_row_int(0, 0));

									cache_delete(result);

									if(!GetPlayerData(playerid, P_REFER))
									{
										Dialog
										(
											playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
											"{FF9900}Ошибка",
											"{FFFFFF}Такого игрока не существует.\n"\
											"Если вы не знаете других игроков нажмите кнопку \"Пропустить\"",
											"Повтор", "Пропустить"
										);
										return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
									}
									else
									{
										PlayerTextDrawHide(playerid, registr_PTD[playerid][8]);
										PlayerTextDrawSetString(playerid, registr_PTD[playerid][8], inputtext);
										PlayerTextDrawShow(playerid, registr_PTD[playerid][8]);
									}
								}
								else reg_step --;
							}
						}
						case REGISTER_STATE_SEX:		// выбор пола
						{
							SetPlayerData(playerid, P_SEX, !response);
						}
					}
				}
			}
			case DIALOG_LOGIN_POS:
			{
			    if(response)
			    {
					SetPVarInt(playerid, "EPLAYER", response);

					TogglePlayerSpectating(playerid, false);
					SetPlayerSpawnPos(playerid);
		      		SpawnPlayer(playerid);
					return 1;
				}
				else
				{
 					SetPlayerSpawnInit(playerid);
					SpawnPlayer(playerid);

					DeletePVar(playerid,"e_X");
					DeletePVar(playerid,"e_Y");
					DeletePVar(playerid,"e_Z");
					DeletePVar(playerid,"e_Int");
					DeletePVar(playerid,"e_Virt");
					DeletePVar(playerid,"e_HBC");
					DeletePVar(playerid, "e_time");
					DeletePVar(playerid,"EPLAYER");
					return 1 ;
				}
			}
			case R_F:
			{
			    if(response)
		         {
			         new carprice = GetVehicleData(GetPlayerVehicleID(playerid), V_RENTP),string[80];
			         new businessid = GetVehicleData(GetPlayerVehicleID(playerid), V_RENT);
			         if(GetPlayerMoney(playerid) < carprice)
			         {
		                 RemovePlayerFromVehicle(playerid);
		                 TogglePlayerControllable(playerid,1);
		                 SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно средств для аренды транспорта.");
		                 return 1;
			         }
					 if(GetPlayerData(playerid, P_RENT_CAR) != INVALID_VEHICLE_ID)
					 {
						 RemovePlayerFromVehicle(playerid);
		                 TogglePlayerControllable(playerid,1);
		                 SendClientMessage(playerid,COLOR_WHITE,"У вас уже есть арендованное авто. /unrent чтобы вернуть его.");
		                 return 1;
					 }
			         new take_prods = 70;
					 new querys[200];

					 if(GetBusinessData(businessid, B_PRODS) >= take_prods)
					 {
						AddBusinessData(businessid, B_PRODS, -, take_prods);
						AddBusinessData(businessid, B_BALANCE, +, carprice);
						mysql_format(mysql, querys, sizeof querys, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-carprice, GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_BALANCE), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
					 }
					 else
					 {
						 RemovePlayerFromVehicle(playerid);
		                 TogglePlayerControllable(playerid,1);
		                 SendClientMessage(playerid,COLOR_WHITE,"В бизнесе не достаточно продуктов. Аренда авто закрыта.");
		                 return 1;
					 }
					 mysql_query(mysql, querys, false);

					 mysql_format(mysql, querys, sizeof querys, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), carprice, IsBusinessOwned(businessid));
					 mysql_query(mysql, querys, false);
		             format(string, sizeof(string), "Вы арендовали это транспортное средство за {5da130}%d{ffffff} рублей.", carprice);
		             SendClientMessage(playerid,COLOR_WHITE,string);
					 SendClientMessage(playerid, -1, "Если вы хотите отменить аренду, используйте /unrent");
		             TogglePlayerControllable(playerid,1);
		             GivePlayerMoneyEx(playerid, -carprice, "Аренда авто");
				     GetVehicleData(GetPlayerVehicleID(playerid), V_OWRENT) = GetPlayerName(playerid, OwnedName, sizeof(OwnedName));
				     SetVehicleNumberPlate(GetPlayerVehicleID(playerid),"RENTED");
					 SetPlayerData(playerid, P_RENT_CAR, GetPlayerVehicleID(playerid));
		        }
          		else
		        {
		            RemovePlayerFromVehicle(playerid);
				    TogglePlayerControllable(playerid,1);
		        }
			}
			case DIALOG_STAVKA_KARTS:
			{
			    new summ = strval(inputtext);

			    if(response)
			    {
			        if(GetPlayerMoney(playerid) < summ) return SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно средств");
	    		    if(!(10_000 <= summ <= 10_000_000)) return SendClientMessage(playerid, 0xFF6600FF, "Сумма ставки от 10.000 до 10.000.000 рублей.");

			        SetPVarInt(playerid, "stavka", summ);
			        SendClientMessage(playerid, 0x79cb64FF, "Вы успешно указали ставку.");
			        SendClientMessage(playerid, 0x79cb64FF, "Выберите одну из 6-ти предложенных карт.");

			        GivePlayerMoneyEx(playerid, -summ, "казино", true, true);

		           	for(new i = 11; i < 17; i ++)
		           	{
						TextDrawColor(karta_TD[i], -1);
						TextDrawHideForPlayer(playerid, karta_TD[i]);
						TextDrawShowForPlayer(playerid, karta_TD[i]);
					}
			    }
			}
			case DIALOG_CLOSE_KARTS:
			{
				SelectTextDraw(playerid, 0xFFCC00FF);
		    }
		    //--------------------------
		    case DIALOG_SKIN_MENU:
			{
			    if(!response) return 1;

			    switch(listitem)
				{
				    case 0..15:
					{
					    g_player[playerid][P_SKIN_LIST] = 0;

					    new k = listitem;
					    g_player[playerid][P_SKIN_LIST]  = k;

						SetPlayerData(playerid, P_SKIN, player_skin[g_player[playerid][P_SKIN_LIST]][SKIN_ID][playerid]);

						SetPlayerSkin(playerid, g_player[playerid][P_SKIN]);

						SendClientMessage(playerid, 0x99CC00FF, !"Вы сменили свою одежду!");
						SendClientMessage(playerid, 0x99CC00FF, !"Ваша предыдущая одежа была добавлена в {ffcc00}/myskin");

						UpdatePlayerDatabaseInt(playerid, "skin", player_skin[g_player[playerid][P_SKIN_LIST]][SKIN_ID][playerid]);

						Action(playerid, "сменил одежду");

						g_player[playerid][P_SKIN_LIST] = 0;

					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PLAYER_MENU:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ShowPlayerStats(playerid);
						case 2: ShowPlayerCMDSDialog(playerid);
						case 3: ShowPlayerSettings(playerid);
						case 4: ShowPlayerSecuritySettings(playerid);
						case 5: ShowPlayerReport(playerid);
						case 6: ShowPlayerImprovementsDialog(playerid);
						case 7: ShowServerRules(playerid);
						case 8: ShowPlayerChangeNameDialog(playerid);
						case 9: callcmd::pcode(playerid, "");
						case 10: ShowPlayerDonateDialog(playerid);
						default:
							return 1;
					}
				}
			}
			case DIALOG_PLAYER_STATS:
			{
				if(response)
				{
					callcmd::menu(playerid, "");
				}
							    else
			    {
					switch(listitem + 1)
					{
					    case 1:
					    {
					        callcmd::roulette_prize(playerid, "");
					    }
					}
				}
			}
			//===============фамы==================
            case d_family_creating:
			{
			    if(!response) return 1;

				switch(listitem + 1)
				{
				    case 1:
				    {
				        Dialog(playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT, "Создание семьи", "Стоимость создания семьи составляет 5.000.000 руб.\n\nВведите название своей семьи:", "Далее", "Закрыть");
				    }
					case 2:
					{

						new query[115],
							Cache: result,
							rows,
							name[21],
							list[sizeof query * 25 + 60] = "";

						mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id > 0 ORDER BY fam_id DESC");
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						for(new i; i < rows; i ++)
						{

							cache_get_field_content(i, "fam_name", name);

							format
							(
								query, sizeof query,
								"%d. %s\n",
								i + 1,
								name
							);

							strcat(list, query);
						}

						cache_delete(result);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Список семей", list, "Назад", "Закрыть");
					}
				}
			}
			case DIALOG_FAMILY_INFO:
			{
				if(!response) return 1;

				switch(listitem + 1)
				{
				    case 1:
				    {
				        STRING_GLOBAL[0] = EOS;

				        new family = GetPlayerFam(playerid);

				        format
						(
							STRING_GLOBAL, sizeof STRING_GLOBAL,
							"Название: %s\n\n\
							Семейный дом: %d\n\
							Состав семьи: %d чел.\n\
							Бюджет семьи: %d руб.\n\n\
							Дата создания: %s\n\
							Основатель: %s",
							g_family[family][F_NAME],
							g_family[family][F_HOUSE],
							GetFamilyCountUsers(family),
							g_family[family][F_MONEY],
							g_family[family][F_DATE],
							g_family[family][F_LEADER]
						);

						Dialog(playerid, DIALOG_CANCEL_FAMILY, DIALOG_STYLE_MSGBOX, "Информация о семье", STRING_GLOBAL, "Назад", "Закрыть");
				    }
				    case 2:
				    {
	                    if(GetPlayerFamRankEx(playerid) < 5) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");

	                   	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	                   	if(g_family[GetPlayerFam(playerid)][F_HOUSE] == 0)
	                   	{
							if(houseid != -1)
							{
								new query[100];
								mysql_format(mysql, query, sizeof query, "UPDATE family SET fam_house='%d' WHERE fam_id=%d LIMIT 1", houseid, GetPlayerFam(playerid));
								mysql_query(mysql, query, false);

								format(query, sizeof query, "Семейным домом Вашей семьи назначен дом №%d", houseid);
								SendClientMessage(playerid, 0xCECECEFF, query);

								g_family[GetPlayerFam(playerid)][F_HOUSE] = houseid;

							}
							else SendClientMessage(playerid, 0xFF6600FF, "У Вас нет дома");
						}
						else
						{
							new query[100];
							mysql_format(mysql, query, sizeof query, "UPDATE family SET fam_house=0 WHERE fam_id=%d LIMIT 1", GetPlayerFam(playerid));
							mysql_query(mysql, query, false);

							format(query, sizeof query, "Теперь у Вашей семьи нет дома!");
							SendClientMessage(playerid, 0xCECECEFF, query);

							g_family[GetPlayerFam(playerid)][F_HOUSE] = 0;
						}
				    }
					case 3: // ## Список игроков онлайн
					{
						ShowPlayerFind(playerid);
					}
					case 4: // ## Список игроков оффлайн
					{
						STRING_GLOBAL[0] = EOS;

						mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM `accounts` WHERE `pfam` = '%d'", GetPlayerFam(playerid));
						mysql_query(mysql, STRING_GLOBAL);

						new rows = cache_num_rows(),
							fmt_str[1024],
							player_name[24];

						STRING_GLOBAL[0] = EOS;

						new idx, j = rows;
						if(j > 45)
							j = 45;

						for(idx = 0; idx < j; idx ++)
						{
						    new id = cache_get_field_content_int(idx, "id");
							cache_get_field_content(idx, "name", player_name);

							if(IsPlayerConnected(GetPlayerID(player_name))) continue;

							format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, player_name);
							strcat(STRING_GLOBAL, fmt_str);

							SetPlayerListitemValue(playerid, idx, id);
						}
						Dialog(playerid, DIALOG_FAMILY_INFO_MEMBER, DIALOG_STYLE_LIST, "Полный состав семьи", STRING_GLOBAL, "Выбрать", "Закрыть");
					}
					case 5:
					{
    					if(GetPlayerFamRankEx(playerid) < 4) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");

					    Dialog(playerid, DIALOG_FAMILY_SETTINGS, DIALOG_STYLE_LIST, "Настройки семьи", "1. Изменить цвет семьи\n2. Изменить название семьи\n3. Управление рангами", "Выбрать", "Закрыть");
					}
					case 6:
					{
						ShowFamilyRepository(playerid);
					}
					case 7:
					{
					    if(GetPlayerFamRankEx(playerid) == 5) return SendClientMessage(playerid, 0xFF6666FF, "Основатель семьи не может покинуть её. Используйте: /family_delete");

					    callcmd::family_leave(playerid);
					}
				}
			}
			case DIALOG_FAM_REPOSITORY:
			{
			    if(response)
				{
					switch(listitem)
					{
					    case 4:
					    {
					        ShowFamilyRepository(playerid);
					    }
					    case 9:
					    {
					        ShowFamilyRepository(playerid);
					    }
					    case 10:
					    {
					        callcmd::fclose(playerid, "");
					    }
					    case 11:
					    {
					        if(GetPlayerFamRankEx(playerid) < 4) return SendClientMessage(playerid, 0xFF6600FF, "Это доступно только лидеру или заместителям семьи");

							new query[115],
								Cache: result,
								rows,
								text[200],
								fmt_msg[600];

							mysql_format(mysql, query, sizeof query, "SELECT * FROM family_log WHERE fam_id=%d", GetPlayerFam(playerid));
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();

							if(rows)
							{
								for(new i; i < rows; i ++)
								{
									cache_get_field_content(i, "text", text);

									format
									(
										query, sizeof query,
										"%s\n",
										text
									);

									strcat(fmt_msg, query);
								}

								cache_delete(result);

								Dialog(playerid, DIALOG_CANCEL_FAMILY, DIALOG_STYLE_MSGBOX, "История склада", fmt_msg, "Назад", "Закрыть");
							}
							else
							{
								Dialog(playerid, DIALOG_CANCEL_FAMILY, DIALOG_STYLE_MSGBOX, "{FF5533}История склада", "История склада Вашей семьи пуста.", "Назад", "Закрыть");
							}
					    }
					    case 12:
					    {
							STRING_GLOBAL[0] = EOS;

							new family = GetPlayerFam(playerid);

							format
							(
								STRING_GLOBAL, sizeof STRING_GLOBAL,
								"Склад: \t\t%s\n\n\
								Наркотики: \t%d грамм.\n\
								Патроны: \t%d шт.\n\
								Металл: \t%d кг.\n\
								Деньги: \t%d руб.\n\
								Состояние: \t%s",
								g_family[family][F_NAME],
								g_family[family][F_DRUGS],
								g_family[family][F_AMMO],
								g_family[family][F_METALL],
								g_family[family][F_MONEY],
								g_family[family][F_LOCK] > 0 ? "Закрыть" : "Открыт"
							);
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Информация о складе", STRING_GLOBAL, "Назад", "Закрыть");
						}
					}

					new item_names[4][10] = {"наркотики", "патроны", "металл", "деньги"},
						description[32],
						fmt_text[70],
						status;

					if(0 <= listitem <= 3)
							status = 1;

					SetPVarInt(playerid, "fr_state", status);
					SetPVarInt(playerid, "fr_item", status ? listitem : listitem - 5);

					format(description, sizeof description, "%s %s", status ? "Взять" : "Положить", status ? item_names[listitem] : item_names[listitem - 5]);
					format(fmt_text, sizeof fmt_text, "Введите количество, которое Вы хотите %s:", status ? "взять" : "положить");

					Dialog(playerid, DIALOG_FAM_REPOSITORY_USE, DIALOG_STYLE_INPUT, description, fmt_text, "Далее", "Отмена");
				}
				else callcmd::fmenu(playerid);
			}
			case DIALOG_FAM_REPOSITORY_USE:
			{
				if(response)
				{
					new status = GetPVarInt(playerid, "fr_state"),
						item = GetPVarInt(playerid, "fr_item"),
						item_count = strval(inputtext);

					if(item_count < 1) return SendClientMessage(playerid, 0xFF6600FF, "Неверное количество");

					new item_names[4][12] = {"наркотиков", "патронов", "металла", "денег"},
						item_type[4][4] = {"г", "шт.", "кг", "руб"};

					new fmt_text[90];

					new family = GetPlayerFam(playerid);

					new query[350];

					switch(status)
					{
						case 1:
						{
							if(g_family[GetPlayerFam(playerid)][F_LOCK] == 1)
								return SendClientMessage(playerid, 0xFF6600FF, "Склад закрыт. Вы не можете ничего брать");

							switch(item)
							{
								case 0:
								{
									if(g_family[family][F_DRUGS] < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "На складе нет такого количества наркотиков");

									if((GetPlayerData(playerid, P_DRUGS) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете унести с собой столько наркотиков");

									AddPlayerData(playerid, P_DRUGS, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new drugs = cache_get_field_content_int(idx, "drugs");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET drugs='%d' WHERE fam_id=%d LIMIT 1", drugs - item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_DRUGS] = g_family[family][F_DRUGS] - item_count;

									format(query, sizeof query, "взял со склада %d гр. наркотиков", item_count);
								}
								case 1:
								{
									if(g_family[family][F_AMMO] < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "На складе нет такого количества патронов");

									if((GetPlayerData(playerid, P_AMMO) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_AMMO))
										return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете унести с собой столько патронов");

									AddPlayerData(playerid, P_AMMO, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new ammo = cache_get_field_content_int(idx, "ammo");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET ammo='%d' WHERE fam_id=%d LIMIT 1", ammo - item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_AMMO] = g_family[family][F_AMMO] - item_count;

									format(query, sizeof query, "%s взял со склада %d патрон", GetPlayerNameEx(playerid), item_count);
								}
								case 2:
								{
									if(g_family[family][F_METALL] < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "На складе нет такого количества металла");

									if((GetPlayerData(playerid, P_METALL) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете унести с собой столько металла");

									AddPlayerData(playerid, P_METALL, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new metall = cache_get_field_content_int(idx, "metall");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET metall='%d' WHERE fam_id=%d LIMIT 1", metall - item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_METALL] = g_family[family][F_METALL] - item_count;

									format(query, sizeof query, "%s взял со склада %d кг. металла", GetPlayerNameEx(playerid), item_count);
								}
								case 3:
								{
									if(g_family[family][F_MONEY] < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "На складе нет такого количества денег");

									GivePlayerMoneyEx(playerid, item_count, "Взял со склада банды", true, true);

									g_family[family][F_MONEY] = g_family[family][F_MONEY] - item_count;

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new money = cache_get_field_content_int(idx, "fam_bank");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET fam_bank='%d' WHERE fam_id=%d LIMIT 1", money - item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);


									format(query, sizeof query, "взял со склада %d руб.", item_count);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s %s [%d] взял(а) со склада банды %d %s %s",
							GetPlayerFamilyRank(playerid), GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendFamilyMessage(playerid, fmt_text);

							FamilyLog(playerid, query);
						}
						case 0:
						{
							switch(item)
							{
								case 0:
								{
									if(GetPlayerData(playerid, P_DRUGS) < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет такого количества наркотиков");

									AddPlayerData(playerid, P_DRUGS, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new drugs = cache_get_field_content_int(idx, "drugs");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET drugs='%d' WHERE fam_id=%d LIMIT 1", drugs + item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_DRUGS] = g_family[family][F_DRUGS] + item_count;

									format(query, sizeof query, "%s положил на склад %d гр. наркотиков", GetPlayerNameEx(playerid), item_count);
								}
								case 1:
								{
									if(GetPlayerData(playerid, P_AMMO) < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет такого количества патронов");

									AddPlayerData(playerid, P_AMMO, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new ammo = cache_get_field_content_int(idx, "ammo");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET ammo='%d' WHERE fam_id=%d LIMIT 1", ammo + item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_AMMO] = g_family[family][F_AMMO] + item_count;

									format(query, sizeof query, "%s положил на склад %d патрон", GetPlayerNameEx(playerid), item_count);
								}
								case 2:
								{
									if(GetPlayerData(playerid, P_METALL) < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет такого количества металла");

									AddPlayerData(playerid, P_METALL, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new ammo = cache_get_field_content_int(idx, "metall");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET metall='%d' WHERE fam_id=%d LIMIT 1", ammo + item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_METALL] = g_family[family][F_METALL] + item_count;

									format(query, sizeof query, "%s положил на склад %d кг. металла", GetPlayerNameEx(playerid), item_count);
								}
								case 3:
								{
									if(GetPlayerMoneyEx(playerid) < item_count)
										return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет такого количества денег");

									GivePlayerMoneyEx(playerid, -item_count, "Положил на склад банды", true, true);

									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE fam_id=%d", family);
									result = mysql_query(mysql, query, true);

									if(cache_num_rows())
									{
										for(new idx; idx < cache_num_rows(); idx ++)
										{
											new money = cache_get_field_content_int(idx, "fam_bank");

											mysql_format(mysql, query, sizeof query, "UPDATE family SET fam_bank='%d' WHERE fam_id=%d LIMIT 1", money + item_count, family);
											mysql_query(mysql, query, false);
										}
									}

									cache_delete(result);

									g_family[family][F_MONEY] = g_family[family][F_MONEY] + item_count;

									format(query, sizeof query, "%s положил на склад %d руб.", GetPlayerNameEx(playerid), item_count);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s %s [%d] положил(а) на склад банды %d %s %s",
							GetPlayerFamilyRank(playerid), GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendFamilyMessage(playerid, fmt_text);

							FamilyLog(playerid, query);
						}
					}
				}
				else callcmd::fmenu(playerid);
			}
			case DIALOG_FAMILY_SETTINGS:
			{
			    if(response)
			    {
				    switch(listitem + 1)
				    {
						case 1: // ## Изменение основного цвета семьи
						{
							new fmt_str[50];

							STRING_GLOBAL[0] = EOS;

							for(new i = 1; i < sizeof family_colors; i ++)
							{
								format(fmt_str, 50, "{%s}%s\n", family_colors[i][FC_COLOR], family_colors[i][FC_NAME]);
								strcat(STRING_GLOBAL, fmt_str);
							}

							Dialog
							(
								playerid, DIALOG_CHANGE_FAMILY_COLOR, DIALOG_STYLE_LIST,
								"Изменение цвета семьи",
								STRING_GLOBAL,
								"Далее", "Закрыть"
							);
				        }
						case 2: // ## Изменение названия семьи
						{
							Dialog
							(
								playerid, DIALOG_CHANGE_FAMILY_NAME, DIALOG_STYLE_INPUT,
								"Изменение названия семьи",
								"Введите в окно ниже новое название для Вашей семьи",
								"Далее", "Закрыть"
							);
						}
						case 3: // ## Список и изменение рангов в семье
						{
							new fmt_str[140], family = GetPlayerFam(playerid);

							STRING_GLOBAL[0] = EOS;

							for(new i = 0; i < 5; i ++)
							{
								format(fmt_str, sizeof fmt_str, "%d. %s\n", i + 1, g_family_rank[family][i]);
								strcat(STRING_GLOBAL, fmt_str);
							}

							Dialog(playerid, DIALOG_FAMILY_RANKS_LIST, DIALOG_STYLE_LIST, "Список рангов", STRING_GLOBAL, "Далее", "Закрыть");
						}
				    }
			    }
			    else callcmd::fmenu(playerid);
			}
			case DIALOG_CHANGE_FAMILY_NAME:
			{
				if(response)
				{
					format(g_family[GetPlayerFam(playerid)][F_NAME], 32, "%s", inputtext);

					STRING_GLOBAL[0] = EOS;

					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `family` SET `fam_name` = '%s' WHERE `fam_id` = '%d'", inputtext, GetPlayerFam(playerid));
					mysql_tquery(mysql, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;

					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Название семьи было изменено на %s", inputtext);
					SendFamilyMessage(playerid, STRING_GLOBAL);

					foreach(new i: Player)
					{
						if(GetPlayerFam(i) != GetPlayerFam(playerid)) continue;

						STRING_GLOBAL[0] = EOS;

						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{%s}%s", g_family[GetPlayerFam(playerid)][F_COLOR], g_family[GetPlayerFam(playerid)][F_NAME]);
						UpdateDynamic3DTextLabelText(g_player[i][P_FAM_LABEL], -1, STRING_GLOBAL);
					}

				 	callcmd::fmenu(playerid);
				}
				else callcmd::fmenu(playerid);
			}
			case DIALOG_CHANGE_FAMILY_COLOR:
			{
				if(response)
				{
					format(g_family[GetPlayerFam(playerid)][F_COLOR], 7, "%s", family_colors[listitem + 1][FC_COLOR]);

					STRING_GLOBAL[0] = EOS;

					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `family` SET `fam_chat_color` = '%s' WHERE `fam_name` = '%s'", family_colors[listitem + 1][FC_COLOR], g_family[GetPlayerFam(playerid)][F_NAME]);
					mysql_tquery(mysql, STRING_GLOBAL);

					foreach(new i: Player)
					{
						if(GetPlayerFam(i) != GetPlayerFam(playerid)) continue;

						STRING_GLOBAL[0] = EOS;

						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{%s}%s", g_family[GetPlayerFam(playerid)][F_COLOR], g_family[GetPlayerFam(playerid)][F_NAME]);
						UpdateDynamic3DTextLabelText(g_player[i][P_FAM_LABEL], -1, STRING_GLOBAL);
					}
					callcmd::fmenu(playerid);

					SendClientMessage(playerid, 0xCECECEFF, "Вы успешно изменили цвет Вашей семьи");
				}
				else callcmd::fmenu(playerid);
			}
			case DIALOG_FAMILY_RANKS_LIST:
			{
				if(response)
				{
					set_rank_listitem[playerid] = listitem;

					Dialog
					(
						playerid, DIALOG_CHANGE_FAMILY_RANK, DIALOG_STYLE_INPUT,
						"Изменение ранга",
						"Введите в окно ниже новое название для выбранного Вами ранга",
						"Далее", "Закрыть"
					);
				}
				else callcmd::fmenu(playerid);
			}
			case DIALOG_CHANGE_FAMILY_RANK:
			{
				if(response)
				{
					if(strlen(inputtext) < 3 || strlen(inputtext) > 20)
					{
						SendClientMessage(playerid, 0xFF6600FF, "Вы ввели неверные значения");

						Dialog
						(
							playerid, DIALOG_CHANGE_FAMILY_RANK, DIALOG_STYLE_INPUT,
							"Изменение ранга",
							"Введите в окно ниже новое название для выбранного Вами ранга",
							"Далее", "Закрыть"
						);
					}

					new rank_listitem[7];

					switch(set_rank_listitem[playerid])
					{
						case 0: rank_listitem = "rang1";
						case 1: rank_listitem = "rang2";
						case 2: rank_listitem = "rang3";
						case 3: rank_listitem = "rang4";
						case 4: rank_listitem = "rang5";
					}

					new family = GetPlayerFam(playerid);

					format(g_family_rank[family][set_rank_listitem[playerid]], 20, "%s", inputtext);

					STRING_GLOBAL[0] = EOS;

					mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `family` SET `%s` = '%s' WHERE fam_id=%d", rank_listitem, inputtext, family);
					mysql_tquery(mysql, STRING_GLOBAL);

					SendClientMessage(playerid, 0xCECECEFF, "Вы успешно изменили название ранга для Вашей семьи.");

					callcmd::fmenu(playerid);
				}
				else callcmd::fmenu(playerid);
			}
			case DIALOG_CREATE_FAMILY:
			{
				if(!response) return 1;

				if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "Чтобы создать семью вам нужен уровень больше 2-го");

				if(GetPlayerFamRankEx(playerid) == 5)
					return SendClientMessage(playerid, 0xFF6600FF, "Вы уже являетесь лидером семьи");

				if(GetPlayerFam(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Вы уже состоите в семье");

				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					Dialog
					(
						playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
						"{FF6666}Создание семьи",
						"Для создания семьи, введите в окно ниже желаемое Вами название.",
						"Далее", "Закрыть"
					);
				}

				if(GetPlayerMoney(playerid) < 5_000_000) return SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно средств");

				GivePlayerMoneyEx(playerid, -5000000, "Создание семьи", true, true);

				TOTAL_FAMILY ++;

				SetPlayerData(playerid, P_FAM, TOTAL_FAMILY);

				UpdatePlayerDatabaseInt(playerid, "pfam", TOTAL_FAMILY);

				strmid(g_family[TOTAL_FAMILY][F_NAME], inputtext, 0, strlen(inputtext), 50);
		  		strmid(g_family[TOTAL_FAMILY][F_LEADER], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);

				STRING_GLOBAL[0] = EOS;

				new hour, minute, second,
					year, month, day;

				gettime(hour, minute, second);
				getdate(year, month, day);

				new msg[80];

				format(msg, sizeof msg, "%02d/%02d/%d в %02d:%02d", day, month, year, hour, minute);

				mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO family (fam_id, fam_name, fam_creator, fam_date) VALUES (%d, '%s', '%s', '%s')",
				TOTAL_FAMILY, inputtext, GetPlayerNameEx(playerid), msg);
				mysql_query(mysql, STRING_GLOBAL, false);

				SetPlayerData(playerid, P_FAMRANK, 5);
				UpdatePlayerDatabaseInt(playerid, "famrank", 5);

				format(g_family[GetPlayerFam(playerid)][F_DATE], 32, "%s", msg);

				for(new i; i < 5; i ++)
				{
					format(g_family_rank[GetPlayerFam(playerid)][i], 20, "Нет");
				}

				new fmt_text[128];

				format(fmt_text, sizeof fmt_text, "Вы успешно создали семью '%s'. Меню семьи - /fmenu", inputtext);
				SendClientMessage(playerid, -1, fmt_text);

				new query[200];

				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET fName='%e' WHERE id=%d LIMIT 1", g_family[GetPlayerFam(playerid)][F_NAME], GetPlayerAccountID(playerid));
    			mysql_query(mysql, query, false);


				if(!mysql_errno())
				{
					format(g_player[playerid][P_FAMNAME], 61, "%s", g_family[GetPlayerFam(playerid)][F_NAME]);
				}

				new text_str[144];
				format(g_family[GetPlayerFam(playerid)][F_COLOR], 7, "ffffff");
				format(text_str, 144, "{%s}%s %s", g_family[GetPlayerFam(playerid)][F_COLOR], g_family[GetPlayerFam(playerid)][F_NAME]);
				g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
			}
			case DIALOG_GIVE_FAMILY_RANG:
			{
			    if(response)
			    {
					new rank[44];

					new value = GetPVarInt(playerid, "edit_frang");

					switch(value)
					{
					    case 0: rank = "rank1";
					    case 1: rank = "rank2";
					    case 2: rank = "rank3";
					    case 3: rank = "rank4";
					    case 4: rank = "rank5";
					}

					new mes[100];
					format(mes, sizeof mes, "Вы установили ранг №%d игрока %s [%d]", listitem + 1, GetPlayerNameEx(value), value);
					SendClientMessage(playerid, 0xCECECEFF, mes);

					format(mes, sizeof mes, "%s [%d] установил Вам ранг №%d", GetPlayerNameEx(playerid), playerid, listitem + 1);
					SendClientMessage(value, 0xCECECEFF, mes);

					SetPlayerData(value, P_FAMRANK, listitem + 1);

		            new query_string[128];
		            format(query_string, sizeof query_string, "UPDATE `accounts` SET `famrank` = '%d' WHERE `id` = '%d' LIMIT 1", listitem + 1, GetPlayerAccountID(value));
		            mysql_query(mysql, query_string, false);
	            }
			}
			case DIALOG_CANCEL_FAMILY:
			{
			    if(response)
			    {
			        callcmd::fmenu(playerid);
			    }
			}
			case DIALOG_OSTANOVKA:
			{
			    if(response)
			    {
//					new fmt_str[128];

					new ost_id;
					//new Float: dist;

					ost_id = GetMapNearestOst(playerid);

					if(ost_id == -1)
					{
					    SendClientMessage(playerid, 0xFF6600FF, "На расстоянии 500 метров не найдено ни одной остановки.");
					    SendClientMessage(playerid, -1, "Попробуй поискать другие ближайшие остановки.");

					    return 1;
					}

					new Float: x = GetPVarFloat(playerid, "click_x");
				 	new Float: y = GetPVarFloat(playerid, "click_y");
				 	new Float: z = GetPVarFloat(playerid, "click_z");

					GetDistanceBetweenPoints(x, y, z, g_ostanovka[ost_id][OST_POS_X], g_ostanovka[ost_id][OST_POS_Y], g_ostanovka[ost_id][OST_POS_Z]);

					GivePlayerMoneyEx(playerid, -2500, "Поездка на автобусе", true, true);

					SendClientMessage(playerid, 0x6699FFFF, "Автобус приедет в течении нескольких минут. Пожалуйста, подождите..");

					SetTimerEx("OstanovkaStart", 10000, false, "i", playerid);
			    }
			    else SendClientMessage(playerid, 0xFF6600FF, "Вы отказались от поездки на автобусе");
			}
			case DIALOG_SELECT_OSTANOVKA:
			{
			    if(response)
			    {
				    new Float: X, Float: Y, Float: Z;

				    if(listitem == 0) return ShowPlayerOstanovkaDialog(playerid);
				    if(1 <= listitem <= 9)
				    {
						X = gps_public_places[listitem - 1][G_POS_X];
						Y = gps_public_places[listitem - 1][G_POS_Y];
						Z = gps_public_places[listitem - 1][G_POS_Z];
				    }

				    if(listitem == 10) return ShowPlayerOstanovkaDialog(playerid);
				    if(11 <= listitem <= 16)
				    {
						X = gps_transport[listitem - 11][G_POS_X];
						Y = gps_transport[listitem - 11][G_POS_Y];
						Z = gps_transport[listitem - 11][G_POS_Z];
				    }

				    if(listitem == 17) return ShowPlayerOstanovkaDialog(playerid);
				    if(18 <= listitem <= 23)
				    {
						X = gps_state_organizations[listitem - 18][G_POS_X];
						Y = gps_state_organizations[listitem - 18][G_POS_Y];
						Z = gps_state_organizations[listitem - 18][G_POS_Z];
				    }

				    if(listitem == 24) return ShowPlayerOstanovkaDialog(playerid);
				    if(25 <= listitem <= 27)
				    {
						X = gps_gangs[listitem - 25][G_POS_X];
						Y = gps_gangs[listitem - 25][G_POS_Y];
						Z = gps_gangs[listitem - 25][G_POS_Z];
				    }

				    if(listitem == 28) return ShowPlayerOstanovkaDialog(playerid);
				    if(29 <= listitem <= 36)
				    {
						X = gps_jobs[listitem - 29][G_POS_X];
						Y = gps_jobs[listitem - 29][G_POS_Y];
						Z = gps_jobs[listitem - 29][G_POS_Z];
				    }

				    if(listitem == 37) return ShowPlayerOstanovkaDialog(playerid);
				    if(38 <= listitem <= 39)
				    {
						X = gps_banks[listitem - 38][G_POS_X];
						Y = gps_banks[listitem - 38][G_POS_Y];
						Z = gps_banks[listitem - 38][G_POS_Z];
				    }

				    if(listitem == 40) return ShowPlayerOstanovkaDialog(playerid);
				    if(41 <= listitem <= 42)
				    {
						X = gps_entertainment[listitem - 41][G_POS_X];
						Y = gps_entertainment[listitem - 41][G_POS_Y];
						Z = gps_entertainment[listitem - 41][G_POS_Z];
				    }

			        SetPVarFloat(playerid, "click_x", X);
			        SetPVarFloat(playerid, "click_y", Y);
			        SetPVarFloat(playerid, "click_z", Z);

					Dialog(playerid, DIALOG_OSTANOVKA, DIALOG_STYLE_MSGBOX, "{"#cGold"}Поездка на автобусе", "{"#cW"}У Вас отмечена метка на карте\n\nСтоимость поездки на автобусе в любую точку области составляет: {"#cGold"}2500 рублей\n\n{"#cW"}Вы уверены, что хотите поехать на автобусе?\nВам придётся немного подождать его", "Поехали", "Отмена");
				}
			}
			case DIALOG_FAMILY_INFO_MEMBER:
			{
			    if(response)
			    {
					new acc_id = GetPlayerListitemValue(playerid, listitem);

					new query[100];
					new Cache: result, user_id, name[32], rank;

					mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", acc_id);
					result = mysql_query(mysql, query);

					if(cache_num_rows())
					user_id = cache_get_field_content_int(0, "id");
					cache_get_field_content(0, "name", name);
					rank = cache_get_field_content_int(0, "famrank");
					new fam = cache_get_field_content_int(0, "pfam");

					new fmt_text[200];

					SetPVarInt(playerid, "uninvite", user_id);

					cache_delete(result);

					format(fmt_text, sizeof fmt_text, "Имя: \t\t%s\n\nДолжность: \t%s [%d]\nСтатус: \t\t%s", name, g_family_rank[fam][rank - 1], rank, IsPlayerConnected(GetPlayerID(name)) ? "{33AA33}В сети" : "{FF5533}Не в сети");
					Dialog(playerid, DIALOG_CANCEL_FAMILY, DIALOG_STYLE_LIST, "Информация о члене семьи", fmt_text, "Назад", "");
			    }
			    else callcmd::fmenu(playerid);
			}
			case DIALOG_GIFT_PANEL:
			{
			    if(response)
			    {
			        switch(listitem + 1)
			        {
			            case 1:
			            {
			                callcmd::creategifts(playerid);
			            }
			            case 2:
			            {
			                callcmd::tpgifts(playerid);
			            }
			            case 3:
			            {
			                callcmd::deletegifts(playerid);
			            }
					}
			    }
			}
			case DIALOG_LOGS_ROULETTE:
			{
				if(response)
				{
					if(!strlen(inputtext))
					{
						return 1;
					}
					if(!(3 <= strlen(inputtext) <= 20))
						return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден");

					callcmd::a_roulette_prize(playerid, inputtext);
				}
			}
			case DIALOG_TP_GIFT:
			{
			    if(response)
			    {
     				new Float: pos_x = gifts_pos_after_purchase[0][listitem][0];
					new Float: pos_y = gifts_pos_after_purchase[0][listitem][1];
					new Float: pos_z = gifts_pos_after_purchase[0][listitem][2];

					SetPlayerPos(playerid, pos_x, pos_y, pos_z);

					SendClientMessage(playerid, 0xCECECEFF, "Вы успешно телепортировались к выбранному подарку.");
			    }
			}
			case DIALOG_TEMP_LEADER:
			{
			    if(!response) return 1;

				SetPlayerTeamEx(playerid, listitem + 1);
				SetPlayerData(playerid, P_JOB, 10);

				if(!GetPlayerSex(playerid))
					SetPlayerData(playerid, P_OSKIN, g_organization[listitem][O_SKINS][9]);
				else
					SetPlayerData(playerid, P_OSKIN, g_organization[listitem][O_WOMEN_SKIN]);

				SetPlayerColorEx(playerid, team_colors[listitem + 1]);

                ResetSkin(playerid);

				new fmt_msg[200];

				format(fmt_msg, sizeof fmt_msg, "Вы взяли временное лидерство организации \"%s\"", GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0xCECECEFF, fmt_msg);

				format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] взял временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));
				SendMessageToAdmins(fmt_msg, COLOR_GREY);
			}
			//=====================================
			case DIALOG_PLAYER_CMDS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							if(response)
							{
								Dialog
								(
									playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
									"Общие команды",
									"/menu - меню персонажа\n"\
									"/gps - навигатор\n"\
									"/help - помощь по серверу\n"\
									"/leaders - список лидеров онлайн\n"\
									"/buy - купить что-то\n"\
									"/leave - покинуть организацию/работу\n"\
									"/healme - использовать аптечку\n"\
									"/pay - передать деньги\n"\
									"/lic - показать лицензии\n"\
									"/liclist - лицензеры онлайн\n"\
									"/adlist - адвокаты онлайн\n"\
									"/play - онлайн радио\n"\
									"/anim - список анимаций\n"\
									"/yes - согласиться\n"\
									"/no - отказаться\n"\
									"/cancel - отменить\n"\
									"/setspawn - установить место спавна\n"\
									"/skill - показать навыки\n"\
									"/eject - выкинуть из транспорта\n"\
									"/pass - показать паспорт\n"\
									"/showmc - показать мед. карту\n"\
									"/togphone - отключить / включить телефон\n"\
									"/book - записная книжка\n"\
									"/wbook - трудовая книжка\n"\
									"/kiss - поцеловаться\n"\
									"/market - продать оленя\n"\
									"/masturbation - мастурбировать\n"\
									"/alist - действующие наказания\n"\
									"/inv - инвентарь\n"\
									"/vacancy - доступные собеседования\n"\
									"/add - добавить номер телефона",
									"Назад", "Закрыть"
								);
							}
							return 1;
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Общение",
								"/call - позвонить\n"\
								"/sms - написать сообщение\n"\
								"/p - ответить на звонок\n"\
								"/h - завершить звонок\n"\
								"/r - рация гос.организаций\n"\
								"/d - рация гос.депортамента\n"\
								"/f - рация крим.огранизаций\n"\
								"/me - отыгровка действий от 1-го лица\n"\
								"/do - отыгровка действий от 3-го лица\n"\
								"/try - вероятность события\n"\
								"/s - крикнуть\n"\
								"/w - шептать\n"\
								"/ad - подать объявление\n"\
								"/gnews - гос.волна\n"\
								"/n - нон-РП чат",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Дома и транспорт",
								"Дом:\n\n"\
								"/home - управление домом\n"\
								"/sellhome - продать дом государству\n"\
								"/sellmyhome - продать дом игроку\n"\
								"/exit - выйти из дома\n"\
								"/makestore - установить шкаф\n"\
								"/use - использовать шкаф\n"\
								"/live - прописать игрока к себе\n"\
								"/liveout - выселиться из гостей\n"\
								"/homelock - открыть / закрыть дом\n\n"\
								"Транспорт:\n\n"\
								"/car - управление транпортом\n"\
								"/sellmycar - продать транспорт игроку\n"\
								"/getmycar - отметить транспорт в навигаторе\n"\
								"/lock - открыть / закрыть транспорт\n"\
								"/b - управление капотом / багажником",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Бизнес и АЗС",
								"/business - управление бизнесом\n"\
								"/buybiz - купить бизнес\n"\
								"/sellbiz - продать бизнес государству\n"\
								"/sellmybiz - продать бизнес игроку\n"\
								"/bizmusic - установить музыку при входе(для бизнеса)\n"\
								"/manager - назначить менеджера\n"\
								"/fuelst - управление АЗС\n"\
								"/buyfuelst - купить АЗС\n"\
								"/sellfuelst - продать АЗС государству\n"\
								"/sellmyfuelst - продать АЗС игроку",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Работы",
								"Основные:\n\n"\
								"/jlock - открыть / закрыть рабочий транспорт\n\n"\
								"Развозчик:\n\n"\
								"/buyprod - закупить продукты\n"\
								"/buyf - закупить топливо\n"\
								"/bizlist - список бизнесов\n"\
								"/fuellist - список АЗС\n\n"\
								"Автомеханик:\n\n"\
								"/getfuel - купить топливо\n"\
								"/fill - заправить игрока\n"\
								"/repair - починить игрока",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 6:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Банды и мафии",
								"/makegun - изготовить оружие:\n"\
								"/sellgun - продать оружие\n"\
								"/selldrugs - продать наркотики\n"\
								"/capture - начать захват территории\n"\
								"/sellzone - продать территорию\n"\
								"/drugs - употребить наркотики\n"\
								"/close - открыть / закрыть склад",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 7:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Правительство",
								"/smenu - меню советника\n"\
								"/debtorlist - список должников\n"\
								"/debtorsell - продать имущество\n"\
								"/fuellist - список АЗС\n"\
								"/givelic - продать лицензии\n"\
								"/free - выпустить из КПЗ",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 8:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"ППС / ДПС",
								"/search - обыскать игрока\n"\
								"/clear - изъять вещи\n"\
								"/cuff - надеть наручники\n"\
								"/uncuff - снять наручники\n"\
								"/arrest - посадить игрока\n"\
								"/su - объявить в розыск\n"\
								"/m - громкоговоритель\n"\
								"/ticket - выдать штраф\n"\
								"/takelic - изъять лицензии\n"\
								"/wanted - список разыскиваемых\n"\
								"/setmark - показать нарушителя в навигаторе\n"\
								"/break - установить ограждение\n"\
								"/radar - установить / удалить радар\n"\
								"/putpl - посадить нарушителя в машину",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 9:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Армия",
								"/makegun - изготовить оружие\n"\
								"/vb - выдать военный билет\n"\
								"/takem - надеть наручники\n"\
								"/putm - снять наручники",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 10:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Больница",
								"/heal - вылечить игрока (в мед.машине)\n"\
								"/medhelp - выписать игрока из больницы\n"\
								"/givemc - выдать мед. карту\n"\
								"/givemc_stat - установить штамп в мед. карте\n"\
								"/changesex - изменить пол игроку",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 11:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"ТВ и радио",
								"/efir - управление эфиром\n"\
								"/edit - редактировать объявления\n"\
								"/t - сказать что-то в чат радио",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 12:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Лидерам",
                                "/lmenu - меню лидера\n"\
                                "/vacancy - добавить / удалить вакансию\n"\
								"/invite - принять игрока\n"\
								"/uninvite - уволить игрока\n"\
								"/rang - повысить / понизить игрока\n"\
								"/changeskin - выдать скин игроку\n"\
								"/blist - черный список организации\n"\
								"/showall - список всех членов фракции\n"\
								"/find - список членов огранизации онлайн\n"\
								"/fwarn - выдать выговор игроку\n"\
								"/unfwarn - снять выговор игроку",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 13:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Семья",
								"/finvite - принять игрока\n"\
								"/funinvite - уволить игрока\n"\
								"/frang - повысить / понизить игрока\n"\
								"/fm - чат семьи\n"\
								"/family - меню семьи",
								"Назад", "Закрыть"
							);
							return 1;
						}
						case 14:
						{
							Dialog
							(
								playerid, DIALOG_CMDS, DIALOG_STYLE_MSGBOX,
								"Команды мультиплеера",
								"/headmove - включить / выключить поворот головы\n"\
								"/timestamp - включить / выключить время в чате\n"\
								"/pagesize - изменить количество строк в чате\n"\
								"/quit - выйти из игры\n"\
								"/fpslimit - ограничитель количества кадров в секунду\n"\
								"/dl - информация о ближайших авто в виде 3D текста",
								"Назад", "Закрыть"
							);
							return 1;
						}
						default:
							return 1;
					}
					ShowPlayerCMDSDialog(playerid);
				}
				else callcmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_SETTINGS:
			{
				if(response)
				{
					new E_PLAYER_SETTINGS_STRUCT: setting_id = E_PLAYER_SETTINGS_STRUCT: listitem;
					if(S_CHAT_TYPE <= setting_id <= S_VEH_CONTROL)
					{
						new setting_type = GetPlayerSettingData(playerid, setting_id);

						switch(setting_id)
						{
							case S_CHAT_TYPE:
							{
								if(!(SETTING_CHAT_OFF <= ++setting_type <= SETTING_CHAT_ADVANCE))
								{
									setting_type = SETTING_CHAT_OFF;
								}
							}
							case S_TEAM_CHAT..S_VEH_CONTROL:
							{
								setting_type ^= SETTING_TYPE_ON;
							}
						}
						if(setting_id == S_PLAYERS_NICK)
						{
							foreach(new idx : Player)
								ShowPlayerNameTagForPlayer(playerid, idx, setting_type);
						}

						SetPlayerSettingData(playerid, setting_id, setting_type);
						SetPlayerChatInit(playerid);

						ShowPlayerSettings(playerid);
					}
					else
					{
						new query[128];

						format
						(
							query, sizeof query,
							"UPDATE accounts SET "\
							"setting1=%d,"\
							"setting2=%d,"\
							"setting4=%d,"\
							"setting5=%d,"\
							"setting6=%d"\
							" WHERE id=%d LIMIT 1",
							GetPlayerSettingData(playerid, S_CHAT_TYPE),
							GetPlayerSettingData(playerid, S_TEAM_CHAT),
							GetPlayerSettingData(playerid, S_NICK_IN_CHAT),
							GetPlayerSettingData(playerid, S_ID_IN_CHAT),
							GetPlayerSettingData(playerid, S_VEH_CONTROL),
							GetPlayerAccountID(playerid)
						);
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Сохранено",
								"{FFFFFF}Новые настройки будут автоматически устанавливаться после каждой авторизации",
								"Ок", ""
							);
						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 02)");
							ShowPlayerSettings(playerid);
						}
					}
				}
				else callcmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_SECURITY_SETTINGS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Информация о настройках",
								"{FFFFFF}Тут Вы можете изменить настройки безопасности вашего аккаунта. Это\n"\
								"поможет защитить его от взлома.\n\n"\
								"Существуют 3 вида защиты: с использованием мобильного приложения\n"\
								"{6699FF}Google Authenticator{FFFFFF}, системы 'Случайный код' или номера мобильного\n"\
								"телефона. Если Вы включите защиту, то при авторизации, помимо\n"\
								"пароля, будет запрашиваться ввод кода или части номера телефона\n"\
								"(в зависимости от ваших настроек). Подробнее Вы можете узнать, выбрав\n"\
								"нужный пункт в меню безопасности.\n\n"\
								"Система будет запрашивать ввод только если Ваш IP адрес или подсеть\n"\
								"(первые 2 цифры IP адреса) игрока не совпадают с теми, которые были\n"\
								"записаны при успешном входе в игру. Другими словами, система\n"\
								"выдаст запрос, если под Вашим аккаунтом попытаются зайти с другого\n"\
								"компьютера.",
								"Назад", ""
							);
						}
						case 2:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0)
							{
								// установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PHONE, DIALOG_STYLE_LIST,
									"{FFCD00}При авторизации запрашивать мобильный...",
									"Не запрашивать\n"\
									"Если подсеть не совпадает с моей\n"\
									"Если IP не совпадает с моим",
									"Сохранить", "Назад"
								);
							}
							else
							{
								// не установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Мобильный телефон",
									"{FFFFFF}В данный момент мы проводим обновление этой системы безопасности.\n"\
									"Приносим свои извинения за временные неудобства.",
									"Назад", ""
								);
							}

						}
						case 3:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0)
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN, DIALOG_STYLE_LIST,
									"{FFCD00}При авторизации запрашивать случайный PIN-код...",
									"Не запрашивать\n"\
									"Если подсеть не совпадает с моей\n"\
									"Если IP не совпадает с моим",
									"Сохранить", "Назад"
								);
							}
							else
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Случайный PIN-код",
									"{FFFFFF}Для продолжения, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Эта система безопасности поможет защитить Ваш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.  Кнопки всегда располагаются в случайном порядке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"Далее", "Назад"
								);
							}
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_PASS_1, DIALOG_STYLE_INPUT,
								"{FFCD00}Изменение пароля",
								"{FFFFFF}Введите Ваш текущий пароль в поле ниже:",
								"Далее", "Назад"
							);
						}
						case 5:
						{
							if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true))
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Случайный PIN-код",
									"{FFFFFF}Для продолжения, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Эта система безопасности поможет защитить Ваш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.  Кнопки всегда располагаются в случайном порядке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"Далее", "Назад"
								);
							}
							else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHECK);
						}
						case 6:
						{
							// 7. Статус безопасности
							static const
								setting_status_name[3][64] =
							{
								"{CC9900}Не запрашивается",
								"{3399FF}Запрашивается при несовпадении подсети",
								"{009900}Запрашивается при несовпадении IP"
							};

							new fmt_str[364];
							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}Тут Вы можете увидеть статус всех Ваших настроек безопасности.\n"\
								"Для их изменения, выберите нужный пункт в меню настроек\n\n"\
								"Мобильный телефон:\t\t%s\n"\
								"{FFFFFF}Случайный PIN-код:\t\t%s\n"\
								"{FFFFFF}Google Authenticator:\t\t{CC9900}Не запрашивается",
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PHONE)],
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PIN)]
							);
							Dialog(playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Статус безопасности", fmt_str, "Назад", "");
						}
						case 7:
						{
							if(GetPlayerData(playerid, P_CONFIRM_EMAIL))
								return SendClientMessage(playerid, 0xFFFFFFFF, "Ваш Email-адрес уже подтвержден");

							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_EMAIL, DIALOG_STYLE_MSGBOX,
								"{6699FF}Подтверждение Email",
								"{FFFFFF}При регистрации на сервере на Вашу почту мы выслали ссылку для\n"\
								"подтверждения Email. Она действительна в течение 14 дней.\n"\
								"Пожалуйста, проверьте почту и подтвердите ее.\n\n"\
								"В случае, если вы не получили наше письмо, нажмите кнопку \"Повтор\".\n"\
								"Мы отправим Вам новую ссылку.",
								"Закрыть", "Повтор"
							);
						}
						default:
							return 1;
					}
				}
				else callcmd::menu(playerid, "");
			}
			case DIALOG_SECURITY_SETTING_INFO:
			{
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true)) return 1;

				if(response)
				{
					if(0 <= listitem <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PHONE, listitem);

						format(query, sizeof query, "UPDATE accounts SET request_phone=%d WHERE id=%d LIMIT 1", listitem, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {00FFCC}сохранены");
							switch(listitem + 1)
							{
								case 1: SendClientMessage(playerid, 0xFF6600FF, "Запрос на ввод мобильного телефона отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "Ваш мобильный телефон будет запрашиваться при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x66CC00FF, "Мобильный телефон будет запрашиваться при несовпадении IP адресов");
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE_S:
			{
				// установить телефон
				if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0) return 1;
			}
			case DIALOG_SECURITY_SETTING_PIN:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true)) return 1;

				if(response)
				{
					if(0 <= listitem <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PIN, listitem);

						format(query, sizeof query, "UPDATE accounts SET request_pin=%d WHERE id=%d LIMIT 1", listitem, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {00FFCC}сохранены");
							switch(listitem + 1)
							{
								case 1: SendClientMessage(playerid, 0xFF6600FF, "Запрос случайного PIN-кода отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "Ваш случайный PIN-код будет запрашиваться при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x66CC00FF, "Случайный PIN-код будет запрашиваться при несовпадении IP адресов");
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PIN_SET:
			{
				// установить пин код
				if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0) return 1;

				if(response)
				{
					ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_SET);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_1:
			{
				if(response)
				{
					if
					(
						strlen(inputtext)
						&& !strcmp(inputtext, GetPlayerData(playerid, P_PASSWORD), false)
					)
					{
						Dialog
						(
							playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
							"{FFCD00}Новый пароль",
							"{FFFFFF}Введите новый пароль в поле ниже:",
							"Изменить", "Отмена"
						);
						return 1;
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Вы ввели неверный пароль");
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_2:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
					{
						SendClientMessage(playerid, 0xFF6600FF, "Длина пароля должна быть от 6 до 15 символов");
						SendClientMessage(playerid, 0xFF6600FF, "Также не допускается использование пробелов");
					}
					else
					{
						new query[100];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET password='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							format(g_player[playerid][P_PASSWORD], 16, "%s", inputtext);
							format(query, sizeof query, "Ваш новый пароль: {3399FF}%s", GetPlayerData(playerid, P_PASSWORD));

							SendClientMessage(playerid, 0xFFFF00FF, query);
							SendClientMessage(playerid, 0xFFFFFFFF, "Рекомендуем сделать скрин {00CC00}(клавиша F8) {FFFFFF}чтобы не забыть его");

							ShowPlayerSecuritySettings(playerid);
							SetPlayerData(playerid, P_LASTPAS, 1);
							UpdatePlayerDatabaseInt(playerid, "plastpass", 1);
							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");
					}

					Dialog
					(
						playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
						"{FFCD00}Новый пароль",
						"{FFFFFF}Введите новый пароль в поле ниже:",
						"Изменить", "Отмена"
					);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_EMAIL:
			{
				if(!response)
				{
					// отправка кода на почту
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Письмо отправлено",
						"{FFFFFF}В течение нескольких минут на Вашу почту придет письмо с новой ссылкой.\n"\
						"Перейдите по ней для подтверждения Email.",
						"Закрыть", ""
					);
				}
			}
			case DIALOG_ADMIN_FLY:
			{
				if(!response) return 1;

				switch(listitem)
				{
					case 0:
					{
		   		   		new inter, world, Float:X, Float:Y, Float:Z, Float:FA;
		                GetPlayerPos(playerid, X, Y, Z);
		                GetPlayerFacingAngle(playerid, FA);
		                inter = GetPlayerInterior(playerid);
		                world = GetPlayerVirtualWorld(playerid);
		                SetPVarFloat(playerid, "SpecX", X);
		                SetPVarFloat(playerid, "SpecY", Y);
		                SetPVarFloat(playerid, "SpecZ", Z);
		                SetPVarFloat(playerid, "SpecFA", FA);
		                SetPVarInt(playerid, "SpecInt", inter);
		                SetPVarInt(playerid, "SpecWorld", world);

		                if(GetPlayerData(playerid, P_SKIN) > 0) SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));

                        DeletePVar(playerid, "FlyMode");
                        CancelEdit(playerid);
                        TogglePlayerSpectating(playerid, false);

                        DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
                        noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
                        SetPlayerSpawnInit(playerid);
                        SpawnPlayer(playerid);
                        SetPlayerPos(playerid, X, Y, Z);
                        SetPlayerFacingAngle(playerid, FA);
                        SetPlayerVirtualWorld(playerid, world);
                        SetPlayerInterior(playerid, inter);
					}
					case 1:
					{
						new inter = GetPVarInt(playerid, "SpecInt");
						DeletePVar(playerid, "SpecX");
						DeletePVar(playerid, "SpecY");
						DeletePVar(playerid, "SpecZ");
						DeletePVar(playerid, "SpecFA");
						DeletePVar(playerid, "SpecInt");
						DeletePVar(playerid, "SpecWorld");
						SetPlayerInterior(playerid, inter);
						SetPlayerScore(playerid, GetPlayerLevel(playerid));
						if(GetPlayerSuspect(playerid) > 0) SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
						if(GetPlayerData(playerid, P_SKIN) > 0) SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
						DeletePVar(playerid, "FlyMode");
						CancelEdit(playerid);
						TogglePlayerSpectating(playerid, false);

						DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
						noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
						SetPlayerSpawnInit(playerid);
						SpawnPlayer(playerid);
					}
				}
			}
			case DIALOG_PLAYER_DUTY:
			{
			    if(response)
			    {
			        switch(GetPlayerData(playerid, P_DUTY))
			        {
			            case true:
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы переоделись в гражданскую одежду");
							SetPlayerData(playerid, P_DUTY, false);
							SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
							SetPlayerColor(playerid, 0xFFFFFF11);
						}
			            case false:
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы переоделись в служебную форму");
							SetPlayerData(playerid, P_DUTY, true);
							SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
							SetPlayerColor(playerid, team_colors[GetPlayerTeamEx(playerid)]);
						}
			        }
			    }
			}
			case DIALOG_PLAYER_FARMING:
			{
				if(response)
				{
				    switch(listitem + 1)
				    {
						case 1:
						{
						    if(GetPlayerData(playerid, P_WHEAT) == 0)
						    {
						        Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6666}Продажа пшеницы", "У Вас нет пшеницы!", "Закрыть", "");

						        return 1;
						    }
						    new str[144];

						    format(str, sizeof str, "Введите количество {79cb64}пшеницы, которое хотите продать управляющему.\n\n{79cb64}У Вас %d шт пшеницы", GetPlayerData(playerid, P_WHEAT));

							Dialog(playerid, DIALOG_SELL_WHEAT, DIALOG_STYLE_INPUT, "{79cb64}Продажа пшеницы", str, "Ввести", "Закрыть");
						}
						case 2:
						{
						    if(GetPVarInt(playerid, "wheat_tools") > 0)
						    {
						        Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6666}Покупка инструмента", "У Вас уже есть инструмент для сбора пшеницы!", "Закрыть", "");

						        return 1;
						    }
							if(GetPlayerMoney(playerid) < 5000)
							{
						        Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6666}Покупка инструмента", "У Вас недостаточно средств для покупки инструмента!", "Закрыть", "");

						        return 1;
							}

							Dialog(playerid, DIALOG_WHEAT_TOOLS, DIALOG_STYLE_MSGBOX, "{79cb64}Покупка инструмента", "Вы действительно хотите приобрести \"{33aa33}Инструмент для сборка пшеницы\" за {33aa33}5000 рублей?", "Далее", "Отмена");
						}
					}
				}
			}
			case DIALOG_SELL_WHEAT:
			{
			    if(response)
			    {
			        new wheat = strval(inputtext);

			        if(!strval(inputtext))
			        {
			    		new str[144];

						format(str, sizeof str, "Введите количество {79cb64}пшеницы, которое хотите продать управляющему.\n\n{79cb64}У Вас %d шт пшеницы", GetPlayerData(playerid, P_WHEAT));
						Dialog(playerid, DIALOG_SELL_WHEAT, DIALOG_STYLE_INPUT, "{79cb64}Продажа пшеницы", str, "Ввести", "Закрыть");
			        }

			        if(GetPlayerData(playerid, P_WHEAT) < wheat)
					{
     					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6666}Продажа пшеницы", "У Вас нет такого количества пшеницы!", "Закрыть", "");

						return 1;
					}

					new price = (wheat * 2000) * g_doubling[2];

					GivePlayerMoneyEx(playerid, price, "ферма пшеница", true, true);
					AddPlayerData(playerid, P_WHEAT, -, wheat);

					SendClientMessage(playerid, 0x33AA33FF, "Вы успешно продали указанное количество пшеницы");
			    }
			}
			case DIALOG_WHEAT_TOOLS:
			{
				SetPVarInt(playerid, "wheat_tools", 1);

				//SetPlayerAttachedObject(playerid, 6, 18890, 6, 0.299999, 0.099999, 0.0, 0.0, -83.00, 0.0, 1.0, 1.0, 1.0);

				SetPlayerAttachedObject(playerid, 6, 18890, 6, 0.0, 0.0, 0.0, 0.0, 0.00, -180.00, 1.0, 1.0, 1.0);

				SendClientMessage(playerid, 0x33AA33FF, "Вы успешно приобрели инструмент для сборка пшеницы");

				GivePlayerMoneyEx(playerid, -5000, "ферма", true, true);

				SendClientMessage(playerid, 0xCECECEFF, "Чтобы выбросить вещи, используйте команду: /reset");
			}
			case DIALOG_PUT_ITEM:
			{
			    if(response)
			    {
			        new value = strval(inputtext);

       				if(!strval(inputtext))
			        {
			            SendClientMessage(playerid, 0xFF6666FF, "Вы ввели неверное количество");
			            return 1;
			        }

			        new id = GetPVarInt(playerid, "item_id");
			        DeletePVar(playerid, "item_id");

			        new query[200],
			            Cache: result,
			            rows,
						item;

					mysql_format(mysql, query, sizeof query, "SELECT %s FROM accounts WHERE id='%d'", items_name[id][data_name], GetPlayerAccountID(playerid));
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
		   				item = cache_get_row_int(0, 0);
					}
					cache_delete(result);

					if(value < 1) return SendClientMessage(playerid, 0xFF6666FF, "Вы ввели неверное количество");
            		if(value > item)
			        {
			            new message[144];
			            format(message, sizeof message, "У Вас нет такого количества \"%s\"", items_name[id][itemname]);
			            SendClientMessage(playerid, 0xFF6666FF, message);

			            return 1;
			        }

					new idobject = -1;
					for(new i; i < MAX_ITEM; i++)
					{
						if(item_obj[i] == -1)
						{
							idobject = i;
							break;
						}
					}
					if(idobject == -1)
					{
						for(new i; i < MAX_ITEM; i++)
						{
							idobject = i;
						}
					}

			        UpdatePlayerDatabaseInt(playerid, items_name[id][data_name], item - value);

					new Float: x, Float: y, Float: z, Float: eagle;
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFAngle(playerid, eagle);

					item_obj[idobject] = CreateDynamicObject(items_name[id][item_object], x, y, z-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));

					new name[144];
					format(name, sizeof name, "- %s -\nКоличество: %d %s.\nПоднять: /take", items_name[id][itemname], value, items_name[id][item_value_name]);

					new Float: label_x, Float: label_y, Float: label_z;

					GetDynamicObjectPos(item_obj[idobject], label_x, label_y, label_z);

					item_label[idobject] = CreateDynamic3DTextLabel(name, 0xCECECEFF, label_x - 0.1, label_y - 0.1, label_z + 0.35, 5.0);
					items_id[idobject] = id;
					item_value[idobject] = value;

					if(listitem == 0)
					{
					    GivePlayerMoneyEx(playerid, -value, "put_money", true, true);
					}
					else
					{
						LoadPlayerItem(playerid);
					}
				}
			}
			case DIALOG_TAKE_ITEM:
			{
			    if(response)
			    {
           			new Float:x, Float:y, Float:z;

					for(new i; i < MAX_ITEM; i++)
					{
						if(item_obj[i] != -1)
						{
							GetDynamicObjectPos(item_obj[i], x, y, z);
							if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
							{
       							new query[200],
						           // Cache: result,
						            rows,
									item;

								new id = items_id[i];

								mysql_format(mysql, query, sizeof query, "SELECT %s FROM accounts WHERE id='%d'", items_name[id][data_name], GetPlayerAccountID(playerid));
								mysql_query(mysql, query, true);

								rows = cache_num_rows();

								if(rows)
								{
					   				item = cache_get_row_int(0, 0);
								}

							    new string[300];
								DestroyDynamicObject(item_obj[i]);
								DestroyDynamic3DTextLabel(item_label[i]);

								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);

								UpdatePlayerDatabaseInt(playerid, items_name[id][data_name], item + item_value[i]);

								LoadPlayerItem(playerid);

								format(string, sizeof(string), "Вы подобрали предмет: %s[%d]", items_name[id][itemname], item_value[i]);

								SendClientMessage(playerid, 0xCECECEFF, string);
								format(string,sizeof(string), "Подобрал предмет");
								SetPlayerChatBubble(playerid, string, 0x3399FFFF, 10.0, 5000);

								item_value[i] = -1;
								items_id[i] = -1;
								return 1;
							}
						}
					}
			    }
			}
			case DIALOG_REPORT_1:
			{
   				if(!response) return 1;

  			  	format(report_message[playerid], sizeof report_message, "%s", inputtext);

		    	Dialog(playerid, DIALOG_REPORT_2, DIALOG_STYLE_LIST, "Выберите действие", "1. Жалоба на игрока\n2. Задать вопрос", "Далее", "Закрыть");
			}
	    	case DIALOG_GOTO_GPS:
        	{
        	    if(response)
        	    {
        	        TeleportPlayerGPS(playerid, GetPVarFloat(playerid, "goto_x"), GetPVarFloat(playerid, "goto_y"), GetPVarFloat(playerid, "goto_z"));

        	        DeletePVar(playerid, "goto_x");
                    DeletePVar(playerid, "goto_y");
                    DeletePVar(playerid, "goto_z");
				}
        	}
			case DIALOG_REPORT_2:
			{
			    if(!response) return 1;

				if(IsPlayerRMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас заблокирован доступ к репорту. Время до разблокировки: /time");

				if(strlen(report_message[playerid]) < 3)
				{
				    SendClientMessage(playerid, 0xFF6600FF, "Слишком короткий запрос");
				    return 1;
				}
				if(strlen(report_message[playerid]) > 180)
				{
				    SendClientMessage(playerid, 0xFF6600FF, "Слишком длинный запрос");
				    return 1;
				}
				if(strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1)
				{
					return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
				}

				new mes[228];

				switch(listitem + 1)
				{
				    case 1:
				    {
						format(mes,sizeof(mes),"{00FF17}Жалоба от %s [%d]:{E9DB00} %s", GetPlayerNameEx(playerid), playerid, report_message[playerid]);
						SendMessageToAdmins(mes, -1);

						format(mes,sizeof(mes),"Текст жалобы: %s", report_message[playerid]);

						SendClientMessage(playerid, -1, "Ваша жалоба была успешно отправлена. Ожидайте действий администратора");
						SendClientMessage(playerid, -1, mes);
				    }
				    case 2:
				    {
						format(mes,sizeof(mes),"{00FF17}Вопрос от %s [%d]:{E9DB00} %s", GetPlayerNameEx(playerid), playerid, report_message[playerid]);
						SendMessageToAdmins(mes, -1);

						format(mes,sizeof(mes),"Текст вопроса: %s", report_message[playerid]);

						SendClientMessage(playerid, -1, "Ваш вопрос был успешно отправлен. Ожидайте ответа");
						SendClientMessage(playerid, -1, mes);
				    }
			    }
			    SetPVarInt(playerid, "antifloodrep", gettime() + 15);
			}
			case DIALOG_REPORT:
			{
				if(response)
				{
   					if(IsPlayerMuted(playerid))
					return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");
					if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Писать в репорт можно раз в 20 секунд!");
					new len = strlen(inputtext);
					if(1 <= len <= 80)
					{
						new fmt_str[128];

						format(fmt_str, sizeof fmt_str, "%s[%d] : {FFCD00}%s", GetPlayerNameEx(playerid), playerid, inputtext);
						SendMessageToAdmins(fmt_str, 0x66CC00FF);

						if(GetPlayerAdminEx(playerid) < 1)
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						SendClientMessage(playerid, 0xFFFFFFFF, "Ваше сообщение отправлено");
						SetPlayerData(playerid, P_ANTIBAN, 1);
						SetTimerEx("AntiBan", 20000, false, "i", playerid);

						format(fmt_str, sizeof fmt_str, "%s", inputtext);

						SendLog(playerid, LOG_TYPE_REPORT, fmt_str);

						return 1;
					}
					else if(len > 80)
					{
						SendClientMessage(playerid, 0x999999FF, "Слишком длинное сообщение");
					}
					ShowPlayerReportDialog(playerid);
				}
				else callcmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_IMPROVEMENTS:
			{
				if(response)
				{
					new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);

					if(0 <= listitem <= sizeof(g_player_improvements)-1)
					{
						new i_level = GetPlayerImprovementInfo(listitem, I_LEVEL);
						new i_price = GetPlayerImprovementInfo(listitem, I_PRICE);

						if(my_i_level < listitem)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Это улучшение пока не доступно");
						}
						else if(my_i_level > listitem)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили это улучшение");
						}
						else if(GetPlayerLevel(playerid) < i_level || GetPlayerMoneyEx(playerid) < i_price)
						{
							new fmt_str[64 + 1];

							format(fmt_str, sizeof fmt_str, "Для покупки этого улучшения необходим %d уровень и %d рублей", i_level, i_price);
							SendClientMessage(playerid, 0x999999FF, fmt_str);
						}
						else
						{
							new fmt_str[85];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,improvements=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - i_price, my_i_level + 1, GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшения аккаунта", false);

								AddPlayerData(playerid, P_IMPROVEMENTS, +, 1);

								format(fmt_str, sizeof fmt_str, "Вы приобрели улучшение {FFCD00}\"%s\"", GetPlayerImprovementInfo(listitem, I_NAME));
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);

								switch(listitem + 1)
								{
									case 1:
										SendClientMessage(playerid, 0xCECECEFF, "Полоска здоровья будет уменьшаться значительно медленнее");

									case 2:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете покидать организацию по собственному желанию {33FF33}(/leave)");

									case 3:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете носить с собой в 2 раза больше металла, патронов и наркотиков");

									case 4:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете не бояться небольших аварий, двигатель не заглохнет");

									case 5:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Ваше оружие будет сохраняться в полном объеме при выходе из игры");
								}
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 06)");
								ShowPlayerImprovementsDialog(playerid);
							}
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{0099CC}Информация",
							"{FFFFFF}1. Выносливость позволит находиться в хорошей форме длительное\n"\
							"время. Полоска здоровья будет уменьшаться медленнее.\n\n"\
							"2. Решительность позволит вам самостоятельно принять решение об\n"\
							"увольнении с организации (команда /leave). Без решительности вы не\n"\
							"сможете покинуть организацию по собственному желанию.\n\n"\
							"3. Рюкзак даст возможность переносить с собой металл, патроны и\n"\
							"наркотики в гораздо большем количестве.\n\n"\
							"4. Став мастером вождения, двигатель транспорта под Вашим управлением\n"\
							"больше не будет глохнуть при различных ударах.\n\n"\
							"5. Полная экипировка сохраняет все ваше оружие в полном объеме,\n"\
							"при выходе из игры.",
							"Закрыть", ""
						);
					}
				}
				else callcmd::menu(playerid, "");
			}
			case DIALOG_CHANGE_NAME:
			{
				if(response)
				{
					if(!GetPVarInt(playerid, "change_name_status"))
					{
						new len = strlen(inputtext);
						if(4 <= len <= 20)
						{
							new bool: valid_name = true;
							for(new idx; idx < len; idx ++)
							{
								switch(inputtext[idx])
								{
									case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
									default:
										valid_name = false;
								}
							}

							if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
							{
								SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
							}
							else if(valid_name)
							{
								new query[128];
								new Cache: result, rows;

								mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query, true);

								rows = cache_num_rows();
								cache_delete(result);

								if(!rows)
								{
									SetPVarInt(playerid, "change_name_status", 1);
									SetPVarString(playerid, "change_name", inputtext);

									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FFCD00}Заявка на изменение имени",
										"{FFFFFF}Ваша просьба об изменении ника отправлена администрации.\n"\
										"Вы получите сообщение, как только заявка будет обработана.\n\n"\
										"Если в течении нескольких минут Ваше имя не было изменено,\n"\
										"то, скорее всего, оно не соответствует RP правилам,\n"\
										"либо Вы уже используете RP имя.",
										"Ок", ""
									);

									format(query, sizeof query, "[Смена non rp имени] %s >> %s {FFCD00}| /okay %d для одобрения" , GetPlayerNameEx(playerid), inputtext, playerid);
									SendMessageToAdmins(query, 0x66CC99FF);

								}
								else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");

							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы уже подавали заявку на изменение имени");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_GPS:
			{
				if(response)
				{
				    new fmt_text[600];
					switch(listitem + 1)
					{
						case 1:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. Автошкола\n\
								2. Военкомат\n\
								3. Автосалон 'Низкий'\n\
								4. Автосалон 'Средний'\n\
								5. Автосалон 'Высокий'\n\
								6. Салон воздушного транспорта\n\
								7. Салон водного транспорта\n\
								8. Мото-Вело рынок\n\
								9. Церковь\n\
								10. Стадион\n\
								11. Рынок одежды\n\
								12. Магазин оружия 'Гарель'\n\
								13. Магазин оружия 'Южный'\n\
								14. Утилизация транспорта\n\
								15. Свалка транспорта"
							);

							Dialog
							(
								playerid, DIALOG_GPS_PUBLIC_PLACES, DIALOG_STYLE_LIST,
								"Важные места",
								fmt_text,
								"Выбрать", "Назад"
							);
						}
						case 2:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. Ж/Д Вокзал Арзамас\n\
								2. Автовокзал Арзамас\n\
								3. Автовокзал Эдово\n\
								4. Автовокзал Бусаево\n\
								5. Автовокзал Южный\n\
								6. Аэропорт Южный\n\
								7. Аэропорт Майами\n\
								8. Порт Эдово"
							);

							Dialog
							(
								playerid, DIALOG_GPS_TRANSPORT, DIALOG_STYLE_LIST,
								"Транспортные узлы",
								fmt_text,
								"Отметить", "Назад"
							);
						}
						case 3:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. Дорожно-патрульная служба\n\
								2. Патрульно-постовая служба\n\
								3. Войсковая часть 091945\n\
								4. Больница Арзамас\n\
								5. Больница Южный\n\
								6. ТРК 'Ритм'\n\
								7. Правительство\n\
								8. Тюрьма"
							);

							Dialog
							(
								playerid, DIALOG_GPS_STATE_ORGANIZATIONS, DIALOG_STYLE_LIST,
								"Государственные организации",
								fmt_text,
								"Выбрать", "Назад"
							);
						}
						case 4:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. ОПГ 'Центральное'\n\
								2. ОПГ 'Западное'\n\
								3. ОПГ 'Северное'"
							);

							Dialog
							(
								playerid, DIALOG_GPS_GANGS, DIALOG_STYLE_LIST,
								"Нелегальные организации",
								fmt_text,
								"Отметить", "Назад"
							);
						}
						case 5:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. Лесопилка\n\
								2. Ферма\n\
								3. Грузчик\n\
								4. Рыбалка\n\
								5. Уборщик мусора\n\
								6. Грузчик вагонов\n\
								7. Частная ферма"
							);

							Dialog
							(
								playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_LIST,
								"По работе",
								fmt_text,
								"Отметить", "Назад"
							);
						}
						case 6:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. Центральный банк\n\
								2. Частный банк 'Развитие'\n\
								3. Частный банк 'Вектор'\n\
								4. Частный банк 'Рубль'\n\
								5. Частный банк 'Развитие'\n\
								6. Частный банк 'Вектор'"
							);

							Dialog
							(
								playerid, DIALOG_GPS_BANKS, DIALOG_STYLE_LIST,
								"Банки",
								fmt_text,
								"Отметить", "Назад"
							);
						}
						case 7:
						{
						    format
							(
								fmt_text, sizeof fmt_text,
								"1. Казино 'Бендер'\n\
								2. Казино 'Южный Бендер'"
							);

							Dialog
							(
								playerid, DIALOG_GPS_ENTERTAINMENT, DIALOG_STYLE_LIST ,
								"Развлечения",
								fmt_text,
								"Отметить", "Назад"
							);
						}
						case 8: // 8. Бизнес
						{
							CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
						}
						case 9:
						{
							new fmt_str[128];

							new stationid;
							new Float: dist;

							stationid = GetNearestFuelStation(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								47,
								GetFuelStationData(stationid, FS_POS_X),
								GetFuelStationData(stationid, FS_POS_Y),
								GetFuelStationData(stationid, FS_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится АЗС №%d \"%s\" {FF9900}(расстояние %.1f м)", stationid + 1, GetFuelStationData(stationid, FS_NAME), dist);
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
						case 10:
						{
							new fmt_str[128];

							new atmid;
							new Float: dist;

							atmid = GetNearestAtm(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, g_atm[atmid][A_POS_X], g_atm[atmid][A_POS_Y], g_atm[atmid][A_POS_Z]);

							EnablePlayerGPS
							(
								playerid,
								52,
								g_atm[atmid][A_POS_X],
								g_atm[atmid][A_POS_Y],
								g_atm[atmid][A_POS_Z],
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближайший банкомат находится на расстоянии {FF9900}%.1f м. от Вас", dist);
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);

							SendClientMessage(playerid, 0xCECECEFF, "Он отмечен у Вас значком {FF9900}$");
						}
						default:
							return 1;
					}
				}
			}
			case DIALOG_GPS_PUBLIC_PLACES:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_public_places-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_public_places[listitem][G_MARKET_TYPE],
							gps_public_places[listitem][G_POS_X],
							gps_public_places[listitem][G_POS_Y],
							gps_public_places[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_TRANSPORT:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_transport-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_transport[listitem][G_MARKET_TYPE],
							gps_transport[listitem][G_POS_X],
							gps_transport[listitem][G_POS_Y],
							gps_transport[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_STATE_ORGANIZATIONS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_state_organizations-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_state_organizations[listitem][G_MARKET_TYPE],
							gps_state_organizations[listitem][G_POS_X],
							gps_state_organizations[listitem][G_POS_Y],
							gps_state_organizations[listitem][G_POS_Z],
							"Местоположение организации отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_GANGS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_gangs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_gangs[listitem][G_MARKET_TYPE],
							gps_gangs[listitem][G_POS_X],
							gps_gangs[listitem][G_POS_Y],
							gps_gangs[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_JOBS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_jobs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_jobs[listitem][G_MARKET_TYPE],
							gps_jobs[listitem][G_POS_X],
							gps_jobs[listitem][G_POS_Y],
							gps_jobs[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_BANKS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_banks-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_banks[listitem][G_MARKET_TYPE],
							gps_banks[listitem][G_POS_X],
							gps_banks[listitem][G_POS_Y],
							gps_banks[listitem][G_POS_Z],
							"Банк отмечен у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_ENTERTAINMENT:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_entertainment-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_entertainment[listitem][G_MARKET_TYPE],
							gps_entertainment[listitem][G_POS_X],
							gps_entertainment[listitem][G_POS_Y],
							gps_entertainment[listitem][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_BUSINESS:
			{
				if(response)
				{
					if(0 <= listitem <= MAX_BUSINESS_GPS-1)
					{
						new idx = GetPlayerListitemValue(playerid, listitem);
						new businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

						if(GetBusinessGPSInfo(idx, BG_SQL_ID))
						{
							EnablePlayerGPS
							(
								playerid,
								56,
								GetBusinessData(businessid, B_POS_X),
								GetBusinessData(businessid, B_POS_Y),
								GetBusinessData(businessid, B_POS_Z),
								"Бизнес отмечен у Вас на GPS"
							);
						}
						else callcmd::gps(playerid, "");
					}
				}
				else callcmd::gps(playerid, "");
			}
			case DIALOG_GPS_NEAREST:
			{
			    if(response)
			    {
			        switch(listitem + 1)
			        {
						case 1:
						{
							new fmt_str[128];

							new ost_id;
							new Float: dist;

							ost_id = GetNearestOst(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, g_ostanovka[ost_id][OST_POS_X], g_ostanovka[ost_id][OST_POS_Y], g_ostanovka[ost_id][OST_POS_Z]);

							EnablePlayerGPS
							(
								playerid,
								56,
								g_ostanovka[ost_id][OST_POS_X],
								g_ostanovka[ost_id][OST_POS_Y],
								g_ostanovka[ost_id][OST_POS_Z],
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближайшая остановка находится на расстоянии {FF9900}%.1f м. от Вас", dist);
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);

							SendClientMessage(playerid, 0xCECECEFF, "Она отмечена у Вас {FF9900}круглым значком");
						}
						case 2:
						{
							new fmt_str[128];

							new stationid;
							new Float: dist;

							stationid = GetNearestFuelStation(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								47,
								GetFuelStationData(stationid, FS_POS_X),
								GetFuelStationData(stationid, FS_POS_Y),
								GetFuelStationData(stationid, FS_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится АЗС №%d \"%s\" {FF9900}(расстояние %.1f м)", stationid + 1, GetFuelStationData(stationid, FS_NAME), dist);
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);

							SendClientMessage(playerid, 0xCECECEFF, "Она отмечена у Вас буквой {FF9900}Z");
						}
						case 3:
						{
							new fmt_str[128];

							new atmid;
							new Float: dist;

							atmid = GetNearestAtm(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, g_atm[atmid][A_POS_X], g_atm[atmid][A_POS_Y], g_atm[atmid][A_POS_Z]);

							EnablePlayerGPS
							(
								playerid,
								52,
								g_atm[atmid][A_POS_X],
								g_atm[atmid][A_POS_Y],
								g_atm[atmid][A_POS_Z],
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближайший банкомат находится на расстоянии {FF9900}%.1f м. от Вас", dist);
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);

							SendClientMessage(playerid, 0xCECECEFF, "Он отмечен у Вас значком {FF9900}$");
						}
			        }
				}
			    else callcmd::gps(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_HELP:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof help_info - 1)
						ShowPlayerHelpSection(playerid, listitem);
				}
				else DeletePVar(playerid, "help_section");
			}
			case DIALOG_HELP_SECTION:
			{
				new sectionid = GetPVarInt(playerid, "help_section");

				if(!response && sectionid < sizeof help_info - 1)
				{
					ShowPlayerHelpSection(playerid, sectionid + 1);
				}
				else callcmd::help(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_SERVER_RADIO:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof g_server_radio - 1)
					{
						PlayAudioStreamForPlayer(playerid, GetServerRadioData(listitem, SR_CHANNEL_URL));

						SetPVarInt(playerid, "server_radio_enabled", 1);
						SendClientMessage(playerid, 0x66CC00FF, "Онлайн радио включено");
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ANIM_LIST:
			{
				if(response)
				{
					if(!SetPlayerAnimation(playerid, listitem))
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"Информация",
							"Для быстрого запуска нужной анимации можно использовать {FFFFFF}/anim(list) [номер анимации из списка]",
							"Закрыть", ""
						);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OPEN_HOOD_OR_TRUNK:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					new E_VEHICLE_PARAMS_STRUCT: param = response ? V_BONNET : V_BOOT;
					new set_status = GetVehicleParam(vehicleid, param) ^ VEHICLE_PARAM_ON;

					SetVehicleParam(vehicleid, param, set_status);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_DRIVING_TUTORIAL_START:
			{
				if(response)
					ShowDrivingTutorialSection(playerid, 0);
			}
			case DIALOG_DRIVING_TUTORIAL:
			{
				new step = GetPVarInt(playerid, "driving_tutorial_step");
				if(response)
				{
					step ++;
				}
				else step --;

				if(step >= sizeof driving_tutorial)
				{
					Dialog
					(
						playerid, DIALOG_DRIVING_TUTORIAL_END, DIALOG_STYLE_MSGBOX,
						"{0099FF}Завершение",
						"{FFFFFF}Надеемся вы все внимательно прочли и готовы приступить к сдаче экзамена\n"\
						"Если вы сомневаетесь в чем-либо, то рекомендуем не рисковать и прочитать нужный раздел еще раз!\n\n"\
						"{CC9900}Желаем Вам удачи на экзамене!\n"\
						"Для того, чтобы завершить обучение нажмите \"Выход\"",
						"Выход", "Назад"
					);
				}
				else if(step < 0)
				{
					ShowPlayerDrivingTutorial(playerid);
				}
				else
				{
					ShowDrivingTutorialSection(playerid, step);

					if(step == 1)
					{
						SpeedometrShowForPlayer(playerid);
					}
					else SpeedometrHideForPlayer(playerid);
				}
			}
			case DIALOG_DRIVING_TUTORIAL_END:
			{
				if(!response)
					ShowDrivingTutorialSection(playerid, sizeof driving_tutorial - 1);
			}
			case DIALOG_DRIVING_EXAM_INFO:
			{
				if(response)
				{
					if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
					{
						if(GetPlayerMoneyEx(playerid) >= 600)
						{
							GivePlayerMoneyEx(playerid, -600, "Сдача на права");

							Dialog
							(
								playerid, DIALOG_DRIVING_EXAM_START, DIALOG_STYLE_MSGBOX,
								"{CCCC00}Теоретическая часть",
								"{FFFFFF}Вам будет предложено 12 вопросов для проверки теоретических знаний\n"\
								"Чтобы сдать эту часть экзамена необходимо ответить минимум на 9 из них\n"\
								"Если правильных ответов будет меньше, то вы не будете допущены до практический части\n\n"\
								"{33CCFF}На каждый вопрос будет несколько вариантов ответа, правильный из который только один.\n"\
								"О результате вы узнаете когда ответите на все 12 вопросов",
								"Далее", "Отмена"
							);
							ClearPlayerDrivingExamInfo(playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Сдача на права стоит 600 рублей");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права");
				}
			}
			case DIALOG_DRIVING_EXAM_START:
			{
				if(response)
				{
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
					ShowPlayerDrivingExam(playerid, 0);
				}
			}
			case DIALOG_DRIVING_EXAM:
			{
				new step = GetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP);

				if(driving_exam[step][DE_CORRECT_ANSWER] == (listitem + 1))
				{
					SetPlayerChatBubble(playerid, "+1", 0xFFFF00FF, 5.0, 2000);
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, GetPlayerDrivingExamInfo(playerid, DE_POINTS) + 1);
				}
				ShowPlayerDrivingExam(playerid, step + 1);
			}
			case DIALOG_DRIVING_EXAM_RESULT:
			{
				if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
				{
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{CCCC00}Практическая часть",
						"{FFFFFF}Отлично, теперь приступим к практической части\n"\
						"Вам нужно будет немного проехаться по городу на учебном авто\n"\
						"Найти его можно на стоянке слева от выхода\n\n"\
						"{FF9900}Внимание! Соблюдайте осторожность и не превышайте скорость\n"\
						"Если вы повредите автомобиль экзамен будет провален",
						"Начать", ""
					);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ATM:
			{
				if(response)
				{
					switch(listitem+1)
					{
						case 1,2: // Снять\Положить с банковского счета
						{
							ShowPlayerATMSelectSumDialog(playerid, !listitem);
						}
						case 3: // Баланс банковского счета
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "{FFFFFF}На Вашем банковском счету {%s}%d руб", GetPlayerBankMoney(playerid) > 0 ? ("00CC00") : ("FF6633"), GetPlayerBankMoney(playerid));

							Dialog
							(
								playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Баланс счета",
								fmt_str,
								"Назад", "Выйти"
							);
						}
						case 4: // Снять со счета предприятия
						{
							ShowPlayerATMCompanyDialog(playerid, true);
						}
						case 5: // Положить на счет предприятия
						{
							ShowPlayerATMCompanyDialog(playerid, false);
						}
						case 6: // Пополнить мобильный телефон
						{
							if(GetPlayerPhone(playerid) != 0)
							{
								Dialog
								(
									playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
									"{FFCD00}Пополнение мобильного телефона",
									"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
									"Готово", "Назад"
								);
							}
							else
							{
								SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");
								ShowPlayerATMDialog(playerid);
							}
						}
						case 7: // Безналичный перевод
						{
							if(GetPlayerLevel(playerid) >= 2)
							{
								Dialog
								(
									playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
									"{FFCD00}Безналичный перевод",
									"{FFFFFF}Укажите номер банковского счета:",
									"Далее", "Отмена"
								);
							}
							else SendClientMessage(playerid, 0x999999FF, "Перевод денег доступен с 2 уровня");
						}
						case 8:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_SELECT, DIALOG_STYLE_LIST,
								"{FFCD00}Оплата штрафа",
								"1. Выбрать штраф из списка\n"\
								"2. Оплатить штраф по номеру",
								"Далее", "Отмена"
							);
						}
						case 9: // Благотворительность
						{
							ShowPlayerATMCharityDialog(playerid);
						}
						default:
							return 1;
					}
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_TAKE_MONEY: // снять деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetPlayerBankMoney(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + sum, GetPlayerBankMoney(playerid) - sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, sum);
								GivePlayerMoneyEx(playerid, sum, "Снятие денег с банкомата", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectSumDialog(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_TAKE_OTHER_MONEY: // снять деньги (другая сума)
			{
				if(response)
				{
					new take_sum = strval(inputtext);
					if(take_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= take_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + take_sum, GetPlayerBankMoney(playerid) - take_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, take_sum);
								GivePlayerMoneyEx(playerid, take_sum, "Снятие денег с банкомата (другая сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectOtherSum(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, true);
				}
			}
			case DIALOG_ATM_PUT_MONEY: // положить деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - sum, GetPlayerBankMoney(playerid) + sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, sum);
								GivePlayerMoneyEx(playerid, -sum, "Пополнение денег в банкомате", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectSumDialog(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PUT_OTHER_MONEY: // положить деньги (другая сума)
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - put_sum, GetPlayerBankMoney(playerid) + put_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, put_sum);
								GivePlayerMoneyEx(playerid, -put_sum, "Пополнение денег в банкомате (другая сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectOtherSum(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, false);
				}
			}
			case DIALOG_ATM_BALANCE:
			{
				if(response)
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PHONE_BALANCE:
			{
				if(response)
				{
					new sum = strval(inputtext);
					if(sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[128];

							format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
								AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);

								format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
								SendClientMessage(playerid, 0x66CC00FF, query);

								format(query, sizeof query, "Сейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
								SendClientMessage(playerid, 0x66CC00FF, query);

								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");

						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}

					Dialog
					(
						playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
						"{FFCD00}Пополнение мобильного телефона",
						"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
						"Готово", "Назад"
					);
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_SELECT_COMPANY_TAKE, DIALOG_ATM_SELECT_COMPANY_PUT:
			{
				if(response)
				{
					new bool: action = (dialogid == DIALOG_ATM_SELECT_COMPANY_TAKE);

					switch(listitem + 1)
					{
						case 1:
							ShowPlayerATMBusinessDialog(playerid, action);

						case 2:
							ShowPlayerATMFuelStationDialog(playerid, action);
					}
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_BUY_SKIN:
			{
					new skinid;
					if(sscanf(inputtext, "d", skinid)) return Dialog(playerid, DIALOG_BUY_SKIN, DIALOG_STYLE_INPUT, "{FFD700}Покупка скина", "Введите ID скина для покупки:", "Далее", "Отмена");
					if(skinid < 1 || skinid == 74 || skinid > 310) return Dialog(playerid, DIALOG_BUY_SKIN, DIALOG_STYLE_INPUT, "{FFD700}Покупка скина", "Введите ID скина для покупки:", "Далее", "Отмена");

					SetPlayerSkin(playerid, skinid);
					UpdatePlayerDatabaseInt(playerid, "skin", skinid);

					GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_SKIN), "Покупка скина", true, true);

					SendClientMessage(playerid, 0x66CC33FF, "Вы успешно приобрели скин!");

			}
			case dCasino: // Диалог с меню казино для крупье (у Вас может быть if(dialogid == dCasino) если не используете switch(dialogid))
			{
				if(!response) return true; // Если игрок нажал ОТМЕНА то ничего не делаем
				new tableid = GetPVarInt(playerid,"CasinoTable"); // Узнаем под каким столом находится игрок
				switch(listitem)
				{
					case 0:
					{
						if(Casino_TotalPlayer(tableid) > 0) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Недоступно из за игроков за столом."); // Думаю здесь всё понятно
						Dialog(playerid, dCasino1, DIALOG_STYLE_INPUT, "Управление ставкой", "Введите ставку которую Вы хотите установить за Вашим столом:\n\nИспользуйте от 1.000 руб до 10.000.000 руб", "Установить", "Отмена"); // Думаю здесь тоже понятно
					}
					case 1:
					{
						if(Casino_TotalPlayer(tableid) > 0) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Недоступно из за игроков за столом."); // Думаю тут всё понятно
						if(TableInfo[tableid][t_bet] == 0) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: За столом не установлена ставка."); // Думаю тут всё понятно
						TableInfo[tableid][t_bet] = 0,Casino_Update(tableid); // Обнуляем ставку и обновляем текстдрав стола
						SendClientMessage(playerid,0x008000FF,"[Рулетка]: Вы успешно удалили ставку."); // Выводим оповещение
					}
					case 2:
					{
						if(Casino_TotalPlayer(tableid) < 2) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: За столом недостаточно игроков"); // Думаю тут всё понятно
						CasinoTimer[tableid] = SetTimerEx("Casino_Start", 500, true, "d", tableid); // Запускаем таймер для стола
						TableInfo[tableid][t_status] = true; // Устанавливаем статус игры на столе
						SendClientMessage(playerid,0x008000FF,"[Рулетка]: Вы успешно запустили рулетку.."); // Выводим оповещение
					}
				}
			}
			case dCasino1: // Диалог с меню казино для крупье (у Вас может быть if(dialogid == dCasino+1) если не используете switch(dialogid))
			{
				if(!response) return true; // Если игрок нажал ОТМЕНА то ничего не делаем
				if(strval(inputtext) < 1000 || strval(inputtext) > 10000000) return Dialog(playerid, dCasino1, DIALOG_STYLE_INPUT, "Управление ставкой", "Введите ставку которую Вы хотите установить за Вашим столом:\n\nИспользуйте от 1.000 руб до 10.000.000 руб", "Установить", "Отмена"); // Если ставка меньше 1000 или больше 10000000 то выводим диалог
				new tableid = GetPVarInt(playerid,"CasinoTable"); // Узнаем под каким столом находится игрок
				if(Casino_TotalPlayer(tableid) > 0) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Недоступно из за игроков за столом."); // Думаю тут всё понятно
				TableInfo[tableid][t_bet] = strval(inputtext); // Устанавливаем ставку для стола
				Casino_Update(tableid); // Обновляем текстдрав стола
			}
			case DIALOG_BET_ZEPPELIN:
			{
				/*playerInfo[playerid][money] -= bet_zeppelin[playerid]*/
				if(strval(inputtext) < 10000 || strval(inputtext) > 5000000) return SendClientMessage(playerid, -1, "Можно поставить минимум 10.000 и максимум 5.000.000");
				if(GetPlayerMoneyEx(playerid) < strval(inputtext)) return SendClientMessage(playerid, -1, "У вас нет таких денег!");
				GivePlayerMoneyEx(playerid,-strval(inputtext), "Ставка на краш");
				score_game_zeppelin[playerid] = 1.0;
				bet_zeppelin[playerid] = strval(inputtext)*1.0;
				new string_game_zeppelin[75]; //для большей суммы
				format(string_game_zeppelin, sizeof string_game_zeppelin, "%.2fx", score_game_zeppelin[playerid]);
				PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][1], string_game_zeppelin);
				format(string_game_zeppelin, sizeof string_game_zeppelin, "Ваша ставка: %.0f", bet_zeppelin[playerid]);
				PlayerTextDrawSetString(playerid, gameTextDraw_player[playerid][2], string_game_zeppelin);
			}
			case DIALOG_SELL_CAR:
			{
				if(!response) return 1;
				if(strlen(inputtext) < 1 || !IsNumeric(inputtext)) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену продажи");
				if(strlen(inputtext) > 9) return SendClientMessage(playerid, 0xFF6600FF, "Не больше 9-ти символов!");
				new sell_price = strval(inputtext);
				if(sell_price < 3000 || sell_price > 100000000) return SendClientMessage(playerid, 0xFF6600FF, "Цена от 3.000 рублей до 100.000.000 рублей");
				new vehicleid = GetPlayerVehicleID(playerid);

				new vehicleid1 = GetPlayerOwnableCarLast(playerid);

				if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

				new str[300];

				format(str, sizeof str,
				"{FFA500}Модель:{FFFFFF} %s\n"\
				"{FFA500}Продавец:{FFFFFF} %s\n"\
				"{FFA500}Цена:{FFFFFF} %d {FFA500}руб\n"\
				"{FFA500}Телефон:{FFFFFF} %d",
				GetVehicleName(vehicleid), GetPlayerNameEx(playerid), strval(inputtext), GetPlayerPhone(playerid));
				CreateVehicleLabel(vehicleid, str, 0xFFFFFFFF, 0.0, 0.0, 1.0, 20);
				SendClientMessage(playerid, -1, "Вы успешно заехали в авторынок. Чтобы убрать своё авто с продажи используйте /exit_by");

				new world = GetPVarInt(playerid, "by_id") + 255;
				new by_type = GetPVarInt(playerid, "by_int");

				if(by_type == 19)
				{
					SetVehiclePos(vehicleid, 2295.0708,1802.0665,1000.9609);
					SetVehicleZAngle(vehicleid, 270.0);
				}
				if(by_type == 20)
				{
					SetVehiclePos(vehicleid, 1586.7749,1817.4595,996.5703);
					SetVehicleZAngle(vehicleid, 180.0);
				}
				if(by_type == 21)
				{
					SetVehiclePos(vehicleid, -1629.8992,1018.4914,997.7969); //-1629.8992,1018.4914,997.7969
					SetVehicleZAngle(vehicleid, 180.0);
				}

				//TogglePlayerControllable(playerid, 0);

				SetPlayerInterior(playerid, 4);
				SetPlayerVirtualWorld(playerid, world);

				LinkVehicleToInterior(vehicleid, 4);
				SetVehicleVirtualWorld(vehicleid, world);
				SetPVarInt(playerid, "in_by", 1);
			}
			case DIALOG_BUY_KEYS:
			{
			if(!response) return ShowPlayerDonateDialog(playerid);
			switch(listitem)
			{
			case 0:
   			{
                    if(GetPlayerCurrentDonate(playerid) < 99) return SendClientMessage(playerid,0xCCCCCCAA, "{ffff00}Не достаточно рублей! {ffffff}Пополните аккаунт на сайте! Введите {00ff00}/sait");
                    GivePlayerDonate(playerid, -99, "Покупка ключей", true, true);
					SendClientMessage(playerid, 0xCCCCCCAA, "Вы приобрели {00FF00}5 {CCCCCC}ключей, для открытия кейсов используйте {00FF00}(( /opencase )){CCCCCC}.");
					AddPlayerData(playerid, P_CASEKEY, +, 5);
					UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));
				}
			case 1:
                {
                    if(GetPlayerCurrentDonate(playerid) < 166) return SendClientMessage(playerid,0xCCCCCCAA, "{ffff00}Не достаточно рублей! {ffffff}Пополните аккаунт на сайте! Введите {00ff00}/sait");
                    GivePlayerDonate(playerid, -166, "Покупка ключей", true, true);
					SendClientMessage(playerid, 0xCCCCCCAA, "Вы приобрели {00FF00}10 {CCCCCC}ключей, для открытия кейсов используйте {00FF00}(( /opencase )){CCCCCC}.");
					AddPlayerData(playerid, P_CASEKEY, +, 10);
					UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));
				}
			case 2:
                {
                    if(GetPlayerCurrentDonate(playerid) < 333) return SendClientMessage(playerid,0xCCCCCCAA, "{ffff00}Не достаточно рублей! {ffffff}Пополните аккаунт на сайте! Введите {00ff00}/sait");
                    GivePlayerDonate(playerid, -333, "Покупка ключей", true, true);
					SendClientMessage(playerid, 0xCCCCCCAA, "Вы приобрели {00FF00}20 {CCCCCC}ключей, для открытия кейсов используйте {00FF00}(( /opencase )){CCCCCC}.");
					AddPlayerData(playerid, P_CASEKEY, +, 20);
					UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));
				}
			case 3:
                {
                    if(GetPlayerCurrentDonate(playerid) < 777) return SendClientMessage(playerid,0xCCCCCCAA, "{ffff00}Не достаточно рублей! {ffffff}Пополните аккаунт на сайте! Введите {00ff00}/sait");
                    GivePlayerDonate(playerid, -777, "Покупка ключей", true, true);
					SendClientMessage(playerid, 0xCCCCCCAA, "Вы приобрели {00FF00}50 {CCCCCC}ключей, для открытия кейсов используйте {00FF00}(( /opencase )){CCCCCC}.");
					AddPlayerData(playerid, P_CASEKEY, +, 50);
					UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));
			    }
			case 4:
                {
                    if(GetPlayerCurrentDonate(playerid) < 1555) return SendClientMessage(playerid,0xCCCCCCAA, "{ffff00}Не достаточно рублей! {ffffff}Пополните аккаунт на сайте! Введите {00ff00}/sait");
                    GivePlayerDonate(playerid, -1555, "Покупка ключей", true, true);
					SendClientMessage(playerid, 0xCCCCCCAA, "Вы приобрели {00FF00}100 {CCCCCC}ключей, для открытия кейсов используйте {00FF00}(( /opencase )){CCCCCC}.");
					AddPlayerData(playerid, P_CASEKEY, +, 100);
					UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));
				}
 			case 5:
				{
                    new casekey[800];
    	            strins(casekey,"{FFFFFF}Что бы открыть CASE вводите {00FF00}/opencase\n{FFFFFF}Просто покупайте кейсы и открывайте их,\n{FFFFFF}у вас есть шанс выйграть один из этих призов:\n{FFFF00}• {FFFFFF}Админка 1 уровня\n{FFFF00}• {FFFFFF}Админка 2 уровня\n{FFFF00}• {FFFFFF}Админка 3 уровня\n{FFFF00}• {FFFFFF}Админка 4 уровня",strlen(casekey));
    	            strins(casekey,"{9cff00}• {FFFFFF}Админка 5 уровня\n{9cff00}• {FFFFFF}Админка 6 уровня\n{9cff00}• {FFFFFF}Админка 7 уровня{9cff00}• {FFFFFF}Админка 8 уровня\n{9cff00}• {FFFFFF}Админка 9 уровня\n{FF0000}• {FFFFFF}Админка 10 уровня\n{FF0000}• {FFFFFF}Админка 11 уровня\n{FF0000}• {FFFFFF}Админка 12 уровня\n\n",strlen(casekey));
    	            strins(casekey,"{31ffff}• {FFFFFF}Хэлперка максимального уровня\n{31ffff}• {FFFFFF}Лидерка любой организации\n\n{ff34ff}• {FFFFFF}VIP транспорт - Монстр\n{ff34ff}• {FFFFFF}VIP транспорт - Спорт Кар Hortning 1\n{ff34ff}• {FFFFFF}VIP транспорт - Спорт Кар Hortning 2\n{ff34ff}• {FFFFFF}VIP транспорт - Спорт Кар Hortning 3\n{ff34ff}• {FFFFFF}VIP транспорт - Лимузин\n{ff34ff}• {FFFFFF}VIP транспорт - Танк\n",strlen(casekey));
    	            strins(casekey,"{ff34ff}• {FFFFFF}VIP транспорт - Вертолёт\n{ff34ff}• {FFFFFF}VIP транспорт - Истребитель\n{ff34ff}• {FFFFFF}VIP транспорт - SandKing\n{ff34ff}• {FFFFFF}VIP транспорт - SandKing\n\nЭтот транспорт не доступен в Автосалонах.\n\n{FFFFFF}Так же вы можете выйграть:\n\n{ce3400}• {FFFFFF}От 10 до 1200 рублей\n{ce3400}• {FFFFFF}От 100.000 до 99.000.000 игровой валюты\n",strlen(casekey));
    	            strins(casekey,"{ce3400}• {FFFFFF}Игровый часы от 5 до 100 часов\n{FFFFFF}Покупать кейсы только на нашем официальном сайте {9cff00}"SERVER_NAME"",strlen(casekey));
					Dialog(playerid,0000, DIALOG_STYLE_MSGBOX, "{FFFF00}Информация о Кейсах:", casekey,"Назад","");
				}
			}
			return true;
			}
			case DIALOG_OPEN_KEYS:
	    	{
	    	if(GetPlayerData(playerid, P_CASEKEY) < 1) return SendClientMessage(playerid,0xCCCCCCAA,"Вы не имеете ключей. Купить: /donat > Кейсы");
	        AddPlayerData(playerid, P_CASEKEY, -, 1);
	        UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));
			{
			    if(response)
				switch(random(456))
				{
				case 0..1:
						{
						   	SetPlayerData(playerid, P_PREMIUM, 4);
							SetPlayerData(playerid, P_PREMIUM_TIME, 3);
							UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 4);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Platinum VIP {FFFFFF}.");
			            }
					case 2..3:
						{
       						SetPlayerData(playerid, P_PREMIUM, 3);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 3);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Gold VIP {FFFFFF}.");
			            }
					case 4..5:
						{
       						SetPlayerData(playerid, P_PREMIUM, 2);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 2);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Silver VIP {FFFFFF}.");
			            }
					case 6..7:
						{
       						SetPlayerData(playerid, P_PREMIUM, 1);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 1);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Bronze VIP {FFFFFF}.");
			            }
					case 8..9:
						{
       						SetPlayerData(playerid, P_PREMIUM, 1);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 1);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Bronze VIP {FFFFFF}.");
			            }
					case 10..11:
						{
       						SetPlayerData(playerid, P_PREMIUM, 4);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 4);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Platinum VIP {FFFFFF}.");
			            }
			        case 12..13:
						{
       						SetPlayerData(playerid, P_PREMIUM, 1);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 1);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Bronze VIP {FFFFFF}.");
			            }
					case 14..15:
						{
       						SetPlayerData(playerid, P_PREMIUM, 1);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 1);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Bronze VIP {FFFFFF}.");
			            }
			  		case 16..17:
						{
       						SetPlayerData(playerid, P_PREMIUM, 3);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 3);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Gold VIP {FFFFFF}.");
			            }
			  		case 18..19:
						{
       						SetPlayerData(playerid, P_PREMIUM, 4);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 4);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Platinum VIP {FFFFFF}.");
			            }
			  		case 20..21:
						{
       						SetPlayerData(playerid, P_PREMIUM, 2);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 2);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Silver VIP {FFFFFF}.");
			            }
			  		case 22..23:
						{
       						SetPlayerData(playerid, P_PREMIUM, 3);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 3);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Gold VIP {FFFFFF}.");
			            }
			  		case 24..25:
						{
       						SetPlayerData(playerid, P_PREMIUM, 2);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 2);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Silver VIP {FFFFFF}.");
			            }
			  		case 26..27:
						{
       						SetPlayerData(playerid, P_PREMIUM, 1);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 1);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Bronze VIP {FFFFFF}.");
			            }
			  		case 28..29:
						{
       						SetPlayerData(playerid, P_PREMIUM, 4);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 4);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Platinum VIP {FFFFFF}.");
			            }
			  		case 30..31:
						{
       						SetPlayerData(playerid, P_PREMIUM, 3);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 3);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Gold VIP {FFFFFF}.");
			            }
			  		case 32..33:
						{
       						SetPlayerData(playerid, P_PREMIUM, 1);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 1);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Bronze VIP {FFFFFF}.");
			            }
			  		case 34..35:
						{
       						SetPlayerData(playerid, P_PREMIUM, 3);
       						SetPlayerData(playerid, P_PREMIUM_TIME, 3);
       						UpdatePlayerDatabaseInt(playerid, "premium_time", GetPlayerData(playerid, P_PREMIUM_TIME));
							UpdatePlayerDatabaseInt(playerid, "premium", 3);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}Gold VIP {FFFFFF}.");
			            }
			  		case 38..39:
						{
							GivePlayerMoneyEx(playerid, 1000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$1000000 {FFFFFF}на аккаунт.");
			            }
			  		case 40..41:
						{
							GivePlayerDonate(playerid, 23, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}23 {FFFFFF}RCoins.");
			            }
			  		case 42..43:
						{
							GivePlayerDonate(playerid, 21, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}21 {FFFFFF}RCoins.");
			            }
			  		case 44..45:
						{
							AddPlayerData(playerid, P_LEVEL, +, 1);
							UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
							SetPlayerLevelInit(playerid);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}уровня.");
			            }
			  		case 46..47:
						{
							GivePlayerMoneyEx(playerid, 3000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$30000000 {FFFFFF}на аккаунт.");
			            }
			  		case 48..49:
						{
							GivePlayerMoneyEx(playerid, 1400000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$1400000 {FFFFFF}на аккаунт.");
			            }
			  		case 50..51:
						{
							AddPlayerData(playerid, P_LEVEL, +, 1);
							UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
							SetPlayerLevelInit(playerid);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}уровня.");
			            }
			  		case 52..53:
						{
							GivePlayerMoneyEx(playerid, 4000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$4000000 {FFFFFF}на аккаунт.");
			            }
			  		case 54..55:
						{
							AddPlayerData(playerid, P_LEVEL, +, 1);
							UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
							SetPlayerLevelInit(playerid);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}уровня.");
			            }
			  		case 56..57:
						{
							AddPlayerData(playerid, P_LEVEL, +, 1);
							UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
							SetPlayerLevelInit(playerid);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}уровней.");
			            }
			  		case 58..59:
						{
							AddPlayerData(playerid, P_LEVEL, +, 1);
							UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
							SetPlayerLevelInit(playerid);
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}уровень.");
			            }
			  		case 60..61:
						{
							GivePlayerDonate(playerid, 33, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}33 {FFFFFF}RCoins.");
			            }
			  		case 62..65:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}слот для транспорта.");
			            }
			  		case 66..69:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}2 {FFFFFF}слота для транспорта.");
			            }
			        case 70..72:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}1 {FFFFFF}слот для транспорта.");
			            }
			        case 73..74:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}15 {FFFFFF}слотов для транспорта.");
			            }
			        case 75..76:
						{
							AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}4 {FFFFFF}слота для транспорта.");
			            }
			        case 77:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}8 {FFFFFF}слотов для транспорта.");
			            }
			        case 78:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}2 {FFFFFF}слотa для транспорта.");
			            }
			         case 79..80:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}2 {FFFFFF}слота для транспорта.");
			            }
			         case 81:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}10 {FFFFFF}слотов для транспорта.");
			            }
			          case 82..100:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000} 1 {FFFFFF}слот для транспорта.");
               			}
			          case 101:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}6 {FFFFFF}слотов для транспорта.");
			            }
			          case 102..110:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}3 {FFFFFF}слотa для транспорта.");
			            }
			          case 111..115:
						{
       						AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
       						UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили +{FF0000}5 {FFFFFF}слотов для транспорта.");
			            }
			          case 116..117:
						{
						    GivePlayerDonate(playerid, 20, "Выигрышь в кейсе");
    						UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_CAR_SLOTS));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}20 {FFFFFF}RCoins.");
			            }
			          case 118:
						{
							GivePlayerDonate(playerid, 30, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}30 {FFFFFF}RCoins.");
			            }
			          case 119..125:
						{
							GivePlayerDonate(playerid, 24, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}24 {FFFFFF}RCoins.");
			            }
			          case 126..127:
						{
							GivePlayerDonate(playerid, 21, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}21 {FFFFFF}RCoins.");
			            }
			          case 128:
						{
							GivePlayerDonate(playerid, 28, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}28 {FFFFFF}RCoins.");
			            }
			          case 129..135:
						{
							GivePlayerDonate(playerid, 3, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}3 {FFFFFF}RCoins.");
			            }
			          case 136:
						{
							GivePlayerDonate(playerid, 22, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}22 {FFFFFF}RCoins.");
			            }
			          case 137..138:
						{
							GivePlayerDonate(playerid, 1, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}1 {FFFFFF}RCoins.");
			            }
			          case 139..140:
						{
							GivePlayerDonate(playerid, 5, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerData(playerid, P_DONATE_CURRENT));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}5 {FFFFFF}RCoins.");
			            }
			          case 141..170:
						{
			 				GivePlayerMoneyEx(playerid, 100000, "Выигрышь в кейсе");
			 				UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$100000 {FFFFFF}на аккаунт.");
			            }
			          case 171..172:
						{
							GivePlayerMoneyEx(playerid, 1000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$1000000 {FFFFFF}на аккаунт.");
			            }
			          case 173..174:
						{
							GivePlayerMoneyEx(playerid, 5000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$5000000 {FFFFFF}на аккаунт.");
			            }
			          case 175..176:
						{
							GivePlayerMoneyEx(playerid, 4000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$4000000 {FFFFFF}на аккаунт.");
			            }
			          case 177:
						{
							GivePlayerMoneyEx(playerid, 4000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$4000000 {FFFFFF}на аккаунт.");
			            }
			          case 178:
						{
							GivePlayerMoneyEx(playerid, 3000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$3000000 {FFFFFF}на аккаунт.");
			            }
			          case 179:
						{
							GivePlayerMoneyEx(playerid, 2000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$2000000 {FFFFFF}на аккаунт.");
			            }
			          case 180:
						{
							GivePlayerMoneyEx(playerid, 9000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$9000000 {FFFFFF}на аккаунт.");
			            }
			          case 181:
						{
							GivePlayerMoneyEx(playerid, 9900000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$9900000 {FFFFFF}на аккаунт.");
			            }
			          case 182:
						{
							GivePlayerMoneyEx(playerid, 7100000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$7100000 {FFFFFF}на аккаунт.");
			            }
			          case 183:
						{
							GivePlayerMoneyEx(playerid, 6700000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$6700000 {FFFFFF}на аккаунт.");
			            }
			          case 184:
						{
							GivePlayerMoneyEx(playerid, 5300000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$5300000 {FFFFFF}на аккаунт.");
			            }
			          case 185..190:
						{
							GivePlayerMoneyEx(playerid, 4000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$4000000 {FFFFFF}на аккаунт.");
			            }
			          case 191..195:
						{
							GivePlayerMoneyEx(playerid, 3000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$3000000 {FFFFFF}на аккаунт.");
			            }
			          case 196..199:
						{
							GivePlayerMoneyEx(playerid, 6000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$6000000 {FFFFFF}на аккаунт.");
			            }
			          case 200:
						{
							GivePlayerMoneyEx(playerid, 2000000, "Выигрышь в кейсе");
							UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
							SendClientMessage(playerid,COLOR_GREY,"{33ff00}• {FFFFFF}Вы получили {FF0000}$2000000 {FFFFFF}на аккаунт.");
			            }
		           	}
		           	else
					{
					}
				}
			}
			case DIALOG_ATM_FUEL_ST_TAKE_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetFuelStationData(stationid, FS_BALANCE) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)+sum, GetFuelStationData(stationid, FS_BALANCE)-sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета АЗС", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						ShowPlayerATMFuelStationDialog(playerid, true);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_FUEL_ST_PUT_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-sum, GetFuelStationData(stationid, FS_BALANCE)+sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета АЗС", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						ShowPlayerATMFuelStationDialog(playerid, false);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_BIZ_TAKE_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetBusinessData(businessid, B_BALANCE) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)+sum, GetBusinessData(businessid, B_BALANCE)-sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета Бизнеса", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);

									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						ShowPlayerATMBusinessDialog(playerid, true);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_BIZ_PUT_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-sum, GetBusinessData(businessid, B_BALANCE)+sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета Бизнеса", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						ShowPlayerATMBusinessDialog(playerid, false);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_TRANSFER_MONEY_1:
			{
				if(response)
				{
					new transfer_id = strval(inputtext);

					if(transfer_id > 0 && IsNumeric(inputtext))
					{
						SetPlayerBankTransfer(playerid, BT_ID, 0);

						new query[64 + 1];
						new Cache: result;

						format(query, sizeof query, "SELECT id FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
						result = mysql_query(mysql, query);

						if(cache_num_rows())
							SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));

						cache_delete(result);

						if(GetPlayerBankTransfer(playerid, BT_ID))
						{
							return ShowPlayerATMTransfer(playerid);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Счета с таким номером не существует");
					}

					Dialog
					(
						playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
						"{FFCD00}Безналичный перевод",
						"{FFFFFF}Укажите номер банковского счета:",
						"Далее", "Отмена"
					);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TRANSFER_MONEY_2:
			{
				new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
				if(response && transfer_id)
				{
					new transfer_sum = strval(inputtext);
					if(transfer_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= transfer_sum)
						{
							new fmt_str[155];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.bank=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", GetPlayerBankMoney(playerid)-transfer_sum, transfer_sum, GetPlayerAccountID(playerid), transfer_id);
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								format(fmt_str, sizeof fmt_str, "+ Пополнения с банкомата %d руб", transfer_sum);
								BankAccountLog(playerid, transfer_id, fmt_str);

								AddPlayerData(playerid, P_BANK, -, transfer_sum);
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Откуда:\t\t\tОсновной счет\n"\
									"Куда:\t\t\t\tСчет №%d\n"\
									"Сумма:\t\t\t\t%d руб\n"\
									"Остаток на Вашем счету:\t%d руб",
									transfer_id,
									transfer_sum,
									GetPlayerBankMoney(playerid)
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99FF00}Перевод завершен", fmt_str, "Закрыть", "");

								return PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 11)");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "На основном банковском счете недостаточно денег");
					}
					ShowPlayerATMTransfer(playerid);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_SELECT:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							new fmt_text[1024],
								query[90],
								Cache: result,
								rows;

							mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();

							ClearPlayerListitemValues(playerid);

							if(rows)
							{
								for(new idx; idx < rows; idx ++)
								{
									new reason[64];

									SetPlayerListitemValue(playerid, idx, cache_get_field_content_int(idx, "id"));

									cache_get_field_content(idx, "description", reason);

									format(query, sizeof query, "#%d\t%d руб.\t%s\n", cache_get_field_content_int(idx, "id"),
									cache_get_field_content_int(idx, "amount"), reason);

									strcat(fmt_text, query);
								}
							}
							else format(fmt_text, sizeof fmt_text, "У Вас нет неоплаченных штрафов");

							cache_delete(result);

							Dialog
							(
								playerid, DIALOG_ATM_TICKET_LIST, DIALOG_STYLE_LIST,
								"{FFCD00}Список штрафов",
								fmt_text,
								"Выбор", "Отмена"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_PAY, DIALOG_STYLE_INPUT,
								"{FFCD00}Оплата штрафа",
								"{FFFFFF}Введите номер штрафа, который\n"\
								"Вы хотели бы оплатить:",
								"Далее", "Отмена"
							);
						}
					}
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_LIST:
			{
				if(response)
				{
					new ticketid = GetPlayerListitemValue(playerid, listitem);

					if(ticketid) PayTicket(playerid, ticketid);
				}

				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_PAY:
			{
				if(response)
				{
					new ticketid = strval(inputtext);

					PayTicket(playerid, ticketid);
				}

				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_CHARITY:
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new fmt_str[85];
							format(fmt_str, sizeof fmt_str, "INSERT INTO charity (uid,money,time) VALUES (%d,%d,%d)", GetPlayerAccountID(playerid), put_sum, gettime());
							mysql_query(mysql, fmt_str, false);

							GivePlayerMoneyEx(playerid, -put_sum, "Благотворительность", true, true);

							format(fmt_str, sizeof fmt_str, "Вы сделали пожертвование в размере %d рублей", put_sum);
							SendClientMessage(playerid, 0x3399FFFF, fmt_str);

							UpdateCharity();
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег");
							ShowPlayerATMCharityDialog(playerid);
						}
					}
					else ShowPlayerATMCharityDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PAY_FOR_RENT:
			{
				if(response)
				{
					new buffer = -1;
					switch(listitem + 1)
					{
						case 1: // Заплатить за дом
						{
							buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
							if(buffer != -1)
							{
								ShowPlayerHousePayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");
						}
						case 2: // Оплатить аренду бизнеса
						{
							buffer = GetPlayerBusiness(playerid);
							if(buffer != -1)
							{
								ShowPlayerBusinessPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
						}
      case 3: // Оплатить аренду АЗС
						{
							buffer = GetPlayerFuelStation(playerid);
							if(buffer != -1)
							{
								ShowPlayerFuelStationPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");
						}
					}
					ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_FUEL_ST:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetFuelStationData(stationid, FS_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.bank=%d,f.rent_time=%d WHERE a.id=%d AND f.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetFuelStationData(stationid, FS_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду АЗС еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerFuelStationPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_BIZ:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetBusinessData(businessid, B_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.bank=%d,b.rent_time=%d WHERE a.id=%d AND b.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetBusinessData(businessid, B_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду бизнеса еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerBusinessPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_MUSIX_BOOMBOX_1:
		    {
	  			if(strlen(inputtext) < 3)
				{
				    Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка воспроизведение аудио", "{"#cW"}Вы ввели слишком короткий {"#cGold"}URL-адрес\n\n{"#cW"}* {ADADAD}Адрес может содержать от 3 до 180 символов", "Закрыть", "");
				    return 1;
				}
	  			if(strlen(inputtext) > 180)
				{
				    Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка воспроизведение аудио", "{"#cW"}Вы ввели слишком длинный {"#cGold"}URL-адрес\n\n{"#cW"}* {ADADAD}Адрес может содержать от 3 до 180 символов", "Закрыть", "");
				    return 1;
				}
				if(BoxInfo[playerid][box_music] != 0) return SendClientMessage(playerid, 0xFF6600FF, "Бумбокс уже используется");
	   			BoxInfo[playerid][box_music] = 1;
	            GetPlayerPos(playerid, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z]);
	            new Float:Angle;
	            GetPlayerFacingAngle(playerid, Angle);

	           	new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				foreach(new i : Player) PlayAudioStreamForPlayer(i, inputtext, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z], DistanceMusic, 1);

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);

				BoxInfo[playerid][box_object] = CreateDynamicObject(1747, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y]+0.6, BoxInfo[playerid][box_z]-0.8, 0.0, 0.0, Angle);

				new description[128];

				format(description, sizeof description, "{2f89f7}Бумбокс\n\n{"#cW"}Установил: {9bcb05}%s(%d)\n{"#cW"}Управление – {2f89f7}/boombox", GetPlayerNameEx(playerid), playerid);

				BoxInfo[playerid][box_label] = CreateDynamic3DTextLabel(description, -1, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y]+0.6, BoxInfo[playerid][box_z]+0.25, 20.0);

				SendClientMessage(playerid, COLOR_GOLD, "Вы успешно установили бумбокс");
		    }
			case DIALOG_MUSIX_BOOMBOX_2:
			{
			    if(response)
			    {
			        switch(listitem)
			        {
			            case 0:
			            {
			            	if(BoxInfo[playerid][box_music] != 0) return SendClientMessage(playerid, 0xFF6600FF, "Бумбокс уже используется");
				            BoxInfo[playerid][box_music] = 1;
				            GetPlayerPos(playerid, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z]);
				            new Float:Angle;
				            GetPlayerFacingAngle(playerid, Angle);

			            	new Float:X, Float:Y, Float:Z;
							GetPlayerPos(playerid, X, Y, Z);
							foreach(new i : Player) PlayAudioStreamForPlayer(i, "http://air.radiorecord.ru:8102/rus_320", BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z], DistanceMusic, 1);

							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);

				            BoxInfo[playerid][box_object] = CreateDynamicObject(1747, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y]+0.6, BoxInfo[playerid][box_z]-0.8, 0.0, 0.0, Angle);

	      					new description[128];

							format(description, sizeof description, "{2f89f7}Бумбокс\n\n{"#cW"}Установил: {9bcb05}%s(%d)\n{"#cW"}Управление – {2f89f7}/boombox", GetPlayerNameEx(playerid), playerid);

				            BoxInfo[playerid][box_label] = CreateDynamic3DTextLabel(description, -1, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y]+0.6, BoxInfo[playerid][box_z]+0.25, 20.0);

				            SendClientMessage(playerid, COLOR_GOLD, "Вы успешно установили бумбокс");
			            }
			            case 1:
			            {
			            	if(BoxInfo[playerid][box_music] != 0) return SendClientMessage(playerid, 0xFF6600FF, "Бумбокс уже используется");
				            BoxInfo[playerid][box_music] = 1;
				            GetPlayerPos(playerid, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z]);
				            new Float:Angle;
				            GetPlayerFacingAngle(playerid, Angle);

			            	new Float:X, Float:Y, Float:Z;
							GetPlayerPos(playerid, X, Y, Z);
							foreach(new i : Player) PlayAudioStreamForPlayer(i, "http://online.radiorecord.ru:8101/rr_128", BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z], DistanceMusic, 1);

							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);

				            BoxInfo[playerid][box_object] = CreateDynamicObject(1747, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y]+0.6, BoxInfo[playerid][box_z]-0.8, 0.0, 0.0, Angle);

	      					new description[128];

							format(description, sizeof description, "{2f89f7}Бумбокс\n\n{"#cW"}Установил: {9bcb05}%s(%d)\n{"#cW"}Управление – {2f89f7}/boombox", GetPlayerNameEx(playerid), playerid);

				            BoxInfo[playerid][box_label] = CreateDynamic3DTextLabel(description, -1, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y]+0.6, BoxInfo[playerid][box_z]+0.25, 20.0);

				            SendClientMessage(playerid, COLOR_GOLD, "Вы успешно установили бумбокс");
			            }
			            case 2:
			            {
							Dialog(playerid, DIALOG_MUSIX_BOOMBOX_1, DIALOG_STYLE_INPUT, "{"#cGold"}Включить свою музыку", "{"#cW"}Для того чтобы включить музыку введите {"#cW"}URL-адрес в строку ниже:\n\n{ADADAD}Пример: http://radiopotok.ru/f/m3u/station_2.m3u", "Далее", "Закрыть");
			            }
			        }
			    }
			}
			case DIALOG_BIZ_LIST:
			{
			    if(!response) return 1;

				switch(listitem + 1)
				{
					case 1:
					{
						new businessid = GetPlayerBusiness(playerid);
						if(businessid != -1)
						{
							static const
								music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};

							if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
							{
								SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
							}

							new fmt_str[900];
							if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_ARENDA)
							{
							    format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
									"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
									"Владелец:\t\t\t\t%s\n"\
									"Город / область:\t\t\t%s\n"\
									"Район:\t\t\t\t\t%s\n"\
									"Количество продуктов:\t\t%d из %d\n"\
									"Стоимость 1 продукта:\t\t%d руб\n"\
									"Уровень улучшений:\t\t\t%d\n"\
									"Баланс предприятия:\t\t\t%d руб\n"\
									"Бизнес арендован на:\t\t%d/30 дней\n"\
									"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
									"Аренда помещения:\t\t\t%d руб в день\n"\
									"Тип аренды:\t\t\t\t%s\n"\
									"{669966}Для открытия панели управления вашим бизнесом\n"\
									"нажмите кнопку \"Изменить\"",
									GetBusinessData(businessid, B_NAME),
									businessid,
									GetBusinessData(businessid, B_OWNER_NAME),
									GetCityName(GetBusinessData(businessid, B_CITY)),
									GetZoneName(GetBusinessData(businessid, B_ZONE)),
									GetBusinessData(businessid, B_PRODS),
									GetBusinessMaxProd(businessid),
									GetBusinessData(businessid, B_PROD_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS),
									GetBusinessData(businessid, B_BALANCE),
									GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
									GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
									GetBusinessData(businessid, B_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная")
								);
							}
							else
							{
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
									"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
									"Владелец:\t\t\t\t%s\n"\
									"Город / область:\t\t\t%s\n"\
									"Район:\t\t\t\t\t%s\n"\
									"Плата за вход:\t\t\t%d руб\n"\
									"Количество продуктов:\t\t%d из %d\n"\
									"Стоимость 1 продукта:\t\t%d руб\n"\
									"Уровень улучшений:\t\t\t%d\n"\
									"Баланс предприятия:\t\t\t%d руб\n"\
									"Бизнес арендован на:\t\t%d/30 дней\n"\
									"Звук при входе:\t\t\t{%s}%s\n"\
									"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
									"Аренда помещения:\t\t\t%d руб в день\n"\
									"Тип аренды:\t\t\t\t%s\n"\
									"Статус:\t\t\t\t\t%s\n\n"\
									"{669966}Для открытия панели управления вашим бизнесом\n"\
									"нажмите кнопку \"Изменить\"",
									GetBusinessData(businessid, B_NAME),
									businessid,
									GetBusinessData(businessid, B_OWNER_NAME),
									GetCityName(GetBusinessData(businessid, B_CITY)),
									GetZoneName(GetBusinessData(businessid, B_ZONE)),
									GetBusinessData(businessid, B_ENTER_PRICE),
									GetBusinessData(businessid, B_PRODS),
									GetBusinessMaxProd(businessid),
									GetBusinessData(businessid, B_PROD_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS),
									GetBusinessData(businessid, B_BALANCE),
									GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
									GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
									!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
									music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
									GetBusinessData(businessid, B_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
									GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт")
								);
							}
							Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о бизнесе", fmt_str, "Изменить", "Отмена");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
						return 1;
					}
					case 2:
					{
						new businessid = GetPlayerBusiness(playerid);
						if(businessid != -1)
						{
							static const
								music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};

							if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
							{
								SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
							}

							new fmt_str[900];
							if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_ARENDA)
							{
							    format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
									"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
									"Владелец:\t\t\t\t%s\n"\
									"Город / область:\t\t\t%s\n"\
									"Район:\t\t\t\t\t%s\n"\
									"Количество продуктов:\t\t%d из %d\n"\
									"Стоимость 1 продукта:\t\t%d руб\n"\
									"Уровень улучшений:\t\t\t%d\n"\
									"Баланс предприятия:\t\t\t%d руб\n"\
									"Бизнес арендован на:\t\t%d/30 дней\n"\
									"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
									"Аренда помещения:\t\t\t%d руб в день\n"\
									"Тип аренды:\t\t\t\t%s\n"\
									"{669966}Для открытия панели управления вашим бизнесом\n"\
									"нажмите кнопку \"Изменить\"",
									GetBusinessData(businessid, B_NAME),
									businessid,
									GetBusinessData(businessid, B_OWNER_NAME),
									GetCityName(GetBusinessData(businessid, B_CITY)),
									GetZoneName(GetBusinessData(businessid, B_ZONE)),
									GetBusinessData(businessid, B_PRODS),
									GetBusinessMaxProd(businessid),
									GetBusinessData(businessid, B_PROD_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS),
									GetBusinessData(businessid, B_BALANCE),
									GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
									GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
									GetBusinessData(businessid, B_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная")
								);
							}
							else
							{
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
									"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
									"Владелец:\t\t\t\t%s\n"\
									"Город / область:\t\t\t%s\n"\
									"Район:\t\t\t\t\t%s\n"\
									"Плата за вход:\t\t\t%d руб\n"\
									"Количество продуктов:\t\t%d из %d\n"\
									"Стоимость 1 продукта:\t\t%d руб\n"\
									"Уровень улучшений:\t\t\t%d\n"\
									"Баланс предприятия:\t\t\t%d руб\n"\
									"Бизнес арендован на:\t\t%d/30 дней\n"\
									"Звук при входе:\t\t\t{%s}%s\n"\
									"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
									"Аренда помещения:\t\t\t%d руб в день\n"\
									"Тип аренды:\t\t\t\t%s\n"\
									"Статус:\t\t\t\t\t%s\n\n"\
									"{669966}Для открытия панели управления вашим бизнесом\n"\
									"нажмите кнопку \"Изменить\"",
									GetBusinessData(businessid, B_NAME),
									businessid,
									GetBusinessData(businessid, B_OWNER_NAME),
									GetCityName(GetBusinessData(businessid, B_CITY)),
									GetZoneName(GetBusinessData(businessid, B_ZONE)),
									GetBusinessData(businessid, B_ENTER_PRICE),
									GetBusinessData(businessid, B_PRODS),
									GetBusinessMaxProd(businessid),
									GetBusinessData(businessid, B_PROD_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS),
									GetBusinessData(businessid, B_BALANCE),
									GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
									GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
									!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
									music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
									GetBusinessData(businessid, B_PRICE),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
									GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
									GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт")
								);
							}
							Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о бизнесе", fmt_str, "Изменить", "Отмена");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
						return 1;
					}
				}
			}
			case DIALOG_SELLBIZ:
			{
				if(!response) return 1;

				switch(listitem + 1)
				{
				    case 1:
					{
						new businessid = GetPlayerBusiness(playerid);
						if(businessid != -1)
						{
							Dialog
							(
								playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Продажа бизнеса",
								"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
								"Вам будет возвращено его стоимость за вычитом 30%\n"\
								"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
								"Если Вы хотите продать бизнес другому игроку,\n"\
								"используйте команду /sellmybiz",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
					}
				    case 2:
					{
						new businessid = GetBusiness_2(playerid);
						if(businessid != -1)
						{
							Dialog
							(
								playerid, DIALOG_BIZ_2_SELL, DIALOG_STYLE_MSGBOX,
								"{FFCD00}Продажа бизнеса",
								"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
								"Вам будет возвращено его стоимость за вычитом 30%\n"\
								"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
								"Если Вы хотите продать бизнес другому игроку,\n"\
								"используйте команду /sellmybiz",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
					}
				}
			}
			case DIALOG_BOOMBOX:
			{
		  		if(response)
			    {
				    switch(listitem)
					{
				        case 0:
						{
						    if(GetPlayerInterior(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Установить бумбокс можно только на улице");

                            for(new i; i < MAX_PLAYERS; i ++)
							if(IsPlayerInRangeOfPoint(playerid, DistanceMusic, BoxInfo[i][box_x], BoxInfo[i][box_y], BoxInfo[i][box_z]))
			 				{
     							SendClientMessage(playerid, 0xFF6600FF, "Рядом с Вами уже установлен бумбокс");//StopAudioStreamForPlayer(id);
	        					return 1;
							}

						    Dialog(playerid, DIALOG_MUSIX_BOOMBOX_2, DIALOG_STYLE_LIST, "{"#cGold"}Выберите музыку", "1. {"#cW"}Russian Mix\n2. {"#cW"}Радио Рекорд\n{"#cGold"}Включить свою музыку", "Далее", "Закрыть");
				        }
				        case 1:
						{
				            switch(BoxInfo[playerid][box_music])
							{
				                case 1:
								{
				                    if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z])) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться рядом с бумбоксом");

									ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);

									DestroyBoombox(playerid);

									SendClientMessage(playerid, COLOR_GOLD, "Вы успешно убрали бумбокс");
				                }
				                case 2:
								{
								   	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);

				                    DestroyBoombox(playerid);
				                }
				                default:
								{
				                    SendClientMessage(playerid, 0xFF6600FF, "Бумбокс находится у Вас");
				                }
				            }
				        }
				    }
				}
			}
			case DIALOG_PAY_FOR_RENT_HOUSE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetHouseData(houseid, H_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,houses h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHouseData(houseid, H_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно оплатили дом еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHousePayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BANK:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							ShowPlayerBankAccounts(playerid);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT,
								"{FFCD00}Создание нового счета",
								"{FFFFFF}Введите название для нового счета.\n"\
								"Максимальная длина 20 символов:",
								"Ок", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNTS:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerATMDialog(playerid);
						case 1..(MAX_BANK_ACCOUNTS):
						{
							new accountid = GetPlayerListitemValue(playerid, listitem - 1);
							if(IsValidBankAccount(playerid, accountid))
							{
								SetPlayerUseListitem(playerid, accountid);
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_LOGIN, DIALOG_STYLE_PASSWORD,
									"{FFCD00}Авторизация",
									"{FFFFFF}Введите PIN-код счета:",
									"Ввести", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_LOGIN:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						new pin_len = strlen(GetBankAccountData(playerid, accountid, BA_PIN_CODE));
						if(!strcmp(GetBankAccountData(playerid, accountid, BA_PIN_CODE), inputtext, false) && pin_len && len)
						{
							ShowPlayerBankAccountOperation(playerid);
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Ошибка",
								"{FFFFFF}Вы допустили ошибку при вводе PIN-кода",
								"Закрыть", ""
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNT_OPERATION:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						switch(listitem + 1)
						{
							case 1: // Информация о счете
							{
								UpdateBankAccountData(playerid, accountid);

								new fmt_str[128];
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Номер счета:\t\t%d\n"\
									"Наименование:\t\"%s\"\n"\
									"Баланс:\t\t{00CC66}%d руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									GetBankAccountData(playerid, accountid, BA_NAME),
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Информация", fmt_str, "Вернуться", "");
							}
							case 2: // История операций
							{
								ShowPlayerBankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID));
							}
							case 3: // Снять деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
									"{FFCD00}Снять деньги",
									"{FFFFFF}Укажите сумму:",
									"Снять", "Отмена"
								);
							}
							case 4: // Положить деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
									"{FFCD00}Положить деньги",
									"{FFFFFF}Укажите сумму:",
									"Положить", "Отмена"
								);
							}
							case 5: // Перевести на другой счет
							{
								if(GetPlayerLevel(playerid) > 3)
								{
									Dialog
									(
										playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
										"{FFCD00}Перевод средств",
										"{FFFFFF}Укажите номер счета, на который\n"\
										"хотите осуществить перевод:",
										"Далее", "Отмена"
									);
								}
								else SendClientMessage(playerid, 0x999999FF, "Перевод денег доступен только со 3 уровня");
							}
							case 6: // Переименовать счет
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
									"{FFCD00}Переименование счета",
									"{FFFFFF}Введите новое название для этого счета.\n"\
									"Максимальная длина 20 символов:",
									"Ок", "Отмена"
								);
							}
							case 7: // Изменить PIN-код
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
									"{FFCD00}Изменение PIN-кода",
									"{FFFFFF}Введите новый PIN-код.\n"\
									"Длина от 4 до 8 цифр:",
									"Ок", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_INFO:
			{
				ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TAKE_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new take_sum = strval(inputtext);
						if(take_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new fmt_str[155];
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);

							if(balance >= take_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance - %d WHERE a.id=%d AND ba.id=%d", GetPlayerMoneyEx(playerid)+take_sum, take_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, take_sum, "Снятие с банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - take_sum);

									format(fmt_str, sizeof fmt_str, "- Снятие наличных %d руб", take_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t№%d\n"\
										"Вы сняли:\t{FF9900}%d руб\n"\
										"{FFFFFF}Остаток:\t%d руб",
										GetBankAccountData(playerid, accountid, BA_ID),
										take_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Недостаточно средств. Текущий баланс счета №%d: {009966}%d руб", GetBankAccountData(playerid, accountid, BA_ID), balance);
								SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
							}
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
							"{FFCD00}Снять деньги",
							"{FFFFFF}Укажите сумму:",
							"Снять", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_PUT_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new put_sum = strval(inputtext);
						if(put_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new fmt_str[155];
							new money = GetPlayerMoneyEx(playerid);
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);

							if(money >= put_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -put_sum, "Пополнение банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance + put_sum);

									format(fmt_str, sizeof fmt_str, "+ Пополнение на сумму %d руб", put_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t\t№%d\n"\
										"Вы положили:\t{00CC00}%d руб\n"\
										"{FFFFFF}Итоговый баланс:\t%d руб",
										GetBankAccountData(playerid, accountid, BA_ID),
										put_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
							"{FFCD00}Положить деньги",
							"{FFFFFF}Укажите сумму:",
							"Положить", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_1:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_id = strval(inputtext);
						if(transfer_id > 0 && IsNumeric(inputtext))
						{
							new fmt_str[64 + 1];
							new Cache: result;
							new rows;

							format(fmt_str, sizeof fmt_str, "SELECT id,name FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
							result = mysql_query(mysql, fmt_str);

							if((rows = cache_num_rows()))
							{
								SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));
								cache_get_row(0, 1, g_player_bank_transfer[playerid][BT_NAME], mysql, 21);
							}
							cache_delete(result);

							if(rows)
							{
								return ShowPlayerBankAccountTransfer(playerid, accountid);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Счета с таким номером не существует");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
							"{FFCD00}Перевод средств",
							"{FFFFFF}Укажите номер счета, на который\n"\
							"хотите осуществить перевод:",
							"Далее", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_2:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_sum = strval(inputtext);
						new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
						if(!IsPlayerConnected(transfer_id) || GetPVarInt(transfer_id, "LoginPlayer") == 1) return SendClientMessage(playerid, 0x999999FF, "Владелец счёта не авторизован!");

						if(transfer_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							if(balance >= transfer_sum)
							{
								new fmt_str[160];

								if(GetBankAccountData(playerid, accountid, BA_ID) != transfer_id)
								{
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance-%d WHERE id=%d LIMIT 1", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
									mysql_query(mysql, fmt_str, false);

									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance+%d WHERE id=%d LIMIT 1", transfer_sum, transfer_id);
									mysql_query(mysql, fmt_str, false);

									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - transfer_sum);
								}
								format(fmt_str, sizeof fmt_str, "- Перевод %d руб на счет №%d", transfer_sum, transfer_id);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

								format(fmt_str, sizeof fmt_str, "+ Перевод %d руб со счета №%d", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
								BankAccountLog(playerid, transfer_id, fmt_str);

								SetPlayerBankTransfer(playerid, BT_ID, 0);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Со счета:\t\t\t№%d\n"\
									"На счет:\t\t\t№%d\n"\
									"Cумма перевода:\t\t{FF9900}%d руб\n"\
									"{FFFFFF}Остаток на Вашем счете:\t{00CC66}%d руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									transfer_id,
									transfer_sum,
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}Перевод успешно выполнен", fmt_str, "Вернуться", "");
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "На счету недостаточно средств для перевода");
								ShowPlayerBankAccountTransfer(playerid, accountid);
							}
						}
						else ShowPlayerBankAccountTransfer(playerid, accountid);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_NAME:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);

						if(3 <= len <= 20)
						{
							if(!IsABadBankAccountName(inputtext))
							{
								new fmt_str[128];

								mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									format(g_bank_account[playerid][accountid][BA_NAME], 21, "%s", inputtext);

									format(fmt_str, sizeof fmt_str, "* Переименование счета на \"%s\"", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет успешно переименован.\n"\
										"Теперь он будет доступен под названием \"%s\"",
										GetBankAccountData(playerid, accountid, BA_NAME)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Завершение", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Недопустимые символы в новом названии");
								SendClientMessage(playerid, 0xFF6600FF, "Можно использовать {FFCC15}русские {FF6600}и {FFCC15}английские {FF6600}буквы, а также {FFCC15}цифры");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Длина названия счета может быть от {FFCC15}3 до 20 {FF6600}символов");

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Переименование счета",
							"{FFFFFF}Введите новое название для этого счета.\n"\
							"Максимальная длина 20 символов:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_PIN:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);

						if(4 <= len <= 8 && IsNumeric(inputtext))
						{
							new fmt_str[128];

							mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET pin='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								format(g_bank_account[playerid][accountid][BA_PIN_CODE], 9, "%s", inputtext);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), "* Изменение PIN-кода");

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}PIN-код успешно изменен.\n"\
									"Рекомендуем сделать скрин (F8) чтобы не забыть его: {CCFF00}%s",
									GetBankAccountData(playerid, accountid, BA_PIN_CODE)
								);
								return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Изменение PIN", fmt_str, "Вернуться", "");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
							"{FFCD00}Изменение PIN-кода",
							"{FFFFFF}Введите новый PIN-код.\n"\
							"Длина от 4 до 8 цифр:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_RAZDEVALKA:
			{
				if(!response) return 1;
				if(GetPlayerSkin(playerid) == GetPlayerData(playerid, P_OSKIN))
				{
					SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
					SendClientMessage(playerid, -1, "Вы успешно сняли рабочую форму");
				}
				else
				{
					SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
					SendClientMessage(playerid, -1, "Вы успешно надели рабочую форму");
				}
			}
			case DIALOG_BUY_DRUGS:
			{
				if(response)
				{
					new count = strval(inputtext);

					if(IsNumeric(inputtext))
					{
							if(1 <= count <= 500)
							{
								if((GetPlayerData(playerid, P_DRUGS) + count) <= 200)
								{
									new sum = count * 70;
									if(GetPlayerMoneyEx(playerid) >= sum)
									{
										new fmt_str[80];

										format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,drugs=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_DRUGS) + count, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											AddPlayerData(playerid, P_DRUGS, +, count);

											format(fmt_str, sizeof fmt_str, "Вы купили %d гр. наркотиков за %d рублей", count, count * 70);
											SendClientMessage(playerid, 0x3399FFFF, fmt_str);

											return GivePlayerMoneyEx(playerid, -sum, "Покупка наркотиков", false, true);
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 12)");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для покупки такого количества металла");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Вы не можете носить с собой более 200 гр. наркотиков");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Можно купить от 1 до 500 грамм");
						}
					Dialog(playerid, DIALOG_BUY_DRUGS, DIALOG_STYLE_INPUT, "Покупка наркотиков", "Введите количество наркотиков, которые хотите купить в поле ниже:\n\n{AFAFAF}Цена за 1 гр. наркотиков - 70 руб", "Далее", "Отмена");
				}
			}
			case DIALOG_FORBES:
			{
			    if(!response) return 1;

			    switch(listitem + 1)
			    {
					case 1:
					{
						new query[100];
						new Cache: result;

						new fmt_text[912];

						cache_delete(result);

						mysql_format(mysql, query, sizeof query, "SELECT * FROM `accounts` WHERE `admin` < 7 ORDER BY `accounts`.`money` DESC LIMIT 10", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);

						if(cache_num_rows())
						{
							for(new idx; idx < cache_num_rows(); idx ++)
							{
								new money = cache_get_field_content_int(idx, "money"),
									name[32];
								//new admin = cache_get_field_content_int(idx, "admin");
								cache_get_field_content(idx, "name", name);
								//if(admin != 0) continue;

								format(query, sizeof query, "\n%d. %s \t\t%d руб.", idx + 1, name, money);
								strcat(fmt_text, query);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "Топ игроков по деньгам", fmt_text, "Закрыть", "");
							}
						}
					}
					case 2:
					{
						new query[100];
						new Cache: result;

						new fmt_text[912];

						cache_delete(result);

						mysql_format(mysql, query, sizeof query, "SELECT * FROM `accounts` WHERE `admin` < 7 ORDER BY `accounts`.`level` DESC LIMIT 10", GetPlayerAccountID(playerid));
						result = mysql_query(mysql, query, true);

						if(cache_num_rows())
						{
							for(new idx; idx < cache_num_rows(); idx ++)
							{
								new level = cache_get_field_content_int(idx, "level"),
									name[32];

								cache_get_field_content(idx, "name", name);

								format(query, sizeof query, "\n%d. %s \t\t%d уровень", idx + 1, name, level);
								strcat(fmt_text, query);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "Топ игроков по уровню", fmt_text, "Закрыть", "");
							}
						}
					}
				}
			}
			case DIALOG_BANK_CREATE_ACCOUNT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(3 <= len <= 20)
					{
						if(!IsABadBankAccountName(inputtext))
						{
							new query[128];
							new Cache: result;
							new total_accounts;

							format(query, sizeof query, "SELECT COUNT(*) FROM bank_accounts WHERE uid=%d", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query);

							total_accounts = cache_get_row_int(0, 0);
							cache_delete(result);

							if(total_accounts < MAX_BANK_ACCOUNTS)
							{
								mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts (uid,name,reg_time) VALUES (%d,'%e',%d)", GetPlayerAccountID(playerid), inputtext, gettime());
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									Dialog
									(
										playerid, DIALOG_BANK_CREATED_ACCOUNT, DIALOG_STYLE_MSGBOX,
										"{FFCD00}Счет создан",
										"{FFFFFF}Вы создали новый счет в банке.\n\n"\
										"Для доступа к нему используйте PIN-код {00FF66}0000{FFFFFF}. После входа\n"\
										"настоятельно рекомендуем изменить его на более сложный.\n"\
										"Это поможет защитить счет от несанкционированного доступа.",
										"Готово", ""
									);
								}
							}
							else Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Лимит счетов", "{FFFFFF}Можно создать не более восьми банковских счетов", "Ок", "");
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF3300}Ошибка",
								"{FFFFFF}Операция запрещена. Недопустимые символы в названии счета\n"\
								"Можно использовать {FFCC15}русские {FFFFFF}и {FFCC15}английские {FFFFFF}буквы, а также {FFCC15}цифры",
								"Выход", ""
							);
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF3300}Ошибка",
							"{FFFFFF}Длина названия счета может быть от {FFCC15}3 до 20 {FFFFFF}символов",
							"Закрыть", ""
						);
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_CREATED_ACCOUNT:
			{
				ShowPlayerBankDialog(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_CALL:
			{
				if(response)
				{
					new number = strval(inputtext);

					if(number >= 0 && strlen(inputtext))
					{
						new params[16];
						valstr(params, number);

						callcmd::c(playerid, params);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ошибка набора");
				}
			}
			case DIALOG_PHONE_CALL_BALANCE:
			{
				SetPlayerPhoneUseState(playerid, false);
			}
			case DIALOG_CONFIG:
			{
				if(!response) return 1;
				switch(listitem)
				{
					case 0, 1, 2:
					{
						SendClientMessage(playerid, -1, "Используйте /setrates чтобы изменить");
					}
					case 3:
					{
						if(Test_server == 0)
						{
							Test_server = 1;
							SendClientMessage(playerid, -1, "Вы успешно включили запрет игрокам на тест");
						}
						else
						{
							Test_server = 0;
							SendClientMessage(playerid, -1, "Вы успешно выключили запрет игрокам на тест");
						}
						SaveServerConfig();
					}
					case 4:
					{
						new query[128];
						format(query, sizeof query, "SELECT name FROM test_user");
						mysql_tquery(mysql, query, "ShowTestPlayer", "i", playerid);
					}
					case 5:
					{
						SendClientMessage(playerid, -1, "Используйте /addzbtplayer чтобы добавить");
					}
					case 6:
					{
						SendClientMessage(playerid, -1, "Используйте /delzbtplayer чтобы удалить");
					}
				}
			}
			//----
			case DIALOG_AHELP:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"support",
								"Команда\t\tОписание\n\
								 /ans \t\t\tответить игроку\n\
								 /a \t\t\tадмин чат\n\
								 /apanel\t\t\tпанель администратора\n\
								 /admins \t\tадминистраторы онлайн",
								"Назад", "Закрыть"
							);
						}
						case 2:
    				    {
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"Администратор второго уровня",
								"Команда\t\tОписание\n\
							    /sp \t\tследить за игроком\n\
								/az \t\tтелепортироваться в админ-зону\n\
								/jail \t\tпосадить в деморган\n\
								/kick \t\tкикнуть игрока\n\
								/weap \t\tинформация о оружии игрока\n\
								/rmute \t\tзаблокировать репорт\n\
								/freeze \t\tзаморозить игрока\n\
							    /alock \t\tоткрыть / закрыть транспорт\n\
							    /setfuel \tустановить топливо транспорту\n\
								/mute \t\tвыдать мут\n\
								/afly\t\tрежим полёта\n\
								/fly\t\tрежим полёта\n\
								/spawn \t\tзаспавнить игрока\n\
								/slap \t\tподкинуть игрока\n\
								/goto \t\tтелепортироваться к игроку\n\
								/fixcar\t\tпочинить авто\n\
								/spcar\t\tзаспавнить авто\n\
								/gotocar\tтелепортироваться к авто\n\
								/getcar\t\tтелепортировать авто к себе\n\
								/stats\t\tстатистика игрока",
								"Назад", "Закрыть"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"Администратор третьего уровня",
								"Команда\t\tОписание\n\
								 /ban \t\t\tзабанить игрока\n\
								 /gotofuelst \t\tтелепорт к АЗС\n\
								 /gotobiz \t\tтелепорт к бизнесу\n\
								 /inter \t\t\tустановить интерьер\n\
								 /getv \t\t\tтелепортировать личное авто\n\
								 /warn \t\t\tвыдать предупреждение\n\
								 /skick\t\t\tтихо кикнуть\n\
								 /get \t\t\tинформация о игроке\n\
								 /money \t\t\tинформация о деньгах\n\
								 /offban \t\t\tоффлайн забанить\n\
								 /hp\t\t\tвыдать здоровье\n\
								 /gotohouse \t\tтелепорт к дому\n\
								 /gethere \t\tтелепорт игрока к себе\n\
								 /okay \t\t\tодобрить ник-нейм\n\
								 /nokay \t\t\tотклонить заявку\n\
								 /gang_info \t\tинформация о бандах\n\
								 /getinfo \t\t\tподробная информация о игроке\n\
								 /getip \t\t\tподробная о IP адресах игрока\n\
								 /skin \t\t\tвыдать временный скин",
								"Назад", "Закрыть"
							);
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"Администратор четвертого уровня",
								"Команда\t\tОписание\n\
								 /ears \t\t\tпрослушка СМС\n\
								 /templeader \t\tвременное лидерство\n\
								 /spcars \t\t\tзаспавнить все авто\n\
								 /sban \t\t\tзабанить без лишнего шума\n\
								 /settime \t\tустановить время\n\
								 /givegun \t\tвыдать оружие\n\
								 /settp \t\t\tустановить точку телепорта\n\
								 /mp_gun \t\tвыдать оружие в радиусе\n\
								 /mp_skin\t\tвыдать скин в радиусе\n\
								 /orglist \t\t\tсписок огранизаций\n\
								 /money_log \t\tпоследние 20 операций денег игрока\n\
								 /mp \t\t\tуправление мероприятием\n\
								 /auninvite \t\tуволить из организации\n\
								 /veh \t\t\tсоздать транспорт\n\
								 /hpall \t\t\tвыдать здоровье в радиусе",
								"Назад", "Закрыть"
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"Администратор пятого уровня",
								"Команда\t\tОписание\n\
								 /gzcolor \t\tперекрасить территорию\n\
								 /makeleader \t\tназначить лидера\n\
								 /unwarn \t\tснять предупреждение\n\
								 /tpcor \t\t\tтелепорт по координатам\n\
								 /giveskill \t\tустановить навыки\n\
								 /unban \t\t\tснять бан\n\
								 /settime \t\tустановить время\n\
								 /crime_rank \t\tустановить наколку\n\
								 /makeadminoff \t\tоффлайн выдать админку\n\
								 /makeleaderoff \t\tоффлайн выдать лидерку\n\
								 /a_stat \t\t\tстатистика администратора\n\
								 /a_bank \t\tинформация о банк.счетах\n\
								 /bank_log \t\tистория операций счета",
        						"Назад", "Закрыть"
							);
						}
						case 6:
						{
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"Администратор шестого уровня",
								"Команда\t\tОписание\n\
								 /gmx \t\t\tрестарт сервера\n\
								 /getlog \t\t\tпросмотр логирования\n\
								 /delacc \t\t\tудалить аккаунт\n\
								 /setpremium \t\tвыдать VIP\n\
								 /setprefiks\t\tвыдать префикс\n\
								 /makeadmin\t\tназначить администратором\n\
								 /setfuels\t\tустановить продукты АЗС\n\
								 /atune \t\t\tустановить тюнинг\n\
								 /vinils \t\t\tустановить винил\n\
								 /deladmin \t\tснять администратора\n\
								 /doubling \t\tуправление сервером\n\
								 /gaapanel \t\tадмин панель\n\
								 /setskin\t\t\tвыдать постоянный скин\n\
								 /setprods\t\tустановить продукты бизнесу",
								"Назад", "Закрыть"
							);
						}
						case 7:
						{
							Dialog
							(
								playerid, DIALOG_CANCEL_AHELP, DIALOG_STYLE_TABLIST_HEADERS,
								"Руководитель/Разработчик",
								"Команда\t\tОписание\n\
								 /setstats \t\tизменить статистику игрока\n\
								 /createpromo \t\tсоздать промокод\n\
								 /cash \t\t\tвыдать деньги\n\
								 /givedonate \t\tвыдать донат\n\
								 /pmenu \t\tуправление промокодами\n\
								 /addbiz \t\tсоздать бизнес\n\
								 /bsetexitpos \t\tустановить позицию выхода бизнесу\n\
								 /addhouse \t\tсоздать дом\n\
								 /setexitpos \t\tустановить позицию выхода дому\n\
								 /setstats \t\tизменить статистику игрока\n\
								 /createpromo \t\tсоздать промокод\n\
								 /p_create \t\tсоздать специальный код игроку\n\
								 /p_delete \t\tудалить специальный код игрока\n\
								 /gpanel \t\tуправление подарками\n\
								 /cash \t\t\tвыдать деньги\n\
								 /givedonate \t\tвыдать донат\n\
								 /addfuelst \t\tсоздать заправку",
								"Назад", "Закрыть"
							);
						}
						default:
							return 1;
					}
				}
			}
			case DIALOG_BUY_ADMIN:
			{
				if(!response) return 1;
				switch(listitem + 1)
				{
					case 1:
					{
						if(GetPlayerCurrentDonate(playerid) < 499) return SendClientMessage(playerid, -1, "У вас не хватает денег на данную покупку");
						SetPlayerData(playerid, P_ADMIN, 1);
						UpdatePlayerDatabaseInt(playerid, "admin", 1);
						GivePlayerDonate(playerid, -499, "Покупка админки");
						SendClientMessage(playerid, -1, "Вы успешно купили админ права.");
					}
					case 2:
					{
						if(GetPlayerCurrentDonate(playerid) < 999) return SendClientMessage(playerid, -1, "У вас не хватает денег на данную покупку");
						SetPlayerData(playerid, P_ADMIN, 2);
						UpdatePlayerDatabaseInt(playerid, "admin", 2);
						GivePlayerDonate(playerid, -999, "Покупка админки");
						SendClientMessage(playerid, -1, "Вы успешно купили админ права.");
					}
					case 3:
					{
						if(GetPlayerCurrentDonate(playerid) < 1499) return SendClientMessage(playerid, -1, "У вас не хватает денег на данную покупку");
						SetPlayerData(playerid, P_ADMIN, 3);
						UpdatePlayerDatabaseInt(playerid, "admin", 3);
						GivePlayerDonate(playerid, -1499, "Покупка админки");
						SendClientMessage(playerid, -1, "Вы успешно купили админ права.");
					}
					case 4:
					{
						if(GetPlayerCurrentDonate(playerid) < 1999) return SendClientMessage(playerid, -1, "У вас не хватает денег на данную покупку");
						SetPlayerData(playerid, P_ADMIN, 4);
						UpdatePlayerDatabaseInt(playerid, "admin", 4);
						GivePlayerDonate(playerid, -1999, "Покупка админки");
						SendClientMessage(playerid, -1, "Вы успешно купили админ права.");
					}
					case 5:
					{
						if(GetPlayerCurrentDonate(playerid) < 2499) return SendClientMessage(playerid, -1, "У вас не хватает денег на данную покупку");
						SetPlayerData(playerid, P_ADMIN, 5);
						UpdatePlayerDatabaseInt(playerid, "admin", 5);
						GivePlayerDonate(playerid, -2499, "Покупка админки");
						SendClientMessage(playerid, -1, "Вы успешно купили админ права.");
					}
					case 6:
					{
						if(GetPlayerCurrentDonate(playerid) < 2999) return SendClientMessage(playerid, -1, "У вас не хватает денег на данную покупку");
						SetPlayerData(playerid, P_ADMIN, 6);
						UpdatePlayerDatabaseInt(playerid, "admin", 6);
						GivePlayerDonate(playerid, -2999, "Покупка админки");
						SendClientMessage(playerid, -1, "Вы успешно купили админ права.");
					}
				}
			}
			case DIALOG_QUESTS:
			{
				if(!response) return 1;
				switch(listitem + 1)
				{
					case 1:
					{
						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0095ff}Первый телефон", "{FFFFFF}Приветствуем Вас на нашем сервере!\nДля того чтобы понять как устроен сервер, мы сделали небольшие начальные квесты\nИ первое твоё задание будет купить телефон в сотовом салоне\n\n{ff1500}За выполнение ты получишь: 300.000 и 1 EXP\n{FFFFFF}Приятной игры на RadmiX RolePlay", "Понял", "");
					}
					case 2:
					{
						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0095ff}Начальная работа", "{FFFFFF}Чтобы выполнить четвёртое задание тебе нужно пойти и устроиться на работу фермера.\nСделать это можно просто подойдя на пикап бизнеса 'Ферма' и нажать L.ALT\nНо ты должен не просто устроиться но и принести на склад минимум 5 стогов сена. В принципе это не долго.\n\n{ff1500}Награда: 400.000 и 1 EXP", "Хорошо", "");
						//Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0095ff}Первое жильё", "{FFFFFF}Чтобы выполнить второе задание тебе нужно пойти и найти себе жильё.\nНа сервере много не занятых домов по этому тебе не составит труда это сделать.\n\n\t{ff1500}Награда: 200.000 и 2 EXP", "Хорошо", "");
					}
					case 3:
					{
						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0095ff}Первое авто", "{FFFFFF}Чтобы выполнить третье задание тебе нужно пойти и купить себе авто.(Не важно какой класс)\n\n{ff1500}Награда: 500.000 и 2 EXP", "Хорошо", "");
					}
					case 4:
					{
						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0095ff}Первое жильё", "{FFFFFF}Чтобы выполнить второе задание тебе нужно пойти и найти себе жильё.\nНа сервере много не занятых домов по этому тебе не составит труда это сделать.\n\n{ff1500}Награда: 600.000 и 2 EXP", "Хорошо", "");
						//Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0095ff}Начальная работа", "{FFFFFF}Чтобы выполнить четвёртое задание тебе нужно пойти и устроиться на работу фермера.\nСделать это можно просто подойдя на пикап бизнеса 'Ферма' и нажать L.ALT\nНо ты должен не просто устроиться но и принести на склад минимум 5 стогов сена. В принципе это не долго.\n\n\t{ff1500}Награда: 300.000 и 4 EXP", "Хорошо", "");
					}
				}
			}
			case DIALOG_CANCEL_AHELP:
			{
			    if(response)
			    {
			    	callcmd::ahelp(playerid, "");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_INFO_HELP:
			{
			    if(!response) return 1;
				switch(listitem + 1)
				{
				    case 1:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Информация о проекте", "RadmiX RolePlay - проект среди игровых серверов\nв многопользовательской игре Criminal Russia Multiplayer\n\nСайт: vk.com/radmix_gtacrmp\n Форум: forum.rm-rp.ru/index.php \n Группа ВКонтакте: vk.com/radmix_gtacrmp", "Закрыть", "");
				    }
				    case 2:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Где заработать денег?", "Деньги можно заработать на подработках (шахта, ферма, лесопилка, завод, ферма)\nНайти месторасположение работ можно с помощью GPS (/gps > Работа)", "Закрыть", "");
				    }
				    case 3:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Где получить права на вождение?", "Чтобы получить права на вождение Вам нужно сдать экзамен в автошколе\nGPS > Автошкола за 1000 рублей, либо купить права у инструктора", "Закрыть", "");
				    }
				    case 4:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как купить жилье?", "Купить дом или квартиру можно у государства или с рук у игрока\nНа Вашем радаре будут отображаться иконки домов\nЕсли иконка зеленая, то дом продается, если красная - нет", "Закрыть", "");
				    }
				    case 5:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как купить бизнес?", "Бизнес можно купить у государства или с рук у игрока\nНайти бизнес можно с помощью GPS (/gps > Бизнесы)", "Закрыть", "");
				    }
				    case 6:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как купить авто?", "Автомобиль можно купить в автосалоне (/gps > Автосалоны) или с рук у игрока\nДля того чтобы пользоваться машиной, Вам нужно жилье", "Закрыть", "");
				    }
				    case 7:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как прокачать уровень?", "Каждый час в XX:00 минут Вам начисляется опыт\nУзнать очки опыта можно в статистике (/mn - Статистика)\nДля получения опыта Вы не должны находиться в AFK", "Закрыть", "");
				    }
				    case 8:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как вступить в организацию?", "О наборах в государственные организации cообщают в чате\nО наборах в нелегальные организации сообщают в объявлениях СМИ\nДля вступление в организацию Вам потребуется водительские права и от 3-ех лет проживания в области", "Закрыть", "");
				    }
				    case 9:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как стать агентом поддержки или лидером?", "Для того чтобы стать лицом проекта Вам необходимо иметь опыт в RolePlay режиме,\nзнать на отлично базовый уровень игрока, уметь общаться с людьми,\nсмотреть всегда наперед и показать себя для всех с хорошей стороны\nДля просмотра свободных мест на лидерство посетите наш форум: ", "Закрыть", "");
				    }
				    case 10:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как найти нужное мне место?", "Любое нужное Вам место можно найти с помощью GPS (/gps)\nЕсли Вы не нашли нужное Вам место - спросите у агентов поддержки (/report - Вопрос)", "Закрыть", "");
				    }
				    case 11:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Где достать оружие?", "Оружие можно купить у любого игрока имеющего оружие\nили приобрести в магазине оружия (/gps - Бизнесы)", "Закрыть", "");
				    }
				    case 12:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Где устроиться на работу?", "Трудоустройство проходит в центре занятости, либо на базах организаций (/gps - Базы организаций)", "Закрыть", "");
				    }
				    case 13:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как посмотреть команды?", "Для просмотра нужных Вам команд используйте: /mn - Список команд", "Закрыть", "");
				    }
				    case 14:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как добраться до работы?", "Добраться до работы можно с помощью такси или маршрутки\nЕсли их нет долгое время - воспользуйтесь попуткой", "Закрыть", "");
				    }
				    case 15:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Где купить телефон и SIM-карту?", "Телефон и SIM-карту можно купить в любом из магазинов 24/7\nСтоимость телефона 2000 рублей, SIM-карта 500 рублей", "Закрыть", "");
				    }
				    case 16:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как мне уволиться из фракции?", "Чтобы покинуть фракцию Вам необходимо сообщить об этом лидеру или заместителю фракции:\nИспользуйте: /r Прошу меня уволить по причине (указать причину)\nПри наличии улучшений аккаунта используйте команду: /leave", "Закрыть", "");
				    }
				    case 17:
				    {
				        Dialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Как узнать номер телефона игрока?", "Если игрок находится в игре, то используйте команду: /number [имя игрока]", "Закрыть", "");
				    }
				}
			}
			// -----------------------------------------------------------------
			// -----------------------------------------------------------------
   			case DIALOG_ACTION:
			{
				if(response)
				{
					if(1 <= (listitem+1) <= 4)
					{
						new targetid = GetPlayerData(playerid, P_TARGET_ID);

						if(IsPlayerConnected(targetid) && IsPlayerLogged(targetid))
						{
							if(IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
							{
								new params[5];
								valstr(params, targetid);

								new cmd[4][16] = {"cmd_hi", "cmd_pass", "cmd_lic", "cmd_skill"};
								CallLocalFunction(cmd[listitem], "ds", playerid, params);
							}
							else SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
						}
						else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");
					}
					SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VIEV_JOBS_LIST:
			{
				if(response)
				{
					Dialog
					(
						playerid, DIALOG_JOIN_TO_JOB, DIALOG_STYLE_LIST,
						"{FFCD00}Список доступных работ",
						"1. Водитель автобуса\t\t\t{0099FF}2 лвл\n"\
						"2. Таксист\t\t\t\t{0099FF}3 лвл\n",
						//"3. Автомеханик\t\t\t{0099FF}4 лвл\n"\
						//"4. Дальнобойщик\t\t\t{0099FF}4 лвл",
						"Выбрать", "Отмена"
					);
				}
			}
			case DIALOG_JOIN_TO_JOB:
			{
				if(response)
				{
					if(GetPlayerTeamEx(playerid) != TEAM_NONE)
						return SendClientMessage(playerid, 0x999999FF, "Вы не можете устроиться на работу, находясь во фракции");

					switch(listitem + 1)
					{
						case JOB_BUS_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 2)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу водителя автобуса необходим 2 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу водителя автобуса");
							SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки автобусов находятся на всех автостанциях. Используйте {0099FF}/gps {FFFFFF}чтобы найти ближайшую к вам");
						}
						case JOB_TAXI_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 3)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу водителя такси необходим 3 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу таксиста");
							SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки такси можно найти возле автостанций, ЖД вокзалов и других людных местах");
						}
						case JOB_MECHANIC:
						{
							if(GetPlayerLevel(playerid) < 4)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу автомеханика необходим 4 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу автомеханика");
							SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы начать работу найдите служебный транспорт в Вашем городе. Используйте {FF9900}/gps {FFFFFF}при необходимости");
							SendClientMessage(playerid, 0xFFFFFFFF, "Команды: /getfuel - закупить топливо; /fill - заправить транспорт; /repair - починить транспорт");
						}
						case JOB_TRUCKER:
						{
							if(GetPlayerLevel(playerid) < 4)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу дальнобойщика необходим 4 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу дальнобойщика");
							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/gps {FFFFFF}чтобы найти стоянки транспорта для развозчиков");
							SendClientMessage(playerid, 0xFFFFFFFF, "Дополнительные инструкции и указания Вы будете получать в процессе работы");
						}
						default:
							return 1;
					}
					new query[64];

					format(query, sizeof query, "UPDATE accounts SET job=%d WHERE id=%d LIMIT 1", listitem + 1, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);

					if(!mysql_errno())
					{
						SetPlayerData(playerid, P_JOB, listitem + 1);
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 14)");
				}
			}
			case DIALOG_END_JOB:
			{
				if(response)
					EndPlayerJob(playerid);
			}
			#if defined _blackjack_included
			case DIALOG_BLACKJACK_BET: {
				if(!response)
					return SelectTextDraw(playerid, 0x000000FF), false;

				new tableid = (BJ_PlayerInfo[playerid][pBlackJackTableID] - 1), amount = strval(inputtext);

				if(blackjackTableInfo[tableid][blackjackTableStatus] != BLACKJACK_STATUS_STARTING) {
					SelectTextDraw(playerid, 0x000000FF);
					return false;
				}
				if(amount < blackjackTableInfo[tableid][blackjackTableMinBet] || amount > blackjackTableInfo[tableid][blackjackTableMaxBet] || amount > g_player[playerid][pCasinoChips]) {
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL),
						"{FFFFFF}Введите сумму ставки {d8284c}(%d - %d){FFFFFF}:\n\nУ вас в наличии: {d8284c}%d фишек",
						blackjackTableInfo[tableid][blackjackTableMinBet], blackjackTableInfo[tableid][blackjackTableMaxBet], g_player[playerid][pCasinoChips]
					);
					return Dialog(playerid, DIALOG_BLACKJACK_BET, DIALOG_STYLE_INPUT, "{d8284c}Black Jack", STRING_GLOBAL, "Принять", "Выйти"), STRING_GLOBAL[0] = EOS;
				}

				SetPVarInt(playerid, "Anticheat::Dialog_ID", 0);
				BJ_PlayerInfo[playerid][pBlackJackLastBet] =
				BJ_PlayerInfo[playerid][pBlackJackBet][BJ_PlayerInfo[playerid][pBlackJackBlockID]] = amount;

				SelectTextDraw(playerid, 0x000000FF);

				ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
				return true;
			}

			case DIALOG_BLACKJACK_LEAVE: {
				SelectTextDraw(playerid, 0x000000FF);
				if(response) blackjack_LeaveGame(playerid);
				return true;
			}
			#endif
			case DIALOG_DOP_SHOP:
			{
				if(!response) return 1;
				switch(listitem + 1)
				{
					case 1: ShowPlayerShop(playerid, SHOP_TAPOR);
					case 2: ShowPlayerShop(playerid, SHOP_PARASH);
					case 3: ShowPlayerShop(playerid, SHOP_LATTER);
					case 4: ShowPlayerShop(playerid, SHOP_BOOMBOX);
				}
			}
			case DIALOG_BUS_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 1800)
						{
							GivePlayerMoneyEx(playerid, -1800, "Аренда автобуса", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу водителя автобуса {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_BUS_ROUTE_COST:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new route_cost = strval(inputtext);

						if(0 <= route_cost <= 100 && IsNumeric(inputtext))
						{
							SetPlayerData(playerid, P_JOB_TARIFF, route_cost);

							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_SELECTION, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите маршрут",
								g_bus_routes_list,
								"Ок", "Отмена"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
								"{FFCD00}Стоимость проезда",
								"{FFFFFF}Сколько будет стоить проезд?\n"\
								"Укажите цену от 0 до 100 рублей",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_BUS_ROUTE_SELECTION:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(0 <= listitem <= sizeof g_bus_routes - 1)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
							SetPlayerData(playerid, P_BUS_ROUTE, listitem);

							StartPlayerJob(playerid, JOB_BUS_DRIVER);
						}
					}
				}
			}
			case DIALOG_TAXI_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 2000)
						{
							GivePlayerMoneyEx(playerid, -2000, "Аренда такси", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу таксиста {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TAXI_NAME:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15))
					{
						Dialog
						(
							playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Название такси",
							"{FFFFFF}Придумайте название для вашего такси\n"\
							"Максимальная длина 15 символов\n\n"\
							"Если вы не хотите как-то называться\n"\
							"нажмите кнопку \"Пропустить\"",
							"Далее", "Пропустить"
						);
						return 1;
					}
					else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
				}
				else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

				Dialog
				(
					playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
					"{FFCD00}Настройка счетчика",
					"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
					"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
					"Тарифная ставка может быть от 0 до 5000 рублей",
					"Ок", "Отмена"
				);
			}
			case DIALOG_TAXI_TARIFF:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new tariff = strval(inputtext);

						if(!(0 <= tariff <= 5000) || !IsNumeric(inputtext))
						{
							Dialog
							(
								playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
								"{FFCD00}Настройка счетчика",
								"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
								"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
								"Тарифная ставка может быть от 0 до 5000 рублей",
								"Ок", "Отмена"
							);
							return 1;
						}
						else
						{
							SetPlayerData(playerid, P_JOB_TARIFF, tariff);
							StartPlayerJob(playerid, JOB_TAXI_DRIVER);
						}
					}
				}
				g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
			}
			case DIALOG_MECHANIC_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда эвакуатора", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу автомеханика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_MECHANIC_START_JOB:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						Dialog
						(
							playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Автомеханик",
							"{FFFFFF}Введите название для Вашей техслужбы,\n"\
							"или оставьте поле пустым",
							"Готово", "Отмена"
						);
					}
				}
			}
			case DIALOG_MECHANIC_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);

					if(len)
					{
						if(!(1 <= len <= 15))
						{
							Dialog
							(
								playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
								"{FFCD00}Автомеханик",
								"{FFFFFF}Введите название для Вашей техслужбы,\n"\
								"или оставьте поле пустым",
								"Готово", "Отмена"
							);
							return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное название | 15 символов максимум");
						}
						else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
					}
					else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

					StartPlayerJob(playerid, JOB_MECHANIC);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TRUCKER_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TRUCKER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда грузовика", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "Для того, чтобы начать работу дальнобойщика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TRUCKER_START_JOB:
			{
				if(response)
				{
					StartPlayerJob(playerid, JOB_TRUCKER);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_BOOK:
			{
				if(response && (0 <= listitem <= MAX_PHONE_BOOK_CONTACTS-1))
				{
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS, listitem);
				}
			}
			case DIALOG_PHONE_BOOK_OPTION:
			{
				new contactid = GetPlayerPhoneBookSelectContact(playerid);
				if(contactid != INVALID_PLAYER_ID)
				{
					if(response)
					{
						ShowPhoneBookOperation(playerid, listitem + 1, contactid);
					}
					else ShowPlayerPhoneBook(playerid);
				}
			}
			case DIALOG_PHONE_BOOK_SEND_SMS:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(len)
					{
						if(len < 65)
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new fmt_str[90];

							format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER), inputtext);
							callcmd::sms(playerid, fmt_str);
							return 1;
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_SEND_SMS);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NAME:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 20)
					{
						new contactid = GetPlayerPhoneBookSelectContact(playerid);
						new query[90];

						format(g_player_phone_book[playerid][contactid][PB_NAME], 21, "%s", inputtext);

						mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
						mysql_query(mysql, query, false);

						SendClientMessage(playerid, 0x99CC33FF, "Имя контакта изменено");
						ShowPlayerPhoneBook(playerid);
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NAM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NUMBER:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 9 && strval(inputtext) > 0 && IsNumeric(inputtext))
					{
						if(!CheckPhoneBookUsedNumber(playerid, inputtext))
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new query[90];

							format(g_player_phone_book[playerid][contactid][PB_NUMBER], 10, "%s", inputtext);

							mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET number='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
							mysql_query(mysql, query, false);

							SendClientMessage(playerid, 0x99CC33FF, "Номер контакта изменен");
							ShowPlayerPhoneBook(playerid);
						}
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NUM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_ADD_CONTACT:
			{
				if(response)
				{
					new player_name[20 + 1];
					GetPVarString(playerid, "add_contact_name", player_name, sizeof(player_name));

					if(!(3 <= strlen(inputtext) <= 9) || strval(inputtext) < 1 || !IsNumeric(inputtext))
					{
						new fmt_str[64 + 1];

						format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", player_name);
						Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}Добавление нового контакта", fmt_str, "Добавить", "Отмена");

						return 1;
					}
					AddPhoneBookContact(playerid, player_name, inputtext);
				}
				DeletePVar(playerid, "add_contact_name");
			}
			// -----------------------------------------------------------------
			case DIALOG_MINER_BUY_METALL:
			{
				if(response)
				{
					new count = strval(inputtext);
					new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);

					if(IsNumeric(inputtext))
					{
						if(metall >= count)
						{
							if(1 <= count <= 50)
							{
								if((GetPlayerData(playerid, P_METALL) + count) <= 20)
								{
									new sum = count * 15;
									if(GetPlayerMoneyEx(playerid) >= sum)
									{
										new fmt_str[80];

										format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_METALL) + count, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall - count);
											UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

											AddPlayerData(playerid, P_METALL, +, count);

											format(fmt_str, sizeof fmt_str, "Вы купили %d кг за %d рублей", count, count * 15);
											SendClientMessage(playerid, 0x3399FFFF, fmt_str);

											return GivePlayerMoneyEx(playerid, -sum, "Покупка металла на шахте", false, true);
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 12)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества металла");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете носить с собой более 20 кг металла");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Можно купить от 1 до 50 кг металла");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "На складе шахты нет такого количества металла");
					}
					ShowPlayerBuyMetalDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TEMP_JOB_LOADER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						TogglePlayerDynamicCP(playerid, help_info_CP, false);

						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LOADER, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_THIGH, 18635, A_OBJECT_BONE_RIGHT_THIGH, 0.2, -0.06, 0.1, 0.0, -90.0, 90.0, 1.0, 1.0, 1.0, 0);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LOADER);

						SetPlayerLoaderJobLoadCP(playerid);

						SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу грузчика");
						SendClientMessage(playerid, 0x3399FFFF, "Точки доставки товаров помечены {FF0000}красными {3399FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LOADER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LOADER);
				}
			}
			case DIALOG_TEMP_JOB_MINER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_MINER);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
						SetPlayerMinerJobLoadCP(playerid);

						SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу шахтера");
						SendClientMessage(playerid, 0x66CC00FF, "Ищите месторождения железной руды на территории шахты");
						SendClientMessage(playerid, 0x66CC00FF, "Добытое сырье относите на склад для переплавки");
					}
				}
			}
			case DIALOG_TEMP_JOB_MINER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_MINER);
				}
			}
			case DIALOG_TEMP_JOB_FACTORY_TRUCKER:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY_TRUCKER, TJ_SKIN)[GetPlayerSex(playerid)];

							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);

							if(GetPlayerSex(playerid))
								SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);

							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY_TRUCKER);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_NONE);

							SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу в службе доставки завода");
							SendClientMessage(playerid, 0x66CC00FF, "Для получения информации воспользуйтесь инструкцией рядом с Вами");

							SetPlayerData(playerid, P_IN_JOB, true);
						}
						case TEMP_JOB_FACTORY_TRUCKER:
						{
							EndPlayerJob(playerid);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_FACTORY:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY, TJ_SKIN)[GetPlayerSex(playerid)];
							if(!GetPlayerSex(playerid))
							{
								skin += random(2);
							}

							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
							SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);

							TogglePlayerFactoryCP(playerid, true);
							SetPlayerData(playerid, P_JOB_WAGE, 0);

							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY);

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

							SendClientMessage(playerid, 0x3399FFFF, "Вы начали работу в производственном цеху завода");
							SendClientMessage(playerid, 0x66CC00FF, "Для получения информации воспользуйтесь инструкцией у входа в цех");

							DeletePVar(playerid, "factory_skill");
							DeletePVar(playerid, "factory_bad_prods");
							DeletePVar(playerid, "factory_take_metall");
						}
						case TEMP_JOB_FACTORY:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						SetPlayerLumberJackChopCP(playerid);

						SendClientMessage(playerid, 0xCECECEFF, "Вы начали работу лесоруба");
						SendClientMessage(playerid, -1, "Точки добычи дерева помечены красными маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
				}
			}
			case DIALOG_TEMP_JOB_FERMER_ST:
			{
			    if(response)
			    {
       				SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_FERMER, TJ_SKIN)[GetPlayerSex(playerid)]);

					SetPlayerJobLoadItems(playerid, 0);
     				SetPlayerTempJob(playerid, TEMP_JOB_FERMER);

					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_CHOP);
					SetPlayerFermerChopCP(playerid);

					SendClientMessage(playerid, COLOR_GOLD, "Вы начали работу фермера");
					SendClientMessage(playerid, -1, "Cобирайте сено на поле и переносите его на мельницу");
			    }
			}
			case DIALOG_TEMP_JOB_FERMER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_FERMER);
				}
			}
			case DIALOG_TEMP_JOB_POMOI_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_POMOI, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_POMOI);

						SetPlayerData(playerid, P_POMOI_ROUTE_STEP, 0);


						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_POMOI_CHOP);
						SendClientMessage(playerid, 0x32a44bFF, "Вы успешно устроились на подработку:{FF9900} Уборщик пляжа!");
						SendClientMessage(playerid, 0x32a44bFF, "Отправляйтесь на пляж собирать мусор.");
					}
				}
			}
			case DIALOG_TEMP_JOB_POMOI_END:
			{
				if(response)
				{
				    SetPlayerData(playerid, P_POMOI, 0);
					EndPlayerTempJob(playerid, TEMP_JOB_POMOI);
				}
			}
			case DIALOG_TEMP_JOB_LOAD_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LOAD, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LOAD);

						SetPlayerData(playerid, P_LOAD_ROUTE_STEP, 0);


						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOAD_CHOP);
						SendClientMessage(playerid, 0x32a44bFF, "Вы успешно устроились на подработку:{FF9900} Разгрузчика вагонов!");
						SendClientMessage(playerid, 0x32a44bFF, "Отправляйтесь к вагонам разгружать ящики!");
					}
				}
			}
			case DIALOG_TEMP_JOB_LOAD_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LOAD);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_FUEL_STATION_BUY:
			{
				if(response)
				{
					new stationid = GetPVarInt(playerid, "buyfuelst");

					if(IsPlayerInRangeOfPoint(playerid, 15.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!IsFuelStationOwned(stationid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetFuelStationData(stationid, FS_PRICE))
							{
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили заправочную станцию");
								BuyPlayerFuelStation(playerid, stationid);

								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новая заправочная станция", "{FFFFFF}Вам нужно заплатить за аренду АЗС в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этой заправочной станции");
						}
						else
						{
							new fmt_str[75];

							format(fmt_str, sizeof fmt_str, "Эта заправочная станция уже куплена. Владелец: %s", GetFuelStationData(stationid, FS_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buyfuelst");
			}
			case DIALOG_FUEL_STATION_INFO:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PARAMS:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, listitem + 1);
				}
				//else callcmd::buyfuelst(playerid, "");
			}
			case DIALOG_FUEL_STATION_NAME:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(3 <= strlen(inputtext) <= 15)
						{
							format(g_fuel_station[stationid][FS_NAME], 20, inputtext, 0);
							UpdateFuelStationLabel(stationid);

							SendClientMessage(playerid, 0x66CC00FF, "Название заправочной станции изменено");
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Длина названия должна быть от 3-х до 15-ти символов");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_NEW_NAME);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PRICE_FUEL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 70 && IsNumeric(inputtext))
						{
							new fmt_str[75];

							SetFuelStationData(stationid, FS_FUEL_PRICE, price);
							UpdateFuelStationLabel(stationid);

							format(fmt_str, sizeof fmt_str, "Теперь топливо на Вашей заправке будет продаваться по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Укажите отпускную цену от 2 до 70 рублей за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_FUEL_PRICE);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_PR:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 10 && IsNumeric(inputtext))
						{
							new fmt_str[90];
							SetFuelStationData(stationid, FS_BUY_FUEL_PRICE, price);

							format(fmt_str, sizeof fmt_str, "Теперь топливо для Вашей заправки будет закупаться по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET buy_fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Укажите закупочную цену от 2 до 10 рублей за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_BUY_FUEL_PRIC);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_ORDER_FUELS:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(GetFuelStationData(stationid, FS_ORDER_ID) != -1)
						{
							SendClientMessage(playerid, 0x999999FF, "Заказ для Вашей заправочной станции уже оформлен");
							ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);

							return 1;
						}

						if(GetFuelStationData(stationid, FS_BUY_FUEL_PRICE) > 0)
						{
							new order_fuels = strval(inputtext);
							new fuel_price = GetFuelStationData(stationid, FS_BUY_FUEL_PRICE);
							new price = order_fuels * fuel_price;

							if(order_fuels > 0 && IsNumeric(inputtext))
							{
								new fmt_str[256];

								new free_fuel_slots = GetFuelStationMaxFuel(stationid) - GetFuelStationData(stationid, FS_FUELS);

								if(free_fuel_slots > 8000)
									free_fuel_slots = 8000;

								if(order_fuels <= free_fuel_slots)
								{
									if(GetFuelStationData(stationid, FS_BALANCE) >= price)
									{
										new order_id = CreateOrder(ORDER_TYPE_FUEL_STATION, stationid, order_fuels, fuel_price);
										if(order_id != -1)
										{
											AddFuelStationData(stationid, FS_BALANCE, -, price);
											AddFuelStationData(stationid, FS_FUELS, +, order_fuels);

											format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~r~-%d rub", price);
											GameTextForPlayer(playerid, fmt_str, 4000, 1);

											format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d, fuels=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_SQL_ID));
											mysql_query(mysql, fmt_str, false);

											new year, month, day;
											timestamp_to_date(GetOrderData(order_id, O_TIME), year, month, day);

											format
											(
												fmt_str, sizeof fmt_str,
												"{FFFFFF}Параметры заказа:\n\n"\
												"Количество топлива:\t\t\t%d л\n"\
												"Стоимость 1 литра:\t\t\t%d руб\n"\
												"Общая стоимость заказа:\t\t%d руб\n"\
												"Дата оформления заказа:\t\t%02d-%02d-%d\n\n"\
												"Данные были переданы службе развозчиков топлива\n"\
												"Ожидайте выполнения Вашего заказа",
												order_fuels,
												fuel_price,
												price,
												day, month, year
											);
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99CC00}Заказ оформлен", fmt_str, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0x999999FF, "В данный момент Вы не можете оформить заказ");

										return 1;
									}
									else
									{
										format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь %d руб на счету АЗС", price);
										SendClientMessage(playerid, 0xFF6600FF, fmt_str);
									}
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d литров топлива", free_fuel_slots);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Перед тем как оформить заказ, установите закупочную цену");
							ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_BUY_FUEL_PRIC);

							return 1;
						}
						ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_FUEL_ORDER);
					}
					else ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_ORDER_CANCE:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new order_id = GetFuelStationData(stationid, FS_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];
								new return_money = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);

								DeleteOrder(order_id);
								AddFuelStationData(stationid, FS_BALANCE, +, return_money);

								format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вы отменили заказ топлива\n"\
									"На счет заправочной станции было возвращено {00CC00}%d руб",
									return_money
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}Отмена заказа", fmt_str, "Закрыть", "");

								format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~g~+%d rub", return_money);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ваш заказ выполняется, его нельзя отменить");
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_IMPROVEMENT:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_fuel_station_improvements - 1)
						{
							new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);
							new i_price = g_fuel_station_improvements[listitem][I_PRICE];

							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, fuel_stations f SET a.money=%d, f.improvements=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для АЗС", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свою заправочную станцию до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);

									AddFuelStationData(stationid, FS_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1..3:
										{
											format(fmt_str, sizeof fmt_str, "Емкость топливного хранилища увеличена до %d литров", GetFuelStationMaxFuel(stationid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											SendClientMessage(playerid, 0x999999FF, "Теперь можно меньше заботиться о его наполнении");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Акцизный сбор на бензин больше не распространяется на Вашу заправочную станцию");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, плата за аренду территории АЗС уменьшена в 2 раза");
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 17)");
							}
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_SELL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(GetFuelStationData(stationid, FS_ORDER_ID) != -1)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF6600}Продажа заправочной станции",
								"{FFFFFF}Перед тем как продать АЗС государству\n"\
								"заказ топлива нужно {FF3333}отменить",
								"Закрыть", ""
							);
						}
						else SellFuelStation(playerid);
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_JERRICA:
			{
				new stationid = GetPVarInt(playerid, "buy_jerrican_in_fuelst");
				DeletePVar(playerid, "buy_jerrican_in_fuelst");

				if(response)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 250;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[150];

								if(IsFuelStationOwned(stationid))
								{
									if(GetFuelStationData(stationid, FS_FUELS) < 15)
										return SendClientMessage(playerid, 0xCECECEFF, "На этой АЗС нет бензина");

									AddFuelStationData(stationid, FS_FUELS, -, 15);
									AddFuelStationData(stationid, FS_BALANCE, +, price);

									format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								}
								else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));

								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
									SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

									GivePlayerMoneyEx(playerid, -price, "Покупка канистры на АЗС", false, true);

									SetPVarInt(playerid, "have_jerrican", 1);
									SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

									SendClientMessage(playerid, 0x66CC00FF, "Вы купили канистру с 15 литрами бензина");
									SendClientMessage(playerid, 0x3399FFFF, "Чтобы заправить транспорт, подойдите к нему и нажмите ПКМ");
									SendClientMessage(playerid, 0xCECECEFF, "Примечание: Вы не должны двигаться во время заправки. ПКМ - правая кнопка мышки");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 19)");
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки канистры");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили канистру");
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_M:
			{
				new stationid = GetPVarInt(playerid, "nearest_fuel_st");

				if(response)
				{
					new buy_fuel_count = strval(inputtext);
					new vehicleid = GetPlayerVehicleID(playerid);

					if(GetPlayerJob(playerid) == JOB_MECHANIC && IsPlayerInJob(playerid) && IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
					{
						if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
						{
							new fmt_str[150];

							if((1 <= buy_fuel_count <= 10_000) && IsNumeric(inputtext))
							{
								if(GetFuelStationData(stationid, FS_FUELS) >= buy_fuel_count)
								{
									if(!(buy_fuel_count % 10))
									{
										if((GetPlayerJobLoadItems(playerid) + buy_fuel_count) <= 50)
										{
											new price = buy_fuel_count * GetFuelStationData(stationid, FS_FUEL_PRICE);
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(IsFuelStationOwned(stationid))
												{
													AddFuelStationData(stationid, FS_FUELS, -, buy_fuel_count);
													AddFuelStationData(stationid, FS_BALANCE, +, price);

													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);

												if(!mysql_errno())
												{
													GivePlayerMoneyEx(playerid, -price, "Покупка топлива на АЗС (/getfuel)", false, true);
													SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_fuel_count);

													new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
													SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

													format(fmt_str, sizeof fmt_str, "Вы купили %d л топлива за %d рублей", buy_fuel_count, price);
													SendClientMessage(playerid, 0x66CC00FF, fmt_str);

													format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Топливо: %d л", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(playerid));
													UpdateVehicleLabel(vehicleid, 0xCC9900FF, fmt_str);

													return DeletePVar(playerid, "nearest_fuel_st");
												}
												else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 20)");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для закупки такого кол-во топлива");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Можно загрузить не более 50 л топлива");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Кол-во топлива должно быть кратно 10");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "На АЗС нет такого кол-ва топлива");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Неверное значение");

							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}Топливо на АЗС:\t\t%d/10000 л\n"\
								"Стоимость 1 литра:\t%d руб\n\n"\
								"Введите кол-во бензина, которое хотите закупить\n"\
								"(число должно быть кратным 10)",
								GetFuelStationData(stationid, FS_FUELS),
								GetFuelStationData(stationid, FS_FUEL_PRICE)
							);
							Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "{FFCD00}Закупка топлива", fmt_str, "Купить", "Отмена");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около заправочной станции");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в рабочем транспорте");
				}
				else DeletePVar(playerid, "nearest_fuel_st");
			}
			// -----------------------------------------------------------------
			case DIALOG_JERRICAN_FILL_CAR:
			{
				new vehicleid = GetPVarInt(playerid, "jerrican_fill_car");
				DeletePVar(playerid, "jerrican_fill_car");

				if(response && vehicleid)
				{
					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicleid, x, y, z);

					if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
						if((GetVehicleData(vehicleid, V_FUEL) + 15.0) <= 150.0)
						{
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);

							DeletePVar(playerid, "have_jerrican");

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							SendClientMessage(playerid, 0x66CC00FF, "Транспорт заправлен");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
					}
					else SendClientMessage(playerid, 0x999999FF, "Вы находитесь слишком далеко от транспорта");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BIZ_BUY:
			{
				if(response)
				{
					new businessid = GetPVarInt(playerid, "buy_biz_id");

					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
					{
						if(!IsBusinessOwned(businessid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetBusinessData(businessid, B_PRICE))
							{
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили бизнес");
								BuyPlayerBusiness(playerid, businessid);

								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новый бизнес", "{FFFFFF}Вам нужно заплатить за аренду бизнеса в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого бизнеса");
						}
						else
						{
							new fmt_str[64];

							format(fmt_str, sizeof fmt_str, "Этот бизнес уже куплен. Владелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_INFO:
			{
				if(response)
				{
					if(GetBusinessData(GetPlayerBusiness(playerid), B_TYPE) == BUSINESS_TYPE_XZ) return SendClientMessage(playerid, -1, "Пока бизнес не построен вам не доступно это действие!");
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PARAMS:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, listitem + 1);
				}
				else callcmd::business(playerid, "");
			}
			case DIALOG_BIZ_ENTER_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext))
						{
							if((0 <= price <= 15000) && IsNumeric(inputtext))
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_ENTER_PRICE, price);

								format(query, sizeof query, "UPDATE business SET enter_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								UpdateBusinessLabel(businessid);
								SendClientMessage(playerid, 0x66CC00FF, "Цена за вход в бизнес изменена");

								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Предел цены от 0 до 15000 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите цену за вход в Ваш бизнес");

						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_ENTER_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PROD_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext) && IsNumeric(inputtext))
						{
							if(25 <= price <= 2000)
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_PROD_PRICE, price);

								format(query, sizeof query, "UPDATE business SET prod_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								SendClientMessage(playerid, 0x66CC00FF, "Стоимость продукта изменена");
								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость от 25 до 2000 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите стоимость продукта");

						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_PRODS:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							SendClientMessage(playerid, 0x999999FF, "Заказ для Вашего предприятии уже оформлен");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
						}

						if(GetBusinessData(businessid, B_PROD_PRICE) > 0)
						{
							new order_prods = strval(inputtext);
							new prod_price = GetBusinessData(businessid, B_PROD_PRICE);
							new price = order_prods * prod_price;

							if(order_prods > 0 && IsNumeric(inputtext))
							{
								new fmt_str[256];

								new free_prods_slots = GetBusinessMaxProd(businessid) - GetBusinessData(businessid, B_PRODS);

								if(free_prods_slots > 1000)
									free_prods_slots = 1000;

								if(order_prods <= free_prods_slots)
								{
									if(GetBusinessData(businessid, B_BALANCE) >= price)
									{
										new order_id = CreateOrder(ORDER_TYPE_BUSINESS, businessid, order_prods, prod_price);
										if(order_id != -1)
										{
											AddBusinessData(businessid, B_BALANCE, -, price);
											AddBusinessData(businessid, B_PRODS, +, order_prods);

											format(fmt_str, sizeof fmt_str, "~w~business bank~n~~r~-%d rub", price);
											GameTextForPlayer(playerid, fmt_str, 4000, 1);

											format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%d,products=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_PRODS) , GetBusinessData(businessid, B_SQL_ID));
											mysql_query(mysql, fmt_str, false);

											new year, month, day;
											timestamp_to_date(GetOrderData(order_id, O_TIME), year, month, day);

											format
											(
												fmt_str, sizeof fmt_str,
												"{FFFFFF}Параметры заказа:\n\n"\
												"Количество продуктов:\t\t%d шт.\n"\
												"Стоимость 1 продутка:\t\t%d руб\n"\
												"Общая стоимость заказа:\t\t%d руб\n"\
												"Дата оформления заказа:\t\t%02d-%02d-%d\n\n"\
												"Данные были переданы службе развозчиков продуктов\n"\
												"Ожидайте выполнения Вашего заказа",
												order_prods,
												prod_price,
												price,
												day, month, year
											);
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99CC00}Заказ оформлен", fmt_str, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0x999999FF, "В данный момент Вы не можете оформить заказ");

										return 1;
									}
									else
									{
										format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь %d руб на счету бизнеса", price);
										SendClientMessage(playerid, 0xFF6600FF, fmt_str);
									}
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d продуктов", free_prods_slots);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Перед тем как оформить заказ, установите стоимость продукта");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_ORDER);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_CANCEL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new order_id = GetBusinessData(businessid, B_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];

								DeleteOrder(order_id);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вы отменили заказ продуктов"
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}Отмена заказа", fmt_str, "Закрыть", "");

								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ваш заказ выполняется, его нельзя отменить");
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_IMPROVEMENT:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_improvements - 1)
						{
							new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
							new i_price = g_business_improvements[listitem][I_PRICE];

							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, business b SET a.money=%d, b.improvements=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									new cur_max_prods = GetBusinessMaxProd(businessid);
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для Бизнеса", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свой бизнес до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);

									AddBusinessData(businessid, B_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											SendClientMessage(playerid, 0x999999FF, "Теперь можно намного реже пополнять их запас");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь ваши клиенты смогут пользоваться услугами медпункта на территории бизнеса");
											SendClientMessage(playerid, 0x999999FF, "Доходы от этого будут перечисляться на баланс предприятия");

											BusinessHealthPickupInit(businessid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Благодаря пониженному налогу, вы будете платить за аренду помещения в 2 раза меньше");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, вы сможете получать большую прибыль");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь ваши клиенты будут слышать звук при входе в бизнес");
											SendClientMessage(playerid, 0x999999FF, "Вы также можете поменять или выключить его командой {FF9900}/bizmusic");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "В Вашем бизнесе был оборудован дополнительный склад продуктов повышенной вместимости");

											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x999999FF, fmt_str);
										}
										case 6:
										{
											format(fmt_str, sizeof fmt_str, "INSERT INTO business_gps (bid,time) VALUES (%d,%d)", businessid, gettime());
											mysql_query(mysql, fmt_str, false);

											g_business_gps_init = false;

											SendClientMessage(playerid, 0x66CC00FF, "Теперь Ваш бизнес можно будет найти в списке бизнесов {FF9900}(/gps > Бизнес)");
											SendClientMessage(playerid, 0x999999FF, "Это позволит привлечь дополнительных клиентов, тем самым повысить доходы предприятия");
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 23)");
							}
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_SELL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF6600}Продажа бизнеса",
								"{FFFFFF}Перед тем как продать бизнес государству\n"\
								"заказ продуктов нужно {FF3333}отменить",
								"Закрыть", ""
							);
						}
						else SellBusiness(playerid);
					}
				}
			}
			case DIALOG_BIZ_2_SELL:
			{
				new businessid = GetBusiness_2(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF6600}Продажа бизнеса",
								"{FFFFFF}Перед тем как продать бизнес государству\n"\
								"заказ продуктов нужно {FF3333}отменить",
								"Закрыть", ""
							);
						}
						else SellBusiness_2(playerid);
					}
				}
			}
			case DIALOG_BIZ_ENTER_MUSIC:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_sound)
						{
							new query[64];
							format(query, sizeof query, "UPDATE business SET enter_music=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_MUSIC), GetBusinessData(businessid, B_SQL_ID));
							mysql_query(mysql, query, false);

							if(listitem > 0)
								PlayerPlaySound(playerid, g_business_sound[listitem - 1], 0.0, 0.0, 0.0);

							SetBusinessData(businessid, B_ENTER_MUSIC, listitem);
							SendClientMessage(playerid, 0x66CC00FF, "Звук при входе в бизнес изменен");
						}
					}
				}
			}
			case DIALOG_BIZ_ENTER:
			{
				new businessid = GetPVarInt(playerid, "biz_enter") - 1;
				DeletePVar(playerid, "biz_enter");

				if(response && GetPlayerInBiz(playerid) == -1)
				{
					if(businessid != -1 && GetBusinessData(businessid, B_ENTER_PRICE) > 0)
					{
						if(IsBusinessOwned(businessid))
						{
							if(IsPlayerInRangeOfPoint(playerid, 5.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
							{
								new price = GetBusinessData(businessid, B_ENTER_PRICE);
								new take_prods = GetBusinessEnterProdCount(businessid);

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[150];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}

										SetPlayerUseListitem(playerid, businessid);
										GivePlayerMoneyEx(playerid, -price, "Оплата за вход в бизнес", false, true);

										EnterPlayerToBiz(playerid, businessid);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для входа");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CAR_MARKET:
			{
				if(!response) return 1;

				if((GetPlayerOwnableCarLasts(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");

				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id;

				if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET || GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID) return 1;

				buy_car_select_car[playerid] =
				buy_car_select_color_type[playerid] = 0;

				buy_car_select_color[playerid][0] =
				buy_car_select_color[playerid][1] = 1;

				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerPosEx(playerid, 1026.0604,-1883.5897,34.3527, 180.0, _, _, false);
				TogglePlayerControllable(playerid, false);

				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][0][0], 1027.6141,-1892.0331,34.7166,298.6746, 1, 1, 0));

				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				//LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);

				SetPlayerCameraPos(playerid, 1042.315307,-1890.139770,36.3141);
				SetPlayerCameraLookAt(playerid, 1032.475219,-1891.380981,35.0);

				ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_CAR_MARKET);
				BuyCarTDsShowForPlayer(playerid);
				CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
				SelectTextDraw(playerid, 0x00F000FF);

				return 1;
			}

			case DIALOG_BIZ_CAR_MARKET_BUY_CAR:
			{
				if(!response || GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id;
				if(GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

				BuyOwnableCar(playerid, car_market_id, buy_car_select_car[playerid], buy_car_select_color[playerid][0], buy_car_select_color[playerid][1]);

				return 1;
			}

			case DIALOG_BIZ_CAR_MARKET_CAR_INFO:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new car_market_id = GetVehicleCarMarketID(vehicleid);

				if(response && 0 <= car_market_id <= 3)
				{
					BuyOwnableCar(playerid, car_market_id, GetVehicleModel(vehicleid) + 1000, random(2), random(2));
				}

				TogglePlayerControllable(playerid, true);
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
			case DIALOG_BIZ_CAR_TUNING:
			{
				switch(listitem + 1)
				{
					case 1:
					{
						if(GetPlayerMoneyEx(playerid) < 25000)
						{
							SendClientMessage(playerid, 0x999999FF, "Перекраска транспорта стоит 25.000 рублей");

							return 1;
						}

						TogglePlayerControllable(playerid, false);

						InterpolateCameraPos(playerid, 873.7983, 1329.8220, 1008.6472, 865.7976, 1330.6577, 1009.8746, 1500, CAMERA_MOVE);
						InterpolateCameraLookAt(playerid, 872.7995, 1329.8646, 1008.6438, 866.6001, 1331.2516, 1009.6305, CAMERA_MOVE);

						//ShowChangeColorTD(playerid);
						SelectTextDraw(playerid, 0x00F000FF);
					}
					case 2:
					{
						if(GetPlayerMoneyEx(playerid) < 50000)
						{
							SendClientMessage(playerid, 0x999999FF, "Смена дисков стоит 50.000 рублей");

							return 1;
						}
					}
				}
			}
			case DIALOG_BIZ_COMP:
			{
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_COMP_CLUB))
						{
						    if(GetPVarInt(playerid,"comp_game") > unix) return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже куплен билет");

							new price = gCompCosts[listitem] * GetBusinessData(businessid, B_PROD_PRICE);
							if(GetPlayerMoneyEx(playerid) < price) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег");

							new query[175], take_prods = 2;

							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessData(businessid, B_PRODS, -, take_prods);
									AddBusinessData(businessid, B_BALANCE, +, price);
								}

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
								mysql_query(mysql, query, false);

								GivePlayerMoneyEx(playerid, -price, "Покупка в комп клубе", false, true);

								switch(listitem) {
									case 0: {
										SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с приобретением игрового времени [30 мин] в клубе");
										SetPVarInt(playerid,"comp_game",unix+1800);
									}
									case 1: {
										SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с приобретением игрового времени [1 час] в клубе");
										SetPVarInt(playerid,"comp_game",unix+3600);
									}
									case 2: {
										SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с приобретением игрового времени [2 часа] в клубе");
										SetPVarInt(playerid,"comp_game",unix+7200);
									}
									case 3: {
										SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с приобретением игрового времени [3 часа] в клубе");
										SetPVarInt(playerid,"comp_game",unix+10800);
									}
								}
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
						}
					}
				}
			}
			case DIALOG_COMP_GAME:
			{
		    	if(!response) return 1;
		    	switch(listitem) {
		    	    case 0: Dialog(playerid,DIALOG_COMP_GAME_1,DSL,""P"Capture Blocks",""P"1."W" Играть\n"P"2."W" Информация", "Выбрать", "Закрыть");
		    	    case 1: Dialog(playerid,DIALOG_COMP_GAME_2,DSL,""P"DM - Арена",""P"1."W" Играть\n"P"2."W" Информация\n"P"3."W" TOP - 5", "Выбрать", "Закрыть");
		    	    case 2: Dialog(playerid,DIALOG_COMP_GAME_3,DSL,""P"Гонка Вооружений",""P"1."W" Играть\n"P"2."W" Информация\n"P"3."W" TOP - 5", "Выбрать", "Закрыть");
				}
			}
			case DIALOG_COMP_GAME_1:
			{
		    	if(!response) return 1;
		    	switch(listitem) {
		    	    case 0: {
		          		if(g_game_status != 2) {
							new Float:pos[3];
							GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
							SetPVarFloat(playerid, "pos_comp_x", pos[0]);
							SetPVarFloat(playerid, "pos_comp_y", pos[1]);
							SetPVarFloat(playerid, "pos_comp_z", pos[2]);
							SetPVarInt(playerid, "comp_int", GetPlayerInterior(playerid));
							SetPVarInt(playerid, "comp_vw", GetPlayerVirtualWorld(playerid));
							if(g_game_status == 0) {
								g_sign_up_timer = SetTimer("MinigamePrepare", 30000, false);
								g_game_status = 1;
								SendClientMessage(playerid, 0x66CC00FF, "Вы создали сервер. Ожидайте подключение других игроков [30 секунд]");
								TI[playerid][tBlockWars] = true;
							}
							else if(g_game_status == 1) {
				    			if(!TI[playerid][tBlockWars]) {
									TI[playerid][tBlockWars] = true;
									SendClientMessage(playerid, 0x66CC00FF, "Вы присоеденились к игре");
									new null;
					    			foreach(new i:Player) {
										if(!TI[i][tBlockWars]) continue;
										null++;
									}
									if(null == 4) {
										KillTimer(g_sign_up_timer);
										MinigamePrepare();
									}
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже записались на игру");
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Игра уже началась");
					}
		    	    case 1: {
						static const f_str[] = "\t\t\t{FFFF00}- Capture Blocks -"W"\n\n\
							Суть данной мини-игры {FFFF00}'Capture Blocks'"W" такова:\n\
							За {FFFF00}1"W" минуту захватить большее количество квадратов,\n\
							квадрат захватывается и красится в {FFFF00}Ваш"W" цвет,\n\
							свой цвет можно узнать на текстдрайве при начале мини-игры.\n\
							Максимальное количество игроков - {FFFF00}4"W", минимальное - {FFFF00}2"W".";
					    new string[sizeof(f_str)];
						format(string,sizeof(string),f_str);
						Dialog(playerid,INVALID_DIALOG_ID,DSM, ""P"Capture Blocks",string, "Закрыть", "");
					}
				}
			}
			case DIALOG_COMP_GAME_2:
			{
		    	if(!response) return 1;
		    	if(TI[playerid][tBlockWars]) return SendClientMessage(playerid, 0xCECECEFF, "Вы записаны на игру Capture Blocks");
		    	switch(listitem) {
		    	    case 0: {
						TI[playerid][tDMArea][0] = 1;
						TI[playerid][tDMArea][1] = 0;
						TI[playerid][tDMArea][2] = 0;
						new Float:pos[3];
						SetPVarInt(playerid, "dmzona", 1);
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						SetPVarFloat(playerid, "pos_comp_x", pos[0]);
						SetPVarFloat(playerid, "pos_comp_y", pos[1]);
						SetPVarFloat(playerid, "pos_comp_z", pos[2]);
						SetPVarInt(playerid, "comp_int", GetPlayerInterior(playerid));
						SetPVarInt(playerid, "comp_vw", GetPlayerVirtualWorld(playerid));
						new string[100];
	     				format(string, sizeof(string), "Присоединился новый игрок - "ORANGE"%s",GetPlayerNameEx(playerid));
						foreach(new i:Player) {
							if(!TI[i][tDMArea][0]) continue;
							SendClientMessage(i,-1,string);
						}
						SendClientMessage(playerid, 0x66CC00FF, "Для выхода из DM-Арены,используйте: "W"/power");
						DelGun(playerid);
						AC_GivePlayerWeapon(playerid, PaintGun[random(sizeof(PaintGun))], 3000);

						TI[playerid][tVirtualWorld] = 8;
						TI[playerid][tInterior] = 0;

		    	    	new rand = random(sizeof(DmArenaSpawns));

						SetPlayerPosAC(playerid, DmArenaSpawns[rand][0], DmArenaSpawns[rand][1], DmArenaSpawns[rand][2]+1.5,
							TI[playerid][tVirtualWorld], TI[playerid][tInterior], true);

						SetPlayerHealth(playerid, 100.0);
						SetPlayerColor(playerid,0x56FB4EFF);
						format(string,sizeof(string),"{1bd12f}Убийств:{ffffff}%d\n{1bd12f}Смертей:{ffffff}%d",TI[playerid][tDMArea][1],TI[playerid][tDMArea][2]);
						DestroyDynamic3DTextLabel(DMSTATUS[playerid]);
						DMSTATUS[playerid] = CreateDynamic3DTextLabel(string, 0xFF6347FF, 0,0,0.4,10.0,playerid,INVALID_VEHICLE_ID,1,-1,-1,-1,10);
					}
					case 1: {
					    static const f_str[] = "\t\t\t\t{FFFF00}- DM - Арена -"W"\n\n\
							Добро пожаловать на {FFFF00}'DM - Арену'"W".\n\
							Данный режим предназначен для отдыха души и разума от повседневных забот.\n\
							Оружие: {FFFF00}Рандомное"W"\n\
							После убийства ваше здоровье пополняется на {FFFF00}25 хп"W".\n\
							Цель игры: Набрать наибольшее количество убийств\n\n\
							Приз - {FFFF00}ВСЕОБЩЕЕ УВАЖЕНИЕ";
					    new string[sizeof(f_str)];
						format(string,sizeof(string),f_str);
						Dialog(playerid,INVALID_DIALOG_ID,DSM, ""P"DM - Арена",string, "Закрыть", "");
					}
					case 2:
					{
						new Cache:result = mysql_query(mysql, "\
							SELECT `name`,`kills` FROM `accounts` ORDER BY `kills` DESC LIMIT 5"),name[24],rows,kills;

						rows = cache_num_rows();

						if(rows)
						{
							new string[300];
		       				string = ""P"№ Имя\t"P"Убийств\n\n";
							static const f_str[] = ""YELLOW"%i. "W"%s\t"GREEN"%d\n";
		        			new str[sizeof(f_str) +1 + (-2 + MAX_PLAYER_NAME) + (-2 + 7)];

							for(new i; i < rows; i ++)
							{
								cache_get_field_content(i, "Name", name, mysql, MAX_PLAYER_NAME);
								kills = cache_get_field_content_int(i, "pKills",mysql);
								format(str, sizeof(str), f_str, i+1, name,kills);
		            			strcat(string, str);
							}
							Dialog(playerid, INVALID_DIALOG_ID, DSTH, "ТОП игроки", string, "Закрыть", "");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Список еще не составлен");
						cache_delete(result);
					}
				}
			}
			case DIALOG_COMP_GAME_3:
		    {
		    	if(!response) return 1;
		    	if(TI[playerid][tBlockWars]) return SendClientMessage(playerid, 0xCECECEFF, "Вы записаны на игру Capture Blocks");
		    	switch(listitem) {
		    	    case 0: {
						TI[playerid][tGunArea][0] = 1;
						TI[playerid][tGunArea][1] = 0;
						TI[playerid][tGunArea][2] = 0;
						TI[playerid][tGunArea][3] = 1;
						new Float:pos[3];
						SetPVarInt(playerid, "dmzona", 2);
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						SetPVarFloat(playerid, "pos_comp_x", pos[0]);
						SetPVarFloat(playerid, "pos_comp_y", pos[1]);
						SetPVarFloat(playerid, "pos_comp_z", pos[2]);
						SetPVarInt(playerid, "comp_int", GetPlayerInterior(playerid));
						SetPVarInt(playerid, "comp_vw", GetPlayerVirtualWorld(playerid));
						new string[100];
	     				format(string, sizeof(string), "Присоединился новый игрок - "ORANGE"%s",GetPlayerNameEx(playerid));
						foreach(new i:Player) {
							if(!TI[i][tGunArea][0]) continue;
							SendClientMessage(i,-1,string);
						}
						SendClientMessage(playerid, 0x66CC00FF, "Для выхода из Гонки Вооружений,используйте: "W"/power");
						DelGun(playerid);
						AC_GivePlayerWeapon(playerid, ArenaGun[5], 3000);

						TI[playerid][tVirtualWorld] = 141;
						TI[playerid][tInterior] = 0;

		    	    	new rand = random(sizeof(DMPositions));

						SetPlayerPosAC(playerid, DMPositions[rand][0], DMPositions[rand][1], DMPositions[rand][2]+1.5, TI[playerid][tVirtualWorld],
							TI[playerid][tInterior], true);

						SetPlayerHealth(playerid, 100.0);
						SetPlayerColor(playerid,0x56FB4EFF);
						format(string,sizeof(string),"{1bd12f}Kills Gun:{ffffff}%d/3\n{1bd12f}Guns:{ffffff}%d/6",TI[playerid][tGunArea][1],TI[playerid][tGunArea][3]);
						DestroyDynamic3DTextLabel(DMSTATUS[playerid]);
						DMSTATUS[playerid] = CreateDynamic3DTextLabel(string, 0xFF6347FF, 0,0,0.4,10.0,playerid,INVALID_VEHICLE_ID,1,-1,-1,-1,10);
					}
					case 1: {
					    static const f_str[] = "\t{FFFF00}    - Гонка Вооружений -"W"\n\n\
							Суть данной игры {FFFF00}'Гонка Вооружений'"W" такова:\n\
							Пройти всю лесенку смены оружия.\n\
							Всего оружий {FFFF00}6"W".\n\
							Для смены оружия требуется убийств {FFFF00}3"W".\n\
							Оружие №1 {FFFF00}M4"W".\n\
							Оружие №2 {FFFF00}AK-47"W".\n\
							Оружие №3 {FFFF00}MP5"W".\n\
							Оружие №4 {FFFF00}Shotgun"W".\n\
							Оружие №5 {FFFF00}Deagle"W".\n\
							Оружие №6 {FFFF00}USP"W".\n\n\
							Приз - {FFFF00}ВСЕОБЩЕЕ УВАЖЕНИЕ";
						new string[sizeof(f_str)];
						format(string,sizeof(string),f_str);
						Dialog(playerid,INVALID_DIALOG_ID,DSM, ""P"Гонка Вооружений",string, "Закрыть", "");
					}
	    			case 2:
					{
						new name[24],rows;
						new kills;
						new Cache:result = mysql_query(mysql, "SELECT `name`,`win_area` FROM `accounts` ORDER BY `win_area` DESC LIMIT 5");
						rows = cache_num_rows();

						if(rows)
						{
							new string[300];
		       				string = ""P"№ Имя\t"P"Побед\n\n";
							static const f_str[] = ""YELLOW"%i. "W"%s\t"GREEN"%d\n";
		        			new str[sizeof(f_str) +1 + (-2 + MAX_PLAYER_NAME) + (-2 + 7)];

							for(new i; i < rows; i ++)
							{
								cache_get_field_content(i, "Name", name, mysql, MAX_PLAYER_NAME);
								kills = cache_get_field_content_int(i, "pWinArea",mysql);
								format(str, sizeof(str), f_str, i+1, name,kills);
		            			strcat(string, str);
							}
							Dialog(playerid, INVALID_DIALOG_ID, DSTH, "ТОП игроки", string, "Закрыть", "");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Список еще не составлен");
						cache_delete(result);
					}
				}
			}
			case DIALOG_BIZ_SHOP_24_7:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
						{
							new price;
							new take_prods;

							switch(listitem + 1)
							{
								case 1:
								{
									price = 15000;
									take_prods = 2;

									if(GetPlayerData(playerid, P_MED_CHEST) < 2)
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка аптечки", false, true);

												AddPlayerData(playerid, P_MED_CHEST, +, 2);
												SendClientMessage(playerid, 0x66CC00FF, "Вы купили набор аптечек. Используйте {3399FF}/healme {66CC00}для их использования");

												format(query, sizeof query, "Текущее количество аптечек: %d", GetPlayerData(playerid, P_MED_CHEST));
												SendClientMessage(playerid, 0xDD90FFFF, query);
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Набор аптечек стоит 15000 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Вы не можете купить больше аптечек");
								}
								case 2:
								{
									price = 6000;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка фотоаппарата", false, true);

											GivePlayerWeapon(playerid, 43, 15);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили фотоаппарат на 15 снимков");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 29)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Набор фотографа стоит 6000 рублей");
								}
								case 3:
								{
									price = 6500;
									take_prods = 1;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка букета цветов", false, true);
											GivePlayerWeapon(playerid, WEAPON_FLOWER, 1);

											SendClientMessage(playerid, 0x66CC00FF, "Вы купили букет цветов");
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/present {66CC00}чтобы подарить их кому нибудь");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 30)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Букет стоит 6500 рублей");
								}
								case 4:
								{
									price = 1800;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка трости", false, true);
											GivePlayerWeapon(playerid, WEAPON_CANE, 1);

											SendClientMessage(playerid, 0x66CC00FF, "Вы купили трость");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Трость стоит 18000 рублей");
								}
								case 5:
								{
									price = 24000;
									take_prods = 5;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка парашюта", false, true);
											GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);

											SendClientMessage(playerid, 0x66CC00FF, "Вы купили парашют");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Парашют стоит 24000 рублей");
								}
								case 6:
								{
									price = 15000;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка лотерейного билета", false, true);
											SetPlayerData(playerid, P_LOTTERY, random(900) + 100);

											CallLocalFunction("ShowPlayerLotteryDialog", "i", playerid);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили лотерейный билет");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 32)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Лотерейный билет стоит 15000 рублей");
								}
								case 7:
								{
									price = 7100;
									take_prods = 1;

									if(!GetPlayerData(playerid, P_MASK))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка маски", false, true);
												SetPlayerData(playerid, P_MASK, 1);

												SendClientMessage(playerid, 0x66CC00FF, "Вы купили маску");
												SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/mask {66CC00}для скрытия Вашего расположения на карте (на 10 минут)");
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 33)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Маска стоит 7100 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели маску");
								}
								case 8:
								{
									price = 5000;
									take_prods = 3;

									if(!GetPlayerBoombox(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка бумбокса", false, true);
												//SetPlayerData(playerid, P_MASK, 1);
												mysql_format(mysql, query, sizeof query, "UPDATE accounts SET boombox=1 WHERE id=%d", GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);

												SendClientMessage(playerid, COLOR_GOLD, "Вы купили бумбокс");
												SendClientMessage(playerid, COLOR_WHITE, "Используйте {2f89f7}/boombox {"#cW"}для управления");
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {"#cGold"}(equ-code 33)");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Бумбокс стоит 5000 рублей");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "У Вас уже есть бумбокс");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CELL_SALON:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
						{
							new price;
							new take_prods;

							switch(listitem + 1)
							{
								case 1:
								{
									price = 25000;
									take_prods = 2;

									if(!GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка телефона", false, true);
												SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

												SendClientMessage(playerid, 0x66CC00FF, "Используйте {0099FF}/c(/call) или /call [номер телефона] {66CC00}чтобы сделать звонок.");
												SendClientMessage(playerid, 0x66CC00FF, "Для отправки SMS сообщения используйте {0099FF}/sms{66CC00}. Другие команды: {0099FF}/menu > Список команд > Общение");

												if(GetPlayerData(playerid, P_QUEST_1) != 1)
												{
													GivePlayerMoneyEx(playerid, 300000, "Квест телефон");
													AddPlayerData(playerid, P_EXP, +, 1);
													SetPlayerData(playerid, P_QUEST_1, 1);
													SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первый телефон'. За это вы получаете 300.000 рублей и 1 EXP");
													UpdatePlayerDatabaseInt(playerid, "quest1", 1);
													if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
													{
														SetPlayerData(playerid, P_EXP, 0);
														AddPlayerData(playerid, P_LEVEL, +, 1);
														SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
														SetPlayerLevelInit(playerid);
														UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
													}
													UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
												}

												format
												(
													query, sizeof query,
													"{FFFFFF}Поздравляем!\n"\
													"Вы купили мобильный телефон. Ваш номер: {0099FF}%d",
													GetPlayerPhone(playerid)
												);
												Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка мобильного телефона", query, "Закрыть", "");
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Мобильный телефон стоит 25000 рублей");
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас уже есть мобильный телефон");
										if(GetPlayerData(playerid, P_QUEST_1) != 1)
										{
											GivePlayerMoneyEx(playerid, 300000, "Квест телефон");
											AddPlayerData(playerid, P_EXP, +, 1);
											SetPlayerData(playerid, P_QUEST_1, 1);
											SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первый телефон'. За это вы получаете 300.000 рублей и 1 EXP");
											UpdatePlayerDatabaseInt(playerid, "quest1", 1);
											if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
											{
												SetPlayerData(playerid, P_EXP, 0);
												AddPlayerData(playerid, P_LEVEL, +, 1);
												SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
												SetPlayerLevelInit(playerid);
												UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
											}
											UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
										}
									}
								}
								case 2:
								{
									price = 10000;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
												"{66CC00}Изменение номера",
												"{FFFFFF}Введите новый номер в поле ниже\n\n"\
												"{FF6633}Примечания:\n"\
												"{FFCD00}- Номер должен быть шестизначным,\n"\
												"например: 777777\n"\
												"- Номер не должен начинаться с 0\n\n"\
												"{FFFFFF}Вы также можете вернуть свой\n"\
												"стандартный номер. Для этого\n"\
												"введите в поле {3399FF}цифру 0",
												"Сменить", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение номера телефона необходимо 10000 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

									callcmd::buy(playerid, "");
								}
								case 3:
								{
									price = 10000;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
												"{66CC00}Изменение цвета телефона",
												"1. Карамельный\n"\
												"2. Синий\n"\
												"3. Оранжевый\n"\
												"4. Серебристый\n"\
												"5. Розовый\n"\
												"6. Красный\n"\
												"7. Зеленый\n"\
												"8. Темно-синий\n"\
												"9. Желтый\n"\
												"10. Белый",
												"Поменять", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 2500 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

									callcmd::buy(playerid, "");
								}
								case 4:
								{
									if(GetPlayerPhone(playerid) != 0)
									{
										Dialog
										(
											playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
											"{FFCD00}Пополнение мобильного телефона",
											"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
											"Готово", "Назад"
										);

										return 1;
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

									callcmd::buy(playerid, "");
								}
								case 5:
								{
									price = 100000;
									take_prods = 5;

									if(!GetPlayerMcBook(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.mcbook=1,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d,mcbook=1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка ноутбука", false, true);
												SetPlayerData(playerid, P_MCBOOK, GetPlayerAccountID(playerid) + 1000000);

												SendClientMessage(playerid, 0x66CC00FF, "Используйте {0099FF}/mcbook{66CC00} чтобы включить ноутбук");

												format(query, sizeof query, "{FFFFFF}Поздравялем с успешной покупкой ноутбука!");
												Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка ноутбука", query, "Закрыть", "");
											}
											else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ноутбук стоит 100000 рублей");
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас уже есть ноутбук");
									}
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_PHONE_BALANCE:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							new sum = strval(inputtext);
							if(sum > 0 && IsNumeric(inputtext))
							{
								if(GetPlayerMoneyEx(playerid) >= sum)
								{
									new query[128];

									format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
										AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);

										format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
										SendClientMessage(playerid, 0x66CC00FF, query);

										format(query, sizeof query, "Сейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
										SendClientMessage(playerid, 0x66CC00FF, query);

										return 1;
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");
							}

							Dialog
							(
								playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
								"{FFCD00}Пополнение мобильного телефона",
								"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
								"Готово", "Назад"
							);
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_NUMBER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							new buffer = strlen(inputtext);
							if((1 <= buffer <= 10) && IsNumeric(inputtext))
							{
								new fmt_str[175];
								new number = strval(inputtext);

								new price = 10000;
								new take_prods = 3;

								if(number > 0)
								{
									if(inputtext[0] != '0' && buffer == 6)
									{
										new Cache: result;
										buffer = 0;

										format(fmt_str, sizeof fmt_str, "SELECT id FROM accounts WHERE phone=%d LIMIT 1", number);
										result = mysql_query(mysql, fmt_str, true);

										buffer = cache_num_rows();
										cache_delete(result);

										if(!buffer)
										{
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, number, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, number, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);

												if(!mysql_errno())
												{
													if(GetBusinessData(businessid, B_PRODS) >= take_prods)
													{
														AddBusinessData(businessid, B_PRODS, -, take_prods);
														AddBusinessData(businessid, B_BALANCE, +, price);
													}

													mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
													mysql_query(mysql, fmt_str, false);

													GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[1]", false, true);
													SetPlayerData(playerid, P_PHONE, number);

													format
													(
														fmt_str, sizeof fmt_str,
														"{FFFFFF}Номер телефона изменен\n"\
														"Теперь с Вами  можно связаться по номеру {0099FF}%d",
														GetPlayerPhone(playerid)
													);
													return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", fmt_str, "Закрыть", "");
												}
												else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 26)");
											}
											else
											{
												return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
											}
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Введенный Вами номер уже занят");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Номер введен некорректно. Повторите попытку");
								}
								else
								{
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, fmt_str, false);

											GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[2]", false, true);
											SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

											format(fmt_str, sizeof fmt_str, "{FFFFFF}Установлен Ваш стандартный номер: {0099FF}%d", GetPlayerPhone(playerid));
											return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", fmt_str, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 26)");
									}
									else
									{
										return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
									}
								}
							}

							Dialog
							(
								playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
								"{66CC00}Изменение номера",
								"{FFFFFF}Введите новый номер в поле ниже\n\n"\
								"{FF6633}Примечания:\n"\
								"{FFCD00}- Номер должен быть шестизначным,\n"\
								"например: 777777\n"\
								"- Номер не должен начинаться с 0\n\n"\
								"{FFFFFF}Вы также можете вернуть свой\n"\
								"стандартный номер. Для этого\n"\
								"введите в поле {3399FF}цифру 0",
								"Сменить", "Отмена"
							);
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_COLOR:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new price = 2500;
								new take_prods = 1;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[185];

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone_color=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, listitem, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d,phone_color=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, listitem, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										GivePlayerMoneyEx(playerid, -price, "Смена цвета телефона", false, true);

										SetPlayerData(playerid, P_PHONE_COLOR, listitem);
										SendClientMessage(playerid, 0x3399FFFF, "Вы изменили цвет своего мобильного телефона");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 27)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 2500 рублей");
							}
						}
						else callcmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_LOTTERY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							if(strlen(inputtext))
							{
								new number = strval(inputtext);
								if(100 <= number <= 999 && IsNumeric(inputtext))
								{
									new fmt_str[64];
									SetPlayerData(playerid, P_LOTTERY, number);

									format(fmt_str, sizeof fmt_str, "Счастливое число изменено на {00CCCC}%d", number);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Счастливое число не было изменено, т.к. было введено неверно");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CLUB:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLUB, 15.0)
					|| IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CASINO, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new const
									item_price[10] = {600, 1000, 2000, 2700, 3000, 4500, 6300, 7500, 500, 800};

								if(GetPlayerMoneyEx(playerid) >= item_price[listitem])
								{
									new query[150];
									new take_prods = 1;

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-item_price[listitem], GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+item_price[listitem], GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-item_price[listitem], GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, item_price[listitem]);
										}
										GivePlayerMoneyEx(playerid, -item_price[listitem], "Покупка в клубе/казино", false, true);
										GivePlayerDrinkItem(playerid, listitem);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), item_price[listitem], IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										switch(listitem+1)
										{
											case 1: Action(playerid, "купил(а) банку лимонада", 	15.0, false);
											case 2: Action(playerid, "купил(а) бутылку пива", 		15.0, false);
											case 3: Action(playerid, "купил(а) бутылку вина", 		15.0, false);
											case 4: Action(playerid, "купил(а) бутылку шампанского",15.0, false);
											case 5: Action(playerid, "купил(а) бутылку водки", 		15.0, false);
											case 6: Action(playerid, "купил(а) бутылку коньяка",	15.0, false);
											case 7: Action(playerid, "купил(а) бутылку виски", 		15.0, false);
											case 8: Action(playerid, "купил(а) бутылку абсента", 	15.0, false);
											case 9: Action(playerid, "купил(а) закуску", 			15.0, false);
											case 10:Action(playerid, "купил(а) сигару", 			15.0, false);
										}
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас не хватает денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_LIST:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= MAX_BUSINESS-1)
							{
								new price = 2500; //

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new fmt_str[300];
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о бизнесе (управление статистики)", true, true);

									businessid = g_business_realtor_list_idx[listitem];
									SetPlayerUseListitem(playerid, businessid);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Название:\t\t\t%s\n"\
										"Номер бизнеса:\t\t%d\n"\
										"Город / область:\t\t%s\n"\
										"Район:\t\t\t\t%s\n"\
										"Стоимость:\t\t\t%d\n\n"\
										"{FFFFFF}Вы также можете посмотреть фотографию бизнеса.\n"\
										"Для этого нажмите кнопку \"Фото\". {FFCD00}Услуга стоит 2500 руб",
										GetBusinessData(businessid, B_NAME),
										businessid,
										GetCityName(GetBusinessData(businessid, B_CITY)),
										GetZoneName(GetBusinessData(businessid, B_ZONE)),
										GetBusinessData(businessid, B_PRICE)
									);
									Dialog(playerid, DIALOG_BIZ_REALTOR_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{CC9900}Информация о выбранном бизнесе", fmt_str, "Фото", "Закрыть");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							new price = 5000; //

							businessid = GetPlayerUseListitem(playerid);
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото бизнеса (управление статистики)", true, true);

								TogglePlayerSpectating(playerid, true);
								ShowPlayerWaitPanel(playerid);

								SetPlayerVirtualWorld(playerid, playerid + 50);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {99CC00}~k~~PED_SPRINT~ {FFFFFF}для выхода");

								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_BIZ);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_BIZ, businessid);
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_GET:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 5500;
							new houseid = strval(inputtext);

							if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= houseid <= g_house_loaded-1))
							{
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о доме (риелторское агенство)", true, true);

									new fmt_str[512];
									new type = GetHouseData(houseid, H_TYPE);
									new entranceid = GetHouseData(houseid, H_ENTRACE);

									SetPlayerUseListitem(playerid, houseid);
									if(entranceid != -1)
									{
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Тип / название:\t\t%s\n"\
											"Номер квартиры:\t\t%d\n"\
											"Номер подъезда:\t\t%d\n"\
											"Город / область:\t\t%s\n"\
											"Район:\t\t\t\t%s\n"\
											"Стоимость:\t\t\t%d\n"\
											"Количество комнат:\t\t%d\n"\
											"Статус:\t\t\t\t%s\n\n"\
											"{FFFFFF}Вы можете посмотреть как выглядит подъезд этой квартиры\n"\
											"Для этого нажмите кнопку \"Фото\". {FFCD00}Услуга стоит 2500 рублей",
											GetHouseData(houseid, H_NAME),
											GetHouseData(houseid, H_FLAT_ID) + 1,
											entranceid + 1,
											GetCityName(GetEntranceData(entranceid, E_CITY)),
											GetZoneName(GetEntranceData(entranceid, E_ZONE)),
											GetHouseData(houseid, H_PRICE),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}Квартира занята") : ("{00CC33}Квартира свободна")
										);
									}
									else
									{
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Тип / название:\t\t%s\n"\
											"Номер дома:\t\t\t%d\n"\
											"Город / область:\t\t%s\n"\
											"Район:\t\t\t\t%s\n"\
											"Стоимость:\t\t\t%d\n"\
											"Количество комнат:\t\t%d\n"\
											"Статус:\t\t\t\t%s\n\n"\
											"{FFFFFF}Вы также можете посмотреть как выглядит этот дом снаружи.\n"\
											"Для этого нажмите кнопку \"Фото\". {FFCD00}Услуга стоит 2500 рублей",
											GetHouseData(houseid, H_NAME),
											houseid,
											GetCityName(GetHouseData(houseid, H_CITY)),
											GetZoneName(GetHouseData(houseid, H_ZONE)),
											GetHouseData(houseid, H_PRICE),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}Дом занят") : ("{00CC33}Дом свободен")
										);
									}
									Dialog(playerid, DIALOG_BIZ_REALTOR_HOME_INFO, DIALOG_STYLE_MSGBOX, "{FF9933}Информация о выбранном доме", fmt_str, "Фото", "Назад");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
							else
							{
								if(!(0 <= houseid <= g_house_loaded-1))
									SendClientMessage(playerid, 0xCECECEFF, "Этот дом еще не построили");

								ShowPlayerRealtorHomeDialog(playerid);
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 3000; //

							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото дома (риелторское агенство)", true, true);

								TogglePlayerSpectating(playerid, true);
								ShowPlayerWaitPanel(playerid);

								SetPlayerVirtualWorld(playerid, playerid + 3000);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {00CC99}~k~~PED_SPRINT~ {FFFFFF}для выхода");

								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_HOUSE);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_HOUSE, GetPlayerUseListitem(playerid));
							}
							else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
						}
						else ShowPlayerRealtorHomeDialog(playerid);
					}
				}
			}
			case DIALOG_BIZ_CLOTHING_BUY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLOTHING_SHOP, 50.0))
					{
						if(response)
						{
							new select_skin = GetPlayerSelectSkin(playerid);
							if(select_skin != 2)
							{
								new price = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][1];
								new skinid = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][0];

								new take_prods = random(200) + 20;
								new biz_price = price / 100 * 40;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[180];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.skin=%d,a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", skinid, GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+biz_price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET skin=%d,money=%d WHERE id=%d LIMIT 1", skinid, GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, biz_price);
										}
										GivePlayerMoneyEx(playerid, -price, "Покупка скина (магазин одежды)", false, true);
										SetPlayerData(playerid, P_SKIN, skinid);

										ExitPlayerClothingShopPanel(playerid);
										SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с покупкой новой одежды!");

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 36)");
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
						}
					}
				}
			}

			case DIALOG_BIZ_BUY_GUN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_BUY_GUN))
						{
							if(GetPlayerLevel(playerid) < 3) return SendClientMessage(playerid, -1, "Купить оружие можно только игрокам с 3+ уровнем.");
							new price;
							new take_prods;

							switch(listitem + 1)
							{
								case 1:
								{
									price = 50000;
									take_prods = 2;
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);

											GivePlayerWeapon(playerid, 24, 50);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили {3399FF}Desert-Eagle{66CC00} 50 шт");

										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Пустынный орёл стоит 150000 рублей");
								}
								case 2:
								{
									price = 30000;
									take_prods = 2;
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);

											GivePlayerWeapon(playerid, 25, 100);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили {3399FF}ShotGun{66CC00} 100 шт");

										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Дробовик стоит 100000 рублей");
								}
								case 3:
								{
									price = 150000;
									take_prods = 2;
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);

											GivePlayerWeapon(playerid, 34, 30);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили {3399FF}Снайперскую винтовку{66CC00} 50 шт");

										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Снайперская винтовка стоит 350000 рублей");
								}
								case 4:
								{
									price = 25000;
									take_prods = 2;
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);

											GivePlayerWeapon(playerid, 29, 300);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили {3399FF}ShotGun{66CC00} 50 шт");

										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "MP-5 стоит 50000 рублей");
								}
								case 5:
								{
									price = 25000;
									take_prods = 2;
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);

											GivePlayerWeapon(playerid, 23, 300);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили {3399FF}SD-Pistol{66CC00} 50 шт");

										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "SD-Pistol стоит 75000 рублей");
								}
								case 6:
								{
									price = 150000;
									take_prods = 2;
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);

											SetPlayerArmour(playerid, 100);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили {3399FF}Бронежилет{66CC00} 100 ед");

										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Бронежилет стоит 350000 рублей");
								}
								default:
									return 1;
							}
						}
					}
				}
			}

			case DIALOG_HOUSE_BUY:
			{
				new houseid = GetPlayerUseListitem(playerid);

				if(houseid >= 1 && response)
				{
					if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
					{
						if(GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, houseid, 5.0))
							{
								if(!IsHouseOwned(houseid))
								{
									if(GetPlayerMoneyEx(playerid) >= GetHouseData(houseid, H_PRICE))
									{
										SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы приобрели дом");
										BuyPlayerHouse(playerid, houseid);

										EnterPlayerToHouse(playerid, houseid);
										PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

										GameTextForPlayer(playerid, "~b~welcome ~g~to~n~~y~new ~w~home!", 4000, 1);
										Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Новый дом", "{FFFFFF}Вам нужно заплатить за дом в ближайшем отделением банка {FFCD00}(/gps)", "Ок", "");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого дома");
								}
								else
								{
									new fmt_str[64];

									format(fmt_str, sizeof fmt_str, "Этот дом уже куплен. Владелец: %s", GetHouseData(houseid, H_OWNER_NAME));
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть дом. Чтобы купить новый - необходимо продать старый");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы снимаете номер в гостинице. Нужно выселиться перед покупкой дома");
				}
			}
			case DIALOG_HOUSE_SELL:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						SellHouse(playerid);
					}
				}
			}
   case DIALOG_HOUSE_INFO:
			{
				if(response)
				{
					new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
					if(houseid != -1)
					{
						ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
					}
				}
			}
			case DIALOG_HOUSE_PARAMS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						ShowPlayerHouseDialog(playerid, listitem + 1);
					}
					else callcmd::home(playerid, "");
				}
			}
			case DIALOG_HOUSE_IMPROVEMENTS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_house_improvements - 1)
						{
							new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
							new i_price = g_house_improvements[listitem][I_PRICE];

							if(i_level >= sizeof g_house_improvements)
							{
								SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели все доступные улучшения для дома");
							}
							else if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, houses h SET a.money=%d, h.improvements=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для дома", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свой дом до {FFCD00}%s {3399FF}уровня", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);

									AddHouseData(houseid, H_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь чтобы выйти из дома достаточно нажать {FF9900}~k~~SNEAK_ABOUT~{66CC00}, стоя у двери");
											SendClientMessage(playerid, 0x999999FF, "Автоматические двери облегчат жизнь в Вашем доме");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Теперь в доме всегда будет доступна аптечка");
											SendClientMessage(playerid, 0x999999FF, "Вы и ваши гости в любой момент можете использовать ее");

											HouseHealthInit(houseid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Вы можете разрешить людям проживать в Вашем доме с помощью команды {FF9900}/live");
											SendClientMessage(playerid, 0x999999FF, "В доме могут разместиться столько гостей, сколько в нем комнат");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "На Ваше имя была оформлена субсидия, которая дает право платить пониженную квартплату");
											SendClientMessage(playerid, 0x999999FF, "Благодаря этому, ежедневная квартплата уменьшена в 2 раза");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/makestore {66CC00}для размещения шкафа. В нем можно будет хранить различные вещи");
											SendClientMessage(playerid, 0x999999FF, "В любой момент можно перенести шкаф на другое место. Для открытия шкафа напишите {3399FF}/use");

											HouseStoreInit(houseid);
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 35)");
							}
						}
					}
					ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_STONKS:
			{
				if(!response) return 1;
				new stonks = GetPlayerListitemValue(playerid, listitem);
				ShowStockInfo(playerid, stonks, false);

			}
			case DIALOG_METRO:
			{
				if(!response) return 1;
				if(GetPlayerMoneyEx(playerid) < 10000) return SendClientMessage(playerid, -1, "У вас недостаточно денег. Билет стоит 10.000");
				new metro = GetPlayerListitemValue(playerid, listitem);
				//SetPlayerPosEx(playerid, GetBusinessData(metro, B_EXIT_POS_X), GetBusinessData(metro, B_EXIT_POS_Y), GetBusinessData(metro, B_EXIT_POS_Z), GetBusinessData(metro, B_EXIT_ANGLE));
				SetPVarInt(playerid, "metrolist", metro);
				ShowMetroBilet(playerid);
			}
			/*case DIALOG_STONKS_INFO:
			{
				if(!response) return callcmd::stonks(playerid);
				new stonks = GetPVarInt(playerid, "stonks_id");
				new stonks_ammount = strval(inputtext);
				if(stonks_ammount > GetPVarInt(playerid, "mojet_buy") || !strlen(inputtext) || !IsNumeric(inputtext))
				{
					ShowStockInfo(playerid, stonks, true);
					SendClientMessage(playerid, -1, "Вы указали колличество больше того что можете купить!");
					return 1;
				}
				if(strlen(inputtext) > 4)
				{
					ShowStockInfo(playerid, stonks, true);
					return SendClientMessage(playerid,-1,"Максимум 4 символа");
				}
				if(GetPlayerData(playerid, P_SLOT_AC) < stonks_ammount) return SendClientMessage(playerid, -1, "У вас закончилось место на акции!");
				if((GetPlayerData(playerid, P_S_ID) -= 1) != stonks && GetPlayerData(playerid, P_S_KOLVO) > 0) return SendClientMessage(playerid, -1, "У вас уже есть акции другой фирмы!");
				new money = stonks_ammount * GetStonksData(stonks, S_PRICE);
				if(GetPlayerMoneyEx(playerid) < money) return SendClientMessage(playerid, -1, "У вас недостаточно денег");
				GivePlayerMoneyEx(playerid, -money, "Покупка акций");
				AddStonksData(stonks, S_KOLVO, -, stonks_ammount);
				SendClientMessage(playerid, -1, "Поздравляем вы успешно приобрели акции!");
				AddPlayerData(playerid, P_SLOT_AC, -, stonks_ammount);
				SetPlayerData(playerid, P_S_ID, GetStonksData(stonks, S_SQL_ID));
				AddPlayerData(playerid, P_S_KOLVO, +, stonks_ammount);
			}
			case DIALOG_STONKS_SELL:
			{
				if(!response) return 1;
				new stonks_ammount = strval(inputtext);
				if(!strlen(inputtext) || !IsNumeric(inputtext) || stonks_ammount > GetPlayerData(playerid, P_S_KOLVO))
				{
					callcmd::mystonks(playerid);
					SendClientMessage(playerid, -1, "Вы указали колличество которое не можете продать!");
					return 1;
				}
				new stonks = GetPlayerData(playerid, P_S_ID) -= 1;
				new money = stonks_ammount * GetStonksData(stonks, S_PRICE);
				GivePlayerMoneyEx(playerid, money, "Продажа акций");
				SendClientMessage(playerid, -1, "Поздравляем вы успешно продали акции!");
				AddPlayerData(playerid, P_SLOT_AC, +, stonks_ammount);
				AddPlayerData(playerid, P_S_KOLVO, -, stonks_ammount);
				AddStonksData(stonks, S_KOLVO, +, stonks_ammount);
			}*/
			case DIALOG_CREATE_GANG:
			{
				if(!response) return 1;
				new fam_id = GetPlayerFam(playerid);

				for(new i; i < MAX_PLAYERS; i ++)
				{
					if(!IsPlayerConnected(i)) continue;
					else if(!IsPlayerLogged(i)) continue;
					if(GetPlayerFam(i) != fam_id) continue;

					SetPlayerData(i, P_FAM, 0);

					SetPlayerData(i, P_FAMRANK, 0);
					DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
					g_player[i][P_FAM_LABEL] = Text3D: -1;
					SendClientMessage(i, -1, "Ваша семья была удалена.");
				}

				new query[200];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET pfam=0,famrank=0,fName='' WHERE pfam=%d", fam_id);
				mysql_query(mysql, query, false);

				mysql_format(mysql, query, sizeof query, "DELETE FROM family WHERE fam_id='%d' LIMIT 1", fam_id);
				mysql_query(mysql, query, false);
			}
			case DIALOG_HOUSE_RENTERS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= MAX_HOUSE_ROOMS-1)
						{
							new room = GetPlayerListitemValue(playerid, listitem);
							ShowHouseRenterInfo(playerid, houseid, room);
						}
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_INFO:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							switch(listitem + 1)
							{
								case 4:
								{
									new fmt_str[95];
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Вы действительно хотите выселить {FFCD00}%s {FFFFFF}из своего дома?",
										GetHouseRenterInfo(houseid, room, HR_OWNER_NAME)
									);
									return Dialog(playerid, DIALOG_HOUSE_RENTER_EVICT, DIALOG_STYLE_MSGBOX, "{33AACC}Выселение арендатора", fmt_str, "Да", "Нет");
								}
							}
							ShowHouseRenterInfo(playerid, houseid, room);
						}
						else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							new fmt_str[64],
								renter_id = GetPlayerID(GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));

							format(fmt_str, sizeof fmt_str, "Вы выселили %s из своего дома", GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							EvictHouseRenter(houseid, room, renter_id, playerid);
						}
						else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
				if(houseid != -1)
				{
					if(response)
					{
						new roomid = GetPlayerData(playerid, P_HOUSE_ROOM);
						new owner_id = GetPlayerID(GetHouseData(houseid, H_OWNER_NAME));

						EvictHouseRenter(houseid, roomid, playerid);

						if(owner_id != INVALID_PLAYER_ID)
						{
							new fmt_str[45 + 1];

							format(fmt_str, sizeof fmt_str, "%s выселился из Вашего дома", GetPlayerNameEx(playerid));
							SendClientMessage(owner_id, 0x66CC00FF, fmt_str);
						}
						SendClientMessage(playerid, 0x66CC00FF, "Вы выселились из дома");
					}
				}
			}
			case DIALOG_HOUSE_MOVE_STORE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(GetPlayerInHouse(playerid) == houseid)
						{
							if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
							{
								new type = GetHouseData(houseid, H_TYPE);
								if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
								{
									if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
									{
										new query[128];

										new Float: pos_x, Float: pos_y, Float: pos_z;
										GetPlayerPos(playerid, pos_x, pos_y, pos_z);

										SetHouseData(houseid, H_STORE_X, pos_x);
										SetHouseData(houseid, H_STORE_Y, pos_y);
										SetHouseData(houseid, H_STORE_Z, pos_z);

										DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
										SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);

										HouseStoreInit(houseid);

										format(query, sizeof query, "UPDATE houses SET store_x=%f,store_y=%f,store_z=%f WHERE id=%d LIMIT 1", pos_x, pos_y, pos_z, GetHouseData(houseid, H_SQL_ID));
										mysql_tquery(mysql, query, "", "");
									}
								}
							}
						}
					}
				}
			}
			case DIALOG_HOUSE_STORE:
			{
				if(response)
				{
					new house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);

					new item_name[2][10] = {"металл", "наркотики"},
							title[32];

					if(0 <= listitem <= 1)
					{
						format(title, sizeof title, "{FFCD00}Положить %s", item_name[listitem]);

						Dialog
						(
							playerid, DIALOG_HOUSE_STORE_PUT, DIALOG_STYLE_INPUT,
							title,
							"{FFFFFF}Введите количество, которое Вы хотите {FFCD00}положить:",
							"Положить", "Отмена"
						);

						SetPVarInt(playerid, "store_index", listitem);
					}
					else if(4 <= listitem <= 5)
					{
						format(title, sizeof title, "{FFCD00}Взять %s", item_name[listitem - 4]);

						Dialog
						(
							playerid, DIALOG_HOUSE_STORE_TAKE, DIALOG_STYLE_INPUT,
							title,
							"{FFFFFF}Введите количество, которое Вы хотите {FFCD00}взять:",
							"Взять", "Отмена"
						);

						SetPVarInt(playerid, "store_index", listitem - 4);
					}
					else
					{
						new query[80];

						switch(listitem)
						{
							case 2:
							{
								if(GetHouseData(house_id, H_STORE_WEAPON))
									SendClientMessage(playerid, 0x999999FF, "Место в шкафу уже занято другим оружием");

								else
								{
									new weapon_id = GetPlayerWeapon(playerid),
										weapon_ammo = GetPlayerAmmo(playerid);

									if(!weapon_id)
										SendClientMessage(playerid, 0x999999FF, "У Вас в руках нет оружия");

									else
									{
										if(weapon_ammo > 3000)
											SendClientMessage(playerid, 0x999999FF, "В шкаф не вместится такое количество патронов");

										else
										{
											if(weapon_id == 23 || weapon_id == 24
											|| weapon_id == 25 || weapon_id == 29
											|| weapon_id == 30 || weapon_id == 31
											|| weapon_id == 33 || weapon_id == 34)
											{
												SetHouseData(house_id, H_STORE_WEAPON, 	weapon_id);
												SetHouseData(house_id, H_STORE_AMMO, 	weapon_ammo);

												SetPlayerAmmo(playerid, weapon_id, 0);

												mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_weapon=%d, store_ammo=%d WHERE id=%d",
												weapon_id, weapon_ammo, GetHouseData(house_id, H_SQL_ID));
												mysql_query(mysql, query, false);

												format(query, sizeof query, "Вы положили %s в шкаф", GetWeaponName(weapon_id));
												SendClientMessage(playerid, 0x3399FFFF, query);
											}
											else SendClientMessage(playerid, 0x999999FF, "Вы не можете класть этот тип оружия в шкаф");
										}
									}
								}
							}
							case 3:
							{
								if(!GetPlayerTeamEx(playerid))
								{
									if(GetHouseData(house_id, H_STORE_SKIN))
										SendClientMessage(playerid, 0x999999FF, "Место в шкафу уже занято другой одеждой");

									else
									{
										SetHouseData(house_id, H_STORE_SKIN, GetPlayerData(playerid, P_SKIN));

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=%d WHERE id=%d",
										GetPlayerSkinEx(playerid), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										SetPlayerData(playerid, P_SKIN, 97);
										UpdatePlayerDatabaseInt(playerid, "skin", 97);

										SetPlayerSkin(playerid, 97);

										SendClientMessage(playerid, 0x3399FFFF, "Вы положили свою одежду в шкаф");
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "Вы не можете хранить в шкафу одежду организации");
							}
							case 6:
							{
								if(!GetHouseData(house_id, H_STORE_WEAPON))
									SendClientMessage(playerid, 0x999999FF, "В шкафу нет оружия");

								else
								{
									new weapon_id = GetHouseData(house_id, H_STORE_WEAPON),
										weapon_ammo = GetHouseData(house_id, H_STORE_AMMO);

									GivePlayerWeapon(playerid, weapon_id, weapon_ammo);

									SetHouseData(house_id, H_STORE_WEAPON, 	0);
									SetHouseData(house_id, H_STORE_AMMO, 	0);

									mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_weapon=0, store_ammo=0 WHERE id=%d",
									GetHouseData(house_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "Вы достали из шкафа %s и %d патр.", GetWeaponName(weapon_id), weapon_ammo);
									SendClientMessage(playerid, 0x3399FFFF, query);
								}
							}
							case 7:
							{
								if(!GetPlayerTeamEx(playerid))
								{
									if(!GetHouseData(house_id, H_STORE_SKIN))
										SendClientMessage(playerid, 0x999999FF, "В шкафу нет одежды");

									else
									{
										SetPlayerData(playerid, P_SKIN, GetHouseData(house_id, H_STORE_SKIN));
										UpdatePlayerDatabaseInt(playerid, "skin", GetHouseData(house_id, H_STORE_SKIN));

										SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));

										SetHouseData(house_id, H_STORE_SKIN, 	0);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=0 WHERE id=%d",
										GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										SendClientMessage(playerid, 0x3399FFFF, "Вы переоделись в одежду из шкафа");
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "Вы не можете переодеться, находясь в организации");
							}
						}

						UpdateHouseStore(house_id);

						callcmd::use(playerid, "");
					}
				}
			}
			case DIALOG_HOUSE_STORE_TAKE:
			{
				if(response)
				{
					new value = strval(inputtext),
						house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME),
						query[55];

					if(value < 1)
						SendClientMessage(playerid, 0x999999FF, "Некорректное значение");

					else
					{
						switch(GetPVarInt(playerid, "store_index"))
						{
							case 0:
							{
								if(value > GetHouseData(house_id, H_STORE_METALL))
									SendClientMessage(playerid, 0x999999FF, "В шкафу нет такого количества металла");

								else
								{
									if(GetPlayerData(playerid, P_METALL) + value > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество металла");

									else
									{
										AddPlayerData(playerid, P_METALL, +, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

										SetHouseData(house_id, H_STORE_METALL, GetHouseData(house_id, H_STORE_METALL) - value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_METALL), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы достали из шкафа %d кг металла", value);
										SendClientMessage(playerid, 0x3399FFFF, query);
									}
								}
							}
							case 1:
							{
								if(value > GetHouseData(house_id, H_STORE_DRUGS))
									SendClientMessage(playerid, 0x999999FF, "В шкафу нет такого количества наркотиков");

								else
								{
									if(GetPlayerData(playerid, P_DRUGS) + value > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество наркотиков");

									else
									{
										AddPlayerData(playerid, P_DRUGS, +, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_DRUGS));

										SetHouseData(house_id, H_STORE_DRUGS, GetHouseData(house_id, H_STORE_DRUGS) - value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_drugs=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_DRUGS), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы достали из шкафа %d г наркотиков", value);
										SendClientMessage(playerid, 0x3399FFFF, query);
									}
								}
							}
						}

						UpdateHouseStore(house_id);
					}
				}

				callcmd::use(playerid, "");
			}
			case DIALOG_HOUSE_STORE_PUT:
			{
				if(response)
				{
					new value = strval(inputtext),
						house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME),
						query[55];

					if(value < 1)
						SendClientMessage(playerid, 0x999999FF, "Некорректное значение");

					else
					{
						switch(GetPVarInt(playerid, "store_index"))
						{
							case 0:
							{
								if(value > GetPlayerData(playerid, P_METALL))
									SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества металла");

								else
								{
									if(GetHouseData(house_id, H_STORE_METALL) + value > 700)
										SendClientMessage(playerid, 0x999999FF, "В шкафу не хватает места");

									else
									{
										AddPlayerData(playerid, P_METALL, -, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

										SetHouseData(house_id, H_STORE_METALL, GetHouseData(house_id, H_STORE_METALL) + value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_METALL), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы положили в шкаф %d кг металла", value);
										SendClientMessage(playerid, 0x3399FFFF, query);
									}
								}
							}
							case 1:
							{
								if(value > GetPlayerData(playerid, P_DRUGS))
									SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");

								else
								{
									AddPlayerData(playerid, P_DRUGS, -, value);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_DRUGS));

									SetHouseData(house_id, H_STORE_DRUGS, GetHouseData(house_id, H_STORE_DRUGS) + value);

									mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_drugs=%d WHERE id=%d",
									GetHouseData(house_id, H_STORE_DRUGS), GetHouseData(house_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "Вы положили в шкаф %d г наркотиков", value);
									SendClientMessage(playerid, 0x3399FFFF, query);
								}
							}
						}

						UpdateHouseStore(house_id);
					}
				}

				callcmd::use(playerid, "");
			}

			case DIALOG_HOUSE_ENTER:
			{
				new houseid = GetPlayerUseListitem(playerid);

				if(houseid >= 0 && response)
				{
					if(GetPlayerInHouse(playerid) == -1)
					{
						if(!GetHouseData(houseid, H_LOCK_STATUS) || GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
						{
							EnterPlayerToHouse(playerid, houseid);
						}
						else GameTextForPlayer(playerid, "~r~Closed", 3000, 1);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ENTRANCE_LIFT:
			{
				if(response)
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						new floor = GetPlayerInEntranceFloor(playerid);
						if(floor != -1)
						{
							if(0 <= listitem <= MAX_ENTRANCE_FLOORS-1)
							{
								new to_floor = GetPlayerListitemValue(playerid, listitem);
								if(!to_floor)
								{
									SetPlayerPosEx(playerid, 2771.8713,1701.0203,997.5250, 260.0, 5, entranceid + 2500);
								}
								else SetPlayerPosEx(playerid, 3029.1890,1700.7323,997.5250, 90.0, 5, (entranceid * 100) + to_floor);

								SetPlayerInEntranceFloor(playerid, to_floor);
							}
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_HOTEL:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						switch(listitem + 1)
						{
							case 1:
							{
								ShowPlayerHotelFloorsInfo(playerid, hotel_id);
							}
							case 2:
							{
								if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
								{
									new free_room = GetHotelFreeRoom(hotel_id);
									if(free_room != -1)
									{
										SetPlayerUseListitem(playerid, free_room);

										new fmt_str[128];
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Мы предлагаем Вам поселиться в номере %d на %d этаже\n"\
											"Регистрация стоит 1000 рублей. Вы уверены?",
											(free_room % 12) + 1,
											(free_room / 12) + 1
										);
										Dialog(playerid, DIALOG_HOTEL_REG_ROOM, DIALOG_STYLE_MSGBOX, "{66CC99}Подтверждение регистрации", fmt_str, "Выбрать", "Назад");
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
											"{66CC99}Свободные номера",
											"{FFFFFF}В этой гостинице нет свободных номеров",
											"Назад", "Закрыть"
										);
									}
								}
								else
								{
									Dialog
									(
										playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
										"{66CC99}Регистрация",
										"{FFFFFF}Вы уже снимаете номер в гостинице",
										"Назад", "Закрыть"
									);
								}
							}
							case 3:
							{
								ShowPlayerHotelClientMenu(playerid, hotel_id);
							}
						}
					}
				}
			}
			case DIALOG_HOTEL_FLOOR_SELECT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						ShowPlayerHotelFloorInfo(playerid, hotel_id, listitem);
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_INFO:
			{
				if(response)
				{
					ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_LIFT:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
						if(0 <= listitem <= max_floors-1)
						{
							new to_floor = GetPlayerListitemValue(playerid, listitem);

							if(!to_floor)
							{
								new businessid = GetPlayerInBiz(playerid);
								new type = GetBusinessData(businessid, B_INTERIOR);

								SetPlayerPosEx(playerid, 730.1479, 599.7930, 1002.9598, 89.9507, GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR), businessid + 255);
							}
							else SetPlayerPosEx(playerid, 1276.0446, -773.2361, 1202.7220, 360.0, to_floor, ((hotel_id + 1) * 200) + (to_floor + 1000));

							SetPlayerData(playerid, P_IN_HOTEL_FLOOR, to_floor);
						}
					}
				}
			}
			case DIALOG_HOTEL_REG_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						new room_id = GetPlayerUseListitem(playerid);
						new businessid = GetPlayerInBiz(playerid);

						if(GetPlayerHouse(playerid) == -1)
						{
							if(!IsHotelRoomOwned(hotel_id, room_id))
							{
								new price = 1000;
								new take_prods = 2;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[300];
									new time = gettime();
									new rent_time = (time - (time % 86400)) + 86400;

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,hotels h,business b SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0,b.products=%d,b.balance=%d WHERE a.id=%d AND h.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), rent_time, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID),GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts a, hotels h SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0 WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}
										SetPlayerData(playerid, P_HOUSE, hotel_id);
										SetPlayerData(playerid, P_HOUSE_ROOM, room_id);
										SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_HOTEL);

										SetHotelData(hotel_id, room_id, H_OWNER_ID, 	GetPlayerAccountID(playerid));
										SetHotelData(hotel_id, room_id, H_RENT_DATE, 	rent_time);
										SetHotelData(hotel_id, room_id, H_STATUS, 		false);

										format(g_hotel[hotel_id][room_id][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

										GivePlayerMoneyEx(playerid, -price, "Покупка номера в отеле", false, true);
										EnterPlayerToHotelRoom(playerid, hotel_id, room_id);

										SendClientMessage(playerid, 0x3399FFFF, "Вы сняли номер в гостинице");
										SendClientMessage(playerid, 0x66CC00FF, "Подсказка: оплатить проживание можно на первом этаже у регистрационной стойки");
										SendClientMessage(playerid, 0xFFFFFFFF, "Нажмите {66CC99}~k~~SNEAK_ABOUT~ {FFFFFF}для выхода из номера");

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 37)");
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы снять этот номер");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Извините, но этот номер уже занят");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас есть жилье. Нужно продать его перед покупкой номера");
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_CLIENT_MENU:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						switch(listitem + 1)
						{
							case 1: // Оплатить проживание
							{
								ShowPlayerHotelRoomPayForRent(playerid);
							}
							case 2: // Информация о транспорте
							{
								new vehicleid = GetPlayerOwnableCarLast(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									new model_id = GetVehicleData(vehicleid, V_MODELID);
									if(model_id)
									{
										new fmt_str[64];
										new index = GetVehicleData(vehicleid, V_ACTION_ID);

										format(fmt_str, sizeof fmt_str, "Модель: %s (номер модели %d)", GetVehicleName(vehicleid), model_id);
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);

										if(!(GetOwnableCarData(index, OC_COLOR_1) == -1 || GetOwnableCarData(index, OC_COLOR_2) == -1))
										{
											format(fmt_str, sizeof fmt_str, "Цвет 1: ID %d   Цвет 2: ID %d", GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
											SendClientMessage(playerid, 0x99FF66FF, fmt_str);
										}
										else SendClientMessage(playerid, 0x99FF66FF, "Цвета транспорта: случайные");

										format(fmt_str, sizeof fmt_str, "Гос. стоимость: %d руб", GetVehicleInfo(model_id - 400, VI_PRICE));
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);
									}
								}
								else
								{
									if(GetPlayerOwnableCarLasts(playerid) == 0)
										SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 3: // Отметить транспорт на GPS
							{
								callcmd::getmycar(playerid, "");
							}
							case 4: // Подогнать транспорт к отелю (1000 руб)
							{
								new vehicleid = GetPlayerOwnableCarLast(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									if(!SetVehicleToHotelRespawn(hotel_id, vehicleid))
									{
										SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете использовать эту функцию");
									}
								}
								else
								{
									if(GetPlayerOwnableCarLasts(playerid) == 0)
										SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							//case 5: // Продать транспорт
							//{
							//	callcmd::sellcar(playerid, "");
							//}
							case 6: // Выселиться из отеля
							{
								Dialog
								(
									playerid, DIALOG_HOTEL_OUT, DIALOG_STYLE_MSGBOX,
									"{66CC99}Выселение",
									"{FFFFFF}Вы уверены что хотите выселиться из отеля?",
									"Да", "Нет"
								);
							}
							default:
								return 1;
						}
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_PAY_FOR_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new time = gettime();
							new rent_time = GetHotelData(hotel_id, room_id, H_RENT_DATE);

							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new total_price = days * 1000;

							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, hotels h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHotelData(hotel_id, room_id, H_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно проживание в отеле еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHotelRoomPayForRent(playerid);
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			case DIALOG_HOTEL_OUT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new query[155];

						format(query, sizeof query, "UPDATE accounts a,hotels h SET a.house_type=-1,a.house_room=-1,a.house=-1,h.owner_id=0,h.rent_time=0 WHERE a.id=%d AND h.id=%d", GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_HOUSE, 		-1);
							SetPlayerData(playerid, P_HOUSE_ROOM, 	-1);
							SetPlayerData(playerid, P_HOUSE_TYPE, 	-1);

							SetHotelData(hotel_id, room_id, H_OWNER_ID, 	0);
							SetHotelData(hotel_id, room_id, H_RENT_DATE, 	0);
							SetHotelData(hotel_id, room_id, H_STATUS, 		false);

							SendClientMessage(playerid, 0x3399FFFF, "Вы выселились из отеля");
						}
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OWNABLE_CAR:
			{
				if(response)
				{
/*					new vehicleid = GetPlayerOwnableCarListitem(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						switch(listitem + 1)
						{
							case 1: // Открыть / закрыть
							{
							    SetPVarInt(playerid, "go_list", 1);
								callcmd::lock(playerid, "1");
							}
							case 2: // Вставить / вытащить ключи
							{
							    SetPVarInt(playerid, "go_list", 1);
								callcmd::key(playerid, "");
							}
							case 3: // Отметить транспорт на GPS
							{
							    SetPVarInt(playerid, "go_list", 1);
								callcmd::getmycar(playerid, "");
							}
							case 4: // Содержимое багажника
							{
								ShowTrunkDialog(playerid, vehicleid, true);
							}
							case 5: // Документы на транспорт
							{
								ShowOwnableCarPass(playerid, vehicleid);
							}
							case 6: // Припарковать транспорт
							{
								callcmd::park(playerid, "");
							}
							case 7: // Выгрузить транспорт
							{
								if(UnloadPlayerOwnableCar(playerid, true, GetPVarInt(playerid, "listitem_car")))
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно выгружен!");

								else
									SendClientMessage(playerid, 0x999999FF, "С момента загрузки данного транспорта еще не прошло 1 минуты");
							}
							default:
								return 1;
						}
						//callcmd::car(playerid, "");
					}*/
					for(new i; i < 8; i++)
					{
					    PlayerTextDrawShow(playerid, car_PTD[playerid][i]);
					}
					SetPVarInt(playerid, "car", 1);
		   			SelectTextDraw(playerid, -1);
					return 1;
				}
			}
			case DIALOG_OWNABLE_CAR_LOAD:
			{
				if(response)
				{
					new idx = GetPVarInt(playerid, "ownablecar_id"),
						Float: x,
						Float: y,
						Float: z,
						Cache: result,
						query[100];

					mysql_format(mysql, query, sizeof query, "SELECT pos_x, pos_y, pos_z FROM ownable_cars WHERE id='%d'", idx);
					result = mysql_query(mysql, query, true);

					if(cache_num_rows())
					{
						x = cache_get_row_float(0, 0);
						y = cache_get_row_float(0, 1);
						z = cache_get_row_float(0, 2);
					}

					cache_delete(result);

					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
							{
								if(GetPlayerMoneyEx(playerid) >= 3000)
								{
									GivePlayerMoneyEx(playerid, -300, "Метка ТС на GPS", true, true);

									EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
									return 1;
								}
								else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
						}
						case 2:
						{
							if(GetPlayerOwnableCarListitem(playerid) != INVALID_VEHICLE_ID)
							{
								SendClientMessage(playerid, 0x999999FF, "Системная ошибка. Транспорт уже загружен.");
								return 1;
							}

							if(!IsPlayerInRangeOfPoint(playerid, 45.0, x, y, z))
							{
								SendClientMessage(playerid, 0x999999FF, "Вы слишком далеко от места, где припаркован Ваш транспорт");
							}
							else
							{
								if(LoadOwnableCar(playerid, idx) != -1)
								{
									PlayerOwnableCarInit(playerid, GetPVarInt(playerid, "listitem_car"));
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно загружен!");
								}
								else SendClientMessage(playerid, 0x999999FF, "Ошибка при загрузке личного транспорта");
							}
						}
					}
				}
				else
				{
					if(GetPVarInt(playerid, "show_menu"))
					{
						DeletePVar(playerid, "show_menu");
						callcmd::car(playerid, "");
					}
				}
			}
			case DIALOG_OWNABLE_CAR_LIST:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem);

					SetPVarInt(playerid, "listitem_car", listitem);
					SetPVarInt(playerid, "ownablecar_id", idx);
					if(GetPlayerOwnableCarListitem(playerid) == INVALID_VEHICLE_ID)
					{
						ShowOwnableCarLoadDialog(playerid, idx, true);
					}
					else
					{
						for(new i; i < 8; i++)
						{
						    PlayerTextDrawShow(playerid, car_PTD[playerid][i]);
						}
						SetPVarInt(playerid, "car", 1);
			   			SelectTextDraw(playerid, -1);
						return 1;
					}
				}
			}
			case DIALOG_OWNABLE_CAR_SELL:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						new model_id = GetVehicleData(vehicleid, V_MODELID);

						if(DestroyOwnableCar(vehicleid))
						{
							new fmt_str[128],
								index,
								idx;

							new car_price = GetVehicleInfo(model_id-400, VI_PRICE);
							new percent = car_price * 20 / 100;
							new price = car_price - percent;
							DestroyDynamicObject(nomerobj_f[index]);
        					DestroyDynamicObject(nomerobj_b[index]);

							AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_DISKI));
						    AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_GIDRA));
                            AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_NITRO));



							SetPlayerVehicleData(playerid, GetPVarInt(playerid, "lli"), INVALID_VEHICLE_ID);
							AddPlayerData(playerid, P_BANK, +, price);

							BankLog(playerid, price, "Продажа личного транспорта");

							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%d WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);

							SendClientMessage(playerid, 0x3399FFFF, "Вы продали личный транспорт");

							format(fmt_str, sizeof fmt_str, "Налоговый сбор составляет 30 процентов от его стоимости {FF9900}(%d руб)", percent);
							SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "На основной банковский счет переведено {FFFF00}%d руб", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "~g~+%d rub", price);
							GameTextForPlayer(playerid, fmt_str, 4000, 1);
						}
					}
				}
			}
			case DIALOG_OWNABLE_CAR_NUMBER:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid);

					if(vehicleid != INVALID_VEHICLE_ID)
					{
						if(GetPlayerMoney(playerid) >= 5000)
						{
							new fmt_text[100],
								index;

							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_NUMBER], 7, GenerateCarNumber());

							UpdateVehicleLabel(vehicleid, 0xFFFF00EE, GetOwnableCarData(index, OC_NUMBER));

							format(fmt_text, sizeof fmt_text, "Вы купили номера формата: {ffcd00}\"%s\" {66cc33}за 5000 руб", GetOwnableCarData(index, OC_NUMBER));
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							GivePlayerMoneyEx(playerid, -5000, "Покупка номеров", true, true);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);

							DestroyDynamicObject(nomerobj_f[index]);
							DestroyDynamicObject(nomerobj_b[index]);

							AttachCarNumber(vehicleid, index);
							SetVehicleNumber(index);
						}
						else
						{
							SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки номеров");
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VEHICLE_TRUNK:
			{
				new vehicleid = GetPlayerUseTrunk(playerid);

				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(GetPlayerListitemValue(playerid, listitem) == -1) // Положить
					{
						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT, DIALOG_STYLE_LIST,
							"{3399FF}Содержимое багажника",
							"\
							1. Положить деньги\n\
							2. Положить канистру\n\
							3. Положить аптечку\n\
							4. Положить металл\n\
							5. Положить патроны\n\
							6. Положить наркотики\
							",
							"Положить", "Назад"
						);
					}
					else
					{
						if(0 <= listitem <= MAX_VEHICLE_TRUNK_SLOTS)
						{
							new desc[64] = "{66CC33}",
								type = GetTrunkData(vehicleid, listitem, VT_ITEM_TYPE);

							if(type == ITEM_TYPE_JERRICAN)
							{
								if(TakeTrunkItem(vehicleid, type, 15))
								{
									if(!GetPVarInt(playerid, "have_jerrican"))
									{
										SetPVarInt(playerid, "have_jerrican", 1);
										SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

										SendClientMessage(playerid, 0x3399FFFF, "Вы достали из багажника \"Канистра\" в количестве: 15 л");
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть канистра");
										AddTrunkItem(vehicleid, type, 15);
									}
								}
								else
								{
									SendClientMessage(playerid, 0x999999FF, "В багажнике нет канистры");
								}
							}
							else
							{
								if(type == ITEM_TYPE_NONE) type++;

								strcat(desc, GetItemInfo(type, I_NAME));

								SetPVarInt(playerid, "trunk_slot", type);

								Dialog
								(
									playerid, DIALOG_VEHICLE_TRUNK_TAKE, DIALOG_STYLE_INPUT,
									desc,
									"{FFFFFF}Введите количество, которое Вы хотите {ffcd00}достать:",
									"Достать", "Назад"
								);
							}
						}
					}
				}
			}
			case DIALOG_VEHICLE_TRUNK_PUT:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					slot = listitem + 1;

				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(slot == ITEM_TYPE_JERRICAN)
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							SendClientMessage(playerid, 0x999999FF, "У Вас с собой нет канистры");
						}
						else
						{
							DeletePVar(playerid, "have_jerrican");
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

							if(AddTrunkItem(vehicleid, ITEM_TYPE_JERRICAN, 15) != -1)
							{
								SendClientMessage(playerid, 0x3399FFFF, "Вы положили в багажник \"Канистра\" в количестве: 15 л");
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "В багажнике недостаточно места");
							}
						}
					}
					else
					{
						new desc[32] = "{ff6600}";

						strcat(desc, GetItemInfo(slot, I_NAME));

						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT_ITEM, DIALOG_STYLE_INPUT,
							desc,
							"{FFFFFF}Введите количество, которое Вы хотите {ffcd00}положить:",
							"Положить", "Назад"
						);

						SetPVarInt(playerid, "trunk_slot", slot);
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			case DIALOG_VEHICLE_TRUNK_PUT_ITEM:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(AddTrunkItem(vehicleid, slot, amount))
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									if(GetPlayerMoneyEx(playerid) >= amount)
									{
										GivePlayerMoneyEx(playerid, -amount, "Положил в багажник", true);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества денег");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_MED:
								{
									if(GetPlayerData(playerid, P_MED_CHEST) >= amount)
									{
										AddPlayerData(playerid, P_MED_CHEST, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества аптечек");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if(GetPlayerData(playerid, P_METALL) >= amount)
									{
										AddPlayerData(playerid, P_METALL, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества металла");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if(GetPlayerData(playerid, P_AMMO) >= amount)
									{
										AddPlayerData(playerid, P_AMMO, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества патронов");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if(GetPlayerData(playerid, P_DRUGS) >= amount)
									{
										AddPlayerData(playerid, P_DRUGS, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "В багажнике недостаточно места");
							return 1;
						}

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "Вы положили в багажник \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
						SendClientMessage(playerid, 0x3399FFFF, fmt_text);
					}
					else SendClientMessage(playerid, 0x999999FF, "Неверное количество");
				}
				else
				{
					ShowTrunkDialog(playerid, vehicleid, false);
				}
			}
			case DIALOG_VEHICLE_TRUNK_TAKE:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(TakeTrunkItem(vehicleid, slot, amount) != -1)
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									GivePlayerMoneyEx(playerid, amount, "Достал из багажника", true);
								}
								case ITEM_TYPE_MED:
								{
									if((GetPlayerData(playerid, P_MED_CHEST) + amount) < 3)
									{
										AddPlayerData(playerid, P_MED_CHEST, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "Вы не можете носить с собой больше 3-х аптечек");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if((GetPlayerData(playerid, P_METALL) + amount) < GetPlayerMaxStorage(playerid, STORAGE_METALL))
									{
										AddPlayerData(playerid, P_METALL, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "Вы не можете унести с собой больше металла");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if((GetPlayerData(playerid, P_AMMO) + amount) < GetPlayerMaxStorage(playerid, STORAGE_AMMO))
									{
										AddPlayerData(playerid, P_AMMO, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "Вы не можете унести с собой больше патронов");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if((GetPlayerData(playerid, P_DRUGS) + amount) < GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
									{
										AddPlayerData(playerid, P_DRUGS, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "Вы достали из багажника \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
							SendClientMessage(playerid, 0x3399FFFF, fmt_text);
						}
						else
						{
							SendClientMessage(playerid, 0x999999FF, "В багажнике нет такого количества предмета");
							ShowTrunkDialog(playerid, vehicleid, false);
						}
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_SPAWN:
			{
				if(response)
				{
					switch(listitem)
					{
						case 1: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1) return SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");
						case 2: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1) return SendClientMessage(playerid, 0x999999FF, "Вы не проживаете в гостиничном номере");
						case 3: if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организации");
						case 4: if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1) return SendClientMessage(playerid, 0x999999FF, "Вы не проживаете ни у кого в гостях");
						case 5:
						{
							if(!GetPlayerFam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в семье");
							if(g_family[GetPlayerFam(playerid)][F_HOUSE] == 0) return SendClientMessage(playerid, 0x999999FF, "У вашей семьи нет дома");
						}
					}

					SetPlayerData(playerid, P_SPAWN, listitem);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", listitem);

					SendClientMessage(playerid, 0x3399FFFF, "Место появления в игре изменено");
				}
			}
			// -----------------------------------------------------------------
				case DIALOG_DONATE_INFO:
			{
				if(!response) return callcmd::menu(playerid, "");

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_ENROLLMENT:
			{
				if(!response) return true;

				new donate_money = GetPVarInt(playerid, "donate_money"),
					donate_money_with_action = GetPVarInt(playerid, "donate_money_with_action"),
					fmt_text[248];

				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE `donations` SET activated=1 WHERE acc_id=%d", GetPlayerAccountID(playerid));
				mysql_query(mysql, fmt_text, false);

				if(!mysql_errno())
				{
					GivePlayerDonate(playerid, donate_money_with_action, "Пополнение счёта");

					format
					(
						fmt_text, sizeof fmt_text,
						"{FFFFFF}\
						Сумма была зачислена на Ваш аккаунт\n\
						Вы успешно пополнили счёт на {66cc99}%d.00 руб\n\
						{FFFFFF}С учётом акции было зачислено {33cc66}%d.00 руб\n\n\
						{FFFFFF}Используйте: {ffcc00}/menu > Дополнительно\
						",
						donate_money, donate_money_with_action
					);

					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00cc33}Счёт пополнен", fmt_text, "Закрыть", "");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 48)");
			}
			case DIALOG_DONATE_MENU:
			{
				if(!response) return 1;

				if(response && GetPlayerCurrentDonate(playerid) <= 0) return callcmd::mn(playerid, "");

				switch(listitem)
				{
					case 0: ShowPlayerDonations(playerid, GetPlayerAccountID(playerid));
					case 1: ShowPlayerConvertDialog(playerid);
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_DONATE_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}Изменение имени",
							"{FFFFFF}Введите новое имя в поле ниже:",
							"Изменить", "Закрыть"
						);
					}
					case 3:
					{
						if(GetPlayerData(playerid, P_WARN))
						{
							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_WARNS))
							{
								SetPlayerData(playerid, P_WARN, 		0);
								SetPlayerData(playerid, P_WARN_TIME, 	0);

								UpdatePlayerDatabaseInt(playerid, "warn", 		0);
								UpdatePlayerDatabaseInt(playerid, "warn_time", 	0);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_WARNS), "Снятие предупреждений");

								SendClientMessage(playerid, 0x66CC33FF, "Все предупреждения успешно сняты");
								SendClientMessage(playerid, 0xFFFF00FF, "Теперь Вы можете устроиться в организацию");
							}
							else
							{
								new fmt_text[80];

								format(fmt_text, sizeof fmt_text, "Для снятия всех предупреждений необходимо иметь на счету %d.00 руб",
								GetDonatePrice(DONATE_PRICE_WARNS));

								SendClientMessage(playerid, -1, fmt_text);
							}
						}
						else SendClientMessage(playerid, 0x999999FF, "На Вашем аккаунте нет предупреждений");

						ShowPlayerDonateMenu(playerid);
					}
					case 4:
					{
						if(GetPlayerOwnableCarLast(playerid) == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCarLasts(playerid) == 0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
						}

						if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "Выгрузите с сервера авто на который не хотите ставить регион!");

						Dialog
						(
							playerid, DIALOG_BUY_REGION, DIALOG_STYLE_INPUT,
							"{ffcd00}Введите регион для личного ТС",
							"{FFFFFF}\
							Введите регион, который\n\
							Вы хотите установить на личный транспорт\n\n\
							- Разрешено использовать только цифры от 0 до 9\n\
							- Регион должен содержать именно 3 цифры. Не больше не меньше.\n\
							- Чем больше одинаковых цифр встречается в регионе - тем он дороже\n\
							- Регион должен быть в формате xxx; где x - цифра\n\n\
							{888888}Например: 123\
							",
							"Далее", "Отмена"
						);
					}
					case 5:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LAW_ABIDING))
						{
							AddPlayerData(playerid, P_LAW_ABIDING, +, 10);
							UpdatePlayerDatabaseInt(playerid, "law_abiding", GetPlayerData(playerid, P_LAW_ABIDING));

							SendClientMessage(playerid, 0x66CC33FF, "Документы удалось подделать");

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LAW_ABIDING), "Подделка документов");
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Для подделки документов необходимо иметь на счету %d.00 руб",
							GetDonatePrice(DONATE_PRICE_LAW_ABIDING));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 6:
					{
						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_PHONE_NUMBER))
						{
							Dialog
							(
								playerid, DIALOG_DONATE_BUY_NUMBER, DIALOG_STYLE_INPUT,
								"{FFCD00}Покупка 4-х значного номера телефона",
								"{FFFFFF}Введите номер, который\n"\
								"Вы хотели бы приобрести:",
								"Далее", "Отмена"
							);

							return 1;
						}
						else
						{
							new fmt_text[85];

							format(fmt_text, sizeof fmt_text, "Для покупки 4-х значного номера телефона необходимо иметь на счету 100.00 руб",
							GetDonatePrice(DONATE_PRICE_PHONE_NUMBER));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 7:
					{
						new fmt_text[400];

						format
						(
							fmt_text, sizeof fmt_text,
							"1. Сила\t\t%d%%\n"\
							"2. Colt 45\t%d%%\n"\
							"3. SD Pistol\t%d%%\n"\
							"4. Desert Eagle\t%d%%\n"\
							"5. Shotgun\t%d%%\n"\
							"6. MP5\t\t%d%%\n"\
							"7. AK47\t\t%d%%\n"\
							"8. M4\t\t%d%%\n"\
							"9. Sniper Rifle\t%d%%\n"\
							"10. Sawnoff\t%d%%\n"\
							"11. Combat SG\t%d%%\n"\
							"12. Micro Uzi\t%d%%",
							GetPlayerData(playerid, P_POWER),
							GetPlayerData(playerid, P_SKILL_COLT),
							GetPlayerData(playerid, P_SKILL_SDPISTOL),
							GetPlayerData(playerid, P_SKILL_DEAGLE),
							GetPlayerData(playerid, P_SKILL_SHOTGUN),
							GetPlayerData(playerid, P_SKILL_MP5),
							GetPlayerData(playerid, P_SKILL_AK47),
							GetPlayerData(playerid, P_SKILL_M4),
							GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE),
							GetPlayerData(playerid, P_SKILL_SAWNOFF),
							GetPlayerData(playerid, P_SKILL_COMBAT_SG),
							GetPlayerData(playerid, P_SKILL_MICRO_UZI)
						);

						Dialog(playerid, DIALOG_DONATE_SKILLS, DIALOG_STYLE_LIST, "{FFCD00}Выберите навык", fmt_text, "Выбор", "Отмена");
					}
					case 8:
					{
						if(GetPlayerOwnableCarLast(playerid) == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCarLasts(playerid) == 0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
						}

						if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "Выгрузите с сервера авто на который не хотите ставит номера!");

						Dialog
						(
							playerid, DIALOG_DONATE_BUY_CAR_NUMBER, DIALOG_STYLE_INPUT,
							"{ffcd00}Введите номер для личного ТС",
							"{FFFFFF}\
							Введите номер, который\n\
							Вы хотите установить на личный транспорт\n\n\
							- Разрешено использовать цифры, а так же буквы: A, B, E, K, M, H, O, P, C, T, X\n\
							- Чем больше одинаковых букв/цифр встречается в номере - тем он дороже\n\
							- Номер должен быть в формате CNNNCC; Где C - буква, где N - цифра\n\n\
							{888888}Например: B713EC\
							",
							"Далее", "Отмена"
						);
					}
					case 9:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) < GetDonatePrice(DONATE_PRICE_CAR_SLOT))
						{
							format(fmt_text, sizeof fmt_text, "Для покупки слота для транспорта необходимо иметь на счету %d.00 руб",
							GetDonatePrice(DONATE_PRICE_CAR_SLOT));

							SendClientMessage(playerid, -1, fmt_text);
						}
						else
						{
							AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
							UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_CAR_SLOT), "Покупка слота для транспорта", true, true);

							format(fmt_text, sizeof fmt_text, "Вы увеличили количество слотов для транспорта. Текущее количество слотов: %d",
							GetPlayerData(playerid, P_CAR_SLOTS));

							SendClientMessage(playerid, 0x66CC00FF, fmt_text);
						}
					}
					case 10:
					{
						if(GetPlayerData(playerid, P_DRIVING_LIC) == 2 && GetPlayerData(playerid, P_WEAPON_LIC) == 1)
							SendClientMessage(playerid, 0x999999FF, "У Вас уже есть все лицензии");

						else
						{
							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LIC_PACK))
							{
								SetPlayerData(playerid, P_DRIVING_LIC,	2);
								SetPlayerData(playerid, P_WEAPON_LIC,	1);

								UpdatePlayerDatabaseInt(playerid, "driving_lic", 2);
								UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LIC_PACK), "Покупка пакета лицензий", true, true);

								SendClientMessage(playerid, 0x66CC33FF, "Вы приобрели пакет лицензий. Используйте: {FFCD00}/lic");
							}
							else
							{
								new fmt_text[65];

								format(fmt_text, sizeof fmt_text, "Для покупки всех лицензий необходимо иметь на счету %d.00 руб",
								GetDonatePrice(DONATE_PRICE_LIC_PACK));
							}
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 11:
					{
       						if(GetPlayerCurrentDonate(playerid) >=  GetDonatePrice(DONATE_PRICE_SKIN))
							{
								Dialog
								(
									playerid, DIALOG_BUY_SKIN, DIALOG_STYLE_INPUT,
									"{FFD700}Покупка скина",
									"Введите ID скина для покупки:",
									"Далее", "Отмена"
								);

							}
							else
							{
								new fmt_text[65];

								format(fmt_text, sizeof fmt_text, "Для покупки скина необходимо иметь на счету %d.00 руб",
								GetDonatePrice(DONATE_PRICE_SKIN));
							}
					}
					case 12:
					{
						Dialog(playerid, DIALOG_BUY_ADMIN, DIALOG_STYLE_LIST, "Покупка админки", "Админка 1-го уровня\t499 рублей\nАдминка 2-го уровня\t999 рублей\nАдминка 3-го уровня\t1499 рублей\nАдминка 4-го уровня\t1999 рублей\nАдминка 5-го уровня\t2499 рублей\nАдминка 6-го уровня\t2999 рублей", "Купить", "Отмена");
					}
				}
			}
			case DIALOG_DONATE_CONVERT:
			{
				if(!response) return ShowPlayerDonateMenu(playerid);

				new fmt_text[256],
					money_amount = strval(inputtext);

				if((!strlen(inputtext) || !IsNumeric(inputtext)) && !GetPVarInt(playerid, "convert_money"))
				{
					SendClientMessage(playerid, 0xFF6600FF, "Вы не указали сумму или ввели её неверно");

					ShowPlayerConvertDialog(playerid);
					return 1;
				}

				if(strlen(inputtext) > 4) return SendClientMessage(playerid,-1,"Максимум 4 символа");

				if(money_amount > 4000 || money_amount == 999999999999 || money_amount == 999999999999999)
				{
				    SendClientMessage(playerid, 0xFF6600FF, "Можно сконвертировать не больше чем 4.000 RCoins за раз");
				    ShowPlayerConvertDialog(playerid);
					return 1;
				}

				if(money_amount > GetPlayerCurrentDonate(playerid))
				{
					format(fmt_text, sizeof fmt_text, "Недостаточно средств. Сейчас на Вашем счету %d.00 RCoins", GetPlayerCurrentDonate(playerid));
					SendClientMessage(playerid, 0xFF6600FF, fmt_text);

					ShowPlayerConvertDialog(playerid);
					return 1;
				}

				if(!strlen(inputtext) && GetPVarInt(playerid, "convert_money"))
				{
					new donate_price = GetDonatePrice(DONATE_PRICE_MONEY) * g_doubling[DOUBLING_DONATE];

					money_amount = GetPVarInt(playerid, "convert_money");

					format(fmt_text, sizeof fmt_text, "Вы сконвертировали {009900}%d.00 RCoins {ffff00}в {009900}%d игр.руб.", money_amount, money_amount * donate_price);
					SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

					format(fmt_text, sizeof fmt_text, "~g~+%d rub~n~~y~-%d rub", money_amount * donate_price, money_amount);
					GameTextForPlayer(playerid, fmt_text, 4000, 1);

					format(fmt_text, sizeof fmt_text, "Конвертация %d RCoins в игровую валюту", money_amount);
					GivePlayerDonate(playerid, -money_amount, fmt_text, true, false);

					GivePlayerMoneyEx(playerid, money_amount * donate_price, fmt_text, true, true);

					DeletePVar(playerid, "convert_money");
				}
				else
				{
					SetPVarInt(playerid, "convert_money", money_amount);

					ShowPlayerConvertDialog(playerid);
				}

				return 1;
			}

			case DIALOG_DONATE_GET_MONEY:
			{
				if(!response)
				{
					DeletePVar(playerid, "donate_convert_count");
					return ShowPlayerDonateMenu(playerid);
				}

				new money_count;
				money_count = GetPVarInt(playerid, "donate_convert_count");

				new fmt_text[128];

				format(fmt_text, sizeof fmt_text, "Вы сконвертировали {66cc00}%d.00 RCoins {ffff00}в {66cc00}%d игр.руб.", money_count, money_count * GetDonatePrice(DONATE_PRICE_MONEY));
				SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

				format(fmt_text, sizeof fmt_text, "~g~+%d rub~n~~y~-%d rub", money_count * GetDonatePrice(DONATE_PRICE_MONEY), money_count);
				GameTextForPlayer(playerid, fmt_text, 4000, 1);

				format(fmt_text, sizeof fmt_text, "Конвертация %d RCoins в игровую валюту", money_count);
				GivePlayerDonate(playerid, -money_count, fmt_text, true, false);

				GivePlayerMoneyEx(playerid, money_count * GetDonatePrice(DONATE_PRICE_MONEY), fmt_text, false, true);

				DeletePVar(playerid, "donate_convert_count");

				return 1;
			}
			case DIALOG_BUY_REGION:
			{
				if(!response) return 1;
				if(!IsNumeric(inputtext)) return SendClientMessage(playerid, -1, "Только цифры!");
				if(strlen(inputtext) != 3) return SendClientMessage(playerid, -1, "Только 3-х значные регионы");
				new vehicleid = GetPlayerOwnableCarLast(playerid);
				new vehicleid2 = GetPlayerOwnableCarLast(playerid);
				new index;
				if(vehicleid != INVALID_VEHICLE_ID && vehicleid2 != INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "Выгрузите второе авто с сервера, оставьте только которое собрались продать");
				if(vehicleid2 != INVALID_VEHICLE_ID)
				{
					vehicleid = vehicleid2;
				}

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					index = GetVehicleData(vehicleid, V_ACTION_ID);
					//if(strcmp(g_ownable_car[index][OC_NUMBER], "------")) return SendClientMessage(playerid, -1, "Для начала установите основные номера на авто");
					new fmt_text[105],
						number_price = GetCarRegionPrice(inputtext),
						Cache: result,
						rows;
					mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE number='%s' AND region='%s'", GetOwnableCarData(index, OC_NUMBER), inputtext);
					result = mysql_query(mysql, fmt_text, true);

					rows = cache_num_rows();

					cache_delete(result);

					if(rows)
						SendClientMessage(playerid, 0x999999FF, "Данный номер с таким регионом уже занят!");
					else
					{
						SetPVarString(playerid, "car_region", inputtext);
						SetPVarInt(playerid, "car_region_price", number_price);

						format(fmt_text, sizeof fmt_text, "{FFFFFF}Вы действительно хотите купить регион {66CC66}%s {FFFFFF}за {ffcd00}%d руб{FFFFFF}?", inputtext, number_price);
						Dialog(playerid, DIALOG_DONATE_ACCEPT_CAR_REG, DIALOG_STYLE_MSGBOX, "{ffcd00}Покупка региона", fmt_text, "Купить", "Назад");
					}
				}
			}
			case DIALOG_DONATE_BUY_CAR_NUMBER:
			{
				if(response)
				{
					if(IsACarNumber(inputtext))
					{
						new fmt_text[105],
							number_price = GetCarNumberPrice(inputtext),
							Cache: result,
							rows;

						mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE number='%s'", inputtext);
						result = mysql_query(mysql, fmt_text, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
							SendClientMessage(playerid, 0x999999FF, "Данный номер уже занят");

						else
						{
							SetPVarString(playerid, "car_number", inputtext);
							SetPVarInt(playerid, "car_number_price", number_price);

							format(fmt_text, sizeof fmt_text, "{FFFFFF}Вы действительно хотите купить номер {66CC66}%s {FFFFFF}за {ffcd00}%d руб{FFFFFF}?", inputtext, number_price);
							Dialog(playerid, DIALOG_DONATE_ACCEPT_CAR_NUM, DIALOG_STYLE_MSGBOX, "{ffcd00}Покупка номера", fmt_text, "Купить", "Назад");

							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, 0x999999FF, "Введенный Вами номер не соответствует формату CNNNCC");

						ShowPlayerDonateMenu(playerid);
					}
				}
				else ShowPlayerDonateMenu(playerid);
				return 1;
			}
			case DIALOG_DONATE_ACCEPT_CAR_REG:
			{
				if(response)
				{
					new number_price = GetPVarInt(playerid, "car_region_price"),
						fmt_text[100];

					if(GetPlayerCurrentDonate(playerid) >= number_price)
					{
						new car_number[7],
							index;

						GetPVarString(playerid, "car_region", car_number, sizeof car_number);

						new vehicleid = GetPlayerOwnableCarLast(playerid);
						new vehicleid2 = GetPlayerOwnableCarLast(playerid);
						if(vehicleid != INVALID_VEHICLE_ID && vehicleid2 != INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "Выгрузите второе авто с сервера, оставьте только которое собрались продать");
						if(vehicleid2 != INVALID_VEHICLE_ID)
						{
							vehicleid = vehicleid2;
						}

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_REGION], 4, car_number);

							format(fmt_text, sizeof fmt_text, "Вы купили регион: {ffcd00}\"%s\" {66cc33}за %d руб", GetOwnableCarData(index, OC_REGION), number_price);
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET region='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_REGION), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);

							GivePlayerDonate(playerid, -number_price, "Покупка региона", true, true);
						}
						else
						{
							if(GetPlayerOwnableCarLasts(playerid) == 0)
								SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
						}
					}
					else
					{
						format(fmt_text, sizeof fmt_text, "Для покупки региона необходимо иметь на счету %d.00 RCoins", number_price);
						SendClientMessage(playerid, -1, fmt_text);
					}
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_ACCEPT_CAR_NUM:
			{
				if(response)
				{
					new number_price = GetPVarInt(playerid, "car_number_price"),
						fmt_text[100];

					if(GetPlayerCurrentDonate(playerid) >= number_price)
					{
						new car_number[7],
							index;

						GetPVarString(playerid, "car_number", car_number, sizeof car_number);

						new vehicleid = GetPlayerOwnableCarLast(playerid);
						new vehicleid2 = GetPlayerOwnableCarLast(playerid);
						if(vehicleid != INVALID_VEHICLE_ID && vehicleid2 != INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "Выгрузите второе авто с сервера, оставьте только которое собрались продать");
						if(vehicleid2 != INVALID_VEHICLE_ID)
						{
							vehicleid = vehicleid2;
						}

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_NUMBER], 7, car_number);

							UpdateVehicleLabel(vehicleid, 0xFFFF00EE, GetOwnableCarData(index, OC_NUMBER));

							format(fmt_text, sizeof fmt_text, "Вы купили номера формата: {ffcd00}\"%s\" {66cc33}за %d руб", GetOwnableCarData(index, OC_NUMBER), number_price);
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);

							GivePlayerDonate(playerid, -number_price, "Покупка номеров", true, true);
						}
						else
						{
							if(GetPlayerOwnableCarLasts(playerid) == 0)
								SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
						}
					}
					else
					{
						format(fmt_text, sizeof fmt_text, "Для покупки номера необходимо иметь на счету %d.00 RCoins", number_price);
						SendClientMessage(playerid, -1, fmt_text);
					}
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_CHANGE_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(4 <= len <= 20)
					{
						new bool: valid_name = true;
						for(new idx; idx < len; idx ++)
						{
							switch(inputtext[idx])
							{
								case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
								default:
									valid_name = false;
							}
						}

						if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
						{
							SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
						}
						else if(valid_name)
						{
							new query[128];
							new Cache: result, rows;

							mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();
							cache_delete(result);

							if(!rows)
							{

								if(ChangePlayerName(playerid, inputtext, false))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FFCD00}Имя изменено",
										"{66FF00}Ваше имя успешно изменено.\n\n"\
										"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
										"этого нужно изменить его в окне клиента CRMP. Рекомендуем прямо\n"\
										"сейчас свернуть игру и сделать это.",
										"Ок", ""
									);

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_NAME), "Смена имени", true, true);

									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

							}
							else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");

						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
						}
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_BUY_NUMBER:
			{
				if(response)
				{
					if(strlen(inputtext) == 4 && (1000 <= strval(inputtext) <= 9999))
					{
						new number = strval(inputtext),
							query[102],
							rows,
							Cache: result;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE phone=%d", number);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
							SendClientMessage(playerid, 0x999999FF, "Введенный Вами номер уже занят");

						else
						{
							SetPlayerData(playerid, P_PHONE, number);
							UpdatePlayerDatabaseInt(playerid, "phone", number);

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_PHONE_NUMBER), "Смена номера телефона");

							format
							(
								query, sizeof query,
								"{FFFFFF}Номер телефона изменен\n"\
								"Теперь с Вами  можно связаться по номеру {0099FF}%d",
								GetPlayerPhone(playerid)
							);
							return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Номер изменен", query, "Закрыть", "");
						}
					}
					else SendClientMessage(playerid, 0x999999FF, "Недопустимый формат ввода");
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_SKILLS:
			{
				if(response)
				{
					SetPVarInt(playerid, "skill_index", listitem);

					new skill_amount = GetPlayerSkillAmount(playerid, listitem);

					new title[48],
						fmt_text[200];

					format(title, sizeof title, "{FFCD00}Прокачать навык: %s", skill_name[listitem]);

					format
					(
						fmt_text, sizeof fmt_text,
						"{FFCD00}%s:\t\t\t{FFFFFF}%d%%\n\n"\
						"Стоимость 1 ед.:\t{6699cc}%d RCoins\n"\
						"{FFFFFF}Введите количество единиц, на которое\n"\
						"Вы хотите прокачать Ваш навык:",
						skill_name[listitem],
						skill_amount,
						GetDonatePrice(DONATE_PRICE_SKILLS)
					);

					Dialog(playerid, DIALOG_DONATE_SKILL_BUY, DIALOG_STYLE_INPUT, title, fmt_text, "Далее", "Отмена");
				}
				else ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_SKILL_BUY:
			{
				if(response)
				{
					new skill_index = GetPVarInt(playerid, "skill_index"),
						skill_amount = strval(inputtext);

					if(!(0 <= skill_index <= 11))
						return SendClientMessage(playerid, 0xFF5533FF, "Ошибка, попробуйте снова");

					if(skill_amount > 0 && IsNumeric(inputtext))
					{
						new skill_max = 100 - GetPlayerSkillAmount(playerid, skill_index);

						new fmt_text[90];

						if(skill_amount <= skill_max)
						{
							new skill_price = GetDonatePrice(DONATE_PRICE_SKILLS) * skill_amount;

							if(GetPlayerCurrentDonate(playerid) >= skill_price)
							{
								GivePlayerDonate(playerid, -skill_price, "Прокачка навыков", true, true);

								SetPlayerSkillAmount(playerid, skill_index, GetPlayerSkillAmount(playerid, skill_index) + skill_amount);

								new skill_db_name[12][20] =
								{
									"power",
									"skill_colt",
									"skill_sdpistol",
									"skill_deagle",
									"skill_shotgun",
									"skill_mp5",
									"skill_ak47",
									"skill_m4",
									"skill_sniper_rifle",
									"skill_sawnoff",
									"skill_combat_sg",
									"skill_micro_uzi"
								};

								UpdatePlayerDatabaseInt(playerid, skill_db_name[skill_index], GetPlayerSkillAmount(playerid, skill_index));

								format(fmt_text, sizeof fmt_text, "Вы прокачали навык %s на %d ед. Текущее значение: %d ед.",
								skill_name[skill_index], skill_amount, GetPlayerSkillAmount(playerid, skill_index));

								SendClientMessage(playerid, 0x66CC33FF, fmt_text);
							}
							else
							{
								format(fmt_text, sizeof fmt_text, "Для прокачки %d ед. навыка требуется %d.00 RCoins на счету", skill_amount, skill_price);
								SendClientMessage(playerid, -1, fmt_text);
							}
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Максимальное значение навыка: 100 ед., Вы можете прокачать еще %d ед.", skill_max);
							SendClientMessage(playerid, -1, fmt_text);
						}
					}
					else SendClientMessage(playerid, 0xFF5533FF, "Введите корректное значение");
				}

				ShowPlayerDonateMenu(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_TEAM_CHANGE_SKIN:
			{
				if(!response || !(0 <= listitem <= 9)) return 1;

				new to_player = GetPVarInt(playerid, "change_team_skin_playerid");
				new team_id = GetPlayerTeamEx(playerid);

				if(!(1 <= team_id <= 10) || !(9 <= GetPlayerJob(playerid) <= 10)) return 1;
				if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || team_id != GetPlayerTeamEx(to_player)) return 1;
				if(GetPlayerSex(to_player)) return 1;

				new index = GetPlayerListitemValue(playerid, listitem);

				SetPlayerData(to_player, P_OSKIN, GetTeamData(team_id, O_SKINS)[index]);

				new query[85];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET org_skin=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerAccountID(to_player));
				mysql_query(mysql, query, false);

				ResetSkin(to_player);

				format(query, sizeof query, "Ваша внешность была изменена %s организации %s[%d]", GetPlayerJob(playerid) >= 10 ? ("лидером") : ("заместителем"), GetPlayerNameEx(playerid), playerid);
				SendClientMessage(to_player, 0x3399FFFF, query);

				format(query, sizeof query, "Вы изменили внешность %s[%d]", GetPlayerNameEx(to_player), to_player);
				SendClientMessage(playerid, 0x3399FFFF, query);

				return 1;
			}
			case DIALOG_TEAM_LEAVE:
			{
				if(response)
				{
					new fmt_text[110];

					format(fmt_text, sizeof fmt_text, "%s %s[%d] покинул организацию по собственному желанию",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x3399FFFF, playerid);

					format(fmt_text, sizeof fmt_text, "Вы покинули организацию \"%s\"", GetTeamName(GetPlayerTeamEx(playerid)));
					SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

					UnInvite(playerid, playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_DEBTORLIST:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(0 <= listitem <= 2)
				{
					ShowDebtorListDialog(playerid, listitem);
				}

				return 1;
			}

			case DIALOG_DEBTORLIST_HOUSE..DIALOG_DEBTORLIST_FUEL_ST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				if(!response) return callcmd::debtorlist(playerid, "");
				if(!(0 <= listitem <= 19)) return 1;

				new type = dialogid - DIALOG_DEBTORLIST_HOUSE;
				new buffer = GetPlayerListitemValue(playerid, listitem);

				switch(type)
				{
					case 0:
					{
						if(!GetHouseData(buffer, H_TYPE))
						{
							EnablePlayerGPS(playerid, 56, GetHouseData(buffer, H_POS_X), GetHouseData(buffer, H_POS_Y), GetHouseData(buffer, H_POS_Z), "Дом должника отмечен у Вас на GPS");
						}
						else
						{
							new ent_id = GetHouseData(buffer, H_ENTRACE);

							EnablePlayerGPS(playerid, 56, GetEntranceData(ent_id, E_POS_X), GetEntranceData(ent_id, E_POS_Y), GetEntranceData(ent_id, E_POS_Z), "Подъезд квартиры должника отмечена у Вас на GPS");
						}
					}
					case 1: EnablePlayerGPS(playerid, 56, GetBusinessData(buffer, B_POS_X), GetBusinessData(buffer, B_POS_Y), GetBusinessData(buffer, B_POS_Z), "Предприятие должника отмечено у Вас на GPS");
					case 2: EnablePlayerGPS(playerid, 56, GetFuelStationData(buffer, FS_POS_X), GetFuelStationData(buffer, FS_POS_Y), GetFuelStationData(buffer, FS_POS_Z), "АЗС должника отмечена у Вас на GPS");
					default: return -1;
				}

				return 1;
			}

			case DIALOG_DEBTOR_SELL_LIST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 7) return 1;
				//if(!response) return callcmd::debtorsell(playerid, "");
				if(!response) return 1;

				switch(listitem)
				{
					case 0:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
							"{99CC00}Акт выселения из жилого помещения",
							"Заполните акт выселения из жилого помещения\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер дома/квартиры\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта должник будет выселен",
							"Подписать", "Назад"
						);

						// 0x3399FFFF > Должник был выселен из дома/квартиры. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 1000 руб.

					}
					case 1:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
							"{99CC00}Акт изъятия предпрятия",
							"Заполните акт изъятия предприятия у должника\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер предприятия\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта предприятие станет собственностью государства",
							"Подписать", "Назад"
						);

						// 0x3399FFFF > Предприятие должника было изъято в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 10000 руб.
					}
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
							"{99CC00}Акт изъятия АЗС",
							"Заполните акт изъятия АЗС у должника\n\n\
							{FFFFFF}Укажите через пробел:\n\n\
							{FFCC00}1. Номер АЗС\n\
							2. ID первого понятого\n\
							3. ID второго понятого\n\n\
							{FFFFFF}Когда закончите составление документа, подпишите его\n\
							Сразу после подписания акта АЗС станет собственностью государства",
							"Подписать", "Назад"
						);
					}
					default: return -1;
				}

				return 1;
			}

			case DIALOG_DEBTOR_SELL_HOUSE:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(!response) return callcmd::debtorsell(playerid, "");

				new sell_houseid = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_houseid, worker_id[0], worker_id[1]);

				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_houseid <= g_house_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер дома/квартиры");

					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от дома/квартиры должника");

					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");

					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");

					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");

					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от дома/квартиры должника");

					else if((((GetHouseData(sell_houseid, H_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого дома/квартиры нет задолжности за неуплату услуг");

					else if(GetHouseData(sell_houseid, H_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт выселения из этого жилого помещения уже подписан");

					else
					{
						SendClientMessage(playerid, 0x3399FFFF, "Должник был выселен из дома/квартиры. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 10000 руб.");

						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));

						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}

						new query[90];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d", GetHouseData(sell_houseid, H_OWNER_ID));
						mysql_query(mysql, query, false);

						new owner_player = GetPlayerIDBySqlID(GetHouseData(sell_houseid, H_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerHouse(owner_player, HOUSE_TYPE_HOME) == sell_houseid)
							{
								SetPlayerData(owner_player, P_HOUSE, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "Вы были выселены из дома/квартиры за неуплату услуг");
							}
						}

						SetHouseData(sell_houseid, H_RENT_DATE, gettime() + (random(169200) + 3600));
						SetHouseData(sell_houseid, H_EVICTION, 1);

						mysql_format(mysql, query, sizeof query, "UPDATE houses SET eviction=1, rent_time=%d WHERE id=%d LIMIT 1", GetHouseData(sell_houseid, H_RENT_DATE), GetHouseData(sell_houseid, H_SQL_ID));
						mysql_query(mysql, query, false);

						return 1;
					}
				}

				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
					"{99CC00}Акт выселения из жилого помещения",
					"Заполните акт выселения из жилого помещения\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер дома/квартиры\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его.\n\
					Сразу после подписания акта должник будет выселен.",
					"Подписать", "Назад"
				);
				return 1;
			}

			case DIALOG_DEBTOR_SELL_BIZ:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(!response) return callcmd::debtorsell(playerid, "");

				new sell_biz_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_biz_id, worker_id[0], worker_id[1]);

				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_biz_id <= g_business_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер предприятия");

					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от предприятия должника");

					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");

					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");

					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");

					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от предприятия должника");

					else if((((GetBusinessData(sell_biz_id, B_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого предприятия нет задолжности за неуплату услуг");

					else if(GetBusinessData(sell_biz_id, B_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт изъятия этого предприятия уже подписан");

					else
					{
						// 0x3399FFFF > Предприятие должника было изъято в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 10000 руб.

						SendClientMessage(playerid, 0x3399FFFF, "Предприятие должника было изъято в пользу государства. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 10000 руб.");

						SetPlayerChatBubble(playerid, "+10000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+10000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 10000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));

						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 10000 руб.");
							SetPlayerChatBubble(worker_id[i], "+10000 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+10000 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}

						new query[90];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET business = -1 WHERE id=%d", GetBusinessData(sell_biz_id, B_OWNER_ID));
						mysql_query(mysql, query, false);

						new owner_player = GetPlayerIDBySqlID(GetBusinessData(sell_biz_id, B_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerBusiness(owner_player) == sell_biz_id)
							{
								SetPlayerData(owner_player, P_BUSINESS, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "Ваше предприятие было изъято государством за неуплату налогов");
							}
						}

						SetBusinessData(sell_biz_id, B_RENT_DATE, gettime() + (random(169200) + 3600));
						SetBusinessData(sell_biz_id, B_EVICTION, 1);

						mysql_format(mysql, query, sizeof query, "UPDATE business SET eviction=1, rent_time=%d WHERE id=%d LIMIT 1", GetBusinessData(sell_biz_id, B_RENT_DATE), GetBusinessData(sell_biz_id, B_SQL_ID));
						mysql_query(mysql, query, false);

						return 1;
					}
				}

				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
					"{99CC00}Акт изъятия предприятия",
					"Заполните акт изъятия предприятия у должника\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер предприятия\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его\n\
					Сразу после подписания акта предприятие станет собственностью государства",
					"Подписать", "Назад"
				);
				return 1;
			}

			case DIALOG_DEBTOR_SELL_FUEL_ST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;

				if(!response) return callcmd::debtorsell(playerid, "");

				new sell_fs_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_fs_id, worker_id[0], worker_id[1]);

				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_fs_id <= g_fuel_station_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите номер предприятия");

					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Вы находитесь далеко от предприятия должника");

					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID первого понятого");

					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "Укажите ID второго понятого");

					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых не является сотрудником правительства 3 ранга");

					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "Один из понятых находится далеко от предприятия должника");

					else if((((GetFuelStationData(sell_fs_id, FS_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "У владельца этого предприятия нет задолжности за неуплату услуг");

					else if(GetFuelStationData(sell_fs_id, FS_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "Акт изъятия этого предприятия уже подписан");

					else
					{
						// 0x3399FFFF > АЗС должника была изъята в пользу государства. На оформление документов потребуется время
						// 0x3399FFFF > Вы получаете премию 10000 руб.

						SendClientMessage(playerid, 0x3399FFFF, "АЗС должника была изъята в пользу государства. На оформление документов потребуется время");
						SendClientMessage(playerid, 0x3399FFFF, "Вы получаете премию 10000 руб.");

						SetPlayerChatBubble(playerid, "+10000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+10000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));

						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "Вы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}

						new query[90];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET eviction=1, fuel_st = -1 WHERE id=%d", GetFuelStationData(sell_fs_id, FS_OWNER_ID));
						mysql_query(mysql, query, false);

						new owner_player = GetPlayerIDBySqlID(GetFuelStationData(sell_fs_id, FS_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerFuelStation(owner_player) == sell_fs_id)
							{
								SetPlayerData(owner_player, P_FUEL_ST, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "Ваше предприятие было изъято государством за неуплату налогов");
							}
						}

						SetFuelStationData(sell_fs_id, FS_RENT_DATE, gettime() + (random(169200) + 3600));
						SetFuelStationData(sell_fs_id, FS_EVICTION, 1);

						mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET rent_time=%d WHERE id=%d LIMIT 1", GetFuelStationData(sell_fs_id, FS_RENT_DATE), GetFuelStationData(sell_fs_id, FS_SQL_ID));
						mysql_query(mysql, query, false);

						UpdateFuelStationLabel(sell_fs_id);

						return 1;
					}
				}

				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
					"{99CC00}Акт изъятия АЗС",
					"Заполните акт изъятия АЗС у должника\n\n\
					{FFFFFF}Укажите через пробел:\n\n\
					{FFCC00}1. Номер АЗС\n\
					2. ID первого понятого\n\
					3. ID второго понятого\n\n\
					{FFFFFF}Когда закончите составление документа, подпишите его\n\
					Сразу после подписания акта АЗС станет собственностью государства",
					"Подписать", "Назад"
				);
				return 1;
			}

			case DIALOG_ADVISOR_MENU:
			{
				if(!response) return 1;

				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;

				switch(listitem)
				{
					case 0:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]))
						{
							g_player[playerid][P_ADVISOR_LABEL] = CreateDynamic3DTextLabel("Советник", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);

							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бейджик");
						}
						else
						{
							DestroyDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]);
							g_player[playerid][P_ADVISOR_LABEL] = Text3D: -1;

							SendClientMessage(playerid, 0x3399FFFF, "Вы сняли бейджик");
						}
					}
					case 1:
					{
						if(GetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT))
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, false);
							SendClientMessage(playerid, 0x66CC00FF, "Вы включили отображение рации организации");
						}
						else
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, true);
							SendClientMessage(playerid, 0xFF6600FF, "Вы отключили отображение рации организации");
						}
					}
					case 2:
					{
						if(GetPlayerJob(playerid) != 5)
						{
							SendClientMessage(playerid, 0x999999FF, "Функция доступна советникам по гос. организациям");
						}
						else
						{
							Dialog
							(
        playerid, DIALOG_ADVISOR_TEAM_STRUCTURE, DIALOG_STYLE_LIST,
								"{33CC66}Выберите организацию",
								"1. Правительство области\n\
								2. Воинская часть\n\
								3. Городская больница\n\
								4. ГТРК «Ритм»\n\
								5. Отдел полиции №1 (ДПС)\n\
								6. Отдел полиции №2 (ППС)\n\
								7. ФСБ",
								"Выбрать", "Отмена"
							);
							return 1;
						}
					}
					default: return -1;
				}

				callcmd::smenu(playerid, "");
				return 1;
			}

			case DIALOG_ADVISOR_TEAM_STRUCTURE:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;

				if(0 <= listitem <= 6)
				{
					ShowTeamStructureDialog(playerid, (listitem + 1));
				}

				return 1;
			}

			// -----------------------------------------------------------------

			case DIALOG_ADMIN_PANEL:
			{
				if(!response) return 1;

				new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

				switch(listitem)
				{
					case 0: // Список администрации
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE admin != 0 ORDER BY admin DESC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{3399FF}№ акк.\tИмя\t\t\tАдм.ранг\tВ игре сегодня{FFFFFF}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								lvl = cache_get_field_content_int(i, "admin"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", lvl, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_LIST, "{FFCC00}Список администрации", text, "Выбрать", "Отмена");
					}

					case 1: // Список лидеров
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE job=10 ORDER BY team ASC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{3399FF}№ акк.\tИмя\t\t\tФракция\tВ игре сегодня{FFFFFF}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								team = cache_get_field_content_int(i, "team"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", team, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_LEADERS, DIALOG_STYLE_LIST, "{FFCC00}Список лидеров", text, "Выбрать", "Отмена");
					}
					case 2:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][ADMIN_LABEL]))
						{
							g_player[playerid][ADMIN_LABEL] = CreateDynamic3DTextLabel("Разработчик", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);

							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бейджик администратора");
						}
						else
						{
							DestroyDynamic3DTextLabel(g_player[playerid][ADMIN_LABEL]);
							g_player[playerid][ADMIN_LABEL] = Text3D: -1;

							SendClientMessage(playerid, 0x3399FFFF, "Вы сняли бейджик администратора");
						}
					}
				}

				return 1;
			}
			case DIALOG_GAADMIN_PANEL:
			{
				if(!response) return 1;

				new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

				switch(listitem)
				{
					case 0:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][GAADMIN_LABEL]))
						{
							g_player[playerid][GAADMIN_LABEL] = CreateDynamic3DTextLabel("Главный администратор", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);

							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бейджик гл.администратора");
						}
						else
						{
							DestroyDynamic3DTextLabel(g_player[playerid][GAADMIN_LABEL]);
							g_player[playerid][GAADMIN_LABEL] = Text3D: -1;

							SendClientMessage(playerid, 0x3399FFFF, "Вы сняли бейджик гл.администратора");
						}
					}
					case 1: // Список лидеров
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE job=10 ORDER BY team ASC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{3399FF}№ акк.\tИмя\t\t\tФракция\tВ игре сегодня{FFFFFF}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								team = cache_get_field_content_int(i, "team"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", team, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_LEADERS, DIALOG_STYLE_LIST, "{FFCC00}Список лидеров", text, "Выбрать", "Отмена");
					}
				}

				return 1;
			}

   			case DIALOG_ADMINS:
			{
				if(!response) return callcmd::a_panel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_ADMIN, DIALOG_STYLE_LIST,
					"{FFCC00}Редактировать администратора",
					"\
					1. Понизить/повысить адм.ранг\n\
					2. Разжаловать администратора\n\
					{ff3300}3. Заблокировать аккаунт\
					",
					"Выбрать", "Отмена"
				);

				return 1;
			}

			case DIALOG_EDIT_ADMIN:
			{
				if(!response) return callcmd::a_panel(playerid, " ");

				new fmt_text[128],
					user_id = GetPVarInt(playerid, "admin_panel_user_id");

				switch(listitem)
				{
					case 0:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{FFFFFF}\
							Изменение администраторского ранга\n\n\
							ID аккаунта: %d\n\
							Имя: \t%s\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "{FFCC00}Изменение адм.ранга", fmt_text, "Повысить", "Понизить");
					}
					case 1:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{FFFFFF}\
							Разжалование администратора\n\n\
							ID аккаунта: %d\n\
							Имя: \t%s\n\n\
							Вы действительно хотите разжаловать администратора?\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "{FFCC00}Разжалование администратора", fmt_text, "Да", "Нет");
					}
				}

				return 1;
			}

			case DIALOG_EDIT_ADMIN_RANG:
			{
				new user_id = GetPVarInt(playerid, "admin_panel_user_id"),
					player_id = GetPlayerIDBySqlID(user_id);

				if(player_id != -1)
				{
					if(response) AddPlayerData(player_id, P_ADMIN, +, 1);
					else AddPlayerData(player_id, P_ADMIN, -, 1);
					UpdatePlayerDatabaseInt(player_id, "admin", GetPlayerData(player_id, P_ADMIN));
					if(response) SendClientMessage(player_id, 0x66CC33FF, "Ваш администраторский ранг был повышен"), SendClientMessage(player_id, 0x66CC33FF, "Вы повысили ранг администратора!");
					else SendClientMessage(player_id, 0xFF3300FF, "Ваш администраторский ранг был понижен"), SendClientMessage(player_id, 0xFF3300FF, "Вы понизили ранг администратора!");
				}
				else
				{
					new query[55],
						Cache: result,
						admin_rank;

					mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE id=%d", user_id);
					result = mysql_query(mysql, query, true);

					if(!cache_num_rows()) return 0;

					admin_rank = cache_get_row_int(0, 0);

					cache_delete(result);

					if(response) admin_rank++;
					else admin_rank--;

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET admin=%d WHERE id=%d", user_id, admin_rank);
					result = mysql_query(mysql, query, false);
				}


				return 1;
			}

			case DIALOG_LEADERS:
			{
				if(!response) return callcmd::a_panel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_LEADER, DIALOG_STYLE_LIST,
					"{FFCC00}Редактировать лидера",
					"\
					1. Изменить управляемую фракцию\n\
					2. Разжаловать лидера\n\
					{ff3300}3. Заблокировать аккаунт\
					",
					"Выбрать", "Отмена"
				);

				return 1;
			}
			// -----------------------------------------------------------------
			case DIALOG_TELEPORT_LIST:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof g_teleport_list - 1)
					{
						SetPlayerPosEx
						(
							playerid,
							GetTeleportListData(listitem, TL_POS_X),
							GetTeleportListData(listitem, TL_POS_Y),
							GetTeleportListData(listitem, TL_POS_Z),
							0.0, 0, 0
						);
					}
				}
			}
			// -----------------------------------------------------------------
			/*case DIALOG_SET_DOUBLING:
			{
				if(response)
				{
					new fmt_text[50],
						bool: doubling = g_doubling[listitem];

					static const doubling_name[3][24] = {"доната", "очков опыта", "зарплаты на подработках"};

					g_doubling[listitem] = doubling ^ true;

					format(fmt_text, sizeof fmt_text, "Вы %s удвоение %s", doubling ? "выключили" : "включили", doubling_name[listitem]);
					SendClientMessage(playerid, 0x3399FFFF, fmt_text);

					format(fmt_text, sizeof fmt_text, "%s удвоение %s", doubling ? "Выключил" : "Включил", doubling_name[listitem]);
					SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
				}
			}*/
			// -----------------------------------------------------------------
			case DIALOG_RADAR_SELECT:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1..4:
						{
							SetPVarInt(playerid, "radar_type", listitem + 1);

							Dialog
							(
								playerid, DIALOG_RADAR_OBJECT, DIALOG_STYLE_LIST,
								"{FFCD00}Выберите тип радара",
								"1. Регистратор на штативе\n"\
								"2. Стационарный регистратор скорости",
								"Выбор", "Отмена"
							);
						}
						default:
						{
							Dialog
							(
								playerid, DIALOG_RADAR_REMOVE, DIALOG_STYLE_INPUT,
								"{FFCD00}Удаление регистратора скорости",
								"{FFFFFF}Введите номер регистратора,\n"\
								"который Вы хотите удалить:",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case dTuningCar1:
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    if(!response) return true;

				//new index = GetVehicleData(vehicleid, V_ACTION_ID);

				new component_id;
				new count_price_tuning;

			    switch(listitem + 1)
			    {
			        case 1:
			        {
			            component_id = 1073;
			            count_price_tuning = 250000;
			        }
			        case 2:
			        {
			            component_id = 1074;
			            count_price_tuning = 350000;
			        }
			        case 3:
			        {
			            component_id = 1075;
			            count_price_tuning = 300000;
					}
			        case 4:
			        {
			            component_id = 1076;
			            count_price_tuning = 400000;
					}
			        case 5:
					{
					    component_id = 1077;
					    count_price_tuning = 325000;
					}
			        case 6:
			        {
			            component_id = 1078;
			            count_price_tuning = 1000000;
			        }
			        case 7:
			        {
			            component_id = 1079;
			            count_price_tuning = 1400000;
			        }
			    }
			    SendClientMessage(playerid, 0xCECECEFF, "Компонент успешно установлен");

                SetPVarInt(playerid, "count_price_tuning1", count_price_tuning);
				AddVehicleComponent(vehicleid, component_id);
				//SetOwnableCarData(index, OC_DISKI, component_id);
				SetPVarInt(playerid, "id_diski", component_id);

	     		//new query[512];

	//			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET diski=%d WHERE id=%d", GetPVarInt(playerid, "id_diski"), GetOwnableCarData(index, OC_SQL_ID));
	//			mysql_query(mysql, query, false);
			}
			case dTuningCar2:
			{
			    //new vehicleid = GetPlayerVehicleID(playerid);
			    if(!response) return true;
				//new index = GetVehicleData(vehicleid, V_ACTION_ID);

				new component_id;
				new cena;

			    switch(listitem + 1)
			    {
			        case 1:
			        {
			            component_id = 1008;
			            cena = 150000;
			        }
			        case 2:
			        {
			            component_id = 1009;
                        cena = 250000;
			        }
			        case 3:
			        {
			            component_id = 1010;
			            cena = 500000;
			        }
			    }
			    SendClientMessage(playerid, 0xCECECEFF, "Компонент успешно установлен");
				SetPVarInt(playerid, "count_price_tuning2", cena);
				SetPVarInt(playerid, "nitro_id", component_id);

			    //AddVehicleComponent(vehicleid, component_id);

				//SetOwnableCarData(index, OC_NITRO, component_id);

	     		//new query[512];

//				mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET nitro=%d WHERE id=%d", GetOwnableCarData(index, OC_NITRO), GetOwnableCarData(index, OC_SQL_ID));
//				mysql_query(mysql, query, false);
			}
			case dTuningCar3:
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    if(!response) return true;

			   	new index = GetVehicleData(vehicleid, V_ACTION_ID);

                new query[512];

			    switch(listitem + 1)
			    {
			        case 1:
			        {
			            SetPVarInt(playerid, "count_price_tuning3", 50000);
			            SetPVarInt(playerid, "gidra", 1087);
			            //AddVehicleComponent(vehicleid, 1087);

			            SetOwnableCarData(index, OC_GIDRA, 1087);

			            SendClientMessage(playerid, 0xCECECEFF, "Компонент успешно установлен");

						mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET gidra=%d WHERE id=%d", GetOwnableCarData(index, OC_GIDRA), GetOwnableCarData(index, OC_SQL_ID));
						mysql_query(mysql, query, false);
			        }
			        case 2:
			        {
			            RemoveVehicleComponent(vehicleid, 1087);
			            SendClientMessage(playerid, -1, "Компонент успешно убран");

			            SetOwnableCarData(index, OC_GIDRA, 0);

						mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET gidra=0 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
						mysql_query(mysql, query, false);
			        }
			    }
			}
			case dTuningCar4:
			{
			    if(!response) return 1;
			    else
			    {

	                new vehicleid = GetPlayerVehicleID(playerid);
					new text = strval(inputtext);

				    if(!strlen(inputtext) || !IsNumeric(inputtext))
					{
						SendClientMessage(playerid, 0xFF6600FF, "Укажите цвет");
						return 1;
					}
					if(text < 0 || text > 255)
					{
					    SendClientMessage(playerid, 0xFF6600FF, "ID цвета не может быть меньше 0 и больше 255");
						return 1;
					}
					SetPVarInt(playerid, "color_id", text);
					ChangeVehicleColor(vehicleid, GetPVarInt(playerid, "color_id"), 1);
					SetPVarInt(playerid, "color_tune", text);
					SetPVarInt(playerid, "count_price_tuning4", 50000);
				}
			}
			case DIALOG_RADAR_OBJECT:
			{
				if(response)
				{
					SetPVarInt(playerid, "radar_object", listitem + 1);

					new radar_object[2] = {10164, 18880},
						Float: x,
						Float: y,
						Float: z;

					GetPlayerPos(playerid, x, y, z);

					player_radar_object[playerid] = CreatePlayerObject
					(
						playerid,
						radar_object[listitem],
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);

					EditPlayerObject(playerid, player_radar_object[playerid]);

					SetPVarInt(playerid, "radar_stage", 1);
				}
				else callcmd::radar(playerid, "");
			}
			case DIALOG_RADAR_REMOVE:
			{
				if(response)
				{
					new radar_id = strval(inputtext);

					if(!(0 <= radar_id <= g_radars_created - 1))
						return SendClientMessage(playerid, 0x999999FF, "Регистратор скорости с таким порядковым номером не найден");

					if(!IsValidDynamicObject(GetRadarData(radar_id, R_OBJECT)))
						return SendClientMessage(playerid, 0x999999FF, "Регистратор скорости с таким порядковым номером не найден");

					new fmt_text[38];

					format(fmt_text, sizeof fmt_text, "Вы удалили регистратор скорости №%d", radar_id);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);

					RemoveRadar(radar_id);
				}
				else callcmd::radar(playerid, "");
			}
			// -----------------------------------------
			case DIALOG_GANG_REPOSITORY:
			{
				if(response)
				{
					new item_names[4][10] = {"наркотики", "патроны", "металл", "деньги"},
						description[32],
						fmt_text[70],
						status;

					if(0 <= listitem <= 3)
						status = 1;

					SetPVarInt(playerid, "gr_state", status);
					SetPVarInt(playerid, "gr_item", status ? listitem : listitem - 4);

					format(description, sizeof description, "{FFCD00}%s %s", status ? "Положить" : "Взять", status ? item_names[listitem] : item_names[listitem - 4]);
					format(fmt_text, sizeof fmt_text, "{FFFFFF}Введите количество, которое Вы хотите {FFCD00}%s:", status ? "положить" : "взять");

					Dialog(playerid, DIALOG_GANG_REPOSITORY_USE, DIALOG_STYLE_INPUT, description, fmt_text, "Далее", "Отмена");
				}
			}
			case DIALOG_GANG_REPOSITORY_USE:
			{
				if(response)
				{
					new status = GetPVarInt(playerid, "gr_state"),
						item = GetPVarInt(playerid, "gr_item"),
						item_count = strval(inputtext),
						repository_id = (GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA);

					if(item_count < 1) return SendClientMessage(playerid, 0x999999FF, "Неверное количество");

					new item_names[4][12] = {"наркотиков", "патронов", "металла", "денег"},
						item_type[4][4] = {"г", "шт.", "кг", "руб"};

					new fmt_text[90];

					switch(status)
					{
						case 0:
						{
							if(!GetGangRepositoryData(repository_id, GR_LOCK))
								return SendClientMessage(playerid, 0x999999FF, "Склад закрыт. Вы не можете ничего брать");

							switch(item)
							{
								case 0:
								{
									if(GetGangRepositoryData(repository_id, GR_DRUGS) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества наркотиков");

									if((GetPlayerData(playerid, P_DRUGS) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько наркотиков");

									AddPlayerData(playerid, P_DRUGS, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									SetGangRepositoryData(repository_id, GR_DRUGS, GetGangRepositoryData(repository_id, GR_DRUGS) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 1:
								{
									if(GetGangRepositoryData(repository_id, GR_AMMO) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества патронов");

									if((GetPlayerData(playerid, P_AMMO) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_AMMO))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько патронов");

									AddPlayerData(playerid, P_AMMO, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									SetGangRepositoryData(repository_id, GR_AMMO, GetGangRepositoryData(repository_id, GR_AMMO) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 2:
								{
									if(GetGangRepositoryData(repository_id, GR_METALL) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества металла");

									if((GetPlayerData(playerid, P_METALL) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько металла");

									AddPlayerData(playerid, P_METALL, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									SetGangRepositoryData(repository_id, GR_METALL, GetGangRepositoryData(repository_id, GR_METALL) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 3:
								{
									if(GetGangRepositoryData(repository_id, GR_MONEY) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "На складе нет такого количества денег");

									GivePlayerMoneyEx(playerid, item_count, "Взял со склада банды", true, true);

									SetGangRepositoryData(repository_id, GR_MONEY, GetGangRepositoryData(repository_id, GR_MONEY) - item_count);
									UpdateGangRepository(repository_id);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s [id %d] взял(а) со склада банды {3399FF}%d %s {66CC33}%s",
							GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x66CC33FF);
						}
						case 1:
						{
							switch(item)
							{
								case 0:
								{
									if(GetPlayerData(playerid, P_DRUGS) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества наркотиков");

									AddPlayerData(playerid, P_DRUGS, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									SetGangRepositoryData(repository_id, GR_DRUGS, GetGangRepositoryData(repository_id, GR_DRUGS) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 1:
								{
									if(GetPlayerData(playerid, P_AMMO) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества патронов");

									AddPlayerData(playerid, P_AMMO, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									SetGangRepositoryData(repository_id, GR_AMMO, GetGangRepositoryData(repository_id, GR_AMMO) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 2:
								{
									if(GetPlayerData(playerid, P_METALL) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества металла");

									AddPlayerData(playerid, P_METALL, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									SetGangRepositoryData(repository_id, GR_METALL, GetGangRepositoryData(repository_id, GR_METALL) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 3:
								{
									if(GetPlayerMoneyEx(playerid) < item_count)
										return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества денег");

									GivePlayerMoneyEx(playerid, -item_count, "Положил на склад банды", true, true);

									SetGangRepositoryData(repository_id, GR_MONEY, GetGangRepositoryData(repository_id, GR_MONEY) + item_count);
									UpdateGangRepository(repository_id);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s [id %d] положил(а) на склад банды {3399FF}%d %s {66CC33}%s",
							GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x66CC33FF);
						}
					}
				}
			}
			// -----------------------------------------

			case DIALOG_PERENOS_1:
			{
				if(!response) return 1;
				if(!(3 <= strlen(inputtext) <= MAX_PLAYER_NAME))
					return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

				new query[100];
				new Cache: result, user_id;

				mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_king WHERE name='%e' LIMIT 1", inputtext);
				result = mysql_query(mysql, query);

				if(cache_num_rows())
					user_id = cache_get_field_content_int(0, "id");

				if(!cache_num_rows() || !user_id)
					return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

				format(Perenos_Nick[playerid], MAX_PLAYER_NAME, inputtext);
				Dialog(playerid, DIALOG_PERENOS_2, DIALOG_STYLE_INPUT, "Введите пароль", "Введите пароль от аккаунта который был у вас 04.03.2021", "Далее", "Закрыть");
			}
			case DIALOG_PERENOS_2:
			{
				if(!response) return 1;
				new query[300];
				new Cache: result;
				mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_king WHERE name='%e' LIMIT 1", Perenos_Nick[playerid]);
				result = mysql_query(mysql, query);
				new password_per[16];
				cache_get_field_content(0, "password", password_per, mysql, 16);
				if(strlen(inputtext) > 16 || strlen(inputtext) < 1)
				{
					SendClientMessage(playerid,-1,"Введите коректный пароль");
					return 1;
				}
				if(strcmp(inputtext, password_per, false) != 0) return SendClientMessage(playerid, -1, "Неверно введён пароль!");
				new money = cache_get_field_content_int(0, "money");
				new lvl = cache_get_field_content_int(0, "level");
				SetPVarInt(playerid, "lvl_perenos", lvl);
				SetPVarInt(playerid, "money_perenos", money / 10);
				new stp[833];
				format(stp, sizeof stp,
				"Ник: %s\n"\
				"Деньги на руках: %d вирт\n"\
				"Уровень: %d\n\n"\
				"- Вы успешно подтвердили, что это ваш аккаунт. Прежде чем переносить прочитайте инструкцию которая написана ниже...\n"\
				"После того как вы нажмёте кнопку 'Перенести' вам на аккаунт будет пернесено ваше имущество с King RolePlay, но не всё!\n"\
				"- Денег будет перенесено в 10 раз меньше, это связано с тем что экономика на King RolePlay в 10 раз больше чем на RadmiX RolePlay\n"\
				"- Ваш игровой уровень будет перенесён в 3 раза меньше. (Примечание: Если лвл меньше 3-го то он не будет перенесён!)\n"\
				"При переносе Вы не теряете аккаунт на King RolePlay, но и руководство King-а будет знать что вы перенесли его!\n\n"\
				"Теперь решать вам. Переносить или нет.",
				Perenos_Nick[playerid], money, lvl);
				Dialog(playerid, DIALOG_PERENOS_3, DIALOG_STYLE_MSGBOX, "Перенос аккаунта", stp, "Перенести", "Отмена");
				cache_delete(result);
			}
			case DIALOG_PERENOS_3:
			{
				if(!response) return 1;
				new lvl = GetPVarInt(playerid, "lvl_perenos");
				new money = GetPVarInt(playerid, "money_perenos");
				new query[200];
				if(lvl > 3 && lvl <= 30)
				{
						AddPlayerData(playerid, P_LEVEL, +, lvl / 3);
						SetPlayerData(playerid, P_EXP, 0);
				}
				if(lvl > 30)
				{
					    AddPlayerData(playerid, P_LEVEL, +, 10);
						SetPlayerData(playerid, P_EXP, 0);
				}
				UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
				UpdatePlayerDatabaseInt(playerid, "exp", 0);
				GivePlayerMoneyEx(playerid, money, "Перенос с King RP");
				mysql_format(mysql, query, sizeof query, "DELETE FROM accounts_king WHERE name='%s' LIMIT 1", Perenos_Nick[playerid]);
				mysql_query(mysql, query, false);
				SetPlayerData(playerid, P_PERENOS, 1);
				UpdatePlayerDatabaseInt(playerid, "perenes", 1);
				SendClientMessage(playerid, -1, "Ваш аккаунт был перенесён успешно! Спасибо, что выбрали нас а не King");
			}
			case DIALOG_ADVERT_EDIT:
			{
				new ad_id = GetPVarInt(playerid, "advert_id"),
					fmt_text[144];

				if(GetAdvertData(ad_id, A_CREATOR) == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0x999999FF, "Автор объявления отключился");

				if(response)
				{
					if(strlen(inputtext))
						format(g_advert[ad_id][A_TEXT], 128, inputtext);

					format(fmt_text, sizeof fmt_text, "%s | Отправил: %s[%d] (тел. %d)", GetAdvertData(ad_id, A_TEXT),
					GetPlayerNameEx(GetAdvertData(ad_id, A_CREATOR)), GetAdvertData(ad_id, A_CREATOR),
					GetPlayerPhone(GetAdvertData(ad_id, A_CREATOR)));

					SendClientMessageToAll(0x00CC00FF, fmt_text);

					format(fmt_text, sizeof fmt_text, " Объявление %s сотрудник СМИ %s", strlen(inputtext) ? "отредактировал" : "проверил",
					GetPlayerNameEx(playerid));
					SendClientMessageToAll(0x009900FF, fmt_text);
				}
				else
				{
					if(!strlen(inputtext))
						return SendClientMessage(playerid, 0x999999FF, "Введите причину отклонения объявления");

					new creator_id = GetAdvertData(ad_id, A_CREATOR);

					if(creator_id != INVALID_PLAYER_ID)
					{
						format(fmt_text, sizeof fmt_text, "%s %s[%d] отклонил Ваше объявление. Причина: %s",
						GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, inputtext);

						SendClientMessage(creator_id, 0xFF5533FF, fmt_text);
					}

					format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] отклонил объявление №%d. Причина: %s",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, ad_id + 1, inputtext);

					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

					format(fmt_text, sizeof fmt_text, "Вы отклонили объявление №%d. Причина: %s", ad_id + 1, inputtext);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);
				}

				DeleteAdvert(ad_id);
			}
			// -----------------------------------------
			case DIALOG_ARMORY:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPVarInt(playerid, "took_nitestick") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали дубинку");

							GivePlayerWeapon(playerid, 3, 1);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли дубинку");

							SetPVarInt(playerid, "took_nitestick", gettime() + 300);
						}
						case 2:
						{
							if(GetPVarInt(playerid, "took_mask") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали маску");

							if(GetPlayerData(playerid, P_MASK) == 1)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть маска");

							SetPlayerData(playerid, P_MASK, 1);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли маску");

							SetPVarInt(playerid, "took_mask", gettime() + 300);
						}
						case 3:
						{
							new Float: armour;

							GetPlayerArmour(playerid, armour);

							if(armour > 20.0)
								return SendClientMessage(playerid, 0x999999FF, "У Вас уже есть бронежилет");

							SetPlayerArmour(playerid, 100.0);

							SendClientMessage(playerid, 0x3399FFFF, "Вы надели бронежилет");
						}
						case 4:
						{
							if(GetPVarInt(playerid, "took_sdpistol") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали пистолет с глушителем");

							GivePlayerWeapon(playerid, 23, 60);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли пистолет с глушителем");

							SetPVarInt(playerid, "took_sdpistol", gettime() + 300);
						}
						case 5:
						{
							if(GetPVarInt(playerid, "took_deagle") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали Desert Eagle");

							GivePlayerWeapon(playerid, 24, 120);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли Desert Eagle");

							SetPVarInt(playerid, "took_deagle", gettime() + 300);
						}
						case 6:
						{
							if(GetPVarInt(playerid, "took_mp5") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали MP5");

							GivePlayerWeapon(playerid, 29, 180);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли MP5");

							SetPVarInt(playerid, "took_mp5", gettime() + 300);
						}
						case 7:
						{
							if(GetPVarInt(playerid, "took_shotgun") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали дробовик");

							GivePlayerWeapon(playerid, 25, 30);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли дробовик");

							SetPVarInt(playerid, "took_shotgun", gettime() + 300);
						}
						case 8:
						{
							if(GetPVarInt(playerid, "took_ak47") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали АК47");

							GivePlayerWeapon(playerid, 30, 230);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли АК47");

							SetPVarInt(playerid, "took_ak47", gettime() + 300);
						}
						case 9:
						{
							if(GetPlayerJob(playerid) < 4)
								return SendClientMessage(playerid, 0x999999FF, "Винтовку можно брать только с 4 ранга");

							if(GetPVarInt(playerid, "took_rifle") > gettime())
								return SendClientMessage(playerid, 0x999999FF, "Вы уже недавно брали винтовку");

							GivePlayerWeapon(playerid, 34, 40);

							SendClientMessage(playerid, 0x3399FFFF, "Вы взяли винтовку");

							SetPVarInt(playerid, "took_rifle", gettime() + 300);
						}
					}
				}
			}
			// -----------------------------------------
			case DIALOG_BIZ_ORDERS:
			{
				if(response)
				{
					if(!IsPlayerInJob(playerid))
						return SendClientMessage(playerid, 0xCECECEFF, "Вы должны начать работу в службе доставки");

					if(GetPlayerData(playerid, P_ORDER) != -1)
						return SendClientMessage(playerid, 0xCECECEFF, "Выполните текущий заказ перед тем как взять новый");

					new order_id = GetPlayerListitemValue(playerid, listitem);

					if(!GetOrderData(order_id, O_AMOUNT))
						return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Выбранный заказ не найден");

					if(GetOrderData(order_id, O_USED))
						return SendClientMessage(playerid, -1, "Этот заказ уже принял другой дальнобойщик");

					SetOrderData(order_id, O_USED, true);
					SetPlayerData(playerid, P_ORDER, order_id);

					SendClientMessage(playerid, 0x3399FFFF, "Вы начали выполнение заказа. Закупите необходимое количество продуктов на заводе {66CC00}(/gps)");
					SendClientMessage(playerid, 0x3399FFFF, "После этого отправляйтесь к бизнесу, который отмечен {FF3300}красной точкой");

					new biz_id = GetOrderData(order_id, O_COMPANY_ID);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetBusinessData(biz_id, B_EXIT_POS_X),
						GetBusinessData(biz_id, B_EXIT_POS_Y),
						GetBusinessData(biz_id, B_EXIT_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER
					);
				}
			}
			case DIALOG_RENT_MOP:
			{
			    if(response)
			    {
			            if(GetPlayerRentd(playerid) == 1) return SendClientMessage(playerid,COLOR_WHITE,"Арендовывать транспорт можно раз в 10 минут.");
			            if(GetPlayerMoneyEx(playerid) < 50000) return SendClientMessage(playerid,COLOR_WHITE,"У вас недостаточно денег.");
    			        DestroyVehicle(arendascooter[playerid]);
						SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
          				new Float:X,Float:Y,Float:Z,Float:An;
				        GetPlayerPos(playerid,X,Y,Z);
				        GetPlayerFacingAngle (playerid,An);
			            SetTimer("Unrent", 600_000, false);
				        arendascooter[playerid] = CreateVehicle(15134 ,X,Y,Z,An,-3,-3,0);
				        PutPlayerInVehicle(playerid, arendascooter[playerid],0);
				        LinkVehicleToInterior(arendascooter[playerid],0);
				        GivePlayerMoneyEx(playerid, -50000);
				        SetPlayerData(playerid, P_RENTD, 1);
						SetPlayerData(playerid, P_RENT_CAR, arendascooter[playerid]);
				        SendClientMessage(playerid,COLOR_WHITE,"Вы арендовали {ffbf00}[Мотоцикл] {ffffff}-50000р");
				        return 1;
				        }
		 	}
			case DIALOG_FS_ORDERS:
			{
				if(response)
				{
					if(!IsPlayerInJob(playerid))
						return SendClientMessage(playerid, 0xCECECEFF, "Вы должны начать работу в службе доставки");

					if(GetPlayerData(playerid, P_ORDER) != -1)
						return SendClientMessage(playerid, 0xCECECEFF, "Выполните текущий заказ перед тем как взять новый");

					new order_id = GetPlayerListitemValue(playerid, listitem);

					if(!GetOrderData(order_id, O_AMOUNT))
						return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Выбранный заказ не найден");

					if(GetOrderData(order_id, O_USED))
						return SendClientMessage(playerid, -1, "Этот заказ уже принял другой дальнобойщик");

					SetOrderData(order_id, O_USED, true);
					SetPlayerData(playerid, P_ORDER, order_id);

					SendClientMessage(playerid, 0x3399FFFF, "Вы начали выполнение заказа. Закупите необходимое количество топлива на нефтезаводе {66CC00}(/gps)");
					SendClientMessage(playerid, 0x3399FFFF, "После этого отправляйтесь к АЗС, которая отмечена {FF3300}красной точкой");

					new fs_id = GetOrderData(order_id, O_COMPANY_ID);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetFuelStationData(fs_id, FS_POS_X),
						GetFuelStationData(fs_id, FS_POS_Y),
						GetFuelStationData(fs_id, FS_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER
					);
				}
			}
			// -----------------------------------------
			case DIALOG_PROMO_CREATE:
			{
				if(response)
				{
					new code[32], type, amount, usings, paydays;

					if(sscanf(inputtext, "P<,>s[32]dddd", code, type, amount, usings, paydays))
					{
						SendClientMessage(playerid, 0x999999FF, "Некорректный ввод");
						callcmd::createpromo(playerid, "");

						return 1;
					}
					else
					{
						if(!(0 <= type <= 2))
						{
							SendClientMessage(playerid, 0x999999FF, "Тип должен быть от 0 до 2 (деньги, донат, exp)");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						if(!(1 <= amount <= 5_000_000))
						{
							SendClientMessage(playerid, 0x999999FF, "Количество должно быть от 1 до 5.000.000");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						if(!(1 <= usings <= 3_000))
						{
							SendClientMessage(playerid, 0x999999FF, "Количество использований должно быть от 1 до 3000");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						if(!(0 <= paydays <= 5))
						{
							SendClientMessage(playerid, 0x999999FF, "Количество PayDay должно быть от 0 до 5");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						new query[128],
							Cache: result,
							rows;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode WHERE code='%s'", code);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
						{
							SendClientMessage(playerid, 0x999999FF, "Такой промокод уже есть в базе данных");
							callcmd::createpromo(playerid, "");

							return 1;
						}

						mysql_format(mysql, query, sizeof query, "INSERT INTO promocode (code, type, amount, usings, paydays) VALUES ('%s', %d, %d, %d, %d)",
						code, type, amount, usings, paydays);

						mysql_query(mysql, query);

						format(query, sizeof query, "Промокод \"%s\" создан (Т: %s, К: %d, И: %d, PD: %d)", code, promo_info[type][P_NAME], amount, usings, paydays);
						SendClientMessage(playerid, 0x66CC33FF, query);
					}
				}
			}
			case DIALOG_PROMO_ACTIVATE:
			{
				if(response)
				{
					if(!strlen(inputtext))
					{
						callcmd::pcode(playerid, "");

						return 1;
					}

					new query[256],
						Cache: result,
						rows,
						type,
						amount,
						paydays,
						usings;

					mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode_activations WHERE uid='%d' AND code='%s'", GetPlayerAccountID(playerid), inputtext);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
						// type = cache_get_field_content_int(0, "type");
						paydays = cache_get_field_content_int(0, "paydays");

						format(query, sizeof query, "Вы уже активировали этот промокод");

						if(paydays)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);

						SendClientMessage(playerid, 0x3399FFFF, query);

						cache_delete(result);

						return 1;
					}

					cache_delete(result);

					mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode WHERE code='%s' AND usings > 0", inputtext);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
						type = cache_get_field_content_int(0, "type");
						amount = cache_get_field_content_int(0, "amount");
						usings = cache_get_field_content_int(0, "usings");
						paydays = cache_get_field_content_int(0, "paydays");
					}

					cache_delete(result);

					if(!rows)
					{
						SendClientMessage(playerid, 0x999999FF, "Введенный промокод не существует");
						callcmd::pcode(playerid, "");

						return 1;
					}

					if(usings > 0)
					{
						if(!paydays)
						{
							AddPlayerData(playerid, promo_info[type][P_DATA], +, amount);
							UpdatePlayerDatabaseInt(playerid, promo_info[type][P_SQL_NAME], GetPlayerData(playerid, promo_info[type][P_DATA]));
						}

						format(query, sizeof query, "Вы активировали промокод \"%s\"", inputtext);

						if(paydays > 0)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);

						SendClientMessage(playerid, 0x66CC33FF, query);

						mysql_format(mysql, query, sizeof query, "UPDATE promocode SET usings='%d' WHERE code='%s'", usings - 1, inputtext);
						mysql_query(mysql, query, false);

						mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (uid, code, paydays) VALUES (%d, '%s', %d)",
						GetPlayerAccountID(playerid), inputtext, paydays);
						mysql_query(mysql, query, false);
					}
					else
					{
						SendClientMessage(playerid, 0x999999FF, "Лимит использования промокода исчерпан");
						callcmd::pcode(playerid, "");
					}
				}
			}
		}
	}
	return 1;
}

stock DestroyOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE oc_id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		// printf("ownable_car: %d / owner_id : %d", GetOwnableCarData(index, OC_SQL_ID), GetOwnableCarData(index, OC_OWNER_ID));

		if(!mysql_errno())
		{
			SetOwnableCarData(index, OC_SQL_ID, 	0);
			SetOwnableCarData(index, OC_OWNER_ID, 	0);
			DestroyDynamicObject(nomerobj_f[index]);
			DestroyDynamicObject(nomerobj_b[index]);

			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);

			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [OwnableCars]: Ошибка удаления личного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock UpdateOwnableCarNumber(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		return 1;
	}
	return 0;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerLogged(playerid))
	{
		if(GetPlayerPhone(playerid))
		{
			new fmt_str[5];

			valstr(fmt_str, clickedplayerid);
			callcmd::add(playerid, fmt_str);
		}
	}
	return 1;
}
public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid)
{
	if(keyid == 0x5A && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
}
public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
	if(keyid == 0x5A && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetPlayerAdminEx(playerid) > 2)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
			PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
		}
		else
		{
			SetPlayerPos(playerid, fX, fY, fZ);
		}
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

/*
	Вызывается перед обработкой команды. В ней можно указать условия выполнения команды.
	При этом с помощью return 1/0 можно разрешить/запретить выполнение команды.
*/
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

    if(!IsPlayerLogged(playerid)) return 0;
	if(GetPVarInt(playerid, "roulette_td") == 1)
	{
	    SendClientMessage(playerid, 0xFF6600FF, "У Вас открыта рулетка, Вы не можете использовать команды");

 		return 0;
	}
	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

		return 0;
	}
    return 1; // разрешить выполнение команды
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags, success)
{
	if(success == -1)
	{
		CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
		{
			SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

			if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
				SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

			return 0;
		}
	}

	printf("%s[%d] использует команду: %s [%s]", GetPlayerNameEx(playerid), playerid, cmd, params);

    return 1; // разрешить выполнение команды
}
public: MetroStart(playerid)
{
    SendClientMessage(playerid, -1, "Вы успешно прибыли на вашу станцию.");
	new metro = GetPVarInt(playerid, "metrolist");
	SetPlayerPosEx(playerid, GetBusinessData(metro, B_EXIT_POS_X), GetBusinessData(metro, B_EXIT_POS_Y), GetBusinessData(metro, B_EXIT_POS_Z), GetBusinessData(metro, B_EXIT_ANGLE));
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
    //SetTimerEx("FlyStop", 185000, false, "i", playerid);
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	#if defined _blackjack_included
		if(blackjack_OnPlayerClickTextDraw(playerid, clickedid)) return true;
	#endif
	if(karta_TD[5] <= clickedid <= karta_TD[10])
	{
	    if(!GetPVarInt(playerid, "stavka")) return SendClientMessage(playerid, 0x79cb64FF, "Вы ещё не указали ставку. Нажмите: 'Указать ставку{79cb64}'");

    	new index = _:(clickedid - karta_TD[5]);
	    new click_id;

	    switch(index)
	    {
		    case 0: click_id = 1;
		    case 1: click_id = 2;
		    case 2: click_id = 3;
		    case 3: click_id = 4;
		    case 4: click_id = 5;
		    case 5: click_id = 6;
	    }

	    StartKarts(playerid, click_id);
	}
	if (clickedid == gameTextDraw_all[1]) {
		setGame(playerid, start_game[playerid]);
	}
	if(GetPVarInt(playerid, #game)) {

		if(clickedid == Text:INVALID_TEXT_DRAW) {
			showBoxZeppelin(playerid, 0);
			DeletePVar(playerid, #game);
		}
		return 1;
	}
	if(clickedid == karta_TD[22])
	{
		for(new j = 0; j < 25; j ++)
		{
			TextDrawHideForPlayer(playerid, karta_TD[j]);
		}
		DeletePVar(playerid, "stavka");
		DeletePVar(playerid, "karta");
		CancelSelectTextDraw(playerid);
	}
	if(GetPVarInt(playerid,"CasinoTable") != -1) // Если игрок находится за столом
	{
		new tableid = GetPVarInt(playerid,"CasinoTable"),string[128]; // Узнаем номер стола за которым находится игрок и создаём массив для оповещений ниже
		if(clickedid == TD_CASINO[tableid][1]) // Если игрок нажал на 'BET'
		{
		    if(GetPVarInt(playerid,"CasinoFLOOD") > gettime()) return true; // Если не прошло 2 секунды после последнего нажатия,то ничего не делаем.

			if(TableInfo[tableid][t_status] == true) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Вы не можете воспользоваться этим во время игры."); // Думаю здесь всё понятно
			if(GetPVarInt(playerid,"CRUPIE") != 0) return Dialog(playerid, dCasino, DIALOG_STYLE_LIST, "Меню крупье", "{FFFFFF}1. Установить ставку\n2. Удалить ставку\n3. {FF0000}Запустить рулетку", "Выбрать", "Отмена"); // Если игрок за столом является крупье,то показываем ему диалог.

			if(TableInfo[tableid][t_bet] == 0) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: За данным столом нет ставки."); // Думаю здесь всё понятно
			if(Casino_GetPlayerID(tableid,playerid) != -1) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Вы уже сделали ставку."); // Думаю здесь всё понятно
			if(Casino_TotalPlayer(tableid) == 4) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: За столом недостаточно мест."); // Думаю здесь всё понятно
			if(GetPlayerMoney(playerid) < TableInfo[tableid][t_bet]) return SendClientMessage(playerid, 0x808080FF, "У Вас недостаточно денег"); // Функция GetPlayerMoney может быть другая.

			SetPVarInt(playerid,"CasinoFLOOD",gettime()+2); // Выставляем антифлуд на 2 секунды

            format(string,sizeof(string),"Вы успешно разместили свою ставку в размере %d руб.",TableInfo[tableid][t_bet]); // Форматируем оповещение
			SendClientMessage(playerid,0x008000FF,string); // Выводим оповещение игроку
			GivePlayerMoneyEx(playerid,-TableInfo[tableid][t_bet]); // Забираем деньги у игрока за ставку (функция GivePlayerMoney у Вас может быть другая)
			TableInfo[tableid][t_players][Casino_GetSlot(tableid)] = playerid; // Присваиваем ид игрока столу под свободный слот
			Casino_Update(tableid); // Обновляем текстдрав
		}

		if(clickedid == TD_CASINO[tableid][2]) // Если игрок нажал на 'EXIT'
		{
			if(TableInfo[tableid][t_status] == true && Casino_GetPlayerID(tableid,playerid) != -1) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Вы не можете воспользоваться этим во время игры."); // Думаю здесь всё понятно
			if(TableInfo[tableid][t_status] == true && TableInfo[tableid][t_crup] == playerid) return SendClientMessage(playerid,0x808080FF,"[Рулетка]: Вы не можете воспользоваться этим во время игры."); // Думаю здесь всё понятно
			if(GetPVarInt(playerid,"CRUPIE") != 0) TableInfo[tableid][t_crup] = INVALID_PLAYER_ID; // Если игрок вышел со стола будучи крупье,то обнуляем место крупье.
			for(new i; i < 6; i++) TextDrawHideForPlayer(playerid, TD_CASINO[tableid][i]); // Прячем текстдравы с казино для игрока
			for(new i; i < 1; i++) TextDrawShowForPlayer(playerid, TD_CASINO2[i]); // Показываем текстдрав с информацией возле стола
			for(new i; i < 4; i++) // Обходим слоты игроков за столом
			{
				if(TableInfo[tableid][t_players][i] == playerid) // Если игрок найден под одним из слотов
				{
                    format(string,sizeof(string),"Вы успешно забрали свою ставку в размере %d руб",TableInfo[tableid][t_bet]); // Форматируем оповещение
					SendClientMessage(playerid,0x008000FF,string); // Выводим оповещение игроку
					GivePlayerMoneyEx(playerid,TableInfo[tableid][t_bet]); // Возвращаем деньги игроку (GivePlayerMoney может быть другая)
					TableInfo[tableid][t_players][i] = INVALID_PLAYER_ID; // Обнуляем игрока под слотом
				}
			}
			Casino_Update(tableid); // Обновляем текстдрав стола
			SetPVarInt(playerid, "SelectTextDrawEnter", 0),SetPVarInt(playerid, "CasinoTable", -1),CancelSelectTextDraw(playerid); // Обнуляем нажатие на текстдравы,номер стола для игрока и убираем кликабельность.
		}
	}
	if(clickedid == fly_TD[2])
	{
	    HideBuyBilet(playerid);
	}
	if(clickedid == Metro_TD[2])
	{
		HideMetroBilet(playerid);
	}
	if(clickedid == Metro_TD[1])
	{
		if(GetPlayerMoneyEx(playerid) < 10000) return SendClientMessage(playerid, -1, "У вас недостаточно денег. Билет стоит 10.000");
		GivePlayerMoneyEx(playerid, -10000, "Билет на метро");
		new metro = GetPVarInt(playerid, "metrolist");
		new metroold = GetPVarInt(playerid, "pickup_biz");

		new price = 5000;

		new query[400];

		AddBusinessData(metro, B_BALANCE, +, price);
		AddBusinessData(metroold, B_BALANCE, +, price);
		mysql_format(mysql, query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid), GetBusinessData(metro, B_PRODS), GetBusinessData(metro, B_BALANCE), GetPlayerAccountID(playerid), GetBusinessData(metro, B_SQL_ID));
		mysql_query(mysql, query, false);

		mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(metro, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(metro));
		mysql_query(mysql, query, false);

		mysql_format(mysql, query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid), GetBusinessData(metroold, B_PRODS), GetBusinessData(metroold, B_BALANCE), GetPlayerAccountID(playerid), GetBusinessData(metroold, B_SQL_ID));
		mysql_query(mysql, query, false);

		mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(metroold, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(metroold));
		mysql_query(mysql, query, false);

		SetPlayerPosEx(playerid, 2405.2742,-1779.5862,9041.1396,270.0);
		SetPlayerVirtualWorld(playerid, metro + 2);
		HideMetroBilet(playerid);
		SendClientMessage(playerid, -1, "Наша поездка успешно началась, через 2 минуты вы будете на вашей станции.");
		SetPVarInt(playerid, "ostanovka_start", 1);
		player_avtobus_timer[playerid] = 120;

		ShowPlayerTimerPanel(playerid);

		TextDrawBoxColor(black_ground, 0x00000090);
		SetTimerEx("MetroStart", 120000, false, "i", playerid);
	}
	if(clickedid == fly_TD[1])
	{
		if(GetPlayerMoneyEx(playerid) < 10000) return SendClientMessage(playerid, -1, "Билет стоит 10.000 рублей. У вас их нет.");
		if(GetPlayerData(playerid, P_BILET) != 0) return SendClientMessage(playerid, -1, "У вас уже есть билет на самолёт!");
		GivePlayerMoneyEx(playerid, -10000, "Покупка билета на самолёт");
		SetPlayerData(playerid, P_BILET, 1);
		SendClientMessage(playerid, -1, "Благодарим вас за использование нашей аэрокомпании. Проходите на посадку.");
		HideBuyBilet(playerid);
	}
	if(clickedid == karta_TD[20])
	{
	    Dialog(playerid, DIALOG_STAVKA_KARTS, DIALOG_STYLE_INPUT, "{79cb64}Указать ставку", "Минимальная ставка на эту игру: {79cb64}10.000 рублей\nМаксимальная ставка на эту игру: {79cb64}10.000.000 рублей\n\nУкажите сумму ставки", "Далее", "Отмена");
	}
	if(clickedid == licdrive_TD[0])
	{
		HideLicDrive(playerid);
	}
	if(clickedid == mvd_TD[0])
	{
		HideMvdLic(playerid);
	}
	if(clickedid == pass_TD[0])
	{
		HidePassPlayer(playerid);
	}
	if(GetPVarInt(playerid, "karta") > 0)
		{
		    SelectTextDraw(playerid, 0x00FF00FF);
		    Dialog(playerid, DIALOG_CLOSE_KARTS, DIALOG_STYLE_MSGBOX, "{66CC00}Подсказка", "Чтобы закрыть данное меню используйте: {66CC00}Значок крестика в правом верхнем углу", "Хорошо", "");
    }
   	if(clickedid == dr_TD[1])
	{
		if(GetPlayerData(playerid, P_RULETKA) == 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет необходимого кол-ва очков для прокрутки рулетки");
		if(RouletteStarted[playerid] == 1) return SendClientMessage(playerid, 0xBF1599FF, !"[Ошибка] {FFFFFF}Вы уже запустили рулетку!");
		{

            RouletteStarted[playerid] = 1;
			dr_timer[playerid] = SetTimerEx("rd_refresh", 550, true, "i", playerid);
			dr_step[playerid] = RandomEx (20, 38);

			AddPlayerData(playerid, P_RULETKA, -, 1);
			UpdatePlayerDatabaseInt(playerid, "ruletka", GetPlayerData(playerid, P_RULETKA));

			new ptd_str[32] ;
			format(ptd_str, 32, "%d", GetPlayerData(playerid, P_RULETKA));
			PlayerTextDrawSetString(playerid, dr_PTD[playerid][5], ptd_str);
		}
	}
	if(clickedid == tuning_TD[4])
	{
    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
	    	Dialog
			(
				playerid, dTuningCar1, DIALOG_STYLE_LIST,
				"Диски",
				"Shadow\t\t250.000рублей\n\
				Mega\t\t\t350.000 рублей\n\
				Rimshine\t\t300.000 рублей\n\
				Wires\t\t\t400.000 рублей\n\
				Classic\t\t\t325.000 рублей\n\
				Twist\t\t\t1.000.000 рублей\n\
				Cutter\t\t\t1.400.000 рублей",
				"Установить", "Отмена"
			);
		}
	}
	if(clickedid == tuning_TD[2])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new price = GetPVarInt(playerid, "count_price_tuning1") + GetPVarInt(playerid, "count_price_tuning2") + GetPVarInt(playerid, "count_price_tuning3") + GetPVarInt(playerid, "count_price_tuning4");
			if(GetPlayerMoneyEx(playerid) < price) return SendClientMessage(playerid, 0xFF6600FF, "У Вас недостаточно средств");
			//new sto_id = GetPVarInt(playerid, "sto_id");

			new vehicleid = GetPlayerVehicleID(playerid);

			//new price = GetPVarInt(playerid, "count_price_tuning");

			GivePlayerMoneyEx(playerid, -price, "Тюнинг авто", true, true);

			new mes[100];
			format(mes,sizeof(mes),"~r~-%d rub", price);

			GameTextForPlayer(playerid, mes, 4000, 1);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			SetOwnableCarData(index, OC_DISKI, GetPVarInt(playerid, "id_diski"));
			SetOwnableCarData(index, OC_NITRO, GetPVarInt(playerid, "nitro_id"));
			SetOwnableCarData(index, OC_GIDRA, GetPVarInt(playerid, "gidra"));
			SetOwnableCarData(index, OC_COLOR_1, GetPVarInt(playerid, "color_id"));

			AddVehicleComponent(vehicleid, GetPVarInt(playerid, "gidra"));
			AddVehicleComponent(vehicleid, GetPVarInt(playerid, "nitro_id"));
			ChangeVehicleColor(vehicleid, GetOwnableCarData(index, OC_COLOR_1), 1);

			new query[1512];
			//new querys[1512];
			//new queryz[1512];

			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET diski=%d, nitro=%d, gidra=%d, color_1=%d WHERE id=%d", GetPVarInt(playerid, "id_diski"), GetPVarInt(playerid, "nitro_id"), GetPVarInt(playerid, "gidra"), GetPVarInt(playerid, "color_id"), GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);

			new take_prods = 50;


   			TogglePlayerControllable(playerid, true);
			CancelSelectTextDraw(playerid);

			for(new kyky = 0;kyky < 10;kyky++) TextDrawHideForPlayer(playerid,tuning_TD[kyky]);
			SetCameraBehindPlayer(playerid);
	        new sto_id = GetPVarInt(playerid, "sto_id");

	        SetVehiclePos(vehicleid, GetBusinessData(sto_id, B_EXIT_POS_X), GetBusinessData(sto_id, B_EXIT_POS_Y), GetBusinessData(sto_id, B_EXIT_POS_Z));
         	SetVehicleZAngle(vehicleid, GetBusinessData(sto_id, B_EXIT_ANGLE));

			DeletePVar(playerid, "count_price_tuning1");
			DeletePVar(playerid, "count_price_tuning2");
			DeletePVar(playerid, "count_price_tuning3");
			DeletePVar(playerid, "count_price_tuning4");

			SetPlayerInterior(playerid, 0);

			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			LinkVehicleToInterior(vehicleid, 0);

			if(GetBusinessData(sto_id, B_PRODS) >= take_prods)
			{
				AddBusinessData(sto_id, B_PRODS, -, take_prods);
				AddBusinessData(sto_id, B_BALANCE, +, price);
				mysql_format(mysql, query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(sto_id, B_PRODS)-take_prods, GetBusinessData(sto_id, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(sto_id, B_SQL_ID));
			}
			else
			{
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
			}
			mysql_query(mysql, query, false);

			mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(sto_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(sto_id));
			mysql_query(mysql, query, false);
		}
	}
	if(clickedid == tuning_TD[5])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	    	Dialog
			(
				playerid, dTuningCar2, DIALOG_STYLE_LIST,
				"Нитро",
				"Маленький балон\t\t150.000 рублей\n\
				Средний балон\t\t250.000 рублей\n\
				Большой балон\t\t500.000 рублей",
				"Установить", "Отмена"
			);
		}
	}
	if(clickedid == tuning_TD[6])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	    	Dialog
			(
				playerid, dTuningCar3, DIALOG_STYLE_LIST,
				"Гидравлика",
				"Установить гидравлику\t\t50.000 рублей\n\
				Убрать гидравлику\t\t\tБесплатно",
				"Установить", "Отмена"
			);
		}
	}

	if(clickedid == tuning_TD[7])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
            Dialog
			(
				playerid, dTuningCar4, DIALOG_STYLE_INPUT,
				"Внешний вид",
				"Введите ID цвета в который хотите перекрасить свой авто.",
				"Далее", "Отмена"
			);
		}
	}
	if(clickedid == tuning_TD[3])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    TogglePlayerControllable(playerid, true);
			CancelSelectTextDraw(playerid);

			new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			for(new kyky = 0;kyky < 10;kyky++) TextDrawHideForPlayer(playerid,tuning_TD[kyky]);
			SetCameraBehindPlayer(playerid);
   			RemoveVehicleComponent(vehicleid, GetPVarInt(playerid, "id_diski"));
   			ChangeVehicleColor(vehicleid, GetOwnableCarData(index, OC_COLOR_1), 1);

	        new sto_id = GetPVarInt(playerid, "sto_id");
	        //GetBusinessData(sto_id, B_EXIT_POS_X), GetBusinessData(sto_id, B_EXIT_POS_Y), GetBusinessData(sto_id, B_EXIT_POS_Z)

	        SetVehiclePos(vehicleid, GetBusinessData(sto_id, B_EXIT_POS_X), GetBusinessData(sto_id, B_EXIT_POS_Y), GetBusinessData(sto_id, B_EXIT_POS_Z));
         	SetVehicleZAngle(vehicleid, GetBusinessData(sto_id, B_EXIT_ANGLE));

			DeletePVar(playerid, "count_price_tuning1");
			DeletePVar(playerid, "count_price_tuning2");
			DeletePVar(playerid, "count_price_tuning3");
			DeletePVar(playerid, "count_price_tuning4");

			SetPlayerInterior(playerid, 0);

			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			LinkVehicleToInterior(vehicleid, 0);
		}
	}
	if(clickedid == tuning_TD[1])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new camera_pos = GetPVarInt(playerid, "tuning_pos");

			switch(camera_pos)
			{
			    case 1:
			    {
		    		SetPlayerCameraPos(playerid, 471.762084,1475.224853,1833.699584);
					SetPlayerCameraLookAt(playerid, 476.180297,1477.190673,1832.428833, 1);

					SetPVarInt(playerid, "tuning_pos", 2);
			    }
			    case 2:
			    {
		    		SetPlayerCameraPos(playerid, 478.057495,1488.373291,1833.590209);
					SetPlayerCameraLookAt(playerid, 479.135498,1483.737915,1832.057006, 1);

					SetPVarInt(playerid, "tuning_pos", 3);
			    }
			    case 3:
			    {
		    		SetPlayerCameraPos(playerid, 485.559906,1484.671142,1833.616210);
					SetPlayerCameraLookAt(playerid, 481.429565,1482.156127,1832.345458, 1);

					SetPVarInt(playerid, "tuning_pos", 4);
			    }
			    case 4:
			    {
		    		SetPlayerCameraPos(playerid, 480.643493,1471.804443,1833.446777);
					SetPlayerCameraLookAt(playerid, 479.291534,1476.494384,1832.361938, 1);

					SetPVarInt(playerid, "tuning_pos", 1);
			    }
			}
		}
	}
	if(clickedid == tuning_TD[8])
	{
 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new camera_pos = GetPVarInt(playerid, "tuning_pos");

			switch(camera_pos)
			{
			    case 1:
			    {
		    		SetPlayerCameraPos(playerid, 485.559906,1484.671142,1833.616210);
					SetPlayerCameraLookAt(playerid, 481.429565,1482.156127,1832.345458, 1);

					SetPVarInt(playerid, "tuning_pos", 2);
			    }
			    case 2:
			    {
		    		SetPlayerCameraPos(playerid, 478.057495,1488.373291,1833.590209);
					SetPlayerCameraLookAt(playerid, 479.135498,1483.737915,1832.057006, 1);

					SetPVarInt(playerid, "tuning_pos", 3);
			    }
			    case 3:
			    {
		    		SetPlayerCameraPos(playerid, 471.762084,1475.224853,1833.699584);
					SetPlayerCameraLookAt(playerid, 476.180297,1477.190673,1832.428833, 1);

					SetPVarInt(playerid, "tuning_pos", 4);
			    }
			    case 4:
			    {
		    		SetPlayerCameraPos(playerid, 480.643493,1471.804443,1833.446777);
					SetPlayerCameraLookAt(playerid, 479.291534,1476.494384,1832.361938, 1);

					SetPVarInt(playerid, "tuning_pos", 1);
			    }
			}
		}
	}
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE && GetPVarInt(playerid, "passest") != 1)
		{
			HidePlayerPinCodePTD(playerid);
			if(!IsPlayerLogged(playerid))
			{
				Kick:(playerid);
			}
		}
		if(GetPVarInt(playerid, "roulette_td") == 1)
		{
			SelectTextDraw(playerid, 0x00FF00FF);
		}
  		if(GetPVarInt(playerid, "cell_salon"))
  		{
  		    for(new i; i < 6; i++)
		    {
		    	PlayerTextDrawHide(playerid, cell_salon_PTD[playerid][i]);
			}
			SetPVarInt(playerid, "cell_salon", 0);
            //SendClientMessage(playerid, 0xFFFFFFFF, "Закрыто");
  		}
  		if(GetPVarInt(playerid, "shop"))
  		{
  		    for(new i; i < 8; i++)
		    {
		    	PlayerTextDrawHide(playerid, shop_PTD[playerid][i]);
			}
			SetPVarInt(playerid, "shop", 0);
            //SendClientMessage(playerid, 0xFFFFFFFF, "Закрыто");
  		}
  		if(GetPVarInt(playerid, "cafe"))
  		{
  		    for(new i; i < 11; i++)
		    {
		    	PlayerTextDrawHide(playerid, cafe_PTD[playerid][i]);
			}
			SetPVarInt(playerid, "cafe", 0);
		}
   		if(GetPVarInt(playerid, "car"))
  		{
  		    for(new i; i < 8; i++)
		    {
		    	PlayerTextDrawHide(playerid, car_PTD[playerid][i]);
			}
			SetPVarInt(playerid, "car", 0);
		}
		switch(GetPlayerData(playerid, P_USE_SELECT_PANEL))
		{
			case SELECT_PANEL_TYPE_CLOTHING:
			{
				ExitPlayerClothingShopPanel(playerid);
			}
			case SELECT_PANEL_TYPE_REG_SKIN:
			{
				if(!IsPlayerLogged(playerid))
				{
					if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
					{
						SelectTextDraw(playerid, 0x009900FF);
					}
				}
			}
			case SELECT_PANEL_TYPE_CAR_MARKET:
			{
				SelectTextDraw(playerid, 0x00FF00FF);
			}
		}
	}
	if(clickedid == dr_TD[2])
	{

	    RouletteStarted[playerid] = 0;
		if(GetPVarInt(playerid, "roulette_td_roul") == 1) return SendClientMessage(playerid, 0xFF6600FF, "Дождитесь окончания прокрутки рулетки");

		for(new j = 0 ; j < 6 ; j ++)
		{
			PlayerTextDrawDestroy(playerid, dr_PTD[playerid][j]);
			dr_PTD[playerid] [j] = PlayerText:-1;
		}
		for(new j = 0; j < 3; j ++)
		{
			TextDrawHideForPlayer(playerid, dr_TD[j]);
		}
		dr_step[playerid] = 0;
		for(new j = 0; j < 5; j ++)
		{
			dr_slot_model[playerid] [j] = 0;
			dr_slot_item[playerid] [j] = 0;
			dr_veh_slot[playerid] [j] = 0;
		}
		CancelSelectTextDraw(playerid);

		DeletePVar(playerid, "roulette_td");
		DeletePVar(playerid, "roulette_td_roul");
	}
	if(clickedid == dr_TD[1])
	{
		if(GetPlayerData(playerid, P_RULETKA) == 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет необходимого кол-ва очков для прокрутки рулетки");
		if(RouletteStarted[playerid] == 1) return SendClientMessage(playerid, 0xBF1599FF, !"[Ошибка] {FFFFFF}Вы уже запустили рулетку!");
		{

            RouletteStarted[playerid] = 1;
			dr_timer[playerid] = SetTimerEx("rd_refresh", 550, true, "i", playerid);
			dr_step[playerid] = RandomEx (20, 38);

			AddPlayerData(playerid, P_RULETKA, -, 1);
			UpdatePlayerDatabaseInt(playerid, "ruletka", GetPlayerData(playerid, P_RULETKA));

			new ptd_str[32] ;
			format(ptd_str, 32, "%d", GetPlayerData(playerid, P_RULETKA));
			PlayerTextDrawSetString(playerid, dr_PTD[playerid][5], ptd_str);
		}
	}
	if(select_TD[1] <= clickedid <= select_TD[4])
	{
		new use_type = GetPlayerData(playerid, P_USE_SELECT_PANEL);
		if(use_type != SELECT_PANEL_TYPE_NONE)
		{
			new buffer = 0;
			new index = _:(clickedid - select_TD[1]);

			switch(index)
			{
				case 0: // выбрать
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(buffer != -1)
							{
								Dialog
								(
									playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
									"{FFCD00}Магазин одежды",
									"{FFFFFF}Вы действительно хотите приобрести этот набор одежды?",
									"Да", "Нет"
								);
							}
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);

									buffer = GetPlayerSelectSkin(playerid);

									if(buffer != -4)
									{
										SetPlayerData(playerid, P_SKIN, reg_skin_data[sex][buffer]);

										new query[190];
										mysql_format(mysql, query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											GivePlayerMoneyEx(playerid, 15000000, "Регистрация"); //УДАЛИТЬ
											SetPlayerData(playerid, P_SELECT_SKIN, -1);
											SetPlayerData(playerid, P_PREMIUM, 1);
											SetPlayerData(playerid, P_CASEKEY, 0);
											UpdatePlayerDatabaseInt(playerid, "money", GetPlayerData(playerid, P_MONEY));
											UpdatePlayerDatabaseInt(playerid, "premium", GetPlayerData(playerid, P_PREMIUM));
											UpdatePlayerDatabaseInt(playerid, "casekey", GetPlayerData(playerid, P_CASEKEY));

											SetPlayerData(playerid, P_DRIVING_LIC, 2);
											UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));

											SetPlayerData(playerid, P_WEAPON_LIC, 1);
											UpdatePlayerDatabaseInt(playerid, "weapon_lic", GetPlayerData(playerid, P_WEAPON_LIC));


											HidePlayerSelectPanel(playerid);
											HidePlayerSelectPanelPrice(playerid);

											SetPlayerSpawnInit(playerid);
											SpawnPlayer(playerid);

											RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
											SetPlayerInit(playerid);

											SendClientMessage(playerid, 0xFFFF00FF, "Рекомендуем прочитать раздел {FF3300}Помощь по игре.{FFFF00} Он находится справа от Вас");
											SendClientMessage(playerid, 0xFFFF00FF, "В нем Вы найдете всю интересующую Вас информацию. Удачи и приятной игры!");
//											SendClientMessage(playerid, 0x07f0e4FF, "[INFO]:{FFFFFF} Вам был выдан {07f0e4}PREMIUM{FFFFFF}. Используйте: {07f0e4}/premium");

											return 1;
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 01)");
									}
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

							Dialog
							(
								playerid, DIALOG_BIZ_CAR_MARKET_BUY_CAR, DIALOG_STYLE_MSGBOX,
								"{FFCC00}Автосалон",
								"{FFFFFF}Вы действительно хотите приобрести этот транспорт?",
								"Да", "Нет"
							);
						}
					}
				}
				case 1: // вправо
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(!(0 <= ++buffer <= sizeof g_business_clothing_skins[] - 1))
							{
								buffer = 0;
							}
							SetPlayerSelectClothingSkin(playerid, buffer);
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);

									if(!(0 <= ++buffer <= sizeof(reg_skin_data[])-1))
									{
										buffer = 4;
									}
									else if(!reg_skin_data[sex][buffer])
									{
										buffer = 4;
									}
									SetPlayerSelectSkin(playerid, buffer, reg_skin_data[sex][buffer]);
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							CarMarketShowNextCar(playerid, '+');
						}
					}
				}
				case 2: // влево
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(!(0 <= --buffer <= sizeof g_business_clothing_skins[] - 1))
							{
								buffer = sizeof g_business_clothing_skins[] - 1;
							}
							SetPlayerSelectClothingSkin(playerid, buffer);
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);

									if(!(0 <= --buffer <= sizeof(reg_skin_data[])-1))
									{
										buffer = sizeof(reg_skin_data[])-1;
										if(!sex)
											buffer -= 4;
									}
									SetPlayerSelectSkin(playerid, buffer, reg_skin_data[sex][buffer]);
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							CarMarketShowNextCar(playerid, '-');
						}
					}
				}
				case 3: // закрыть
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							ExitPlayerClothingShopPanel(playerid);
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							ExitPlayerBuyCarMarket(playerid);
						}
					}
				}
			}
		}
	}

    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(pin_code_PTD[playerid][0] <= playertextid <= pin_code_PTD[playerid][9])
	{
		new pc_state = GetPlayerPinCodeState(playerid);
		new index = _:(playertextid - pin_code_PTD[playerid][0]);

		if(pc_state != PIN_CODE_STATE_NONE && 0 <= index <= 9)
		{
			new ch[2];
			valstr(ch, GetPlayerPinCodeValue(playerid, index));
			strcat(pin_code_input[playerid], ch);

			if(strlen(pin_code_input[playerid]) >= 4)
			{
				if(pc_state == PIN_CODE_STATE_CHECK)
				{
					HidePlayerPinCodePTD(playerid, false);
				}
				else HidePlayerPinCodePTD(playerid);

				switch(pc_state)
				{
					case PIN_CODE_STATE_SET,PIN_CODE_STATE_CHANGE:
					{
						new query[75];

						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET setting_pin_code='%e' WHERE id=%d LIMIT 1", pin_code_input[playerid], GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							format(g_player[playerid][P_SETTING_PIN], 5, "%s", pin_code_input[playerid]);

							mysql_format(mysql, query, sizeof query, "PIN-код %s: {FFFF00}%s", pc_state == PIN_CODE_STATE_SET ? ("успешно установлен") : ("изменен на"), GetPlayerData(playerid, P_SETTING_PIN));

							SendClientMessage(playerid, 0x66CC00FF, query);
							SendClientMessage(playerid, 0x66CC00FF, "Запомните или запишите это число");

							ShowPlayerSecuritySettings(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 04)");
							ShowPlayerPinCodePTD(playerid, pc_state);
						}
					}
					case PIN_CODE_STATE_CHECK:
					{
						if(strcmp(pin_code_input[playerid], GetPlayerData(playerid, P_SETTING_PIN)) != 0)
						{
							SendClientMessage(playerid, 0xFF6600FF, "PIN-код введен неверно");
							ShowPlayerSecuritySettings(playerid);
						}
						else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHANGE);
					}
					case PIN_CODE_STATE_LOGIN_CHECK:
					{
						if(!IsPlayerLogged(playerid))
						{
							if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
							{
								new step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
								new bool: wrong_pass = false;

								if
								(
									!strlen(GetPlayerData(playerid, P_SETTING_PIN))
									|| strcmp(GetPlayerData(playerid, P_SETTING_PIN), pin_code_input[playerid]) != 0
								)
								{
									wrong_pass = true;
									step --;
								}
								ShowPlayerLoginDialog(playerid, step + 1, wrong_pass);
							}
						}
					}
				}
				pin_code_input[playerid][0] = 0;
			}
		}
	}
	if(playertextid == registr_PTD[playerid][0])
	{
		ShowPlayerRegDialog(playerid, REGISTER_STATE_PASSWORD);
	}
	if(playertextid == gameTextDraw_player[playerid][0])
	{
		if(start_game[playerid]) return 1; //запрещаем нажимать 'BET'
		Dialog(playerid, DIALOG_BET_ZEPPELIN, DIALOG_STYLE_INPUT, "Сделайте вашу ставку", " ", "Принять", "Закрыть");
	}
	if(GetPVarInt(playerid, "cell_salon"))
	{
		/*if(playertextid == PlayerText:INVALID_TEXT_DRAW)
		{
		    for(new i; i < 6; i++)
		    {
		    	PlayerTextDrawHide(playerid, cell_salon_PTD[playerid][i]);
			}
			SetPVarInt(playerid, "cell_salon", 0);
            SendClientMessage(playerid, 0xFFFFFFFF, "Закрыто");
            return 1;
		}*/
		if(playertextid == cell_salon_PTD[playerid][1])
		{
			ShowPlayerCellSalon(playerid, CELL_SALON_BUY_PHONE);
		}
		if(playertextid == cell_salon_PTD[playerid][2])
		{
			ShowPlayerCellSalon(playerid, CELL_SALON_BUY_SIM);
		}
		if(playertextid == cell_salon_PTD[playerid][3])
		{
			ShowPlayerCellSalon(playerid, CELL_SALON_BUY_COLOR);
		}
		if(playertextid == cell_salon_PTD[playerid][4])
		{
			ShowPlayerCellSalon(playerid, CELL_SALON_BUY_BALANCE);
		}
		if(playertextid == cell_salon_PTD[playerid][5])
		{
			ShowPlayerCellSalon(playerid, CELL_SALON_BUY_MCBOOK);
		}
	}
	if(GetPVarInt(playerid, "cafe"))
	{
		if(playertextid == cafe_PTD[playerid][1])
		{
			ShowPlayerCafe(playerid, CAFE_CESAR);
		}
		if(playertextid == cafe_PTD[playerid][2])
		{
			ShowPlayerCafe(playerid, CAFE_BORSH);
		}
		if(playertextid == cafe_PTD[playerid][3])
		{
			ShowPlayerCafe(playerid, CAFE_FILA);
		}
		if(playertextid == cafe_PTD[playerid][4])
		{
			ShowPlayerCafe(playerid, CAFE_KOTLETA);
		}
		if(playertextid == cafe_PTD[playerid][5])
		{
			ShowPlayerCafe(playerid, CAFE_SHAURMA);
		}
		if(playertextid == cafe_PTD[playerid][6])
		{
			ShowPlayerCafe(playerid, CAFE_MINERAL);
		}
		if(playertextid == cafe_PTD[playerid][7])
		{
			ShowPlayerCafe(playerid, CAFE_COLA);
		}
		if(playertextid == cafe_PTD[playerid][8])
		{
			ShowPlayerCafe(playerid, CAFE_SOK);
		}
		if(playertextid == cafe_PTD[playerid][9])
		{
			ShowPlayerCafe(playerid, CAFE_SPRITE);
		}
		if(playertextid == cafe_PTD[playerid][10])
		{
			ShowPlayerCafe(playerid, CAFE_KVAS);
		}
	}
	if(GetPVarInt(playerid, "shop"))
	{
		if(playertextid == shop_PTD[playerid][1])
		{
			ShowPlayerShop(playerid, SHOP_VEREV);
		}
		if(playertextid == shop_PTD[playerid][2])
		{
			ShowPlayerShop(playerid, SHOP_PHOTO);
		}
		if(playertextid == shop_PTD[playerid][3])
		{
			ShowPlayerShop(playerid, SHOP_REPAIR);
		}
		if(playertextid == shop_PTD[playerid][4])
		{
			ShowPlayerShop(playerid, SHOP_MED);
		}
		if(playertextid == shop_PTD[playerid][5])
		{
			ShowPlayerShop(playerid, SHOP_MASK);
		}
		if(playertextid == shop_PTD[playerid][6])
		{
			ShowPlayerShop(playerid, SHOP_BUKET);
		}
		if(playertextid == shop_PTD[playerid][7])
		{
			Dialog
			(
				playerid, DIALOG_DOP_SHOP, DIALOG_STYLE_LIST,
				"{0099FF}Магазин 24/7 - дополнительный раздел",
				"1. Трость\t\t\t{00CC00}18000 руб\n"\
				"2. Парашют\t\t\t{00CC00}24000 руб\n"\
				"3. Лотерейный билет\t\t{00CC00}15000 руб\n"\
				"4. Бумбокс\t\t\t{00CC00}5000 руб",
				"Купить", "Отмена"
			);
		}
	}
	
/*					new vehicleid = GetPlayerOwnableCarListitem(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						switch(listitem + 1)
						{
							case 1: // Открыть / закрыть
							{
							    SetPVarInt(playerid, "go_list", 1);
								callcmd::lock(playerid, "1");
							}
							case 2: // Вставить / вытащить ключи
							{
							    SetPVarInt(playerid, "go_list", 1);
								callcmd::key(playerid, "");
							}
							case 3: // Отметить транспорт на GPS
							{
							    SetPVarInt(playerid, "go_list", 1);
								callcmd::getmycar(playerid, "");
							}
							case 4: // Содержимое багажника
							{
								ShowTrunkDialog(playerid, vehicleid, true);
							}
							case 5: // Документы на транспорт
							{
								ShowOwnableCarPass(playerid, vehicleid);
							}
							case 6: // Припарковать транспорт
							{
								callcmd::park(playerid, "");
							}
							case 7: // Выгрузить транспорт
							{
								if(UnloadPlayerOwnableCar(playerid, true, GetPVarInt(playerid, "listitem_car")))
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно выгружен!");

								else
									SendClientMessage(playerid, 0x999999FF, "С момента загрузки данного транспорта еще не прошло 1 минуты");
							}
							default:
								return 1;
						}
						//callcmd::car(playerid, "");
					}*/
					
	if(playertextid == car_PTD[playerid][1])
	{
 		SetPVarInt(playerid, "go_list", 1);
		callcmd::lock(playerid, "1");
	}
	if(playertextid == car_PTD[playerid][2])
	{
 		SetPVarInt(playerid, "go_list", 1);
		callcmd::key(playerid, "");
	}
	if(playertextid == car_PTD[playerid][3])
	{
 		SetPVarInt(playerid, "go_list", 1);
		callcmd::getmycar(playerid, "");
	}
	if(playertextid == car_PTD[playerid][4])
	{
		new vehicleid = GetPlayerOwnableCarListitem(playerid);
		ShowTrunkDialog(playerid, vehicleid, true);
	}
	if(playertextid == car_PTD[playerid][5])
	{
		new vehicleid = GetPlayerOwnableCarListitem(playerid);
		ShowOwnableCarPass(playerid, vehicleid);
	}
	if(playertextid == car_PTD[playerid][6])
	{
		callcmd::park(playerid, "");
	}
	if(playertextid == car_PTD[playerid][7])
	{
		if(UnloadPlayerOwnableCar(playerid, true, GetPVarInt(playerid, "listitem_car")))
			SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно выгружен!");

		else
			SendClientMessage(playerid, 0x999999FF, "С момента загрузки данного транспорта еще не прошло 1 минуты");
		for(new i; i < 8; i++)
		{
		    PlayerTextDrawHide(playerid, car_PTD[playerid][i]);
		}
		SetPVarInt(playerid, "car", 0);
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == PHONE_PTD[playerid][0])
	{
	    Dialog
		(
				playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT,
				"{FFCD00}Наберите номер",
				"{6699CC}Номера государственных служб:\n\n\
				{FFFFFF}Полиция\t\t\t{66CC00}02\n\
				{FFFFFF}Скорая помощь\t\t{66CC00}03\n\
				{FFFFFF}Такси\t\t\t\t{66CC00}555\n\
				{FFFFFF}Механик\t\t\t{66CC00}090\n\
				{FFFFFF}Мэрия\t\t\t\t{66CC00}022\n\
				{FFFFFF}Служба точного времени\t{66CC00}060\n\
				{FFFFFF}Оператор связи\t\t{66CC00}111",
				"Позвонить", "Отмена"
		);
	}
	if(playertextid == PHONE_PTD[playerid][1])
	{
	    ShowPlayerPhoneBook(playerid);
	}
	if(playertextid == PHONE_PTD[playerid][2])
	{
	    SendClientMessage(playerid, 0x999999FF, "Используйте: /sms");
	}
	if(playertextid == PHONE_PTD[playerid][3])
	{
	    DisablePlayerGPS(playerid);

		Dialog
		(
			playerid, DIALOG_GPS, DIALOG_STYLE_LIST,
			"{FFCD00}GPS",
			"1. Общественные места\n"\
			"2. Транспортные узлы\n"\
			"3. Государственные организации\n"\
			"4. Базы банд и мафий\n"\
			"5. По работе\n"\
			"6. Банки\n"\
			"7. Развлечения\n"\
			"8. Бизнесы\n"\
			"9. Найти ближайшую АЗС\n"\
			"10. Найти ближайший банкомат",
			"Выбрать", "Закрыть"
		);
	}
	if(playertextid == spec_PTD[playerid][28])
	{
	    callcmd::spoff(playerid);
 	}
 	if(playertextid == spec_PTD[playerid][22]) // callcmd::c(playerid, number);
	{
	    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	    HideSpecmenuTD(playerid);
	    StartSpectate(playerid, spec_player);
	    ShowSpecmenuTD(playerid);
 	}
	if(playertextid == spec_PTD[playerid][23])
	{
	    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	    HideSpecmenuTD(playerid);
	    ShowPlayerStats(spec_player, playerid);
	    ShowSpecmenuTD(playerid);
 	}
	if(playertextid == spec_PTD[playerid][24])
	{
	    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	    HideSpecmenuTD(playerid);
		new frm[10];
		format(frm, sizeof frm, "%d 10", spec_player);
	    callcmd::jail(playerid, frm);
		StartSpectate(playerid, spec_player);
	    ShowSpecmenuTD(playerid);
 	} 
	if(playertextid == spec_PTD[playerid][25])
	{
	    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	    HideSpecmenuTD(playerid);
		new frm[10];
		format(frm, sizeof frm, "%d 10", spec_player);
	    callcmd::mute(playerid, frm);
		StartSpectate(playerid, spec_player);
	    ShowSpecmenuTD(playerid);
 	}
 	if(playertextid == spec_PTD[playerid][26])
	{
	    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	    callcmd::slap(playerid, IntToString(spec_player));
 	}
	if(playertextid == spec_PTD[playerid][27])
	{
		new fmt_text[250];
		new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	    HideSpecmenuTD(playerid);
		ShowSpecmenuTD(playerid);
	    format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  R-IP  %s",
		GetPlayerNameEx(spec_player), spec_player, GetPlayerPing(spec_player), GetPlayerIpEx(spec_player), GetPlayerData(spec_player, P_REG_IP));
		SendClientMessage(playerid, 0x00CC66FF, fmt_text);
 	}
	if(playertextid == PHONE_PTD[playerid][4])
	{
	    ShowPlayerSettings(playerid);
	}
	if(playertextid == PHONE_PTD[playerid][5])
	{
	    ShowPlayerSecuritySettings(playerid);
	}
	if(playertextid == PHONE_PTD[playerid][7])
	{
	    Dialog
		(
		playerid, DIALOG_REPORT, DIALOG_STYLE_INPUT,
		"{FFCD00}Связь с администрацией",
		"{FFFFFF}Введите свое сообщение для администрации сервера\n"\
		"Оно должно быть кратким и ясным\n\n"\
		"{66CC66}Если вы хотите подать жалобу на игрока,\n"\
		"обязательно укажите его ID и причину жалобы",
		"Отправить", "Назад"
		);
	}
	if(playertextid == registr_PTD[playerid][1])
	{
		ShowPlayerRegDialog(playerid, REGISTER_STATE_EMAIL);
	}
	if(playertextid == registr_PTD[playerid][2])
	{
		ShowPlayerRegDialog(playerid, REGISTER_STATE_REFER);
	}
	if(playertextid == registr_PTD[playerid][3])
	{
		SetPlayerData(playerid, P_SEX, 0);
		SetPVarInt(playerid, "regskin", 1);
	}
	if(playertextid == registr_PTD[playerid][4])
	{
		SetPlayerData(playerid, P_SEX, 1);
		SetPVarInt(playerid, "regskin", 1);
	}
	if(playertextid == registr_PTD[playerid][5])
	{
		if(GetPVarInt(playerid, "regpass") != 1 || GetPVarInt(playerid, "regmail") != 1 || GetPVarInt(playerid, "regskin") != 1) return SendClientMessage(playerid, -1, "Для начала пройдите все этапы.");
		HidePlayerReg(playerid);
		ShowPlayerRegDialog(playerid, REGISTER_STATE_CREATE_ACC);
	}
	if(playertextid == avtoriz_PTD[playerid][4])
	{
		CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, LOGIN_STATE_PASSWORD, false);
	}
	if(playertextid == Vinyl_PTD[playerid][5])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    TogglePlayerControllable(playerid, true);
			HideDetTextDraw(playerid);
			TextDrawHideForPlayer(playerid, Vinyl_TD[0]);
			CancelSelectTextDraw(playerid);

			new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetPVarInt(playerid, "det_vinil", 4);
			ChangeVehiclePaintjob(vehicleid, GetOwnableCarData(index, OC_VINIL));

			SetCameraBehindPlayer(playerid);

	        new det_id = GetPVarInt(playerid, "det_id");

	        SetVehiclePos(vehicleid, GetBusinessData(det_id, B_EXIT_POS_X), GetBusinessData(det_id, B_EXIT_POS_Y), GetBusinessData(det_id, B_EXIT_POS_Z));
         	SetVehicleZAngle(vehicleid, GetBusinessData(det_id, B_EXIT_ANGLE));

			SetPlayerInterior(playerid, 0);

			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			LinkVehicleToInterior(vehicleid, 0);
		}
	}
	if(playertextid == Vinyl_PTD[playerid][4])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			if(GetPlayerMoneyEx(playerid) < 1000000) return SendClientMessage(playerid, -1, "У вас нет 1.000.000 на покупку винила");
		    TogglePlayerControllable(playerid, true);
			HideDetTextDraw(playerid);
			TextDrawHideForPlayer(playerid, Vinyl_TD[0]);
			CancelSelectTextDraw(playerid);

			new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			//SetPVarInt(playerid, "det_vinil", 4);
			SetOwnableCarData(index, OC_VINIL, GetPVarInt(playerid, "det_vinil"));
			ChangeVehiclePaintjob(vehicleid, GetOwnableCarData(index, OC_VINIL));

			if(GetPVarInt(playerid, "det_vinil") != 4 && GetPVarInt(playerid, "det_vinil") != 3)
			{
				GivePlayerMoneyEx(playerid, -1000000, "Покупка винила");
				SendClientMessage(playerid, -1, "Спасибо что используете наш детейлинг центр!");
			}

			SaveOwnableCar(vehicleid);

			SetCameraBehindPlayer(playerid);

	        new det_id = GetPVarInt(playerid, "det_id");

	        SetVehiclePos(vehicleid, GetBusinessData(det_id, B_EXIT_POS_X), GetBusinessData(det_id, B_EXIT_POS_Y), GetBusinessData(det_id, B_EXIT_POS_Z));
         	SetVehicleZAngle(vehicleid, GetBusinessData(det_id, B_EXIT_ANGLE));

			SetPlayerInterior(playerid, 0);

			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			LinkVehicleToInterior(vehicleid, 0);
			SetPVarInt(playerid, "det_vinil", 4);
			new take_prods = 50;
			new query[600];
			new price = 1000000;

			if(GetBusinessData(det_id, B_PRODS) >= take_prods)
			{
				AddBusinessData(det_id, B_PRODS, -, take_prods);
				AddBusinessData(det_id, B_BALANCE, +, price);
				mysql_format(mysql, query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid), GetBusinessData(det_id, B_PRODS), GetBusinessData(det_id, B_BALANCE), GetPlayerAccountID(playerid), GetBusinessData(det_id, B_SQL_ID));
			}
			else
			{
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
			}
			mysql_query(mysql, query, false);

			mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(det_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(det_id));
			mysql_query(mysql, query, false);
		}
	}
	if(playertextid == Vinyl_PTD[playerid][0])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) != 565 && GetVehicleModel(vehicleid) != 567 && GetVehicleModel(vehicleid) != 534 && GetVehicleModel(vehicleid) != 559 && GetVehicleModel(vehicleid) != 560 && GetVehicleModel(vehicleid) != 562 && GetVehicleModel(vehicleid) != 612 && GetVehicleModel(vehicleid) != 466 && GetVehicleModel(vehicleid) != 558 && GetVehicleModel(vehicleid) != 15131 && GetVehicleModel(vehicleid) != 15153) return SendClientMessage(playerid, -1, "На ваше авто нет данного винила");
			SetPVarInt(playerid, "det_vinil", 0);
			ChangeVehiclePaintjob(vehicleid, 0);
		}
	}
	if(playertextid == Vinyl_PTD[playerid][1])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) != 565 && GetVehicleModel(vehicleid) != 567 && GetVehicleModel(vehicleid) != 534 && GetVehicleModel(vehicleid) != 559 && GetVehicleModel(vehicleid) != 560 && GetVehicleModel(vehicleid) != 562 && GetVehicleModel(vehicleid) != 612 && GetVehicleModel(vehicleid) != 466 && GetVehicleModel(vehicleid) != 558 && GetVehicleModel(vehicleid) != 15153) return SendClientMessage(playerid, -1, "На ваше авто нет данного винила");
			SetPVarInt(playerid, "det_vinil", 1);
			ChangeVehiclePaintjob(vehicleid, 1);
		}
	}
	if(playertextid == Vinyl_PTD[playerid][2])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) != 565 && GetVehicleModel(vehicleid) != 567 && GetVehicleModel(vehicleid) != 534 && GetVehicleModel(vehicleid) != 559 && GetVehicleModel(vehicleid) != 560 && GetVehicleModel(vehicleid) != 562 && GetVehicleModel(vehicleid) != 612 && GetVehicleModel(vehicleid) != 466 && GetVehicleModel(vehicleid) != 558 && GetVehicleModel(vehicleid) != 15153) return SendClientMessage(playerid, -1, "На ваше авто нет данного винила");
			SetPVarInt(playerid, "det_vinil", 2);
			ChangeVehiclePaintjob(vehicleid, 2);
		}
	}
	if(playertextid == Vinyl_PTD[playerid][3])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			SetPVarInt(playerid, "det_vinil", 3);
			ChangeVehiclePaintjob(vehicleid, 3);
		}
	}
	if(playertextid == avtoriz_PTD[playerid][3])
	{
		if(GetPVarInt(playerid, "passest") != 1) return SendClientMessage(playerid, -1, "Для начала введите пароль");
		new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
		//SendClientMessage(playerid, -1, "Всё пошло на следующий этап");
		HidePlayerAvtoriz(playerid);
		CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, login_step + 1, false);
		//DeletePVar(playerid, "passest");
	}
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_CAR_MARKET)
	{
		if(playertextid == buy_car_PTD[playerid][3]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 1;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][8]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 0;
			buy_car_select_color[playerid][1] = 0;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][4]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 201;
			buy_car_select_color[playerid][1] = 0;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][5]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 3;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][6]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 45;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][7]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 6;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][9]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 2;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][10]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 34;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][11]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 227;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][12]) // кнопка переключения типа цвета 1/2
		{
			buy_car_select_color[playerid][0] = 128;
			buy_car_select_color[playerid][1] = 1;

			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
	}
    return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	//if(help_info_CP[0] <= checkpointid <= help_info_CP[sizeof help_info_CP - 1])
	if(checkpointid == help_info_CP)
	{
		callcmd::help(playerid, "");
	}
	else if(checkpointid == driving_exam_CP)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_INFO, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Экзамен по вождению",
			"{FFFFFF}Здравствуйте!\n"\
			"Вы готовы приступить к экзамену? Тогда начнем.\n"\
			"Экзамен будет состоять из теоретической и практической части\n"\
			"В теории вам нужно будет ответить на вопросы из вашего экзаменационного билета,\n"\
			"а в практике применить полученные знания за рулем учебного автомобиля.\n\n"\
			"{CC9900}Сдача на права стоит 600 рублей и в случае провала деньги не будут возвращены!\n"\
			"Поэтому перед сдачей внимательно прочитайте обучающий раздел",
			"Начать", "Отмена"
		);
	}
	else if(factory_desk[0][FD_CHEK_ID] <= checkpointid <= factory_desk[sizeof(factory_desk)-1][FD_CHEK_ID])
	{
		new index = checkpointid - factory_desk[0][FD_CHEK_ID];
		SetPlayerFactoryDeskUse(playerid, index, true);
	}
	else if(checkpointid == join_to_job_CP)
	{
		if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
			return SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете устроиться на работу");

		Dialog
		(
			playerid, DIALOG_VIEV_JOBS_LIST, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Прием на работу",
			"{FFFFFF}Вы хотите просмотреть список доступных работ?",
			"Да", "Нет"
		);
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CLUB, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CLUB)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}600 руб\n"\
					"2. Пиво\t\t\t{00CC00}1000 руб\n"\
					"3. Вино\t\t\t{00CC00}2000 руб\n"\
					"4. Шампанское\t\t{00CC00}2700 руб\n"\
					"5. Водка\t\t{00CC00}3000 руб\n"\
					"6. Коньяк\t\t{00CC00}4500 руб\n"\
					"7. Виски\t\t{00CC00}6300 руб\n"\
					"8. Абсент\t\t{00CC00}7500 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}500 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}800 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CASINO, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CASINO)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}600 руб\n"\
					"2. Пиво\t\t\t{00CC00}1000 руб\n"\
					"3. Вино\t\t\t{00CC00}2000 руб\n"\
					"4. Шампанское\t\t{00CC00}2700 руб\n"\
					"5. Водка\t\t{00CC00}3000 руб\n"\
					"6. Коньяк\t\t{00CC00}4500 руб\n"\
					"7. Виски\t\t{00CC00}6300 руб\n"\
					"8. Абсент\t\t{00CC00}7500 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}500 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}800 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_BIZ, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_BIZ)
			{
				Dialog
				(
					playerid, DIALOG_BIZ_REALTOR_BIZ_LIST, DIALOG_STYLE_LIST,
					"{66FF99}Номера свободных бизнесов",
					g_business_realtor_list,
					"Инфо 70р", "Закрыть"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_HOME, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_HOME)
			{
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_HOTEL, BT_BUY_CHECK_ID))
	{
		ShowPlayerHotelDialog(playerid);
	}
	else if(g_hotel_lift_CP[0] <= checkpointid <= g_hotel_lift_CP[1])
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			new floor_id = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
			ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id);
		}
	}
	else if(checkpointid == army_ammo_CP)
	{
		SetPVarInt(playerid, "player_in_ammo_cp", 1);
	}
	else if(checkpointid == samolet_CP)
	{
		if(GetPVarInt(playerid, "polet") != 1)
		{
		    if(GetPVarInt(playerid, "pos_polet") == 1)
		    {
		    	SendClientMessage(playerid, -1, "Приветствуем Вас в городе Южный");
		    	SetPlayerPosEx(playerid, 2768.6711,-2011.3108,26.8397,176.1862, 0, 0);
		    	DeletePVar(playerid, "pos_polet");
			}
			if(GetPVarInt(playerid, "pos_polet") == 2)
		    {
		    	SendClientMessage(playerid, -1, "Приветствуем Вас в Майами");
		    	SetPlayerPosEx(playerid, -3759.4082,-5715.5967,13.8423,53.9216, 0, 0);
				DeletePVar(playerid, "pos_polet");
			}
		}
		else
		{
		    SendClientMessage(playerid, -1, "Стюардеса: Ау, куда ты? Мы ещё летим. Совсем чтоли больной в воздухе дверь открывать?");
		}
	}
	else if(checkpointid == mia_posad_CP)
	{
		if(GetPlayerData(playerid, P_BILET) == 0) return SendClientMessage(playerid, -1, "У вас нет билета!");
		SendClientMessage(playerid, -1, "Buenas tardes. Voy a revisar sus documentos y pasar. Tomara un par de minutos.");
		SendClientMessage(playerid, -1, "Перевод: Добрый день. Сейчас я проверю ваши документы и заходите. Это займёт пару минут.");
		SetPVarInt(playerid, "pos_polet", 1);
		SetTimerEx("FlyPosadka", 10000, false, "i", playerid);
	}
	else if(checkpointid == yz_posad_CP)
	{
		if(GetPlayerData(playerid, P_BILET) == 0) return SendClientMessage(playerid, -1, "У вас нет билета!");
		SendClientMessage(playerid, -1, "Добрый день. Сейчас я проверю ваши документы и заходите. Это займёт пару минут.");
		SetPVarInt(playerid, "pos_polet", 2);
		SetTimerEx("FlyPosadka", 10000, false, "i", playerid);
	}
	else if(checkpointid == mia_bil_CP)
	{
	    ShowBuyBiletMiam(playerid);
	}
	else if(checkpointid == yz_bil_CP)
	{
		ShowBuyBiletRussia(playerid);
	}
	else if(miner_job_load_cp[0] <= checkpointid <= sizeof miner_job_load_cp - 1)
	{
		SetPlayerMinerJobLoadCP(playerid, false);

		if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
		{
			ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
			SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
		}
	}
	return 1;
}

public: CreateFactoryProd(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATED)
		{
			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

			new skill = GetPVarInt(playerid, "factory_skill");
			if(!(random(5) + skill == 1))
			{
				if(random(6) == 1)
				{
					new fmt_str[80];

					SetPVarInt(playerid, "factory_skill", skill + 1);

					format(fmt_str, sizeof fmt_str, "Рабочий навык увеличен. Теперь шанс создать бракованый продукт 1 из %d", skill + 5);
					SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				}

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPlayerChatBubble(playerid, "+ 1 продукт", 0x66CC00FF, 10.0, 1500);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1279, A_OBJECT_BONE_LEFT_FOREARM, 0.4, -0.09, -0.2, 85.0, 0.0, 90.0, 1.0, 1.0, 1.0, 0);
				GameTextForPlayer(playerid, "~g~~h~SUCCESS", 4000, 1);

				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_PUT_PROD);
				SetPlayerTempJobCheckAnim(playerid, true);
			}
			else FactoryPlayerDrop(playerid);

			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == army_ammo_CP)
		DeletePVar(playerid, "player_in_ammo_cp");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		new green_zone_id = areaid - g_green_zones[0][GZ_AREA];

		ShowPlayerGreenZoneText(playerid, green_zone_id);

		SetPVarInt(playerid, "player_in_green_zone", green_zone_id + 1);
	}

	for(new i = 0; i <= g_business_loaded; i++)
	{
		if(areaid == biz_area[i])
		{
		    //new fmt_str[156];
		    //format(fmt_str, sizeof fmt_str, "~w~нажмите ~g~л.ALT");
			//GameTextForPlayer(playerid, fmt_str, 3000, 1);
			ShowBizInfoPick(playerid, i);
		}
	}

	for(new i; i < sizeof(arCasinoTable); i++) // Обходим количество столов
	{
		if(areaid == arCasinoTable[i]) for(new td; td < 1; td++) TextDrawShowForPlayer(playerid, TD_CASINO2[td]); // Если игрок находится в зоне из одного стола,то показываем ему текстдравы
	}

	for(new i = 0; i <= g_house_loaded; i++)
	{
		if(areaid == home_area[i])
		{
			ShowHomeInfoPick(playerid, i);
		}
	}

	if(city_zone_id[0] <= areaid <= city_zone_id[sizeof city_zones - 1])
	{
		new zoneid = areaid - city_zone_id[0];
		PlayerTextDrawSetString(playerid, city_zone_PTD[playerid], city_zone_name_TD[zoneid]);
	}

	if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
	{
		SetPVarInt(playerid, "buy_fuel_count", 	0);
		SetPVarInt(playerid, "buy_fuel_pay_j",	0);
		SetPVarInt(playerid, "buy_fuel_pay", 	0);
	}
	//else if(GetGangZoneData(0, GZ_AREA) <= areaid <= GetGangZoneData(g_gang_zones_loaded - 1, GZ_AREA))
	//{
	//	if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA)
	///	{
		//	new gangzoneid = GetGangZoneData(areaid - GetGangZoneData(0, GZ_AREA), GZ_ZONE);

		//	UpdateGangZone(gangzoneid);
		//}
	//}
	else if(areaid >= gAreas[arJob][0] && areaid <= gAreas[arJob][5]) {
		if(TI[playerid][tDMArea][0]) pc_cmd_power(playerid);
	}
	else if(areaid == factory_put_zone)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
			{
				new objectid;
				new items = GetPlayerJobLoadItems(playerid);
				new Float: x, Float: y, Float: z, Float: angle;

				SetPlayerTempJobCheckAnim(playerid, false);

				ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				TogglePlayerFactoryCP(playerid, true);
				SetPlayerJobLoadItems(playerid, items + 1);

				AddPlayerData(playerid, P_JOB_WAGE, +, random(20)+40);
				SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, angle);

				objectid = CreateDynamicObject(1279, x, -200.81883, 1006.51978, 0.9, 0.0, angle);
				MoveDynamicObject(objectid, 263.8, -200.81880, 1006.51978, 2.0, 0.9, 0.0, angle);

				Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new player_last_pickup = GetPlayerData(playerid, P_LAST_PICKUP);

	if(player_last_pickup != -1 && GetPickupInfo(player_last_pickup, P_DYNAMIC_ZONE) == areaid)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}

	if(city_zone_id[0] <= areaid <= city_zone_id[sizeof city_zones - 1])
	{
		PlayerTextDrawSetString(playerid, city_zone_PTD[playerid], city_zone_name_TD[sizeof city_zones]);
	}

	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		HidePlayerGreenZoneText(playerid);

		SetPVarInt(playerid, "player_in_green_zone", 0);
	}

	for(new i = 0; i <= MAX_BUSINESS; i++)
	{
		HideBizInfoPick(playerid); //MAX_HOUSES
	}

	for(new i; i < sizeof(arCasinoTable); i++) // Обходим количество столов
	{
		if(areaid == arCasinoTable[i]) for(new td; td < 1; td++) TextDrawHideForPlayer(playerid, TD_CASINO2[td]);  // Если игрок не находся возле стола,то прячем от него текстдравы
	}

	for(new i = 0; i <= MAX_HOUSES; i++)
	{
		HideHomeInfoPick(playerid); //MAX_HOUSES
	}

	if(!GetPlayerData(playerid, P_BLOCK_LEAVE_AREA))
	{
		if(areaid == loader_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_LOADER, true);
		}
		else if(areaid == miner_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_MINER, true);
		}
		else if(areaid == factory_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
		}
		else if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
		{
			new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay") + GetPVarInt(playerid, "buy_fuel_pay_j");

			DeletePVar(playerid, "buy_fuel_count");
			DeletePVar(playerid, "buy_fuel_pay_j");
			DeletePVar(playerid, "buy_fuel_pay");

			new stationid = areaid - GetFuelStationData(0, FS_AREA);
			if(buy_fuel_pay > 0)
			{
				new query[155];

				mysql_format(mysql, query, sizeof query, "INSERT INTO fuel_stations_profit (fid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetFuelStationData(stationid, FS_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), buy_fuel_pay, IsFuelStationOwned(stationid) ? 1 : 0);
				mysql_query(mysql, query, false);
			}
		}
	}
	else SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, false);

	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	new type = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID);
	switch(type)
	{
		case OBJECT_TYPE_FACTORY:
		{
			DestroyDynamicObject(objectid);
			type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);

			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
		}
		case OBJECT_TYPE_CARRIAGE:
		{
			miner_carriage[0][MC_IN_MOVE] = false;

			MinerCarriageSetState(0);
		}
		case OBJECT_TYPE_WOOD:
		{
			new Float: object_x,
				Float: object_y,
				Float: object_z,
				index;

			GetDynamicObjectPos(objectid, object_x, object_y, object_z);
			DestroyDynamicObject(objectid);

			index = object_x == 2399.2898 ? 0 : 1;

			if(index)
			{
				new object = CreateDynamicObject(1448, object_x, object_y, object_z, 0.0, 0.0, 0.0);
				MoveDynamicObject(object, 2399.2898, object_y, object_z, 2.0, 0.0, 0.0, 0.0);
			}
			else
			{
				type = GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT);

				SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, type + 1);
				UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
			}
		}
	}

	return 1;
}
stock StartKarts(playerid, value)
{
	new win = RandomEx(1, 8);
	new money;

	if(win == 7)
	{
	    win = 5;
	}
	if(win == 8)
	{
	    win = 6;
	}

	new koef;

	new koef_rand = RandomEx(2, 5);

	switch(koef_rand)
	{
	    case 2: koef = 2;
	    case 3: koef = 3;
	    case 4: koef = 4;
	    case 5: koef = 5;
	}

	new fmt_text[200];

	if(win == value)
	{
		format
		(
			fmt_text, sizeof fmt_text,
			"{66CC00}Поздравляем, Вы выиграли!\n\n\
			Сумма ставки: {66CC00}%d рублей\n\
			Сумма выигрыша: {66CC00}%d рублей\n\n\
			Выпала карта: {66CC00}№%d\n\
			Ставка на карту: {66CC00}№%d",
			GetPVarInt(playerid, "stavka"),
			GetPVarInt(playerid, "stavka") * koef,
			win,
			value
		);

		money = GetPVarInt(playerid, "stavka") * koef;

		GivePlayerMoneyEx(playerid, money, "казино", true, true);

		Dialog(playerid, DIALOG_CLOSE_KARTS, DIALOG_STYLE_MSGBOX, "{66CC00}Выигрыш в игре", fmt_text, "Закрыть", "");
	}
	else
	{
		format
		(
			fmt_text, sizeof fmt_text,
			"{FF6666}К сожалению, Вы проиграли\n\n\
			Сумма ставки: {66CC00}%d рублей\n\
			Выпала карта: {66CC00}№%d\n\
			Ставка на карту: {66CC00}№%d",
			GetPVarInt(playerid, "stavka"),
			win,
			value
		);

		Dialog(playerid, DIALOG_CLOSE_KARTS, DIALOG_STYLE_MSGBOX, "{FF6666}Проигрыш в игре", fmt_text, "Закрыть", "");
	}

	TextDrawColor(karta_TD[win+10], 0x66CC00FF);

	for(new i = 11; i < 16; i ++)
	{
		TextDrawHideForPlayer(playerid, karta_TD[i]);
		TextDrawShowForPlayer(playerid, karta_TD[i]);
	}

	DeletePVar(playerid, "stavka");

	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(response == EDIT_RESPONSE_FINAL)
    {
    	if(GetPVarInt(playerid, "obj_edit"))
    	{
    		SetString(ObjInfo[TOTALOBJECTS][objName], ObjectNamePlayer[playerid]);
			ObjInfo[TOTALOBJECTS][objModel] = GetPVarInt(playerid, "obj_model");

			ObjInfo[TOTALOBJECTS][objPosX] = x;
			ObjInfo[TOTALOBJECTS][objPosY] = y;
			ObjInfo[TOTALOBJECTS][objPosZ] = z;

			ObjInfo[TOTALOBJECTS][objRotX] = rx;
			ObjInfo[TOTALOBJECTS][objRotY] = ry;
			ObjInfo[TOTALOBJECTS][objRotZ] = rz;

			DestroyObject(EditObjectPlayer[playerid]);
			ObjInfo[TOTALOBJECTS][objID] = CreateDynamicObject(ObjInfo[TOTALOBJECTS][objModel], ObjInfo[TOTALOBJECTS][objPosX], ObjInfo[TOTALOBJECTS][objPosY], ObjInfo[TOTALOBJECTS][objPosZ], ObjInfo[TOTALOBJECTS][objRotX], ObjInfo[TOTALOBJECTS][objRotY], ObjInfo[TOTALOBJECTS][objRotZ]);

			static const mysql_str[] = "INSERT INTO `create_objects` (`Name`, `Model`, `PosX`, `PosY`, `PosZ`, `RotX`, `RotY`, `RotZ`) VALUES ('%s', %d, '%f', '%f', '%f', '%f', '%f', '%f')";
			new str[sizeof(mysql_str) + 30 + 10 + (6 * 6)];

			format(str, sizeof(str), mysql_str,
				ObjInfo[TOTALOBJECTS][objName],
				ObjInfo[TOTALOBJECTS][objModel],
				ObjInfo[TOTALOBJECTS][objPosX],
				ObjInfo[TOTALOBJECTS][objPosY],
				ObjInfo[TOTALOBJECTS][objPosZ],
				ObjInfo[TOTALOBJECTS][objRotX],
				ObjInfo[TOTALOBJECTS][objRotY],
				ObjInfo[TOTALOBJECTS][objRotZ]);
			mysql_query(mysql, str, false);

			TOTALOBJECTS ++;
    	}
        return 1;
    }
    if(response == EDIT_RESPONSE_CANCEL)
    {
    	if(GetPVarInt(playerid, "obj_edit"))
    	{
	        DestroyObject(EditObjectPlayer[playerid]);
	        CancelEdit(playerid);
    	}
        return 1;
    }
	if(objectid == player_radar_object[playerid] && response != 2)
	{
		DestroyPlayerObject(playerid, objectid);
		player_radar_object[playerid] = INVALID_OBJECT_ID;

		if(response == 1)
		{
			switch(GetPVarInt(playerid, "radar_stage"))
			{
				case 1:
				{
					player_radar_position[playerid][0] = x;
					player_radar_position[playerid][1] = y;
					player_radar_position[playerid][2] = z;
					player_radar_position[playerid][3] = rx;
					player_radar_position[playerid][4] = ry;
					player_radar_position[playerid][5] = rz;

					printf("stage 1: %f %f %f %f %f %f", x, y, z, rx, ry, rz);

					player_radar_object[playerid] = CreatePlayerObject
					(
						playerid,
						1239,
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);
					EditPlayerObject(playerid, player_radar_object[playerid]);

					SetPVarInt(playerid, "radar_stage", 2);

					SendClientMessage(playerid, 0x66CC33FF, "Позиция радара установлена");
					SendClientMessage(playerid, 0xFFCD00FF, "Установите место на дороге, куда будет направлена камера радара");
				}
				case 2:
				{
					player_radar_position[playerid][6] = x;
					player_radar_position[playerid][7] = y;
					player_radar_position[playerid][8] = z;

					new limiter[4] = {20, 60, 90, 110},
						radar_object[2] = {10164, 18880};

					CreateRadar
					(
						playerid,
						player_radar_position[playerid][0],
						player_radar_position[playerid][1],
						player_radar_position[playerid][2],
						player_radar_position[playerid][3],
						player_radar_position[playerid][4],
						player_radar_position[playerid][5],
						player_radar_position[playerid][6],
						player_radar_position[playerid][7],
						player_radar_position[playerid][8],
						limiter[ GetPVarInt(playerid, "radar_type") - 1 ],
						radar_object[ GetPVarInt(playerid, "radar_object") - 1 ]
					);

					printf("createradar(%d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d)",
						playerid,
						player_radar_position[playerid][0],
						player_radar_position[playerid][1],
						player_radar_position[playerid][2],
						player_radar_position[playerid][3],
						player_radar_position[playerid][4],
						player_radar_position[playerid][5],
						player_radar_position[playerid][6],
						player_radar_position[playerid][7],
						player_radar_position[playerid][8],
						limiter[ GetPVarInt(playerid, "radar_type") - 1 ],
						radar_object[ GetPVarInt(playerid, "radar_object") - 1 ]);
					SendClientMessage(playerid, 0x66CC33FF, "Регистратор скорости установлен");
				}
			}
		}
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
        if(response == EDIT_RESPONSE_FINAL)
		{
	    	if(GetPVarInt(playerid, "PlateObjf"))
	    	{
	    	    new vehicleid = GetPlayerVehicleID(playerid);
				new query[300];
	    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
          		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
          		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
          		new model_id = GetVehicleModel(vehicleid);
            	AttachDynamicObjectToVehicle(CarPlatePlayer[playerid], vehicleid, x-Tx, y-Ty, z-Tz,   rx, ry, rz-Tr);
            	format(query, sizeof query, "UPDATE car_number_options SET x_f='%f', y_f='%f', z_f='%f', xr_f='%f', yr_f='%f', zr_f='%f' WHERE Model_ID=%d LIMIT 1", x-Tx, y-Ty, z-Tz, rx, ry, rz-Tr, model_id);
				mysql_query(mysql, query, false);
            	DeletePVar(playerid, "PlateObjf");
	    	}
	    	if(GetPVarInt(playerid, "PlateObjb"))
	    	{
	    	    new vehicleid = GetPlayerVehicleID(playerid);
				new query[300];
	    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
          		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
          		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
          		new model_id = GetVehicleModel(vehicleid);
            	AttachDynamicObjectToVehicle(CarPlatePlayer[playerid], vehicleid, x-Tx, y-Ty, z-Tz,   rx, ry, rz-Tr);
            	format(query, sizeof query, "UPDATE car_number_options SET x_b='%f', y_b='%f', z_b='%f', xr_b='%f', yr_b='%f', zr_b='%f' WHERE Model_ID=%d LIMIT 1", x-Tx, y-Ty, z-Tz, rx, ry, rz-Tr, model_id);
				mysql_query(mysql, query, false);
            	DeletePVar(playerid, "PlateObjb");
	    	}
		}
        if(response == EDIT_RESPONSE_CANCEL)
        {
	    	if(GetPVarInt(playerid, "PlateObjf"))
	    	{
	            DestroyDynamicObject(CarPlatePlayer[playerid]);
		        CancelEdit(playerid);
		        DeletePVar(playerid, "PlateObjf");
	    	}
	    	if(GetPVarInt(playerid, "PlateObjb"))
	    	{
	            DestroyDynamicObject(CarPlatePlayer[playerid]);
		        CancelEdit(playerid);
		        DeletePVar(playerid, "PlateObjb");
	    	}
		}
        return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if(IsGateButtonID(buttonid))
	{
		new index = buttonid - g_gate_button[0][0];
		new gateid = g_gate_button[index][1];

		new bool: gate_status = GetGateData(gateid, G_STATUS);
		if(gate_status == GATE_STATUS_CLOSE)
		{
			SetPlayerChatBubble(playerid, "Открывает шлагбаум", 0x00CC00FF, 15.0, 2000);
		}
		else SetPlayerChatBubble(playerid, "Закрывает шлагбаум", 0xFF3333FF, 15.0, 2000);

		SetGateStatus(gateid, gate_status ^ GATE_STATUS_OPEN, -1);
	}
	return 0;
}

// ------------------------------------------
public: LoadGangZones()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_zones", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangZones]: DB rows > MAX_GZ");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGangZoneData(idx, GZ_MIN_X,	cache_get_field_content_float(idx, "min_x"));
		SetGangZoneData(idx, GZ_MIN_Y,	cache_get_field_content_float(idx, "min_y"));
		SetGangZoneData(idx, GZ_MAX_X,	cache_get_field_content_float(idx, "max_x"));
		SetGangZoneData(idx, GZ_MAX_Y,	cache_get_field_content_float(idx, "max_y"));

		SetGangZoneData(idx, GZ_GANG,	cache_get_field_content_int(idx, "fraction"));

		// ----------------------------------------------------------------------------------
		g_gang_zone[idx][GZ_ZONE] = GangZoneCreate
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);

		// ----------------------------------------------------------------------------------
		g_gang_zone[idx][GZ_AREA] = CreateDynamicRectangle
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);
	}

	g_gang_zones_loaded = rows;
	cache_delete(result);

	printf("[GangZones]: Гангзон загружено: %d", g_gang_zones_loaded);
}

stock ShowGangZonesForPlayer(playerid)
{
	for(new idx; idx < sizeof g_gang_zone; idx ++)
	{
		GangZoneShowForPlayer(playerid, GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[ GetGangZoneData(idx, GZ_GANG) ]);
	}

	if(g_capture[C_STATUS])
		GangZoneFlashForPlayer(playerid, GetGangZoneData(g_capture[C_GANG_ZONE], GZ_ZONE), gang_zone_colors[ g_capture[C_ATTACK_TEAM] ]);
}

stock UpdateGangZone(idx)
{
	if(!GetGangZoneData(idx, GZ_GANG))
	{
		new area_players[3];

		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(!IsPlayerInDynamicArea(i, GetGangZoneData(idx, GZ_AREA))) continue;
			else if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(i) <= TEAM_OPG_LYTKARINSKAYA)) continue;

			area_players[ GetPlayerTeamEx(i) - TEAM_OPG_ARZAMASKAYA ] ++;
		}

		for(new i; i < 3; i++)
		{
			if(area_players[i] < MIN_PLAYERS_FOR_CAPTURE) continue;

			SetGangZoneData(idx, GZ_GANG, i + 1);
			SaveGangZone(idx + 1);

			GangZoneShowForAll(GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[i + 1]);

			UpdateGangRepository(i);

			break;
		}
	}
}

stock SaveGangZone(idx)
{
	new query[50];

	mysql_format(mysql, query, sizeof query, "UPDATE gang_zones SET fraction=%d WHERE id=%d", GetGangZoneData(idx, GZ_GANG), idx);
	mysql_query(mysql, query, false);
}

stock GetGangZonesCount(team)
{
	new count;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(GetGangZoneData(idx, GZ_GANG) != team) continue;

		count ++;
	}

	return count;
}

// ------------------------------------------
public: LoadGangRepositories()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_repositories", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangRepositories]: DB rows > MAX_GANG_REPOSITORIES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGangRepositoryData(idx, GR_GANG, 		cache_get_field_content_int(idx, "id"));
		SetGangRepositoryData(idx, GR_METALL, 		cache_get_field_content_int(idx, "metall"));
		SetGangRepositoryData(idx, GR_AMMO, 		cache_get_field_content_int(idx, "ammo"));
		SetGangRepositoryData(idx, GR_DRUGS, 		cache_get_field_content_int(idx, "drugs"));
		SetGangRepositoryData(idx, GR_MONEY, 		cache_get_field_content_int(idx, "money"));

		SetGangRepositoryData(idx, GR_LOCK, 		bool: cache_get_field_content_int(idx, "lock"));

		new fmt_text[330],
			gang_id = GetGangRepositoryData(idx, GR_GANG);

		format
		(
		    fmt_text, sizeof fmt_text,
		    "Склад\n\
		    {33AA33}%s\n\n\
		    {"#cW"}Наркотики: {"#cGold"}%d из 20000 г\n\
		    {"#cW"}Патроны: {"#cGold"}%d из 5000 шт\n\
		    {"#cW"}Металл: {"#cGold"}%d из 6000 кг\n\
		    {"#cW"}Деньги: {"#cGold"}%d руб\n\n\
		    {"#cW"}Территории: {"#cGold"}%d\n\n\
		    {"#cW"}Состояние: %s\
		    ",
   			GetTeamName(idx + TEAM_OPG_ARZAMASKAYA),
			GetGangRepositoryData(idx, GR_DRUGS),
			GetGangRepositoryData(idx, GR_AMMO),
			GetGangRepositoryData(idx, GR_METALL),
			GetGangRepositoryData(idx, GR_MONEY),
			GetGangZonesCount(gang_id + 1),
			GetGangRepositoryData(idx, GR_LOCK) ? "{33AA33}Открыт" : "{FF6600}Закрыт"
		);
		g_gang_repository[idx][GR_LABEL] = CreateDynamic3DTextLabel
		(
			fmt_text,
			COLOR_WHITE,
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[2] + 0.8, //+ 1.5,
			10.0
		);

		g_gang_repository[idx][GR_PICKUP] = CreatePickup
		(
			//1239,
			2969,
			23,
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_OPG_ARZAMASKAYA, O_REPOSITORY_POS)[2],
			-1,
			PICKUP_ACTION_TYPE_GANG_REPOSIT,
			gang_id
		);
	}

	cache_delete(result);

	printf("[GangRepositories]: Склады банд загружены");
}

stock UpdateGangRepository(idx)
{
	new fmt_text[330],
		gang_id = GetGangRepositoryData(idx, GR_GANG);

	format
	(
  		fmt_text, sizeof fmt_text,
  		"Склад\n\
  		{33AA33}%s\n\n\
		{"#cW"}Наркотики: {"#cGold"}%d из 20000 г\n\
		{"#cW"}Патроны: {"#cGold"}%d из 5000 шт\n\
		{"#cW"}Металл: {"#cGold"}%d из 6000 кг\n\
		{"#cW"}Деньги: {"#cGold"}%d руб\n\n\
		{"#cW"}Территории: {"#cGold"}%d\n\n\
		{"#cW"}Состояние: %s\
  		",
		GetTeamName(idx + TEAM_OPG_ARZAMASKAYA),
		GetGangRepositoryData(idx, GR_DRUGS),
		GetGangRepositoryData(idx, GR_AMMO),
		GetGangRepositoryData(idx, GR_METALL),
		GetGangRepositoryData(idx, GR_MONEY),
		GetGangZonesCount(gang_id + 1),
		GetGangRepositoryData(idx, GR_LOCK) ? "{33AA33}Открыт" : "{FF6600}Закрыт"
	);
	UpdateDynamic3DTextLabelText(GetGangRepositoryData(idx, GR_LABEL), COLOR_WHITE, fmt_text);
}

// ------------------------------------------
public: LoadEntrances()
{
	new idx, j, k, p;
	new query[85], buffer[2];
	new Cache: result, rows;
	new entranceid = -1;

	result = mysql_query(mysql, "SELECT * FROM `entrances` ORDER BY `entrances`.`id` ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_ENTRANCES)
	{
		rows = MAX_ENTRANCES;
		print("[Entrances]: DB rows > MAX_ENTRANCES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetEntranceData(idx, E_SQL_ID, 	cache_get_field_content_int(idx, "id"));

		SetEntranceData(idx, E_CITY, 	cache_get_field_content_int(idx, "city"));
		SetEntranceData(idx, E_ZONE, 	cache_get_field_content_int(idx, "zone"));
		SetEntranceData(idx, E_FLOORS,	cache_get_field_content_int(idx, "floors"));

		SetEntranceData(idx, E_POS_X, 	cache_get_field_content_float(idx, "pos_x"));
		SetEntranceData(idx, E_POS_Y, 	cache_get_field_content_float(idx, "pos_y"));
		SetEntranceData(idx, E_POS_Z, 	cache_get_field_content_float(idx, "pos_z"));

		SetEntranceData(idx, E_EXIT_POS_X, 	cache_get_field_content_float(idx, "exit_x"));
		SetEntranceData(idx, E_EXIT_POS_Y, 	cache_get_field_content_float(idx, "exit_y"));
		SetEntranceData(idx, E_EXIT_POS_Z, 	cache_get_field_content_float(idx, "exit_z"));
		SetEntranceData(idx, E_EXIT_ANGLE, 	cache_get_field_content_float(idx, "exit_angle"));

		// ----------------------------------------------------------------------------------
		SetEntranceData(idx, E_STATUS, -1);

		if(GetEntranceData(idx, E_CITY) == -1 || GetEntranceData(idx, E_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));
			buffer[1] = Get2DZone(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));

			SetEntranceData(idx, E_CITY, buffer[0]);
			SetEntranceData(idx, E_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE entrances SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetEntranceData(idx, E_SQL_ID));
			mysql_query(mysql, query, false);
		}
		//SetEntranceData(idx, E_PICKUP_ID, CreatePickup(1273, 23, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, idx));
		//SetEntranceData(idx, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z), 31, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

		format(query, sizeof query, "- Подъезд -\n{FFFFFF}Номер подъезда: %d", idx + 1);
		SetEntranceData(idx, E_LABEL, CreateDynamic3DTextLabel(query, 0x3399FFFF, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z) + 1.0, 15.0));

		for(j = 0; j < MAX_ENTRANCE_FLOORS; j ++)
		{
			for(k = 0; k < 4; k ++)
			{
				g_entrance_flat[idx][j][k] = -1;
			}
		}
	}
	g_entrance_loaded = rows;
	cache_delete(result);

	// инициализация инта подъезда
	CreatePickup(1318, 23, 2772.7410,1694.6990,997.5322, -1, PICKUP_ACTION_TYPE_ENTRANCE_EXI); // выход из подъезда

	CreatePickup(19134, 23, 3022.8372, 1700.9956, 997.5250, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на 0 этаже
	CreatePickup(19134, 23, 3031.6641,1700.7533,997.5250, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на этаже выше 0

	CreatePickup(19134, 23, 2778.0535,1700.8218,997.5250, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на 0 этаже
	CreatePickup(19134, 23, 2768.8918,1700.9902,997.5250, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на этаже выше 0

	CreateDynamic3DTextLabel("- Подъезд -\n{FFFFFF}Используйте: {FF9900}/lift", 0x3399FFFF, 3022.8372,1700.9956,997.5250 + 1.0, 8.0); // лифт
	CreateDynamic3DTextLabel("- Подъезд -\n{FFFFFF}Используйте: {FF9900}/lift", 0x3399FFFF, 3031.6641,1700.7533,997.5250 + 1.0, 8.0); // лифт

	CreateDynamic3DTextLabel("- Подъезд -\n{FFFFFF}Используйте: {FF9900}/lift", 0x3399FFFF, 2778.0535,1700.8218,997.5250 + 1.0, 8.0); // лифт
	CreateDynamic3DTextLabel("- Подъезд -\n{FFFFFF}Используйте: {FF9900}/lift", 0x3399FFFF, 2768.8918,1700.9902,997.5250 + 1.0, 8.0); // лифт

	for(p = 0; p < g_entrance_loaded; p ++)
	{
		if(entranceid != -1) continue;
		for(idx = 0, k = 0; idx < MAX_ENTRANCE_FLOORS; idx ++)
		{
			format(query, sizeof query, "Этаж: %d", idx + 1);
			CreateDynamic3DTextLabel(query, 0xFFCD00FFF, 3030.1870,1698.9856,997.5250 + 0.7, 8.0, _, _, _, (p * 100) + (idx + 1), 5);

			for(j = 0; j < 4; j ++)
			{
				format(query, sizeof query, "Квартира\n{FFFFFF}Номер: %d", k + 1);
				CreateDynamic3DTextLabel(query, 0x3399FFFF, g_entrance_flat_pos[j][0], g_entrance_flat_pos[j][1], g_entrance_flat_pos[j][2] + 1.6, 6.0, _, _, _, (p * 100) + (idx + 1), 5);

				k ++;
				//entranceid ++;
			}
		}
	}
	for(idx = 0; idx < 4; idx ++)
	{
		CreatePickup(19524, 23, g_entrance_flat_pos[idx][0], g_entrance_flat_pos[idx][1], g_entrance_flat_pos[idx][2], -1, PICKUP_ACTION_TYPE_ENTRANCE_FLA, idx);
	}
	printf("[Entrances]: Подъездов загружено: %d", g_entrance_loaded);
}

stock LoadServerConfig()
{
	new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM server_config", true);

	g_doubling[0] = cache_get_field_content_int(0, "x_donate");
	g_doubling[1] = cache_get_field_content_int(0, "x_exp");
	g_doubling[2] = cache_get_field_content_int(0, "x_sallary");
	Test_server = cache_get_field_content_int(0, "test_status");

	cache_delete(result);
	print("[Config] Серверные настройки загружены успешно");
}

stock SaveServerConfig()
{
	new query[200];
	mysql_format(mysql, query, sizeof query, "UPDATE server_config SET x_donate='%d', x_exp='%d', x_sallary='%d', test_status='%d' LIMIT 1", g_doubling[0], g_doubling[1], g_doubling[2], Test_server);
	mysql_query(mysql, query, false);
}

public: EntranceStatusInit(entranceid)
{
	new e_houses = 0;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(GetHouseData(idx, H_ENTRACE) != entranceid) continue;
		if(!IsHouseOwned(idx)) continue;

		e_houses ++;
	}
	UpdateEntrance(entranceid, e_houses);
}

public: LoadOwnableCars()
{
	new rows, vehicleid;
	new Cache: result;

	result = mysql_query(mysql, "SELECT oc.*, IFNULL(a.name, 'None') AS owner_name FROM ownable_cars oc LEFT JOIN accounts a ON a.id = oc.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_OWNABLE_CARS)
	{
		rows = MAX_OWNABLE_CARS;
		print("[OwnableCars]: DB rows > MAX_OWNABLE_CARS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));

		SetOwnableCarData(idx, OC_ST_LOAD, 		1);

		SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(idx, "angle"));

		cache_get_field_content(idx, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

		SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(idx, "alarm"));
		SetOwnableCarData(idx, OC_KEY_IN,   bool: cache_get_field_content_int(idx, "key_in"));

		SetOwnableCarData(idx, OC_DISKI, 		cache_get_field_content_int(idx, "diski"));
		SetOwnableCarData(idx, OC_GIDRA, 		cache_get_field_content_int(idx, "gidra"));
		SetOwnableCarData(idx, OC_NITRO, 		cache_get_field_content_int(idx, "nitro"));
		SetVehicleData(idx, V_RENT, 		cache_get_field_content_int(idx, "rent"));
		SetVehicleData(idx, V_RENTP, 		cache_get_field_content_int(idx, "rentp"));

		SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(idx, "create_time"));

		// cache_get_field_content(idx, "owner_name", g_ownable_car[idx][OC_OWNER_NAME], mysql, 21);
		// ----------------------------------------------------------------------------------------

		if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
			strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

		vehicleid = CreateVehicle
		(
			GetOwnableCarData(idx, OC_MODEL_ID),
			GetOwnableCarData(idx, OC_POS_X),
			GetOwnableCarData(idx, OC_POS_Y),
			GetOwnableCarData(idx, OC_POS_Z),
			GetOwnableCarData(idx, OC_ANGLE),
			GetOwnableCarData(idx, OC_COLOR_1),
			GetOwnableCarData(idx, OC_COLOR_2),
			-1,
			0,
			VEHICLE_ACTION_TYPE_OWNABLE_CAR,
			idx
		);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
			SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(idx, "status"));

			SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "mileage"));
		}
	}
	g_ownable_car_loaded = rows;
	cache_delete(result);

	printf("[OwnableCars]: Ee?iuo aaoi caa?o?aii: %d", g_ownable_car_loaded);
}

public: LoadOwnableCar(playerid, oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ioeaea a caa?ocea. I?aauoai eeieo ee?iiai o?ainii?oa (MAX_OWNABLE_CARS)");
		return -1;
	}

	new query[55],
		Cache: result,
		vehicleid;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);

	new idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));

	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));
	SetOwnableCarData(idx, OC_VINIL, 		cache_get_field_content_int(0, "vinil"));
	SetOwnableCarData(idx, OC_DISKI, 		cache_get_field_content_int(0, "diski"));
	SetOwnableCarData(idx, OC_GIDRA, 		cache_get_field_content_int(0, "gidra"));
	SetOwnableCarData(idx, OC_NITRO, 		cache_get_field_content_int(0, "nitro"));

	SetVehicleData(idx, V_RENT, 		cache_get_field_content_int(0, "rent"));
	SetVehicleData(idx, V_RENTP, 		cache_get_field_content_int(0, "rentp"));
	cache_get_field_content(0, "region", g_ownable_car[idx][OC_REGION], mysql, 4);

	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));

	cache_get_field_content(0, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

	SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(0, "alarm"));
	SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(0, "key_in"));

	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));

	// ----------------------------------------------------------------------------------------

	if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
		strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);
    new sL_Slot = GetPVarInt(playerid, "listitem_car");
	cars_g[playerid][sL_Slot] = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(cars_g[playerid][sL_Slot] != INVALID_VEHICLE_ID)
	{
		SetVehicleParam(cars_g[playerid][sL_Slot], V_LOCK, VEHICLE_PARAM_OFF);

		SetVehicleData(cars_g[playerid][sL_Slot], V_MILEAGE, cache_get_field_content_float(0, "mileage"));

		AddVehicleComponent(cars_g[playerid][sL_Slot], GetOwnableCarData(idx, OC_DISKI));

		AddVehicleComponent(cars_g[playerid][sL_Slot], GetOwnableCarData(idx, OC_GIDRA));

		AddVehicleComponent(cars_g[playerid][sL_Slot], GetOwnableCarData(idx, OC_NITRO));

		AddVehicleComponent(cars_g[playerid][sL_Slot], GetOwnableCarData(idx, OC_C1));

		ChangeVehiclePaintjob(cars_g[playerid][sL_Slot], GetOwnableCarData(idx, OC_VINIL));

		if(g_ownable_car[idx][OC_DISKI] != 0) AddVehicleComponent(idx, g_ownable_car[vehicleid][OC_DISKI]);

		AddVehicleComponent(idx, g_ownable_car[vehicleid][OC_DISKI]);


		SetVehicleData(cars_g[playerid][sL_Slot], V_LAST_LOAD_TIME, gettime());
		SetVehicleData(cars_g[playerid][sL_Slot], V_HEALTH, cache_get_field_content_float(0, "health"));

		SetVehicleHealth(cars_g[playerid][sL_Slot], GetVehicleData(vehicleid, V_HEALTH));
	}

	//AttachCarNumber(vehicleid, idx);
	//SetVehicleNumber(idx);

	cache_delete(result);

	LoadOwnableCarTrunk(cars_g[playerid][sL_Slot]);

	return 1;
}

stock GetFreeOwnableCarID()
{
	for(new idx; idx < sizeof g_ownable_car; idx ++)
	{
		if(GetOwnableCarData(idx, OC_CREATE)) continue;

		return idx;
	}

	return -1;
}

stock UnloadPlayerOwnableCar(playerid, bool: ignore_time = false, idcar)
{
	new vehicleid = GetPlayerOwnableCar(playerid, idcar);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	SetOwnableCarData(index, OC_CREATE, 0);

	DestroyVehicleLabel(vehicleid);

	DestroyDynamicObject(nomerobj_f[index]);
	DestroyDynamicObject(nomerobj_b[index]);

	DestroyVehicle(vehicleid);
	UnloadOwnableCarTrunk(vehicleid);

	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);

	SetPlayerVehicleData(playerid, idcar, INVALID_VEHICLE_ID);

	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		else if(!IsPlayerLogged(idx)) continue;
		else if(GetPlayerAllowedCar(idx) != vehicleid) continue;

		if(ignore_time)
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта отключился. Транспорт выгружен с сервера");
		else
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта выгрузил транспорт с сервера");

		SetPlayerData(idx, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}

	return 1;
}

public: LoadTrunks()
{
	new Cache: result, rows;
	new vehicleid, slot, buffer;

	result = mysql_query(mysql, "SELECT * FROM trunks ORDER BY owner_id ASC, id ASC", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		vehicleid = GetOwnableCarBySqlID(cache_get_field_content_int(idx, "owner_id"));
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			for(slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
			{
				if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;

				SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(idx, "id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(idx, "item_id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(idx, "amount"));
				SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(idx, "value"));
			}
			buffer ++;
		}
	}

	cache_delete(result);
	printf("[Trunks]: Предметов загружено: %d", buffer);
}

public: LoadOwnableCarTrunk(vehicleid)
{
	new query[60],
		slot,
		index,
		rows,
		Cache: result;

	index = GetVehicleData(vehicleid, V_ACTION_ID);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM trunks WHERE oc_id='%d' ORDER BY id ASC", index);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows > MAX_VEHICLE_TRUNK_SLOTS)
		rows = MAX_VEHICLE_TRUNK_SLOTS;

	for(slot = 0; slot < rows; slot ++)
	{
		if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;

		SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(slot, "id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(slot, "item_id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(slot, "amount"));
		SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(slot, "value"));
	}

	cache_delete(result);
}

stock UnloadOwnableCarTrunk(vehicleid)
{
	for(new slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
	{
		RemoveTrunkItem(vehicleid, slot);
	}
}
public: LoadFamily()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM family", true);
	rows = cache_num_rows();

	for(idx = 1; idx <= rows; idx ++)
	{
	    g_family[idx][F_ID] = cache_get_field_content_int(idx - 1, "fam_id");

	    g_family[idx][F_HOUSE] = cache_get_field_content_int(idx - 1, "fam_house");
	    g_family[idx][F_AMMO] = cache_get_field_content_int(idx - 1, "ammo");
	    g_family[idx][F_DRUGS] = cache_get_field_content_int(idx - 1, "drugs");
	    g_family[idx][F_METALL] = cache_get_field_content_int(idx - 1, "metall");
	    g_family[idx][F_MONEY] = cache_get_field_content_int(idx - 1, "fam_bank");
	    g_family[idx][F_LOCK] = cache_get_field_content_int(idx - 1, "status_sklad");

		cache_get_field_content(idx - 1, "fam_name", g_family[idx][F_NAME]);
		cache_get_field_content(idx - 1, "fam_creator", g_family[idx][F_LEADER]);
		cache_get_field_content(idx - 1, "fam_chat_color", g_family[idx][F_COLOR]);

		cache_get_field_content(idx - 1, "fam_date", g_family[idx][F_DATE]);

		cache_get_field_content(idx - 1, "rang1", g_family_rank[idx][0]);
		cache_get_field_content(idx - 1, "rang2", g_family_rank[idx][1]);
		cache_get_field_content(idx - 1, "rang3", g_family_rank[idx][2]);
		cache_get_field_content(idx - 1, "rang4", g_family_rank[idx][3]);
		cache_get_field_content(idx - 1, "rang5", g_family_rank[idx][4]);

		TOTAL_FAMILY ++;
	}

	cache_delete(result);
}

public: LoadHotels()
{
	new query[64], idx;
	new Cache: result, rows;
	new hotel_id, room_id;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') AS owner_name FROM hotels h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.hotel_id ASC, h.id ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_HOTELS * MAX_HOTEL_ROOMS)
	{
		rows = MAX_HOTELS * MAX_HOTEL_ROOMS;
		print("[Hotels]: DB rows > MAX_HOTELS * MAX_HOTEL_ROOMS");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		hotel_id = cache_get_field_content_int(idx, "hotel_id");
		if(0 <= hotel_id <= MAX_HOTELS-1)
		{
			room_id = g_hotel_rooms_loaded[hotel_id];
			if(0 <= room_id <= MAX_HOTEL_ROOMS-1)
			{
				SetHotelData(hotel_id, room_id, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetHotelData(hotel_id, room_id, H_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
				SetHotelData(hotel_id, room_id, H_RENT_DATE, 	cache_get_field_content_int(idx, "rent_time"));
				SetHotelData(hotel_id, room_id, H_STATUS, 		bool: cache_get_field_content_int(idx, "status"));

				cache_get_field_content(idx, "owner_name", g_hotel[hotel_id][room_id][H_OWNER_NAME], mysql, 21);

				// ----------------------------------------------------------------------------------------------
				if(IsHotelRoomOwned(hotel_id, room_id) && !strcmp(GetHotelData(hotel_id, room_id, H_OWNER_NAME), "None", true))
				{
					SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);

					mysql_format(mysql, query, sizeof query, "UPDATE hotels SET owner_id=0 WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_SQL_ID));
					mysql_query(mysql, query, false);
				}

				if(!IsHotelRoomOwned(hotel_id, room_id))
				{
					SetHotelData(hotel_id, room_id, H_STATUS, false);
				}
				g_hotel_rooms_loaded[hotel_id] ++;
			}
		}
	}
	cache_delete(result);

	// ----------------------------------
	CreatePickup(1318, 23, 733.0804, 599.6274, 1002.9598, -1);
	CreatePickup(1318, 23, 1276.0054, -776.3987, 1202.7220, -1);

	g_hotel_lift_CP[0] = CreateDynamicCP(733.0804, 599.6274, 1002.9598, 1.0, _, _, _, 5.0);
	g_hotel_lift_CP[1] = CreateDynamicCP(1276.0054, -776.3987, 1202.722, 1.0, _, _, _, 5.0);

	// ----------------------------------
	new
		Float: p_pos_x = 1273.2,
		Float: p_pos_y = -778.3146,
		Float: p_pos_z = 1202.7220;

	for(idx = 0; idx < 12; idx ++)
	{
		if(!(idx & 1))
		{
			p_pos_y += 4.0,
			p_pos_x += 5.7;
		}
		else p_pos_x -= 5.7;

		CreatePickup(19197, 23, p_pos_x, p_pos_y, p_pos_z, -1, PICKUP_ACTION_TYPE_HOTEL_ROOM, idx);

		format(query, sizeof query, "Комната\n{FFFFFF}Номер: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0x3399FFFF, p_pos_x, p_pos_y, p_pos_z + 1.4, 6.0);
	}

	for(idx = 0; idx < MAX_HOTEL_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FF, 1276.0054, -776.3987, 1202.722 + 1.7, 8.0, _, _, _, _, idx + 1);
	}

	// ----------------------------------
	for(idx = 0; idx < MAX_HOTELS; idx ++)
	{
		if(g_hotel_rooms_loaded[idx])
		{
			g_hotel_loaded ++;
		}
	}
	printf("[Hotels]: Отелей загружено: %d / Номеров: %d", g_hotel_loaded, rows);
}

public: LoadStonks()
{
	new idx;
	//new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM `stocks` ORDER BY `stocks`.`id` ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_STONKS)
	{
		rows = MAX_STONKS;
		print("[Stonks]: DB rows > MAX_STONKS");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetStonksData(idx, S_SQL_ID, cache_get_field_content_int(idx, "id"));
		cache_get_field_content(idx, "b_name", g_stonks[idx][S_NAME], mysql, 65);
		SetStonksData(idx, S_PRICE, cache_get_field_content_int(idx, "price"));
		SetStonksData(idx, S_KOLVO, cache_get_field_content_int(idx, "quantity"));
	}

	g_stonks_loaded = rows;
	cache_delete(result);

	printf("[Stonks]: Акций загружено: %d", g_stonks_loaded);
}

public: LoadHouses()
{
	new idx;
	new query[85], buffer[2];
	new Cache: result, rows;

	// result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.id ASC, h.entrance ASC", true);
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_HOUSES)
	{
		rows = MAX_HOUSES;
		print("[Houses]: DB rows > MAX_HOUSES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetHouseData(idx, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetHouseData(idx, H_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_house[idx][H_NAME], mysql, 20);

		SetHouseData(idx, H_CITY,			cache_get_field_content_int(idx, "city"));
		SetHouseData(idx, H_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetHouseData(idx, H_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));

		SetHouseData(idx, H_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetHouseData(idx, H_PRICE,			cache_get_field_content_int(idx, "price"));
		SetHouseData(idx, H_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetHouseData(idx, H_TYPE,			cache_get_field_content_int(idx, "type"));
		SetHouseData(idx, H_ENTRACE,		cache_get_field_content_int(idx, "entrance"));
		SetHouseData(idx, H_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));

		SetHouseData(idx, H_POS_X,			cache_get_field_content_float(idx, "x"));
		SetHouseData(idx, H_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetHouseData(idx, H_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetHouseData(idx, H_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetHouseData(idx, H_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetHouseData(idx, H_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetHouseData(idx, H_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetHouseData(idx, H_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetHouseData(idx, H_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetHouseData(idx, H_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetHouseData(idx, H_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));

		SetHouseData(idx, H_STORE_X,		cache_get_field_content_float(idx, "store_x"));
		SetHouseData(idx, H_STORE_Y,		cache_get_field_content_float(idx, "store_y"));
		SetHouseData(idx, H_STORE_Z,		cache_get_field_content_float(idx, "store_z"));

		SetHouseData(idx, H_EVICTION,		cache_get_field_content_int(idx, "eviction"));

		SetHouseData(idx, H_STORE_METALL,	cache_get_field_content_int(idx, "store_metall"));
		SetHouseData(idx, H_STORE_DRUGS,	cache_get_field_content_int(idx, "store_drugs"));
		SetHouseData(idx, H_STORE_WEAPON,	cache_get_field_content_int(idx, "store_weapon"));
		SetHouseData(idx, H_STORE_AMMO,		cache_get_field_content_int(idx, "store_ammo"));
		SetHouseData(idx, H_STORE_SKIN,		cache_get_field_content_int(idx, "store_skin"));

		cache_get_field_content(idx, "owner_name", g_house[idx][H_OWNER_NAME], mysql, 21);

		// -------------------------
		SetHouseData(idx, H_STORE_LABEL, Text3D:-1);

		buffer[0] = GetHouseData(idx, H_TYPE);
		if(!strlen(GetHouseData(idx, H_NAME)))
			format(g_house[idx][H_NAME], 40, GetHouseTypeInfo(buffer[0], HT_NAME), 0);

		if(GetHouseData(idx, H_ENTRACE) == -1)
		{
			if(GetHouseData(idx, H_CITY) == -1 || GetHouseData(idx, H_ZONE) == -1)
			{
				buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
				buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));

				SetHouseData(idx, H_CITY, buffer[0]);
				SetHouseData(idx, H_ZONE, buffer[1]);

				mysql_format(mysql, query, sizeof query, "UPDATE houses SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetHouseData(idx, H_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		if(IsHouseOwned(idx) && !strcmp(GetHouseData(idx, H_OWNER_NAME), "None", true))
		{
			SetHouseData(idx, H_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=0,improvements=0 WHERE id=%d", GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsHouseOwned(idx))
		{
			SetHouseData(idx, H_IMPROVEMENTS, 	0);
			SetHouseData(idx, H_LOCK_STATUS, 	false);
		}
		UpdateHouse(idx);

		HouseHealthInit(idx);
		HouseStoreInit(idx);

		buffer[0] = GetHouseData(idx, H_ENTRACE);
		if(buffer[0] != -1)
		{
			buffer[1] = g_entrance_flats_loaded[buffer[0]];

			g_entrance_flats_loaded[buffer[0]] ++;
			g_entrance_flat[buffer[0]][buffer[1] / 4][buffer[1] % 4] = idx;

			SetHouseData(idx, H_FLAT_ID, buffer[1]);
		}
		//home_area[idx] = CreateDynamicSphere(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), GetHouseData(idx, H_POS_Z), 3.0, 0, 0, -1);
	}
	g_house_loaded = rows;
	cache_delete(result);

	printf("[Houses]: Домов загружено: %d", g_house_loaded);
}

stock LoadObjects()
{
	mysql_query(mysql, "SELECT * FROM `create_objects` WHERE 1");
	TOTALOBJECTS = cache_num_rows();

    if(TOTALOBJECTS)
    {
    	for(new i; i < TOTALOBJECTS; i++)
    	{
    		cache_get_field_content(i, "Name", ObjInfo[i][objName], mysql);
    		ObjInfo[i][objModel] = cache_get_field_content_int(i, "Model", mysql);
    		ObjInfo[i][objPosX] = cache_get_field_content_float(i, "PosX", mysql);
    		ObjInfo[i][objPosY] = cache_get_field_content_float(i, "PosY", mysql);
    		ObjInfo[i][objPosZ] = cache_get_field_content_float(i, "PosZ", mysql);
    		ObjInfo[i][objRotX] = cache_get_field_content_float(i, "RotX", mysql);
    		ObjInfo[i][objRotY] = cache_get_field_content_float(i, "RotY", mysql);
    		ObjInfo[i][objRotZ] = cache_get_field_content_float(i, "RotZ", mysql);

    		ObjInfo[i][objID] = CreateDynamicObject(ObjInfo[i][objModel], ObjInfo[i][objPosX], ObjInfo[i][objPosY], ObjInfo[i][objPosZ], ObjInfo[i][objRotX], ObjInfo[i][objRotY], ObjInfo[i][objRotZ]);
    	}
    	printf("[Objects]: Объектов загружено: %d", TOTALOBJECTS);
    }
}

public: LoadHousesRenters()
{
	new sql_id;
	new owner_id;
	new house_id;
	new room_id;
	new rent_time;
	new time;
	new owner_name[21];

	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses_renters h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		sql_id = 	cache_get_field_content_int(idx, "id");

		owner_id = 	cache_get_field_content_int(idx, "owner_id");
		house_id = 	cache_get_field_content_int(idx, "house_id");
		room_id =	cache_get_field_content_int(idx, "room_id");
		rent_time =	cache_get_field_content_int(idx, "rent_time");
		time = 		cache_get_field_content_int(idx, "time");

		cache_get_field_content(idx, "owner_name", owner_name, mysql, 21);
		if(!strlen(owner_name))
			owner_name[0] = '\1';

		CallLocalFunction("HouseRenterInit", "iiiiiis", sql_id, owner_id, house_id, room_id, rent_time, time, owner_name);
	}
	cache_delete(result);

	printf("[Houses]: Арендаторов загружено: %d", rows);
}

public: HouseRenterInit(id, owner_id, house_id, room_id, rent_time, time, owner_name[])
{
	new houseid = GetHouseIndexBySQLID(house_id);
	if(houseid != -1)
	{
		if(0 <= room_id <= MAX_HOUSE_ROOMS-1)
		{
			SetHouseRenterInfo(houseid, room_id, HR_SQL_ID, id);
			SetHouseRenterInfo(houseid, room_id, HR_OWNER_ID, owner_id);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_DATE, rent_time);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_TIME, time);

			format(g_house_renters[houseid][room_id][HR_OWNER_NAME], 21, owner_name, 0);

			AddHouseRentersCount(houseid, +, 1);
		}
	}
}

public: ShowPlayerHouseInfo(playerid, houseid)
{
	if(0 <= houseid <= g_house_loaded-1)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			SetPlayerUseListitem(playerid, houseid);

			new fmt_str[160];
			new string[256];
			new type = GetHouseData(houseid, H_TYPE);

			if(IsHouseOwned(houseid))
			{
				if(!GetHouseData(houseid, H_EVICTION))
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец:\t\t\t{33CCFF}%s\n\n", GetHouseData(houseid, H_OWNER_NAME));
					strcat(string, fmt_str);
				}
				else
				{
					strcat(string, "{FFFFFF}Владелец:\t\t\t{33CCFF}Выселен\n\n");
				}
			}

			format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseData(houseid, H_NAME));
			strcat(string, fmt_str);

			if(GetHouseData(houseid, H_ENTRACE) != -1)
			{
				//format(fmt_str, sizeof fmt_str, "Этаж:\t\t\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				//strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "Номер квартиры:\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) + 1);
				strcat(string, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string, "\n");

				format(fmt_str, sizeof fmt_str, "Номер подъезда:\t\t%d\n", GetHouseData(houseid, H_ENTRACE) + 1);
				strcat(string, fmt_str);
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "Номер дома:\t\t\t%d\n", houseid);
				strcat(string, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string, "\n");
			}

			format(fmt_str, sizeof fmt_str, "Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "Стоимость:\t\t\t%d руб\n", GetHouseData(houseid, H_PRICE));
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "Ежедневная квартплата:\t%d руб", GetHouseData(houseid, H_RENT_PRICE));
			strcat(string, fmt_str);

			if(IsHouseOwned(houseid))
			{
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
				{
					format(fmt_str, sizeof fmt_str, " {33CC99}(%d руб)", GetHouseData(houseid, H_RENT_PRICE) / 2);
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "{FF9900}Дом занят", string, "Войти", "Отмена");
			}
			else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "{33CC00}Дом свободен", string, "Купить", "Отмена");
		}
	}
	return 1;
}

public: ShowPlayerHouseDialog(playerid, operationid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_ENTRACE) != -1)
		{
			if(operationid >= HOUSE_OPERATION_CAR_DELIVERY)
			{
				operationid ++;
			}
		}
		switch(operationid)
		{
			case HOUSE_OPERATION_PARAMS:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Отметить транспорт на GPS\n"\
						"4. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Доставить транспорт к дому {FF6600}(550 руб)\n"\
						"4. Отметить транспорт на GPS\n"\
						"5. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
			}
			case HOUSE_OPERATION_LOCK:
			{
				if(GetHouseData(houseid, H_LOCK_STATUS))
				{
					SetHouseData(houseid, H_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Дом открыт");
				}
				else
				{
					SetHouseData(houseid, H_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Дом закрыт");
				}

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `houses` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[512];

				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_house_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t\t", idx + 1, g_house_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 1,4,5:
							strcat(fmt_str, "\t");

						case 6:
							strcat(fmt_str, "\t\t");
					}

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_house_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{33AADD}Улучшения для дома", string, "Купить", "Назад");
			}
			case HOUSE_OPERATION_CAR_DELIVERY:
			{
				if(GetHouseData(houseid, H_ENTRACE) == -1)
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
					    for(new i;i<MAX_PLAYERS;i++)
						{
						    if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете доставить авто пока в нём кто-то сидит");
						    break;
						}
						new price = 550;
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							GivePlayerMoneyEx(playerid, -price, "Доставка ТС к дому (/home)", true, true);

							SetVehiclePos
							(
								vehicleid,
								GetHouseData(houseid, H_CAR_POS_X),
								GetHouseData(houseid, H_CAR_POS_Y),
								GetHouseData(houseid, H_CAR_POS_Z)
							);
							SetVehicleZAngle(vehicleid, GetHouseData(houseid, H_CAR_ANGLE));
							SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

							return SendClientMessage(playerid, 0x3399FFFF, "Транспорт был доставлен к Вашему дому");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
					}
					else
					{
						if(GetPlayerOwnableCarLasts(playerid) == 0)
							SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
						else
							SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
					}
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Функция доступна владельцам домов");

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_CAR_GPS:
			{
				if(!callcmd::getmycar(playerid, ""))
				{
					CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case HOUSE_OPERATION_RENTERS:
			{
				if(GetHouseRentersCount(houseid) > 0)
				{
					new type = GetHouseData(houseid, H_TYPE);
					new rooms = GetHouseTypeInfo(type, HT_ROOMS);

					new fmt_str[21 + 1];
					new string[MAX_HOUSE_ROOMS * (sizeof fmt_str) + 1];

					for(new idx, count; idx < rooms; idx ++)
					{
						if(!IsHouseRoomOwned(houseid, idx)) continue;

						format(fmt_str, sizeof fmt_str, "%s\n", GetHouseRenterInfo(houseid, idx, HR_OWNER_NAME));
						strcat(string, fmt_str);

						SetPlayerListitemValue(playerid, count ++, idx);
					}
					Dialog(playerid, DIALOG_HOUSE_RENTERS, DIALOG_STYLE_LIST, "{33AACC}Список арендаторов", string, "Выбрать", "Назад");
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX,
						"{33AACC}Список арендаторов",
						"{FFFFFF}В Вашем доме, кроме Вас, сейчас никто не проживает",
						"Назад", ""
					);
				}
			}
		}
	}
	return 1;
}

public: UpdateRealtorHomeInfo()
{
	new count = -1;
	new fmt_str[128];
	new free_houses = GetFreeHousesCount();

	new new_line = floatround((float(free_houses) / 10) + 2, floatround_ceil);
	if(new_line > 28)
	{
		new_line = 28;
	}

	g_house_realtor_list = "{FFFFFF}";
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		if(++count > new_line)
		{
			count = -1;
		}

		format(fmt_str, sizeof fmt_str, "%d%s", idx, count != -1 ? ("\t") : ("\n"));
		strcat(g_house_realtor_list, fmt_str);
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние недвижимости\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено домов: %d\n"\
		"{99FF33}Свободно домов: %d",
		g_house_loaded - free_houses,
		free_houses
	);
	UpdateDynamic3DTextLabelText(g_house_realtor_label, 0xCCFF66FF, fmt_str);
}

public: UpdateHouseStore(houseid)
{
	if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"Шкаф\n"\
			"{FFFFFF}Металл: {6699FF}%d из 700 кг\n"\
			"{FFFFFF}Наркотики: {6699FF}%d из 2000 г\n"\
			"{FFFFFF}Оружие: {6699FF}%s\n"\
			"{FFFFFF}Патроны: {6699FF}%d из 3000 шт\n"\
			"{FFFFFF}Одежда: {FF6600}%s",
			GetHouseData(houseid, H_STORE_METALL),
			GetHouseData(houseid, H_STORE_DRUGS),
			GetHouseData(houseid, H_STORE_WEAPON) ? GetWeaponName(GetHouseData(houseid, H_STORE_WEAPON)) : ("нет"),
			GetHouseData(houseid, H_STORE_AMMO),
			GetHouseData(houseid, H_STORE_SKIN) ? ("есть") : ("нет")
		);
		UpdateDynamic3DTextLabelText(GetHouseData(houseid, H_STORE_LABEL), 0xFFFF00FF, fmt_str);
	}
}

public: LoadBusinesses()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM business b LEFT JOIN accounts a ON a.id=b.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_BUSINESS)
	{
		rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessData(idx, B_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetBusinessData(idx, B_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_business[idx][B_NAME], mysql, 24);

		SetBusinessData(idx, B_CITY,			cache_get_field_content_int(idx, "city"));
		SetBusinessData(idx, B_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetBusinessData(idx, B_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetBusinessData(idx, B_PRODS,			cache_get_field_content_int(idx, "products"));
		SetBusinessData(idx, B_PROD_PRICE,		cache_get_field_content_int(idx, "prod_price"));
		SetBusinessData(idx, B_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetBusinessData(idx, B_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetBusinessData(idx, B_PRICE,			cache_get_field_content_int(idx, "price"));
		SetBusinessData(idx, B_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));

		SetBusinessData(idx, B_TYPE,			cache_get_field_content_int(idx, "type"));
		SetBusinessData(idx, B_INTERIOR,		cache_get_field_content_int(idx, "interior"));

		SetBusinessData(idx, B_ENTER_PRICE,		cache_get_field_content_int(idx, "enter_price"));
		SetBusinessData(idx, B_ENTER_MUSIC,		cache_get_field_content_int(idx, "enter_music"));

		SetBusinessData(idx, B_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetBusinessData(idx, B_POS_X,			cache_get_field_content_float(idx, "x"));
		SetBusinessData(idx, B_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetBusinessData(idx, B_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetBusinessData(idx, B_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetBusinessData(idx, B_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetBusinessData(idx, B_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetBusinessData(idx, B_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetBusinessData(idx, B_EVICTION,		cache_get_field_content_int(idx, "eviction"));

		cache_get_field_content(idx, "owner_name", g_business[idx][B_OWNER_NAME], mysql, 21);
		// -------------------------

		SetBusinessData(idx, B_ORDER_ID, -1);
		SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessData(idx, B_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 1.0, 6.50));

		if(GetBusinessData(idx, B_CITY) == -1 || GetBusinessData(idx, B_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));

			SetBusinessData(idx, B_CITY, buffer[0]);
			SetBusinessData(idx, B_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(IsBusinessOwned(idx) && !strcmp(GetBusinessData(idx, B_OWNER_NAME), "None", true))
		{
			SetBusinessData(idx, B_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET owner_id=0,improvements=0 WHERE id=%d", GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsBusinessOwned(idx))
		{
			SetBusinessData(idx, B_PRODS,		0);
			SetBusinessData(idx, B_PROD_PRICE, 	0);
			SetBusinessData(idx, B_LOCK_STATUS, false);

			SetBusinessData(idx, B_ENTER_MUSIC, 0);
			SetBusinessData(idx, B_ENTER_PRICE, 0);

			if(GetBusinessData(idx, B_IMPROVEMENTS) >= 6)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", idx);
				mysql_query(mysql, query, false);
			}
		}
		CallLocalFunction("UpdateBusinessLabel", "i", idx);

		BusinessHealthPickupInit(idx);

		if(GetBusinessData(idx, B_TYPE) == 1)
		{
		    CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 40, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		if(GetBusinessData(idx, B_TYPE) == 2)
		{
		    CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 49, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		if(GetBusinessData(idx, B_TYPE) == 3 || GetBusinessData(idx, B_TYPE) == 4)
		{
		    CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 28, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		if(GetBusinessData(idx, B_TYPE) == 5)
		{
		    CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 45, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		if(GetBusinessData(idx, B_TYPE) == 8)
		{
		    CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 25, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		if(GetBusinessData(idx, B_TYPE) == 9)
		{
		    CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 26, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}

		if(GetBusinessData(idx, B_TYPE) == 16 || GetBusinessData(idx, B_TYPE) == 17 || GetBusinessData(idx, B_TYPE) == 18 || GetBusinessData(idx, B_TYPE) == 19 || GetBusinessData(idx, B_TYPE) == 20 || GetBusinessData(idx, B_TYPE) == 21 || GetBusinessData(idx, B_TYPE) == 23)
		{
			if(GetBusinessData(idx, B_TYPE) == 20)
			{
				CreatePickup(1083, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
				CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
			}
			else if(GetBusinessData(idx, B_TYPE) == 21)
			{
				CreatePickup(18631, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			}
			else if(GetBusinessData(idx, B_TYPE) == 23)
			{
				CreatePickup(1582, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			}
			else
			{
				CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			}
		    //CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		/*if(GetBusinessData(idx, B_TYPE) == 20)
		{
		    CreatePickup(1083, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}*/
		else
		{
			CreatePickup(19132, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		biz_area[idx] = CreateDynamicSphere(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 3.0, 0, 0, -1);
	}
	g_business_loaded = rows;
	cache_delete(result);

	for(new idx; idx < sizeof g_business_interiors; idx ++)
	{
		CreatePickup(19132, 23, GetBusinessInteriorInfo(idx, BT_EXIT_POS_X), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Y), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_EXIT, idx);
		buffer[0] = -1;

		switch(idx)
		{
			case BUSINESS_INTERIOR_SHOP_24_7:
			{
				CreateDynamic3DTextLabel
				(
					"Список\n"\
					"товаров\n"\
					"{FFCD00}Введите /buy",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(10270, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_247, idx);
			}
			case BUSINESS_INTERIOR_CLUB, BUSINESS_INTERIOR_CASINO:
			{
				CreateDynamic3DTextLabel
				(
					"Меню бара:\n\n"\
					"{6699FF}1. Лимонад\n"\
					"2. Пиво\n"\
					"3. Вино\n"\
					"4. Шампанское\n"\
					"5. Водка\n"\
					"6. Коньяк\n"\
					"7. Виски\n"\
					"8. Абсент\n"\
					"{00CC66}9. Закуска\n"\
					"10. Сигара",
					0xFFFFFFCC,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					9.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.0, _, _, _, 8.0);
			}
			case BUSINESS_INTERIOR_REALTOR_BIZ:
			{
				g_business_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние бизнеса",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				//CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) - 1.0, 1.2, _, _, _, 10.0);

				CallLocalFunction("UpdateRealtorBizInfo", "");
			}
			case BUSINESS_INTERIOR_REALTOR_HOME:
			{
				g_house_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние недвижимости",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				CreatePickup(1273, 23, 158.4875, 745.8184, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);
				CreatePickup(1272, 23, 156.3270, 746.5958, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);

				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 0.7, _, _, _, 5.0);

				CallLocalFunction("UpdateRealtorHomeInfo", "");
			}
			case BUSINESS_INTERIOR_CLOTHING_SHOP:
			{
				CreatePickup(1275, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CLOTHING, idx);
			}
			case BUSINESS_INTERIOR_HOTEL:
			{
				CreatePickup(1277, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);

				CreateDynamic3DTextLabel("Услуги\n{FFFFFF}гост. комплекса", 0x3399FFFF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.2, _, _, _, 20.0);
			}
			case BUSINESS_INTERIOR_CAR_MARKET:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_MARK, idx);
				CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
			}
			case BUSINESS_INTERIOR_CELL_SALON:
			{
				CreateDynamic3DTextLabel
				(
					"Сотовый\n"\
					"салон\n"\
					"{FFCD00}Введите /buy",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_CELL_SALON, idx);
			}
			case BUSINESS_INTERIOR_CAR_TUNING:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_TUN, idx);
				CreateDynamic3DTextLabel("Обслуживание\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_LABEL_POS_X), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 5.0);
			}
			case BUSINESS_INTERIOR_COMP_CLUB:
			{
			    CreatePickup(1314, 23, 652.1079,-15.6575,1001.4328, -1, PICKUP_ACTION_TYPE_BIZ_PC_GAME, idx);
				CreatePickup(1581, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_PC_CLUB, idx);
			}
			case BUSINESS_INTERIOR_BUY_GUN:
			{
				CreateDynamic3DTextLabel
				(
					"Покупка\n"\
					"Оружия",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(353, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_GUN, idx);
			}
		}
		SetBusinessInteriorInfo(idx, BT_BUY_CHECK_ID, buffer[0]);
	}
	BusinesGPSListInit();

	printf("[Business]: Бизнесов загружено: %d", g_business_loaded);
}

public: UpdateBusinessLabel(businessid)
{
	new fmt_str[229 + 1];

	if(!IsBusinessOwned(businessid))
	{
	    if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_DET)
	    {
			format
			(
				fmt_str, sizeof fmt_str,
				"%s\n"\
				"{66CC00}Бизнес продается\n"\
				"Используйте /buybiz\n"\
				"Цена: %d руб\n"\
				"{FFFFFF}Чтобы заехать на тюнинг нажмите H",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_PRICE)
			);
		}
		else
		{
		    format
			(
				fmt_str, sizeof fmt_str,
				"%s\n"\
				"{66CC00}Бизнес продается\n"\
				"Используйте /buybiz\n"\
				"Цена: %d руб",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_PRICE)
			);
		}
	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Владелец: {0099FF}%s\n",
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_OWNER_NAME)
		);

		if(!GetBusinessData(businessid, B_LOCK_STATUS))
		{
			if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
			{
				format(fmt_str, sizeof fmt_str, "%s{66CC00}Вход: {FF9900}%d руб\n", fmt_str, GetBusinessData(businessid, B_ENTER_PRICE));
			}
			else strcat(fmt_str, "{66CC00}Вход свободный\n");
		}
		else strcat(fmt_str, "{FF6600}Закрыто\n");
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_DET)
		{
		    strcat(fmt_str, "{FFFFFF}Чтобы заехать на тюнинг нажмите H\n");
		}
	}
	UpdateDynamic3DTextLabelText(GetBusinessData(businessid, B_LABEL), 0xFFFF00FF, fmt_str);
}

public: UpdateRealtorBizInfo()
{
	new count = 0;
	new fmt_str[128];

	g_business_realtor_list = "";
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		g_business_realtor_list_idx[count ++] = idx;

		format(fmt_str, sizeof fmt_str, "%d\n", idx);
		strcat(g_business_realtor_list, fmt_str);
	}

	count = GetFreeBusinessCount();
	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние бизнеса\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено бизнесов: %d\n"\
		"{99FF33}Свободно бизнесов: %d",
		g_business_loaded - count,
		count
	);
	UpdateDynamic3DTextLabelText(g_business_realtor_label, 0xCCFF66FF, fmt_str);
}

public: SetRealtorMakePhoto(playerid, type, index)
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) == type)
	{
		new Float: angle;
		new Float: pos_x, Float: pos_y, Float: pos_z;
		new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;

		switch(type)
		{
			case REALTOR_TYPE_HOUSE:
			{
				new entranceid = GetHouseData(index, H_ENTRACE);
				if(entranceid != -1)
				{
					pos_x = GetEntranceData(entranceid, E_POS_X);
					pos_y = GetEntranceData(entranceid, E_POS_Y);
					pos_z = GetEntranceData(entranceid, E_POS_Z);

					exit_x = GetEntranceData(entranceid, E_EXIT_POS_X);
					exit_y = GetEntranceData(entranceid, E_EXIT_POS_Y);

					new fmt_str[32];
					format(fmt_str, sizeof fmt_str, "Номер подъезда: %d", entranceid + 1);
					SendClientMessage(playerid, 0x999999FF, fmt_str);
				}
				else
				{
					pos_x = GetHouseData(index, H_POS_X);
					pos_y = GetHouseData(index, H_POS_Y);
					pos_z = GetHouseData(index, H_POS_Z);

					exit_x = GetHouseData(index, H_EXIT_POS_X);
					exit_y = GetHouseData(index, H_EXIT_POS_Y);
				}
			}
			case REALTOR_TYPE_BIZ:
			{
				pos_x = GetBusinessData(index, B_POS_X);
				pos_y = GetBusinessData(index, B_POS_Y);
				pos_z = GetBusinessData(index, B_POS_Z);

				exit_x = GetBusinessData(index, B_EXIT_POS_X);
				exit_y = GetBusinessData(index, B_EXIT_POS_Y);
			}
		}
		angle = GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
		SetPlayerPos(playerid, pos_x, pos_y, pos_z);

		cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
		cam_y = pos_y + 15.0 * floatcos(angle, degrees);

		SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
		SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);

		HidePlayerWaitPanel(playerid);
		SetPlayerData(playerid, P_REALTOR_TYPE, type);
	}
}

public:	LoadFuelStations()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT fs.*, IFNULL(a.name, 'None') AS owner_name FROM fuel_stations fs LEFT JOIN accounts a ON a.id=fs.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_FUEL_STATIONS)
	{
		rows = MAX_FUEL_STATIONS;
		print("[FuelST]: DB rows > MAX_FUEL_STATIONS");
	}

	for(new idx; idx < rows; idx ++)
	{
		SetFuelStationData(idx, FS_SQL_ID,		cache_get_field_content_int(idx, "id"));
		SetFuelStationData(idx, FS_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_fuel_station[idx][FS_NAME], mysql, 20);

		SetFuelStationData(idx, FS_CITY, 			cache_get_field_content_int(idx, "city"));
		SetFuelStationData(idx, FS_ZONE, 			cache_get_field_content_int(idx, "zone"));
		SetFuelStationData(idx, FS_IMPROVEMENTS, 	cache_get_field_content_int(idx, "improvements"));
		SetFuelStationData(idx, FS_FUELS, 			cache_get_field_content_int(idx, "fuels"));
		SetFuelStationData(idx, FS_FUEL_PRICE,		cache_get_field_content_int(idx, "fuel_price"));
		SetFuelStationData(idx, FS_BUY_FUEL_PRICE,	cache_get_field_content_int(idx, "buy_fuel_price"));
		SetFuelStationData(idx, FS_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetFuelStationData(idx, FS_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));

		SetFuelStationData(idx, FS_PRICE,			cache_get_field_content_int(idx, "price"));
		SetFuelStationData(idx, FS_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));

		SetFuelStationData(idx, FS_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetFuelStationData(idx, FS_POS_X,			cache_get_field_content_float(idx, "x"));
		SetFuelStationData(idx, FS_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetFuelStationData(idx, FS_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetFuelStationData(idx, FS_EVICTION,		cache_get_field_content_int(idx, "eviction"));

		cache_get_field_content(idx, "owner_name", g_fuel_station[idx][FS_OWNER_NAME], mysql, 21);
		// -------------------------

		SetFuelStationData(idx, FS_LABEL, CreateDynamic3DTextLabel(GetFuelStationData(idx, FS_NAME), 0x3399FFFF, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z) + 0.5, 15.0));
		SetFuelStationData(idx, FS_AREA, CreateDynamicSphere(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 15.0));

		SetFuelStationData(idx, FS_ORDER_ID, -1);

		if(GetFuelStationData(idx, FS_CITY) == -1 || GetFuelStationData(idx, FS_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));
			buffer[1] = Get2DZone(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));

			SetFuelStationData(idx, FS_CITY, buffer[0]);
			SetFuelStationData(idx, FS_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(IsFuelStationOwned(idx) && !strcmp(GetFuelStationData(idx, FS_OWNER_NAME), "None", true))
		{
			SetFuelStationData(idx, FS_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET owner_id=0 WHERE id=%d", GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsFuelStationOwned(idx))
		{
			SetFuelStationData(idx, FS_FUELS, 1000);
			SetFuelStationData(idx, FS_FUEL_PRICE, 5);

			SetFuelStationData(idx, FS_LOCK_STATUS, false);
		}
		CallLocalFunction("UpdateFuelStationLabel", "i", idx);

		#if defined FUEL_ST_CREATED_PICKUP
			CreatePickup(1650, 23, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 0, PICKUP_ACTION_TYPE_FUEL_STATION, idx);
		#endif

		CreateDynamicMapIcon(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 47, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	}
	g_fuel_station_loaded = rows;
	cache_delete(result);

	printf("[FuelST]: Заправок загружено: %d", g_fuel_station_loaded);
}

public: UpdateFuelStationLabel(stationid)
{
	new fmt_str[128 + 1];

	if(!IsFuelStationOwned(stationid))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Цена за 10 литров: {FFCD00}%d руб\n\n"\
			"{CC9900}Заправка продается\n"\
			"Используйте /buyfuelst\n"\
			"Цена: %d руб",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 100,
			GetFuelStationData(stationid, FS_PRICE)
		);

	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Владелец: {66CC00}%s\n",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 100
		);

		if(GetFuelStationData(stationid, FS_LOCK_STATUS))
		{
			strcat(fmt_str, "{FF6600}Станция закрыта");
		}
		else format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Цена за 10 литров: {FFCD00}%d руб", fmt_str, GetFuelStationData(stationid, FS_FUEL_PRICE) * 100);
	}
	UpdateDynamic3DTextLabelText(GetFuelStationData(stationid, FS_LABEL), 0x3399FFFF, fmt_str);
}


public: OnGiveReferBonus(refer_id)
{
	new fmt_str[155];
	new playerid = GetPlayerIDBySqlID(refer_id);

	if(playerid != INVALID_PLAYER_ID)
	{
		GivePlayerMoneyEx(playerid, REFER_BONUS_MONEY, "Реферальная программа", true, false);

		format(fmt_str, sizeof fmt_str, "Поздравляем! Приглашенный Вами игрок достиг 5 уровня, Вы получаете %d рублей", REFER_BONUS_MONEY);
		SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	}
	else
	{
		format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", refer_id, "system", gettime(), REFER_BONUS_MONEY, "Реф. программа");
		mysql_query(mysql, fmt_str, false);

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=money+%d WHERE id=%d LIMIT 1", REFER_BONUS_MONEY, refer_id);
		mysql_query(mysql, fmt_str, false);

		if(mysql_errno() != 0)
			printf("[Referal System]: Произошла ошибка при выдаче бонуса реферу №%d", refer_id);
	}
}

public: SpeedBooster()
{
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!IsPlayerDriver(playerid)) continue;

		if(GetPVarInt(playerid, "supercar"))
		{
			new pedal_type = player_press_pedal[playerid];

			if(pedal_type != PEDAL_TYPE_NONE)
			{
				new vehicleid = GetPlayerVehicleID(playerid),
					Float: v_speed = GetVehicleSpeed(vehicleid);

				if(v_speed > 25.0 || v_speed < -25.0)
				{
					switch(pedal_type)
					{
						case PEDAL_TYPE_GAS:
						{
							v_speed += (0.1 * GetPVarInt(playerid, "supercar_multiplier"));
						}
						case PEDAL_TYPE_BRAKE:
						{
							v_speed -= 0.6;
						}
					}

					SetVehicleSpeed(vehicleid, v_speed);
				}
			}
		}
	}
}

public: OnSpeedTimerUp()
{
	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerSpeedTimer", "i", playerid);
	}
}

public: OnSecondTimer()
{
	new
		hour1, minute1, second1,
		year1, month1, day1;

	gettime(hour1, minute1, second1);
	getdate(year1, month1, day1);

	new fmt_str[50];

	format(fmt_str, sizeof fmt_str, "%02d.%02d.%d %d:%02d:%02d", year1, month1, day1, hour1, minute1, second1);
	TextDrawSetString(time_TD, fmt_str);
	#if defined _blackjack_included
		blackjack_Timer();
	#endif
	for(new i = 0; i != sizeof containers; i ++)
	{
		if(containers[i][C_TIME_COUNT] < -300) continue;

		new Float: x, Float: y, Float: z;

		GetPlayerPos(containers[i][C_LAST_BET], x, y, z);

		if(GetDistanceBetweenPoints(x, y, z, containers[i][CD_SECOND_POS_X], containers[i][CD_SECOND_POS_Y], containers[i][CD_SECOND_POS_Z]) > 28.0)
		{
		///	containers[i][C_LAST_BET] = -1;

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{D7DF01}Объединенные Арабские Эмираты\nВес: {FF8000}3500 кг (№%d)\n{ffffff}Содержимое: {4B8A08}Транспорт\n{ffffff}Cтоимость: {8A4B08}%d руб", i + 1, containers[i][C_PRICE_COUNT]);
			UpdateDynamic3DTextLabelText(container_label[i], -1, STRING_GLOBAL);
		}

		containers[i][C_TIME_COUNT] --;

		if(containers[i][C_TIME_COUNT] > 0)
		{
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"Контейнер {FFBF00}№%d\n{ffffff}До конца торгов осталось: {DBA901}%d {ffffff}сек\n\n{ffffff}Текущая стоимость: {e0591b}%d руб\n{ffffff}Предложил: {c99a32}%s\n\n{ffffff}Используйте {FFBF00}L.ALT {ffffff}чтобы оценить контейнер\nв свою пользу",
				i + 1,
				containers[i][C_TIME_COUNT],
				containers[i][C_PRICE_COUNT],
				GetPlayerNameEx(containers[i][C_LAST_BET])
			);

			UpdateDynamic3DTextLabelText(container_label_1[i], -1, STRING_GLOBAL);
		}

		if(containers[i][C_TIME_COUNT] == 0)
		{
			if(GetPlayerMoneyEx(containers[i][C_LAST_BET]) < containers[i][C_PRICE_COUNT])
			{
				SendClientMessage(containers[i][C_LAST_BET], -1, "У вас не хватает денег на покупку контейнера!");
				containers[i][C_LAST_BET] = -1;
				containers[i][CD_STATUS] = 0;
				containers[i][C_PRICE_COUNT] = def_cena_cont[i];

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{D7DF01}Объединенные Арабские Эмираты\n{DBA901}Вес: 3500 кг (№%d)\n{ffffff}Содержимое: {AEB404}Транспорт\n{ffffff}Cтоимость: {B18904}%d руб", i + 1, containers[i][C_PRICE_COUNT]);
				UpdateDynamic3DTextLabelText(container_label[i], -1, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Используйте {DBA901}L.ALT {ffffff}чтобы\nоткрыть торги за контейнер начальная\nстоимость которого составляет: {B18904}%d руб", containers[i][C_PRICE_COUNT]);
				UpdateDynamic3DTextLabelText(container_label_1[i], -1, STRING_GLOBAL);
			}
			else
			{
				DestroyDynamic3DTextLabel(container_label[i]);

				GivePlayerMoneyEx(containers[i][C_LAST_BET], -containers[i][C_PRICE_COUNT], "Покупка контейнера");

				format
				(
					STRING_GLOBAL, sizeof STRING_GLOBAL,
					"{747442}Контейнер был продан за {7B381E}%d руб.\n\n{FFFFFF}Вы владелец? Используйте {A7934C}L.ALT {FFFFFF}чтобы снять замок",
					containers[i][C_PRICE_COUNT]
				);

				UpdateDynamic3DTextLabelText(container_label_1[i], -1, STRING_GLOBAL);

				containers[i][CD_STATUS] = 2;
				new win_car_type = random(101);
				if(win_car_type == 34)
				{
					container_car[i] = 15104;
				}
				else
				{
					new random_model = random(sizeof car_market_data[]);
					container_car[i] = car_market_data[1][random_model][0];
					//container_car[i] = 402;
				}
				veh_cont[i] = CreateVehicle
				(
					container_car[i],
					container_spawn_vehicle[i][CSV_POS_X],
					container_spawn_vehicle[i][CSV_POS_Y],
					container_spawn_vehicle[i][CSV_POS_Z],
					container_spawn_vehicle[i][CSV_POS_A],
					1,
					1,
					-1,
					0,
					VEHICLE_ACTION_TYPE_ADMIN_CAR,
					0
				);

				containers[i][C_PRICE_COUNT] = def_cena_cont[i];
			}
		}

		else if(containers[i][C_TIME_COUNT] == -300)
		{
			if(containers[i][CD_STATUS] > 1)
			{
				DestroyDynamicObject(container[i]);
				DestroyVehicle(veh_cont[i]);

				DestroyDynamic3DTextLabel(container_label[i]);
				DestroyDynamic3DTextLabel(container_label_1[i]);

				DestroyDynamicObject(container_door[i]);
				DestroyDynamicObject(container_second_door[i]);
				DestroyDynamicObject(container_block[i]);

				containers[i][C_LAST_BET] = -1;
				containers[i][CD_STATUS] = 1;
				containers[i][C_PRICE_COUNT] = def_cena_cont[i];
			}
		}
	}

	for(new i = 0; i != sizeof svalka; i ++)
	{
		if(svalka[i][S_TIME_COUNT] < 0) continue;
		svalka[i][S_TIME_COUNT] --;

		if(svalka[i][S_TIME_COUNT] > 0)
		{
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"{ffffff}Аукцион за автомобиль {FFBF00}№%d\n{ffffff}Аукцион закончится через: {DBA901}%d {ffffff}секунд\n\n{ffffff}Текущая стоимость: {B18904}%d руб\n{ffffff}Предложил: {c99a32}%s\n\n{ffffff}Используйте {FFBF00}L.ALT {ffffff}чтобы оценить авто",
				i + 1,
				svalka[i][S_TIME_COUNT],
				svalka[i][S_PRICE_COUNT],
				GetPlayerNameEx(svalka[i][S_LAST_BET])
			);

			UpdateDynamic3DTextLabelText(svalka_label[i], -1, STRING_GLOBAL);
		}

		if(svalka[i][S_TIME_COUNT] == 0)
		{
			GivePlayerMoneyEx(svalka[i][S_LAST_BET], -svalka[i][S_PRICE_COUNT], "Покупка кара на свалке");

			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"{ffffff}Торги за транспорт закончены.\nТранспорт забрали с аукциона за {B18904}%d {ffffff}руб.\n\n{ffffff}Если вы владелец используйте {FFBF00}L.ALT\n{ffffff}чтобы выбрать что делать с автомобилем",
				svalka[i][S_PRICE_COUNT]
			);

			UpdateDynamic3DTextLabelText(svalka_label[i], -1, STRING_GLOBAL);

			svalka[i][SV_STATUS] = 2;

			svalka[i][S_PRICE_COUNT] = 1700000;
		}
	}

	new minute;
	gettime(_, minute);

	new time = gettime();
	unix = gettime(tmphour, tmpminute, tmpsecond);//узнаём время.
	if(!minute)
	{
		if(GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_MINUTES) >= 1)
		{
			OnMinuteTimer(bool: GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_DAYS));
		}
	}

	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerTimer", "i", playerid); // OnPlayerSpeedTimer
	}

	for(new carriageid; carriageid < sizeof miner_carriage; carriageid ++)
		MinerCarriageUpdate(carriageid);

	FermerRepositoryUpdate();

	if(g_capture[C_STATUS] && g_capture[C_TIME] > 0)
	{
		-- g_capture[C_TIME];

		UpdateCaptureTextDraw();

		if(g_capture[C_TIME] == 0)
			EndCapture();
	}
	for(new i; i < sizeof(WheatPos); i ++)
	{
	    if(wheat_time[i] > 1)
	    {
	        -- wheat_time[i];

			new year, month, day, hour, second;

            timestamp_to_date(wheat_time[i], year, month, day, hour, minute, second);

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d мин %d сек", minute, second);

	        new text[55];
	        format(text, sizeof text, "Марихуана\n{"#FF4500"}В процессе роста: {79cb64}%s", STRING_GLOBAL);
	        UpdateDynamic3DTextLabelText(wheat_label[i], 0x79cb64FF, text);
	    }
	    if(wheat_time[i] == 1)
	    {
	        WheatPos[i][wheat_state] = 1;

	        new text[144];
	        format(text, sizeof text, "Марихуана \n{"#FF4500"}Сорвать: л. ALT", WheatPos[i][wheat_value]);
	        UpdateDynamic3DTextLabelText(wheat_label[i], 0x79cb64FF, text);

         	MoveObject(wheat_id[i], WheatPos[i][wheat_x], WheatPos[i][wheat_y], WheatPos[i][wheat_z], 2.0);
          	WheatPos[i][wheat_state] = 1;
	    }
	    if(WheatPos[i][wheat_value] <= 0)
	    {
	        MoveObject(wheat_id[i], WheatPos[i][wheat_x], WheatPos[i][wheat_y], WheatPos[i][wheat_z] - 0.5, 2.0);

	        wheat_time[i] = 10 * 60;
	        WheatPos[i][wheat_value] = 1;
	        WheatPos[i][wheat_state] = 0;
	    }
	}
	UpdateReporterText();
}

public: OnMinuteTimer(bool: new_day)
{
	new time;
	new hour, minute, second;

	time = gettime();
	gettime(hour, minute, second);

	if(random(25) == 3)
	{

        foreach(new playerid:Player)
        {
            if(!IsPlayerConnected(playerid) || GetPVarInt(playerid, "LoginPlayer") == 1) continue;
		    new fmt_text[300];
      		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_text, true);
			new rows = cache_num_rows();
			if(rows < 10)
			{
				cars_slot[playerid] = rows;
			}
		}
	}

	switch(minute)
	{
		case 0:
		{
			if(GetElapsedTime(time, g_last_pay_day_time) >= 1)
			{
				OnPayDay();
			}
		}
		case 2:
		{
			if(GetElapsedTime(time, g_last_lottery_time) >= 1)
			{
				OnLottery();
			}
		}
	}

	if(new_day)
	{
		SetTimer("ClearBanList", 15_000, false);
	}

	SetWorldTime(hour);
	OnPlayersWorldTimeInit(hour, minute);

	g_last_m_timer_time = time;
}

public: OnPlayersWorldTimeInit(hour, minute)
{
	foreach(new playerid : Player)
	{
		SetPlayerTime(playerid, hour, minute);
	}
}

public: OnLottery()
{
	new fmt_str[85];
	new buffer[4];

	new lottery_str[4];
	new lottery_number;
	new buy_tickets_count;
	new hour, count;

	gettime(hour);
	lottery_number = random(900) + 100;

	valstr(lottery_str, lottery_number);
	buy_tickets_count = LotteryBuyTicketCount();

	static const
		lottery_pay[3] = {2000, 15_000, 50_000};

	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_LOTTERY))
			{
				format(fmt_str, sizeof fmt_str, "Сейчас %d:02! Начинаем лотерейный розыгрыш. Ваше счастливое число: %d", hour, GetPlayerData(playerid, P_LOTTERY));
				SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

				format(fmt_str, sizeof fmt_str, "За этот час было куплено %d билетов. Счастливое число этого часа: {FF9900}%d", buy_tickets_count, lottery_number);
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);

				valfmt(buffer, GetPlayerData(playerid, P_LOTTERY));

				for(count = 0; count < 3; count ++)
					if(lottery_str[count] != buffer[count]) break;

				switch(count)
				{
					case 0:
					{
						SendClientMessage(playerid, 0xFFFFFFFF, "К сожалению в вашем билете не совпала первая цифра");
						SendClientMessage(playerid, 0xFFFFFFFF, "Не расстраивайтесь. В следующий раз Вам обязательно повезёт");
					}
					case 1..3:
					{
						GivePlayerMoneyEx(playerid, lottery_pay[count-1], "Выигрыш в лотереи", true, true);

						format(fmt_str, sizeof fmt_str, "В вашем билете совпали %d цифры! Выигрыш: %d рублей", count, lottery_pay[count-1]);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
					}
				}
				SetPlayerData(playerid, P_LOTTERY, 0);
			}
		}
	}
	g_last_lottery_time = gettime();
}

public: OnPayDay()
{
	new fmt_str[144];
	new level, cur_time;
	new hour, minute, second;

	cur_time = gettime();
	gettime(hour, minute, second);

	SetWorldTime(hour);

	format(fmt_str, sizeof fmt_str, "Текущее время: {3399FF}%02d:00", hour);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "   БАНКОВСКИЙ ЧЕК");
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			SendClientMessage(playerid, 0xFFFFFFFF, " ");

			level = GetPlayerLevel(playerid);
			if(!IsPlayerAFK(playerid) || GetPlayerAFKTime(playerid) < 60)
			{
				if(ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES) >= 1)
				{
					if(GetPlayerTeamEx(playerid))
					{
						new team_wage;

						if(GetPlayerTeamEx(playerid) < TEAM_OPG_ARZAMASKAYA)
						{
							new team_id = GetPlayerTeamEx(playerid),
								rank = GetPlayerJob(playerid);

							team_wage = rank_wages[ team_id - 1 ][ rank - 1 ];
						}
						else
						{
							new gang_id = GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA;

							team_wage = GetGangZonesCount(gang_id + 1) * 70 + 1000;
						}

						AddPlayerData(playerid, P_WAGE, +, team_wage);
					}

					AddPlayerData(playerid, P_BANK, +, GetPlayerData(playerid, P_WAGE));

					BankLog(playerid, GetPlayerData(playerid, P_WAGE), "Зарплата");

					format(fmt_str, sizeof fmt_str, "Зарплата: {66CC00}%d руб", GetPlayerData(playerid, P_WAGE));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Текущий баланс счета: {%s}%d руб", GetPlayerBankMoney(playerid) > 0 ? ("00CC00") : ("FF3300"), GetPlayerBankMoney(playerid));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					SetPlayerData(playerid, P_WAGE, 0);
					AddPlayerData(playerid, P_EXP, +, 1 * g_doubling[DOUBLING_EXP]);
					UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));

					//if(!IsPlayerAfk(i))
					//{
					if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
					{
						SetPlayerData(playerid, P_EXP, 0);
						new lvl = GetPlayerData(playerid, P_LEVEL);
						new lvls = lvl += 1;
						SetPlayerData(playerid, P_LEVEL, lvls);

						SetPlayerLevelInit(playerid);
						UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
						GivePlayerMoneyEx(playerid, 1000000, "Повышение уровня +1.000.000", true, true);
					}
					//}
	                //SendClientMessage(playerid, -1, "");
					//SendClientMessage(playerid, 0xCECECEFF, "Вы получили бесплатную прокрутку в рулетке. Используйте: {FF9900}/roulette");
				}
				else SendClientMessage(playerid, 0xFFBB00FF, "Для получения зарплаты необходимо находиться в игре минимум 1 минуту");
			}
			else SendClientMessage(playerid, 0xFFBB00FF, "Вы не должны находиться на паузе для получения зарплаты");

			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			if(GetPlayerLevel(playerid) > level)
			{
				SendClientMessage(playerid, 0x3399FFFF, "Поздравляем! Ваш уровень повышен");
				switch(GetPlayerLevel(playerid))
				{
					case 2:
					{
						SendClientMessage(playerid, 0x66CC00FF, "Вы начали второй год своей жизни в нашей стране");
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа водителя автобуса");
					}
					case 5:
					{
						CallLocalFunction("OnGiveReferBonus", "i", GetPlayerData(playerid, P_REFER));
					}
				}
			}
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET level=%d,exp=%d,bank=%d,wage=0,last_login=%d,game_for_hour=0 WHERE id=%d LIMIT 1", GetPlayerLevel(playerid), GetPlayerExp(playerid), GetPlayerBankMoney(playerid), cur_time, GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);

			if(mysql_errno() != 0)
				SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения аккаунта {FF0000}(equ-code 100)");

			new rows,
				Cache: result;

			mysql_format(mysql, fmt_str, sizeof fmt_str, "SELECT id, paydays, code FROM promocode_activations WHERE uid=%d AND paydays > 0", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);

			rows = cache_num_rows();

			if(rows)
			{
				for(new idx; idx < rows; idx ++)
				{
					new id = cache_get_row_int(idx, 0),
						paydays = cache_get_row_int(idx, 1),
						code[32];

					cache_get_row(idx, 2, code);

					mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE promocode_activations SET paydays='%d' WHERE id='%d'", paydays - 1, id);
					mysql_query(mysql, fmt_str, false);

					if(paydays == 1)
					{
						new Cache: p_cache;

						mysql_format(mysql, fmt_str, sizeof fmt_str, "SELECT type, amount FROM promocode WHERE code='%s'", code);
						p_cache = mysql_query(mysql, fmt_str, true);

						new type = cache_get_row_int(0, 0),
							amount = cache_get_row_int(0, 1);

						cache_delete(p_cache);

						AddPlayerData(playerid, promo_info[type][P_DATA], +, amount);
						UpdatePlayerDatabaseInt(playerid, promo_info[type][P_SQL_NAME], GetPlayerData(playerid, promo_info[type][P_DATA]));

						SendClientMessage(playerid, -1, "");

						format(fmt_str, sizeof fmt_str, "Получен приз за промокод \"%s\"", code);
						SendClientMessage(playerid, 0x66CC33FF, fmt_str);
					}
				}
			}

			cache_delete(result);
		}
		SetPlayerData(playerid, P_GAME_FOR_HOUR, 0);
	}

	//SellDebtorsProperty();

	if(hour == 18)
	{
		SellDebtorsProperty();
		SendMessageToAdmins("[A] На сервере прошёл слёт имущества должноков!", 0x999999FF);
	}
	if(hour == 5) SellDebtorsHotels();


	#if defined RAND_WEATHER
	SetTimer("SetRandomWeather", (random(60) + 60) * 1000, false);
	#endif

	CallLocalFunction("UpdateRealtorHomeInfo", "");
	CallLocalFunction("UpdateRealtorBizInfo", "");

	g_last_pay_day_time = cur_time;
	return 1;
}

public: OnPlayerSpeedTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		if(IsPlayerDriver(playerid))
		{
			new fmt_str[128];
			new speed = SpeedVehicle(playerid);
			//new Float: health;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL),
					Float: health;

				GetVehicleHealth(vehicleid, health);

				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 7200.0));

				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);
					}
					else SetVehicleData(vehicleid, V_FUEL, fuels - 0.004);
				}

				format(fmt_str, sizeof fmt_str, "%d", speed);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][0], fmt_str);

				format(fmt_str, sizeof fmt_str, "%d%", floatround(fuels));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][9], fmt_str);

				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_OFF)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][5]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xFFFFFFFF);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][5]);
				}
				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][5]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xdededeFF);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][5]);
				}
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][6]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 0xdededeFF);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][6]);
				}
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_OFF)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][6]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 0xFFFFFFFF);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][6]);
				}
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][7]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], 0xdededeFF);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][7]);
				}
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_OFF)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][7]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], 0xFFFFFFFF);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][7]);
				}
				format(fmt_str, sizeof fmt_str, "%d", floatround(GetVehicleData(vehicleid, V_MILEAGE)));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][1], fmt_str);

				CheckRadars(playerid);
			}
		}
	}
	return 1;
}

public: OnPlayerTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		new fmt_str[128];
		new speed = GetPlayerSpeed(playerid);

		if(GetPVarInt(playerid, "ostanovka_start") == 1)
		{
			STRING_GLOBAL[0] = EOS;

			new year, month, day, hour, minute, second;

            timestamp_to_date(player_avtobus_timer[playerid], year, month, day, hour, minute, second);

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d:%02d", minute, second);
			PlayerTextDrawSetString(playerid, timer_PTD[playerid][0], STRING_GLOBAL);

			PlayerTextDrawShow(playerid, timer_PTD[playerid][0]);
			PlayerTextDrawShow(playerid, timer_PTD[playerid][1]);
			PlayerTextDrawShow(playerid, timer_PTD[playerid][2]);

			if(player_avtobus_timer[playerid] > 0)
				player_avtobus_timer[playerid] --;

			if(player_avtobus_timer[playerid] <= 0)
			{
				DeletePVar(playerid, "ostanovka_start");

				PlayerTextDrawHide(playerid, timer_PTD[playerid][0]);

				HidePlayerTimerPanel(playerid);
				//SendClientMessage(playerid, -1, "Приготовьтесь мне уже подъезжаем к вашей станции");
			}
		}

		AddPlayerData(playerid, P_AFK_TIME, +, 1);
		if(IsPlayerAFK(playerid))
		{
			new afk_minutes = ConvertUnixTime(GetPlayerAFKTime(playerid), CONVERT_TIME_TO_MINUTES);
			new afk_seconds = ConvertUnixTime(GetPlayerAFKTime(playerid));

			if(afk_minutes > 0)
			{
				format(fmt_str, sizeof fmt_str, "На паузе %d:%02d", afk_minutes, afk_seconds);
			}
			else format(fmt_str, sizeof fmt_str, "На паузе %d сек.", afk_seconds);

			SetPlayerChatBubble(playerid, fmt_str, 0xFF0000FF, 7.0, 1500);

			if(afk_minutes >= MAX_AFK_TIME && GetPlayerAdminEx(playerid) < 5)
				Kick:(playerid, "Превышено максимально допустимое время паузы");
		}
		else
		{
			AddPlayerData(playerid, P_GAME_FOR_HOUR, +, 1);
			AddPlayerData(playerid, P_GAME_FOR_DAY, +, 1);
  		}
   	    if(GetPlayerData(playerid, P_RMUTE) > 0)
		{
			AddPlayerData(playerid, P_RMUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "rmute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_RMUTE) <= 0)
				SendClientMessage(playerid, 0xCECECEFF, "Срок действия блокировки репорта закончился");
		}
		if(GetPlayerData(playerid, P_MUTE) > 0)
		{
			AddPlayerData(playerid, P_MUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "mute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_MUTE) <= 0)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Срок действия бана чата закончился");
				SvMutePlayerDisable(playerid);
			}
		}
 	    if(GetPlayerData(playerid, P_JAIL) > 0)
		{
			AddPlayerData(playerid, P_JAIL, -, 1);
			UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));
			if(GetPlayerData(playerid, P_JAIL) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился"),
				UnjailPlayer(playerid);
		}
		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			AddPlayerData(playerid, P_MASK, -, 1);
			if(GetPlayerData(playerid, P_MASK) <= 2)
			{
				GameTextForPlayer(playerid, "~y~invisible off", 2500, 4);

				SetPlayerColorInit(playerid);
				SetPlayerData(playerid, P_MASK, 0);
			}
		}
	    if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPlayerGPSInfo(playerid, G_POS_X), GetPlayerGPSInfo(playerid, G_POS_Y), GetPlayerGPSInfo(playerid, G_POS_Z)))
			{
				DisablePlayerGPS(playerid);
			}
		}
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
  		if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);

				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");

				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
		    if(!g_player[playerid][P_DISEASE][0] && !g_player[playerid][P_DISEASE][1]) return 0;

			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);

				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");

				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}
		if(GetPlayerTeamEx(playerid) == TEAM_RADIO)
	  	TextDrawShowForPlayer(playerid, radio_edit_TD);
		else
			TextDrawHideForPlayer(playerid, radio_edit_TD);

		/*if(IsPlayerDriver(playerid))
		{
			//new Float: health;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL),
					Float: health;

				GetVehicleHealth(vehicleid, health);

				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 3600.0));

				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);
					}
					else SetVehicleData(vehicleid, V_FUEL, fuels - 0.05);
				}

				format(fmt_str, sizeof fmt_str, "%d", speed);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][0], fmt_str);

				format(fmt_str, sizeof fmt_str, "%d%", floatround(fuels));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][9], fmt_str);

				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_OFF)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][5]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xFFFFFFAA);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][5]);
				}
				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][5]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xFFFFFFAA);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][5]);
				}
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][6]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 0xFFFFFFAA);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][6]);
				}
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_OFF)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][6]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 0xFFFFFFAA);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][6]);
				}
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][7]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], 0xFFFFFFAA);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][7]);
				}
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_OFF)
				{
				    PlayerTextDrawHide(playerid, speedometr_PTD[playerid][8]);
				    PlayerTextDrawColor(playerid, speedometr_PTD[playerid][8], 0xFFFFFFAA);
				    PlayerTextDrawShow(playerid, speedometr_PTD[playerid][8]);
				}
				format(fmt_str, sizeof fmt_str, "%d", floatround(GetVehicleData(vehicleid, V_MILEAGE)));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][1], fmt_str);

				CheckRadars(playerid);
			}
		}*/
		if(IsPlayerPassenger(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new driver = GetVehicleData(vehicleid, V_DRIVER_ID);

			if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
			{
				if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
				{
					if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
					{
						g_taxi_mileage[playerid] += (float(speed) / 3600.0);
						if(g_taxi_mileage[playerid] > 0.1)
						{
							g_taxi_mileage[playerid] = 0.0;

							new tariff = GetPlayerData(driver, P_JOB_TARIFF);
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								GivePlayerMoneyEx(driver, tariff, "- Оплата тарифа такси", false, true);
								GivePlayerMoneyEx(playerid, -tariff, "+ Оплата тарифа такси", false, true);

								AddPlayerData(playerid, P_JOB_WAGE, +, tariff);

								format(fmt_str, sizeof fmt_str, "~r~-%d rub~n~~b~+100 m", tariff);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								format(fmt_str, sizeof fmt_str, "~g~+%d rub~n~~b~+100 m", tariff);
								GameTextForPlayer(driver, fmt_str, 4000, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для дальнейшей оплаты тарифа");
							}
						}
					}
				}
			}
		}

		if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		{
			CheckPlayerTempJobState(playerid);
		}

		if(GetPVarInt(playerid, "player_in_ammo_cp"))
		{
			new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT),
				rand_ammo = random(6)+1,
				soldiers_count;

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				else if(GetPlayerTeamEx(i) != TEAM_ARMY) continue;

				soldiers_count++;
			}

			if(soldiers_count < 2 && GetPlayerTeamEx(playerid) != TEAM_ARMY)
				SendClientMessage(playerid, 0x999999FF, "Чтобы воровать патроны со склада, должно быть хотя бы 2 военнослужащих в сети");

			else
			{
				if(army_ammo == 0)
					GameTextForPlayer(playerid, "~g~loading...", 1100, 6);
				else
				{
					if(!IsPlayerAFK(playerid))
					{
						if((army_ammo - rand_ammo) < 0)
							rand_ammo = 200000 - army_ammo;

						if((GetPlayerData(playerid, P_AMMO) + rand_ammo) > 450)
							SendClientMessage(playerid, 0x66CC33FF, "Взять больше патронов не получается");
						else
						{
							AddPlayerData(playerid, P_AMMO, +, rand_ammo);
							UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

							SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo - rand_ammo);

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "~g~+%d patr.~n~~b~total %d patr.", rand_ammo, GetPlayerData(playerid, P_AMMO));
							GameTextForPlayer(playerid, fmt_text, 1100, 6);

							format(fmt_text, sizeof fmt_text, "+%d шт.", rand_ammo);
							SetPlayerChatBubble(playerid, fmt_text, 0xFFCD00FF, 10.0, 1100);

							UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_AUTH_TIME) >= 0)
		{
			if(GetPlayerData(playerid, P_AUTH_TIME) >= MAX_AUTHORIZATION_TIME)
			{
				HidePlayerDialog(playerid);

				SendClientMessage(playerid, 0xFF6600FF, "Время на авторизацию ограничено");
				Kick:(playerid);
			}
			else AddPlayerData(playerid, P_AUTH_TIME, +, 1);
		}
	}
	return 1;
}

public: CheckPlayerAccount(playerid, race)
{
	if(race == mysql_race[playerid])
	{
		new query[75];
		new Cache: result, is_account_exist;

		SendClientMessage(playerid, 0x3399FFFF, "Добро пожаловать на "SERVER_NAME" RolePlay!");
		//SetPlayerPos(playerid, 1690.419189, -1950.881835, 13.5666);
		//TogglePlayerControllable(playerid, false);

		SetPlayerCameraPos(playerid, AUTH_CAMERA_POS);
		SetPlayerCameraLookAt(playerid, AUTH_CAMERA_LOOK);

		mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", GetPlayerNameEx(playerid));
		result = mysql_query(mysql, query);

		if(!mysql_errno())
		{
			is_account_exist = bool: cache_num_rows();
			SetPlayerData(playerid, P_ACCOUNT_STATE, is_account_exist + 1);

			if(is_account_exist)
			{
			    SetPVarInt(playerid, "LoginPlayer", 1);
				SetPlayerData(playerid, P_ACCOUNT_ID, cache_get_field_content_int(0, "id"));

				cache_get_field_content(0, "password", g_player[playerid][P_PASSWORD], mysql, 16);
				cache_get_field_content(0, "last_ip", g_player[playerid][P_LAST_IP], mysql, 16);

				cache_get_field_content(0, "setting_phone", g_player[playerid][P_SETTING_PHONE], mysql, 13);
				cache_get_field_content(0, "setting_pin_code", g_player[playerid][P_SETTING_PIN], mysql, 5);

				SetPlayerData(playerid, P_REQUEST_PHONE, cache_get_field_content_int(0, "request_phone"));
				SetPlayerData(playerid, P_REQUEST_PIN, cache_get_field_content_int(0, "request_pin"));

				SetPlayerData(playerid, P_AUTH_TIME, 0);
				ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
			}
			else ShowPlayerReg(playerid);//ShowPlayerRegDialog(playerid, REGISTER_STATE_PASSWORD);
		}
		else
		{
			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF9900}Критическая ошибка",
				"{FFFFFF}Невозможно подключиться к серверу из-за сбоя системных настроек\n"\
				"Если Вы не умеете устанавливать моды - обратитесь к Аллаху \n",
				"Выход", ""
			);
			Kick:(playerid, "Ошибка соединения. Введите /q (/quit) чтобы выйти", 3000);
		}
		cache_delete(result);
	}
}

public: FixedKick(playerid)
{
	Kick(playerid);
}

public: LoadPlayerData(playerid)
{
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		new
			buffer = 0,
			time = gettime();

		cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61); //P_WIFE_NAME
		SetPlayerData(playerid, P_CONFIRM_EMAIL, bool: cache_get_field_content_int(0, "confirm_email"));

		SetPlayerData(playerid, P_LEVEL, 	cache_get_field_content_int(0, "level"));
		SetPlayerData(playerid, P_EXP, 		cache_get_field_content_int(0, "exp"));

		SetPlayerData(playerid, P_REFER, 	cache_get_field_content_int(0, "refer"));
		SetPlayerData(playerid, P_SEX, 		bool: cache_get_field_content_int(0, "sex"));
		SetPlayerData(playerid, P_SKIN, 	cache_get_field_content_int(0, "skin"));
		SetPlayerData(playerid, P_MONEY, 	cache_get_field_content_int(0, "money"));
		SetPlayerData(playerid, P_BANK, 	cache_get_field_content_int(0, "bank"));
		SetPlayerData(playerid, P_ADMIN, 	cache_get_field_content_int(0, "admin"));
		SetPlayerData(playerid, P_PRIKOL, 	cache_get_field_content_int(0, "prikol"));
		SetPlayerData(playerid, P_ANTIBAN, 	cache_get_field_content_int(0, "antiban"));
		SetPlayerData(playerid, P_FULL, 	cache_get_field_content_int(0, "full"));
		SetPlayerData(playerid, P_MIND,     cache_get_field_content_int(0, "mind"));
		SetPlayerData(playerid, P_GIVEFULL, cache_get_field_content_int(0, "givefull"));
		SetPlayerData(playerid, P_PREM, 	cache_get_field_content_int(0, "prem"));

		SetPlayerData(playerid, P_DRIVING_LIC, 	cache_get_field_content_int(0, "driving_lic"));
		SetPlayerData(playerid, P_WEAPON_LIC, 	cache_get_field_content_int(0, "weapon_lic"));

		SetPlayerData(playerid, P_SUSPECT, 		cache_get_field_content_int(0, "suspect"));
		SetPlayerData(playerid, P_PHONE, 		cache_get_field_content_int(0, "phone"));
		SetPlayerData(playerid, P_PHONE_BALANCE,cache_get_field_content_int(0, "phone_balance"));
		SetPlayerData(playerid, P_PHONE_COLOR,	cache_get_field_content_int(0, "phone_color"));
		g_player[playerid][P_DISEASE][0] = cache_get_field_content_int(0, "disease_0");
		g_player[playerid][P_DISEASE][1] = cache_get_field_content_int(0, "disease_1");
		//рыбалка
		SetPlayerData(playerid, P_YDKA, 	cache_get_field_content_int(0, "ydka"));

		SetPlayerData(playerid, P_LAW_ABIDING,	cache_get_field_content_int(0, "law_abiding"));
		SetPlayerData(playerid, P_IMPROVEMENTS, cache_get_field_content_int(0, "improvements"));
		SetPlayerData(playerid, P_POWER, 		cache_get_field_content_int(0, "power"));

		SetPlayerData(playerid, P_DRUGS, 		cache_get_field_content_int(0, "drugs"));
		SetPlayerData(playerid, P_AMMO, 		cache_get_field_content_int(0, "ammo"));
		SetPlayerData(playerid, P_METALL, 		cache_get_field_content_int(0, "metall"));
		SetPlayerData(playerid, P_WIFE, 		cache_get_field_content_int(0, "wife"));
		SetPlayerData(playerid, P_TEAM, 		cache_get_field_content_int(0, "team"));
		SetPlayerData(playerid, P_SUBDIVISON,	cache_get_field_content_int(0, "subdivison"));

		cache_get_field_content(0, "brak", g_player[playerid][P_WIFE_NAME], mysql, 61);

		SetPlayerData(playerid, P_WAGE,			cache_get_field_content_int(0, "wage"));
		SetPlayerData(playerid, P_JOB, 			cache_get_field_content_int(0, "job"));

		SetPlayerData(playerid, P_HOUSE_TYPE,	cache_get_field_content_int(0, "house_type"));
		SetPlayerData(playerid, P_HOUSE_ROOM,	cache_get_field_content_int(0, "house_room"));
		SetPlayerData(playerid, P_HOUSE, 		cache_get_field_content_int(0, "house"));
		SetPlayerData(playerid, P_BUSINESS,		cache_get_field_content_int(0, "business"));
		SetPlayerData(playerid, P_BUSINESS_2,		cache_get_field_content_int(0, "business_2"));
		SetPlayerData(playerid, P_FUEL_ST,		cache_get_field_content_int(0, "fuel_st"));
		SetPlayerData(playerid, P_CASEKEY,		cache_get_field_content_int(0, "casekey"));

		SetPlayerData(playerid, P_REG_TIME, 	cache_get_field_content_int(0, "reg_time"));
		cache_get_field_content(0, "reg_ip", g_player[playerid][P_REG_IP], mysql, 16);

		buffer = SetPlayerData(playerid, P_LAST_LOGIN_TIME,	cache_get_field_content_int(0, "last_login"));
		if(GetElapsedTime(time, buffer) < 1)
		{
			if(GetElapsedTime(time, g_last_pay_day_time) < 1)
				SetPlayerData(playerid, P_GAME_FOR_HOUR,	cache_get_field_content_int(0, "game_for_hour"));
		}
		SetPlayerData(playerid, P_GAME_FOR_DAY,			cache_get_field_content_int(0, "game_for_day"));
		SetPlayerData(playerid, P_GAME_FOR_DAY_PREV,	cache_get_field_content_int(0, "game_for_day_prev"));

		buffer = GetElapsedTime(time, buffer, CONVERT_TIME_TO_DAYS);
		if(buffer == 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, GetPlayerData(playerid, P_GAME_FOR_DAY));
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
		}
		else if(buffer > 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, 0);
		}
		
		if(GetPlayerAdminEx(playerid) > 0)
		{
			//TextDrawShowForPlayer(playerid, adm_menu_TD[0]);
			//TextDrawShowForPlayer(playerid, adm_menu_TD[1]);
			//TextDrawShowForPlayer(playerid, adm_menu_TD[2]);

			TextDrawShowForPlayer(playerid, time_TD);
		}

		SetPlayerSettingData(playerid, S_CHAT_TYPE, 	cache_get_field_content_int(0, "setting1"));
		SetPlayerSettingData(playerid, S_TEAM_CHAT, 	cache_get_field_content_int(0, "setting2"));
		SetPlayerSettingData(playerid, S_NICK_IN_CHAT, 	cache_get_field_content_int(0, "setting4"));
		SetPlayerSettingData(playerid, S_ID_IN_CHAT, 	cache_get_field_content_int(0, "setting5"));
		SetPlayerSettingData(playerid, S_VEH_CONTROL, 	cache_get_field_content_int(0, "setting6"));

		SetPlayerData(playerid, P_WARN, 				cache_get_field_content_int(0, "warn"));
		SetPlayerData(playerid, P_WARN_TIME,			cache_get_field_content_int(0, "warn_time"));
		SetPlayerData(playerid, P_MUTE, 				cache_get_field_content_int(0, "mute"));
		SetPlayerData(playerid, P_RMUTE, 				cache_get_field_content_int(0, "rmute"));

		SetPlayerData(playerid, P_SKILL_COLT, 			cache_get_field_content_int(0, "skill_colt"));
		SetPlayerData(playerid, P_SKILL_SDPISTOL,		cache_get_field_content_int(0, "skill_sdpistol"));
		SetPlayerData(playerid, P_SKILL_DEAGLE, 		cache_get_field_content_int(0, "skill_deagle"));
		SetPlayerData(playerid, P_SKILL_SHOTGUN, 		cache_get_field_content_int(0, "skill_shotgun"));
		SetPlayerData(playerid, P_SKILL_MP5, 			cache_get_field_content_int(0, "skill_mp5"));
		SetPlayerData(playerid, P_SKILL_AK47, 			cache_get_field_content_int(0, "skill_ak47"));
		SetPlayerData(playerid, P_SKILL_M4, 			cache_get_field_content_int(0, "skill_m4"));
		SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 	cache_get_field_content_int(0, "skill_sniper_rifle"));
		SetPlayerData(playerid, P_SKILL_SAWNOFF, 		cache_get_field_content_int(0, "skill_sawnoff"));
		SetPlayerData(playerid, P_SKILL_COMBAT_SG, 		cache_get_field_content_int(0, "skill_combat_sg"));
		SetPlayerData(playerid, P_SKILL_MICRO_UZI, 		cache_get_field_content_int(0, "skill_micro_uzi"));

		SetPlayerData(playerid, P_DONATE_CURRENT, 		cache_get_field_content_int(0, "donate_current"));
		SetPlayerData(playerid, P_DONATE_TOTAL, 		cache_get_field_content_int(0, "donate_total"));

		SetPlayerData(playerid, P_OSKIN,		 		cache_get_field_content_int(0, "org_skin"));

		SetPlayerData(playerid, P_SPAWN,		 		cache_get_field_content_int(0, "setting_spawn"));

		SetPlayerData(playerid, P_HOSPITAL,				bool: cache_get_field_content_int(0, "hospital"));

		SetPlayerData(playerid, P_HEALTH,				cache_get_field_content_float(0, "health"));

		SetPlayerData(playerid, P_CAR_SLOTS,			cache_get_field_content_int(0, "car_slots"));

		SetPlayerData(playerid, P_JAIL,					cache_get_field_content_int(0, "jail"));

		SetPlayerData(playerid, P_PREMIUM,				cache_get_field_content_int(0, "premium"));
		SetPlayerData(playerid, P_PREM,				cache_get_field_content_int(0, "prem"));
		SetPlayerData(playerid, P_PREMIUM_TIME,			cache_get_field_content_int(0, "premium_time"));
		SetPlayerData(playerid, P_FAM,					cache_get_field_content_int(0, "pfam"));
		SetPlayerData(playerid, P_LASTPAS,					cache_get_field_content_int(0, "plastpass"));
		RPPoint[playerid] = cache_get_field_content_int(0, "rppoint");
		SetPlayerData(playerid, P_ARMUTE,					cache_get_field_content_int(0, "a_rmute"));
		SetPlayerData(playerid, P_AUNRMUTE,					cache_get_field_content_int(0, "a_unrmute"));
		SetPlayerData(playerid, P_FAMRANK,					cache_get_field_content_int(0, "famrank"));

		SetPlayerData(playerid, P_YADMIN, 				cache_get_field_content_int(0, "yadmin"));
		SetPlayerData(playerid, P_RULETKA, 		cache_get_field_content_int(0, "ruletka"));

		SetPlayerData(playerid, P_QUEST_1, 		cache_get_field_content_int(0, "quest1"));
		SetPlayerData(playerid, P_QUEST_2, 		cache_get_field_content_int(0, "quest2"));
		SetPlayerData(playerid, P_QUEST_3, 		cache_get_field_content_int(0, "quest3"));
		SetPlayerData(playerid, P_QUEST_4, 		cache_get_field_content_int(0, "quest4"));

		SetPlayerData(playerid, P_PERENOS, 		cache_get_field_content_int(0, "perenes"));

		SetPlayerData(playerid, P_SLOT_AC, 	cache_get_field_content_int(0, "stonks"));
		SetPlayerData(playerid, P_S_ID, 	cache_get_field_content_int(0, "stonks_id"));
		SetPlayerData(playerid, P_S_KOLVO, 	cache_get_field_content_int(0, "stonks_kol"));
		SetPlayerData(playerid, P_MCBOOK, 		cache_get_field_content_int(0, "mcbook"));  // pCasinoChips
		SetPlayerData(playerid, P_REPAIR,			cache_get_field_content_int(0, "repair"));
		SetPlayerData(playerid, P_VEREV,			cache_get_field_content_int(0, "verevka"));

		SetPlayerData(playerid, pCasinoChips,			cache_get_field_content_int(0, "pCasinoChips"));

		new sscanf_delimit[126];

		cache_get_field_content ( 0, "e_player", sscanf_delimit, 64 ) ;
		new Float:e_X, Float:e_Y, Float:e_Z, e_Virt, e_Int, e_HBC, e_time ;
		sscanf ( sscanf_delimit, "p<,>fffiiii", e_X, e_Y, e_Z, e_Int, e_Virt, e_HBC, e_time ) ;
		SetPVarFloat(playerid, "e_X", e_X);
		SetPVarFloat(playerid, "e_Y", e_Y);
		SetPVarFloat(playerid, "e_Z", e_Z);
		SetPVarInt(playerid, "e_Int", e_Int);
		SetPVarInt(playerid, "e_Virt", e_Virt);
		SetPVarInt(playerid, "e_HBC", e_HBC);
		SetPVarInt(playerid, "e_time", e_time);
		// -------------------------------------------------------------------------

		cache_get_field_content(0, "fName", g_player[playerid][P_FAMNAME], mysql, 61);

		if(GetPlayerFam(playerid) != 0)
		{
			new text_str[144];
			format(text_str, 144, "{%s}%s", g_family[GetPlayerFam(playerid)][F_COLOR], g_family[GetPlayerFam(playerid)][F_NAME]) ;
			g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
		}
		SetPlayerSpawnInit(playerid);
	    SetPlayerVirtualWorld(playerid, 0);
		SpawnPlayer(playerid);
		SetPlayerSpawnPos(playerid);
		SendClientMessage(playerid, -1, "Дорогой игрок не забывай, что у нас на сервере есть квесты /quest");
		if(GetPlayerData(playerid, P_SKIN))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_ip='%e',last_login=%d WHERE id=%d LIMIT 1", GetPlayerIpEx(playerid), time, GetPlayerAccountID(playerid));
			mysql_tquery(mysql, query, "", "");

			format(query, sizeof query, "~y~Welcome ~n~~b~%s", GetPlayerNameEx(playerid));
			GameTextForPlayer(playerid, query, 3000, 1);
			lstream[playerid] = SvCreateDLStreamAtPlayer(40.0, SV_INFINITY, playerid, -1, "L");
			SvAddKey(playerid, 0x5A);
			if(GetPlayerData(playerid, P_MUTE)) SvMutePlayerEnable(playerid);
			else SvMutePlayerDisable(playerid);

			if(IsPlayerHasDonations(playerid))
				SendClientMessage(playerid, 0x3399FFFF, "У Вас есть новые пополнения счёта. Введите {ff9900}/donat{3399ff}, чтобы зачислить их");

			new player_admin_rank = GetPlayerAdminEx(playerid);

			if(player_admin_rank)
			{
				if(GetPlayerAdminEx(playerid) == 1) AdminTag = "Администратор первого уровня";
				if(GetPlayerAdminEx(playerid) == 2) AdminTag = "Администратор второго уровня";
				if(GetPlayerAdminEx(playerid) == 3) AdminTag = "Администратор третьего уровня";
				if(GetPlayerAdminEx(playerid) == 4) AdminTag = "Администратор четвертого уровня";
				if(GetPlayerAdminEx(playerid) == 5) AdminTag = "Зам.Главного администратора";
				if(GetPlayerAdminEx(playerid) == 6) AdminTag = "Главный Администатор";
				if(GetPlayerAdminEx(playerid) == 7) AdminTag = "Руководитель/Разработчик";
				if(GetPlayerAdminEx(playerid) == 8) AdminTag = "Основатель";
				str_f = "";
				format(str_f,144,"Вы успешно авторизовались как %s", AdminTag);
				SCM(playerid,0xFFFF00FF, str_f);
			}
			new player_premium_rank = GetPlayerPremium(playerid),
				player_premium_time = GetPlayerPremiumTime(playerid);

			if(player_premium_rank)
			{
				new premium_rank[4][17] =
				{
					"{cd7f32}Bronze",
					"{c0c0c0}Silver",
					"{ffd700}Gold",
					"{e5e4e2}Platinum"
				};

				if((player_premium_time - time) > 0)
				{
					format(query, sizeof query, "Вы владелец %s {3399FF}премиум-аккаунта. Спасибо за помощь проекту", premium_rank[ player_premium_rank - 1 ]);
					SendClientMessage(playerid, 0x3399FFFF, query);

					format
					(
						query, sizeof query,
						"Срок действия Вашего премиум-аккаунта истекает %02d.%02d.%d в %02d:%02d:%02d",
						ConvertUnixTime(player_premium_time, CONVERT_TIME_TO_DAYS),
						ConvertUnixTime(player_premium_time, CONVERT_TIME_TO_MONTHS),
						ConvertUnixTime(player_premium_time, CONVERT_TIME_TO_YEARS),
						ConvertUnixTime(player_premium_time, CONVERT_TIME_TO_HOURS),
						ConvertUnixTime(player_premium_time, CONVERT_TIME_TO_MINUTES),
						ConvertUnixTime(player_premium_time, CONVERT_TIME_TO_SECONDS)
					);
					SendClientMessage(playerid, 0xFFB500FF, query);
				}
			}

			if(GetPlayerData(playerid, P_WARN) > 0)
			{
				if(time > GetPlayerData(playerid, P_WARN_TIME))
				{
					SetPlayerData(playerid, P_WARN, 0);
					SetPlayerData(playerid, P_WARN_TIME, 0);
				}
				else
				{
					format(query, sizeof query, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
					SendClientMessage(playerid, 0xFF6600FF, query);
					SendClientMessage(playerid, 0xFF6600FF, "После 3 предупреждения аккаунт будет заблокирован");
				}
			}

			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				if(GetElapsedTime(GetHouseData(buffer, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "Срок оплаты Вашего дома скоро заканчивается");
				}
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				if(GetElapsedTime(GetHotelData(buffer, room_id, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "У Вас осталось мало оплаченных дней в гостинице");
				}
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				if(GetElapsedTime(GetBusinessData(buffer, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "Срок аренды Вашего бизнеса скоро заканчивается");
				}
			}
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				if(GetElapsedTime(GetFuelStationData(buffer, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "Срок аренды Вашей АЗС скоро заканчивается");
				}
			}
			SetPlayerInit(playerid);
			//SetTimerEx("PlayerOwnableCarInit", 250, false, "i", playerid);

			//CallLocalFunction("PlayerOwnableCarInit", "i", playerid);
		}
		else
		{
			SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
			SendClientMessage(playerid, 0x66CC00FF, "Выберите внешность Вашего персонажа");
		}
	}
	cache_delete(result);
	return 1;
}
public: ShowPlayerLoginDialog(playerid, step, wrong_pass)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_LOGIN) return 0;

	new fmt_str[256];
	switch(step)
	{
		case LOGIN_STATE_CHECK_BAN:
		{
			new Cache: result;

			format(fmt_str, sizeof fmt_str, "SELECT * FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);

			if(cache_num_rows())
			{
				new unban_time = cache_get_field_content_int(0, "ban_time");
				new ban_days = GetElapsedTime(unban_time, gettime(), CONVERT_TIME_TO_DAYS);

				if(ban_days)
				{
					new reason[32];
					new admin_name[21];

					new year, month, day;
					new hour, minute, second;
					new ban_time = cache_get_field_content_int(0, "time");

					cache_get_field_content(0, "description", reason);
					cache_get_field_content(0, "admin", admin_name);

					timestamp_to_date(ban_time, year, month, day, hour, minute, second);
					if(ban_days > 30)
					{
					    format
						(
							fmt_str, sizeof fmt_str,
							"{FFFFFF}Этот аккаунт заблокирован\n\n"\
							"{FFFFFF}Ник администратора: %s\n"\
							"Причина блокировки: %s\n"\
							"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
							"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
							admin_name,
							reason,
							year, month, day, hour, minute, second
						);
					}
					else
					{
						format
						(
							fmt_str, sizeof fmt_str,
							"{FFFFFF}Этот аккаунт заблокирован на {FF3333}%d дней\n\n"\
							"{FFFFFF}Ник администратора: %s\n"\
							"Причина блокировки: %s\n"\
							"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
							"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
							ban_days,
							admin_name,
							reason,
							year, month, day, hour, minute, second
						);
					}
					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME" RolePlay", fmt_str, "Закрыть", "");

					Kick:(playerid, " ", 3000);
				}
				else
				{
					format(fmt_str, sizeof fmt_str, "DELETE FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_tquery(mysql, fmt_str, "", "");

					ShowPlayerAvtoriz(playerid);

					//CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
				}
			}
			else
			{
				//CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, LOGIN_STATE_PASSWORD, false);
				ShowPlayerAvtoriz(playerid);
			}
			return cache_delete(result);
		}
	case LOGIN_STATE_PASSWORD:
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Введите пароль от аккаунта:\n"
			);
			if(wrong_pass)
			{
				new ch[3];
				new attemps = GetPlayerData(playerid, P_PASS_ATTEMPS);

				valstr(ch, attemps);

				strcat(fmt_str, "{FF3300}Неверный пароль! Осталось попыток: ");
				strcat(fmt_str, ch);

				AddPlayerData(playerid, P_PASS_ATTEMPS, -, 1);
				switch(attemps)
				{
					case 0:
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF9933}Лимит попыток авторизации",
							"{FFFFFF}Вы ввели неправильный пароль 3 раза подряд", // . Ваш IP адрес забанен на сутки
							"Закрыть", ""
						);
						Kick:(playerid, " ");

						return 1;

						// BanEx(playerid, "Лимит попыток авторизации");
						// return AddBan(0, gettime(), 1, GetPlayerIpEx(playerid), "Лимит попыток авторизации", "Система безопасности");
					}
					case 1:
					{
						SendClientMessage(playerid, 0xFF6600FF, "При неправильном вводе пароля Вы будете забанены");
					}
				}
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
			}

			Dialog(playerid, DIALOG_LOGIN, DSP, "{03befc}Пароль", fmt_str, "Принять", "Закрыть");
			HidePlayerAvtoriz(playerid);
			ShowPlayerAvtoriz(playerid);
		}
		case LOGIN_STATE_PHONE: // ввод 5 послед. цифр телефона
		{
			if(GetPlayerData(playerid, P_REQUEST_PHONE))
			{
				if(!wrong_pass)
				{
					new phone[13];

					strmid(phone, GetPlayerData(playerid, P_SETTING_PHONE), 0, strlen(GetPlayerData(playerid, P_SETTING_PHONE)) - 5);
					strcat(phone, "*****");

					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Система безопасности запрашивает ввод\n"\
						"Вашего мобильного телефона\n\n{FFCD00}%s\n\n"\
						"{FFFFFF}Введите последние 5 цифр номера:",
						phone
					);
					Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "{66CCFF}Мобильный телефон", fmt_str, "Ввести", "Выход");
				}
				else
				{
					SendClientMessage(playerid, 0xFF0000FF, "Номер мобильного телефона введен неверно. Доступ запрещен");
					Kick:(playerid);
				}
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_PIN_CODE: // ввод пин кода
		{
			if(GetPlayerData(playerid, P_REQUEST_PIN))
			{
				if(wrong_pass)
				{
					SendClientMessage(playerid, 0xFF0000FF, "PIN-код введен неверно. Доступ запрещен");
					Kick:(playerid);
				}
				else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_LOGIN_CHECK);
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_LOAD_ACC:
		{
			SetPlayerData(playerid, P_AUTH_TIME, -1);
			SetPVarInt(playerid, "LoginPlayer", 0);
			DeletePVar(playerid, "passest");
			LoadPlayerData(playerid);
		}
	}
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);

	return 1;
}

public: ClearPlayerAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);
}


public: ClearPlayerChatAnim(playerid)
{
	if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_CHAT)
	{
		ClearPlayerAnim(playerid);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
	}
}

public: SetPlayerLoaderJobLoad(playerid) // брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
		{
			new rand = random(sizeof loader_job_attach_obj);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, loader_job_attach_obj[rand][L_OBJECT], A_OBJECT_BONE_RIGHT_HAND, loader_job_attach_obj[rand][L_POS_X], loader_job_attach_obj[rand][L_POS_Y], loader_job_attach_obj[rand][L_POS_Z], loader_job_attach_obj[rand][L_ROT_X], loader_job_attach_obj[rand][L_ROT_Y], loader_job_attach_obj[rand][L_ROT_Z], 1.0, 1.0, 1.0, 0);

			SetPlayerLoaderJobUnLoadCP(playerid);

			if(!random(6))
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_DROP_LOAD);
		}
	}
}

public: SetPlayerMinerJobTakeOre(playerid, step)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new time = 1000;

		switch(step)
		{
			case 1:
			{
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 905, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.05, -0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 2936, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.05, 0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 2250, 0);

				time = 2500;
			}
			case 3:
			{
				RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 0.58, 0.6, 0.4, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE + 1, 816, A_OBJECT_BONE_SPINE, -0.63, 1.3, 0.0, 270.0, 75.0, 0.0, 0.5, 0.4, 0.8, 0);

				SetPlayerMinerJobUnLoadCP(playerid);
				return ;
			}
			default:
				return ;
		}
		SetTimerEx("SetPlayerMinerJobTakeOre", time, false, "ii", playerid, step + 1);
	}
}

public: SetPlayerLumberJackTakeWood(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
	{
		if(GetPlayerAnimationIndex(playerid) != 20)
			LumberJackPlayerDrop(playerid, false);
		else
		{
			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_PUT);

			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1463, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);

			if(!random(5))
				SetTimerEx("LumberJackPlayerDrop", 500, false, "dd", playerid, true);
		}
	}
}

public: LumberJackPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);

	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили дрова");

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

	ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);

	SetPlayerLumberJackChopCP(playerid);

	return 1;
}

public: FermerRepositoryUpdate()
{
	new fmt_str[155];

	format(fmt_str, sizeof fmt_str, "Склад фермы\n\n{"#cGold"}Количество сена\n%d / 10000\n{FFFFFF}Нажмите H чтобы загрузить авто сеном", GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT));
	UpdateDynamic3DTextLabelText(GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL), 0x66CCFFFF, fmt_str);
}

stock FermaCarUpdate(vehicleid)
{
    new str_t[155];

	format(str_t, sizeof str_t, "{FFFFFF}Загружено сена %d из 10", ceno[vehicleid]);
	//ferma_text[vehicleid] = CreateDynamic3DTextLabel( str_t, 0xFFFFFFFF, 0.0, 0.0, 0.0, 90.0, 0, 1 );
	//Attach3DTextLabelToVehicle( ferma_text[vehicleid], vehicleid, 0.0, 0.0, 1.0 );
	UpdateVehicleLabel(vehicleid,0xFFFFFFFF, str_t);
}

public: MinerCarriageUpdate(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS] && !miner_carriage[carriageid][MC_IN_MOVE])
	{
		if(miner_carriage[carriageid][MC_ORE_COUNT] >= 500)
		{
			new fmt_str[55],
				items = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);

			miner_carriage[carriageid][MC_ORE_COUNT] -= 500;

			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, items + 500);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

			format(fmt_str, sizeof fmt_str, "Разгрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[carriageid][MC_ORE_COUNT]);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0x66CCFFFF, fmt_str);
		}

		else if(miner_carriage[carriageid][MC_ORE_COUNT] <= 0)
		{
			miner_carriage[carriageid][MC_IN_MOVE] = true;

			SetTimerEx("MinerCarriageMove", 7_000, false, "i", carriageid);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0xFFFF00FF, "Ожидание...");
		}
	}
}

public: MinerCarriageMove(carriageid)
{
	new bool: status = miner_carriage[carriageid][MC_STATUS];
	if(status)
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_START_POS_X], miner_carriage[carriageid][MC_START_POS_Y], miner_carriage[carriageid][MC_START_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}
	else
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_END_POS_X], miner_carriage[carriageid][MC_END_POS_Y], miner_carriage[carriageid][MC_END_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}

	DestroyDynamic3DTextLabel(miner_carriage[carriageid][MC_LABEL]);

	miner_carriage[carriageid][MC_IN_MOVE] = true;

	miner_carriage[carriageid][MC_STATUS] = (status ^ true);
}

public: MinerCarriageSetState(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS]) // вагонетка
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Разгрузка\n\n{FFCC00}Количество руды\n10000 / 10000 кг", 0x66CCFFFF, -2548.1213, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_ORE_COUNT] = 10_000;
	}
	else
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_PICKUP_ID] = CreatePickup(19135, 23, -2375.1228, 296.8900, -15.7689, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
		miner_carriage[carriageid][MC_ORE_COUNT] = 0;
	}
}

public: NextBusRouteCP(playerid)
{
	if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
	{
		if(IsPlayerInJob(playerid))
		{
			new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
			new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
			new next_cp = route_step + 1;

			if(g_bus_route[route_id][next_cp][BRS_POS_X] == 0.0)
			{
				next_cp = 0;
			}

			SetPlayerRaceCheckpoint
			(
				playerid,
				g_bus_route[route_id][route_step][BRS_STOP],
				g_bus_route[route_id][route_step][BRS_POS_X],
				g_bus_route[route_id][route_step][BRS_POS_Y],
				g_bus_route[route_id][route_step][BRS_POS_Z],
				g_bus_route[route_id][next_cp][BRS_POS_X],
				g_bus_route[route_id][next_cp][BRS_POS_Y],
				g_bus_route[route_id][next_cp][BRS_POS_Z],
				4.0,
				RCP_ACTION_TYPE_BUS_ROUTE
			);
			AddPlayerData(playerid, P_BUS_ROUTE_STEP, +, 1);
		}
	}
}

public: StartPlayerJob(playerid, jobid)
{
	if(GetPlayerJob(playerid) == jobid)
	{
		if(!IsPlayerInJob(playerid))
		{
			new job_car = GetPlayerJobCar(playerid);
			if(IsPlayerInVehicle(playerid, job_car))
			{
				new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
				new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

				if(jobid == car_type)
				{
					SetPlayerJobLoadItems(playerid, 0);

					SetPlayerData(playerid, P_JOB_WAGE, 0);
					SetPlayerData(playerid, P_IN_JOB, true);
					SetVehicleData(job_car, V_ACTION_ID, true);

					new fmt_str[128];

					switch(jobid)
					{
						case JOB_BUS_DRIVER:
						{
							new route_id = GetPlayerData(playerid, P_BUS_ROUTE);

							format(fmt_str, sizeof fmt_str, "%s\n{FFFFFF}Стоимость проезда: {FF9900}%d руб", g_bus_routes[route_id][BR_NAME], GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, g_bus_routes[route_id][BR_COLOR], 0.0, 0.0, 2.6, 45.0);

							format(fmt_str, sizeof fmt_str, "начал работу водителя автобуса на маршруте %s", g_bus_routes[route_id][BR_NAME]);
							Action(playerid, fmt_str, _, false);

							NextBusRouteCP(playerid);

							SetPVarFloat(playerid, "car_damage", 1000.0);
						}
						case JOB_TAXI_DRIVER:
						{
							format(fmt_str, sizeof fmt_str, "%s{FFFF00}Тариф: %d руб", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 0.0, 1.4, 25.0);

							Action(playerid, "начал работу таксиста", _, false);
						}
						case JOB_MECHANIC:
						{
							SetPlayerData(playerid, P_MECHANIC_FILL_PAY, 0);
							SetPlayerData(playerid, P_MECHANIC_REPAIR_PAY, 0);

							format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Нет топлива", GetPlayerData(playerid, P_JOB_SERVICE_NAME));
							CreateVehicleLabel(job_car, fmt_str, 0xCC9900FF, 0.0, 0.0, 2.0, 25.0);

							Action(playerid, "начал работу автомеханика", _, false);
						}
						case JOB_TRUCKER:
						{
							if(!GetTruckIndex(job_car))
							{
								fmt_str = "Служба\n{FFFFFF}Доставки продуктов";

								SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/bizlist {66CC00}чтобы посмотреть заказы от владельцев бизнесов");
								Action(playerid, "начал работу развозчика продуктов", _, false);
							}
							else
							{
								fmt_str = "Служба\n{FFFFFF}Доставки топлива";

								SendClientMessage(playerid, 0x66CC00FF, "Используйте {3399FF}/fuellist {66CC00}для просмотра заказов от владельцев АЗС");
								Action(playerid, "начал работу развозчика топлива", _, false);
							}

							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 2.1, 2.1, 20.0);
						}
					}
				}
			}
		}
	}
	return 1;
}

public: EndPlayerJob(playerid)
{
	if(IsPlayerInJob(playerid))
	{
		new vehicleid = GetPlayerJobCar(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(vehicleid);
			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
		}
	}
	KillEndJobTimer(playerid);

	new fmt_str[128];
	new wage = GetPlayerJobWage(playerid);
	new items = GetPlayerJobLoadItems(playerid);

	SetPlayerData(playerid, P_JOB_WAGE, 0);
	SendClientMessage(playerid, 0xFFFF00FF, "Рабочий день завершен!");

	SetPlayerData(playerid, P_IN_JOB, false);
	switch(GetPlayerData(playerid, P_JOB))
	{
		case JOB_BUS_DRIVER:
		{
			new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;

			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 3;

			DisablePlayerRaceCheckpoint(playerid);

			format(fmt_str, sizeof fmt_str, ". Заработано: {00FF00}%d руб", wage + (items * GetPlayerData(playerid, P_JOB_TARIFF)));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d{FFFFFF}. Куплено билетов на {00FF00}%d руб", items, items * GetPlayerData(playerid, P_JOB_TARIFF));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "За ремонт автобуса: {FF6600}-%d руб", repair_sum);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(repair_sum < wage)
				wage -= repair_sum;

			//GiveMoney(playerid, salary, "Зарплата Водителя Маршрутки", true, true);
		}
		case JOB_TAXI_DRIVER:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = items * GetPlayerData(playerid, P_JOB_TARIFF);

			format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}%d руб", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d", items);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		case JOB_MECHANIC:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = GetPlayerData(playerid, P_MECHANIC_FILL_PAY) + GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY);

			format(fmt_str, sizeof fmt_str, "Получено за ремонт: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Получено за заправку: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_FILL_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Всего заработано: {FFCD00}%d руб", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		case JOB_TRUCKER:
		{
			DisablePlayerRaceCheckpoint(playerid);

			format(fmt_str, sizeof fmt_str, "Ваша общая чистая прибыль составляет {00CC00}%d руб", wage);
			SendClientMessage(playerid, -1, fmt_str);

			if(GetPlayerData(playerid, P_ORDER) != -1)
				SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);

			return 1;
		}
		default:
		{
			switch(GetPlayerTempJob(playerid))
			{
				case TEMP_JOB_FACTORY_TRUCKER:
				{
					RemovePlayerAttachedObjects(playerid);
					SetPlayerSkinInit(playerid);

					format(fmt_str, sizeof fmt_str, "Ваша общая чистая прибыль составляет {00CC00}%d руб", wage);
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					SetPlayerJobLoadItems(playerid, 0);
					SetPlayerTempJob(playerid, TEMP_JOB_NONE);
				}
			}
			return 1;
		}
	}
	SendClientMessage(playerid, 0x66CC00FF, "Деньги будут перечислены на Ваш счет во время зарплаты");

	AddPlayerData(playerid, P_WAGE, +, wage);

	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET wage=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_WAGE), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);

	return 1;
}

public: EndCarJob(playerid, veh_id)
{
	RemovePlayerFromVehicle(playerid);
	vodila[veh_id] = -1;
	SetVehicleToRespawn(veh_id);
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	SendClientMessage(playerid, -1, "Прошло 15 секунд а Вы так и не вернулись в авто. Авто было отправлено на место.");
	KillCarJobTimer(playerid);
	return 1;
}

public: ShowChangeNameHistory(playerid, name[])
{
	new fmt_str[64];
	new rows = cache_num_rows();

	if(!rows)
	{
		format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, "{FFFFFF}История изменения имен персонажа пуста", "Закрыть", "");
	}

	new text[1024] = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");

		strcat(text, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
}

public: ShowTestPlayer(playerid)
{
	new fmt_str[64];
	new rows = cache_num_rows();

	if(!rows)
	{
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "ЗБТ Доступ", "{FFFFFF}Тут пусто :(", "Закрыть", "");
	}

	new text[1024] = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");

		strcat(text, fmt_str);
	}
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "ЗБТ Доступ", text, "Закрыть", "");
}

public: ShowPlayerPhoneBook(playerid)
{
	if(IsPlayerPhoneBookInit(playerid))
	{
		if(GetPlayerPhoneBookContacts(playerid) > 0)
		{
			new fmt_str[37];
			new string[((sizeof fmt_str) * MAX_PHONE_BOOK_CONTACTS) + 1];

			for(new idx, count; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
			{
				if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
				SetPlayerListitemValue(playerid, count ++, idx);

				format(fmt_str, sizeof fmt_str, "%s - tel.%s\n", GetPlayerPhoneBook(playerid, idx, PB_NAME), GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_PHONE_BOOK, DIALOG_STYLE_LIST, "{FFCD00}Телефонная книга", string, "Варианты", "Отмены");
		}
		else
		{
			SendClientMessage(playerid, 0xCECECEFF, "В телефонной книге нет номеров");
			SendClientMessage(playerid, 0xCECECEFF, "Чтобы добавить новый контакт введите {FFFF00}/add [id игрока]");
		}
	}
	else
	{
		InitPlayerPhoneBook(playerid);
		CallLocalFunction("ShowPlayerPhoneBook", "i", playerid);
	}
	return 1;
}

public: BusinesGPSListInit()
{
	new rows;
	new query[64 + 1];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business_gps ORDER BY pos DESC, time ASC LIMIT %d", MAX_BUSINESS_GPS);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessGPSInfo(idx, BG_SQL_ID, 	cache_get_row_int(idx, 0));
		SetBusinessGPSInfo(idx, BG_BIZ_ID, 	cache_get_row_int(idx, 1));
		SetBusinessGPSInfo(idx, BG_POS, 	cache_get_row_int(idx, 2));
		SetBusinessGPSInfo(idx, BG_TIME, 	cache_get_row_int(idx, 3));
	}
	g_business_gps_count = rows;
	g_business_gps_init = true;

	cache_delete(result);
}

public: ShowPlayerGPSBusinessList(playerid)
{
	if(g_business_gps_init)
	{
		new businessid;

		new fmt_str[44];
		new string[(sizeof fmt_str) * MAX_BUSINESS_GPS];

		if(!g_business_gps_count)
			string = "В данный момент в списке нет бизнесов";

		for(new idx, count; idx < g_business_gps_count; idx ++)
		{
			businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

			format(fmt_str, sizeof fmt_str, "%d. %s (%s)\n", idx + 1, GetBusinessData(businessid, B_NAME), GetCityName(GetBusinessData(businessid, B_CITY)));
			strcat(string, fmt_str);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
		Dialog(playerid, DIALOG_GPS_BUSINESS, DIALOG_STYLE_LIST, "{FFCD00}Реклама бизнеса", string, "Отметить", "Назад");
	}
	else
	{
		BusinesGPSListInit();
		CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
	}
}

public: ShowPlayerBusinessDialog(playerid, operationid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		switch(operationid)
		{
			case BIZ_OPERATION_PARAMS: // управление заправкой
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
					"{33AACC}Изменение параметров бизнеса",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
					"2. Установить цену на вход\n"\
					"3. Изменить стоимость продукта\n"\
					"4. Заказать продукты\n"\
					"5. Отменить заказ\n"\
					"6. Финансовая статистика\n"\
					"7. Улучшить бизнес",
					"Выбрать", "Назад"
				);
			}
			case BIZ_OPERATION_LOCK: // открыть / закрыть
			{
				if(GetBusinessData(businessid, B_LOCK_STATUS))
				{
					SetBusinessData(businessid, B_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Бизнес открыт");
				}
				else
				{
					SetBusinessData(businessid, B_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Бизнес закрыт");
				}
				UpdateBusinessLabel(businessid);

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE business SET `lock`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
			}
			case BIZ_OPERATION_ENTER_PRICE: // установить цену за вход
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ENTER_PRICE, DIALOG_STYLE_INPUT,
					"{33AACC}Цена за вход",
					"{FFFFFF}Укажите сколько должны платить клиенты\n"\
					"чтобы войти в ваш бизнес\n\n"\
					"{669966}Предел цен: от 0 до 15000 рублей\n"\
					"Установка цены за вход может увеличить ваши доходы,\n"\
					"однако сократит количество клиентов\n"\
					"{CC3333}Выбирайте цену разумно во избежание банкротства вашей фирмы",
					"Сменить", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_PRICE: // установить стоимость продукта
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
					"{33AACC}Стоимость продукта",
					"{FFFFFF}Тут вы можете изменить стоимость продукта для бизнеса\n"\
					"Укажите цену в пределах от 25 до 200 рублей\n\n"\
					"Стоимость продукта определяет привлекательность\n"\
					"вашего бизнеса для развозчиков продуктов\n"\
					"Чем выше цена, тем охотнее они продадут вам свой товар\n"\
					"Однако помните, что черезчур высокая цена\n"\
					"может привести вас к банкротству",
					"Сменить", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_ORDER: // заказать продукты
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT,
					"{33AACC}Заказ продуктов",
					"{FFFFFF}Сколько продуктов Вы хотите заказать?",
					"Заказать", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_ORDER_CANCEL: // отменить заказ
			{
				new order_id = GetBusinessData(businessid, B_ORDER_ID);
				if(order_id != -1)
				{
					new fmt_str[128];
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
						"На счет бизнеса будет возвращено {FFCD00}%d руб",
						GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
					);
					Dialog(playerid, DIALOG_BIZ_ORDER_CANCEL, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", fmt_str, "Да", "Нет");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ продуктов для своего бизнеса");
					CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case BIZ_OPERATION_PROFIT_STATS: // финансовая статистика
			{
				new query[256];

				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);

				mysql_format(mysql, query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM business_profit WHERE bid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetBusinessData(businessid, B_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowBusinessProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case BIZ_OPERATION_IMPROVEMENTS: // Улучшения
			{
				new fmt_str[80];
				new string[512];

				new buffer[14 + 1];
				new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_business_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 0,1,4:
							buffer = "\t";

						case 5:
							buffer = "\t\t";

						default:
							buffer[0] = 0;
					}
					if(buffer[0] != EOS)
						strcat(fmt_str, buffer);

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(buffer, g_business_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", buffer);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string, "Купить", "Назад");
			}
		}
	}

	return 1;
}

public: ShowBusinessProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[500];
		new fmt_str[32];
		new rows = cache_num_rows();

		if(rows)
		{
			string = "Дата\t\t\tПрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}Финансовая статистика Вашего бизнеса еще не сформирована";

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t%d руб\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AADD}Доход бизнеса за 20 дней", string, "<< Назад", "Закрыть");
	}
}

public: ShowPlayerFuelStationDialog(playerid, operationid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		switch(operationid)
		{
			case FUEL_ST_OPERATION_PARAMS:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PARAMS, DIALOG_STYLE_LIST,
					"{33AACC}Параметры заправочной станции",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}заправочную станцию\n"\
					"2. Новое название\n"\
					"3. Изменить цену на топливо\n"\
					"4. Установить закупочную цену\n"\
					"5. Заказать топливо\n"\
					"6. Отменить заказ\n"\
					"7. Финансовая статистика\n"\
					"8. Улучшить заправочную станцию",
					"Выбрать", "Назад"
				);
			}
			case FUEL_ST_OPERATION_LOCK:
			{
				if(GetFuelStationData(stationid, FS_LOCK_STATUS))
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Заправочная станция открыта");
				}
				else
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Заправочная станция закрыта");
				}
				UpdateFuelStationLabel(stationid);

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `fuel_stations` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
			}
			case FUEL_ST_OPERATION_NEW_NAME:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_NAME, DIALOG_STYLE_INPUT,
					"{33AACC}Смена названия",
					"{FFFFFF}Введите новое название для заправочной станции\n\n"\
					"Требования:\n"\
					"- Длина от 3-х до 15-ти символов\n"\
					"- Название не должно противоречить правилам сервера\n"\
					"- Название должно ассоциироваться с заправочными станциями\n\n"\
					"{CC3333}ПРИМЕЧАНИЕ: Новое название не сохранится после рестарта сервера",
					"Сменить", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_PRICE:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PRICE_FUEL, DIALOG_STYLE_INPUT,
					"{33AACC}Цена топлива",
					"{FFFFFF}Укажите отпускную цену за 1 литр\n"\
					"топлива в пределах от 2 до 70 рублей",
					"Готово", "Назад"
				);
			}
			case FUEL_ST_OPERATION_BUY_FUEL_PRIC:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_BUY_FUEL_PR, DIALOG_STYLE_INPUT,
					"{33AACC}Закупочная цена",
					"{FFFFFF}Закупочная цена определяет привлекательность Вашей\n"\
					"заправки для развозчиков топлива. Чем выше эта цена,\n"\
					"тем охотнее развозчики будут выполнять Ваши заказы\n\n"\
					"{669966}Введите значение от 2 до 10 рублей",
					"Изменить", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_ORDER_FUELS, DIALOG_STYLE_INPUT,
					"{33AACC}Заказ топлива",
					"{FFFFFF}Сколько литров топлива Вы хотите заказать?",
					"Заказать", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER_CA:
			{
				new order_id = GetFuelStationData(stationid, FS_ORDER_ID);

				if(order_id != -1)
				{
					new fmt_str[128];
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
						"На счет заправочной станции будет возвращено {FFCD00}%d руб",
						GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
					);
					Dialog(playerid, DIALOG_FUEL_STATION_ORDER_CANCE, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", fmt_str, "Да", "Нет");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ топлива для своей АЗС");
					CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case FUEL_ST_OPERATION_PROFIT_STATS:
			{
				new query[256];

				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);

				format(query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM fuel_stations_profit WHERE fid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetFuelStationData(stationid, FS_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowFuelStationProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case FUEL_ST_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[300];

				new str_numeric[14 + 1];
				new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_fuel_station_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_fuel_station_improvements[idx][I_NAME]);

					if(idx != 2)
						strcat(fmt_str, "\t");

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_fuel_station_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_FUEL_STATION_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Улучшения для заправочной станции", string, "Купить", "Назад");
			}
		}
	}
	return 1;
}

public: ShowFuelStationProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[500];
		new fmt_str[32];
		new rows = cache_num_rows();

		if(rows)
		{
			string = "Дата\t\t\tПрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}Финансовая статистика Вашей заправочной станции еще не сформирована";

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t%d руб\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "{33AADD}Доход АЗС за 20 дней", string, "<< Назад", "Закрыть");
	}
}

public: PresentFlowersToPlayer(playerid, to_player)
{
	SetPlayerAmmo(playerid, WEAPON_FLOWER, 0);
	GivePlayerWeapon(to_player, WEAPON_FLOWER, 1);
}

public: ShowPlayerLotteryDialog(playerid)
{
	if(GetPlayerData(playerid, P_LOTTERY) >= 100)
	{
		new hour;
		new fmt_str[632];

		gettime(hour);
		format
		(
			fmt_str, sizeof fmt_str,
			"Ваше счастливое число: {FFCD00}%d\n\n"\
			"{FFFFFF}Вы зарегистрированы в лотерее, результат будет известен во\n"\
			"время ближайшего розыгрыша, который пройдёт в %d:02\n"\
			"Не выходите из игры чтобы принять в нём участие.\n\n"\
			"Выигрыш будет зависеть от того, сколько чисел совпало в\n"\
			"вашем счастливом числе и в числе, которое выпадет во\n"\
			"время розыгрыша (по порядку слева направо):\n\n"\
			"Нет совпадений:\t{FF6633}0 руб\n"\
			"{FFFFFF}1 число:\t\t{66FF00}20000 руб\n"\
			"{FFFFFF}2 числа:\t\t{66FF00}50000 руб\n"\
			"{FFFFFF}Все числа:\t\t{66FF00}150000 руб\n\n"\
			"{FFFFFF}Если Вы хотите изменить счастливое число, введите новые\n"\
			"3 цифры. В противном случае просто нажмите \"Ок\"",
			GetPlayerData(playerid, P_LOTTERY),
			GetElapsedTime(gettime(), g_last_lottery_time) >= 1 ? hour : hour+1
		);
		Dialog(playerid, DIALOG_BIZ_LOTTERY, DIALOG_STYLE_INPUT, "{66CC00}Лотерея", fmt_str, "Ок", "");
	}
}

public: SetGateStatus(gateid, bool: status, open_time)
{
	if(open_time != -1)
		SetTimerEx("SetGateStatus", open_time * 1000, false, "iii", gateid, status ^ GATE_STATUS_OPEN, -1);

	switch(GetGateData(gateid, G_TYPE))
	{
		case
			GATE_TYPE_BARRIER,
			GATE_TYPE_BARRIER_MSG,
			GATE_TYPE_BARRIER_BUTTON:
		{
			MoveDynamicObject(g_gate[gateid][G_OBJECT_ID][1], GetGateData(gateid, G_POS_X) + (status == GATE_STATUS_CLOSE ? 0.01 : -0.01), GetGateData(gateid, G_POS_Y), GetGateData(gateid, G_POS_Z) + 0.8, 0.01, 0.0, status == GATE_STATUS_CLOSE ? -90.0 : -10.0, GetGateData(gateid, G_ANGLE));
		}
		case GATE_TYPE_NORMAL:
		{

		}
	}
	SetGateData(gateid, G_STATUS, status);
}

public: CheckNearestGate(playerid)
{
	new gateid = GetNearestGate(playerid, 10.0);
	if(gateid != -1)
	{
		new open_time = 8;
		new bool: access = false;

		switch(gateid)
		{
			case GATE_ID_DRIVING_SCHOOL:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new type = GetVehicleData(vehicleid, V_ACTION_TYPE);

				if(type == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
					{
						access = true;
					}
				}
			}
			default:
				access = true;
		}

		if(access)
		{
			OnGateOpened(playerid, gateid, open_time);
		}
		return 1;
	}
	return 0;
}

public: OnGateOpened(playerid, gateid, open_time)
{
	new type = GetGateData(gateid, G_TYPE);
	new bool: status = GetGateData(gateid, G_STATUS);

	switch(type)
	{
		case GATE_TYPE_BARRIER, GATE_TYPE_BARRIER_MSG:
		{
			if(status == GATE_STATUS_OPEN) return 0;

			if(type == GATE_TYPE_BARRIER_MSG)
			{
				new fmt_str[64];

				if(strlen(GetGateData(gateid, G_DESCRIPTION)))
				{
					format(fmt_str, sizeof fmt_str, "[%s] Шлагбаум закроется через %d секунд", GetGateData(gateid, G_DESCRIPTION), open_time - 3);
				}
				else format(fmt_str, sizeof fmt_str, "Шлагбаум закроется через %d секунд", open_time - 3);
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);
			}
		}
		case GATE_TYPE_BARRIER_BUTTON:
		{
			open_time = -1;
		}
		case GATE_TYPE_NORMAL:
		{

		}
	}
	SetGateStatus(gateid, status ^ GATE_STATUS_OPEN, open_time);

	return 1;
}

public: UpdateFactoryDesk(deskid)
{
	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Рабочее место №%d\n%s", deskid + 1, factory_desk[deskid][FD_USED] ? ("{FF6600}Занято") : ("{33CC00}Свободно"));
	UpdateDynamic3DTextLabelText(factory_desk[deskid][FD_LABEl], 0xFFFFFFEE, fmt_str);
}

public: T_RemovePlayerAttachedObject(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
}

#if defined RAND_WEATHER
public: SetRandomWeather()
{
	new fmt_str[64];
	new rand = random(sizeof g_weather);

	SendClientMessageToAll(0x3399FFFF, "[Прогноз погоды]");

	format(fmt_str, sizeof fmt_str, "В области ожидается %s {99CC00}(+%d °С)", g_weather[rand][W_NAME], g_weather[rand][W_DEGREES]);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	SetWeather(g_weather[rand][W_ID]);
}
#endif

public: AddContainers()
{
	STRING_GLOBAL[2] = EOS;

	for(new i = 0; i != sizeof containers; i ++)
	{
		if(containers[i][CD_STATUS] >= 2)
		{
			DestroyVehicle(veh_cont[i]);
		}
		DestroyDynamicObject(container[i]);

		DestroyDynamic3DTextLabel(container_label[i]);
		DestroyDynamic3DTextLabel(container_label_1[i]);

		DestroyDynamicObject(container_door[i]);
		DestroyDynamicObject(container_second_door[i]);
		DestroyDynamicObject(container_block[i]);

		containers[i][C_LAST_BET] = -1;
		containers[i][C_PRICE_COUNT] = def_cena_cont[i];

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{D7DF01}Объединенные Арабские Эмираты\n{DBA901}Вес: 3500 кг (№%d)\n{ffffff}Содержимое: {AEB404}Транспорт\n{ffffff}Cтоимость: {B18904}%d руб", i + 1, containers[i][C_PRICE_COUNT]);
		container_label[i] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, containers[i][C_POS_X], containers[i][C_POS_Y], containers[i][C_POS_Z] +3.5, 15.0);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Используйте {DBA901}L.ALT {ffffff}чтобы\nоткрыть торги за контейнер начальная\nстоимость которого составляет: {B18904}%d руб", containers[i][C_PRICE_COUNT]);
		container_label_1[i] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1], 15.0);

		container[i] = CreateDynamicObject(containers[i][C_ID], containers[i][C_POS_X], containers[i][C_POS_Y], containers[i][C_POS_Z], 0.00, 0.00, containers[i][C_POS_A]);

		container_door[i] = CreateDynamicObject(containers[i][CD_FIRST_ID], containers[i][CD_FIRST_POS_X], containers[i][CD_FIRST_POS_Y], containers[i][CD_FIRST_POS_Z], 0.00, 0.00, containers[i][CD_FIRST_POS_A]);
		container_second_door[i] = CreateDynamicObject(containers[i][CD_SECOND_ID], containers[i][CD_SECOND_POS_X], containers[i][CD_SECOND_POS_Y], containers[i][CD_SECOND_POS_Z], 0.00, 0.00, containers[i][CD_SECOND_POS_A]);
		container_block[i] = CreateDynamicObject(10477, containers[i][C_B_POS_X], containers[i][C_B_POS_Y], containers[i][C_B_POS_Z], 0.00, 0.00, containers[i][C_B_POS_A]);

		containers[i][CD_STATUS] = 0;
	}

	SendClientMessageToAll(0xFFFFFFFF, "{ba8616}В порт доставлена новая партия контейнеров.");
}

public: ClearBanList()
{
	new query[64];
	new time = gettime();

	format(query, sizeof query, "SELECT ip FROM ban_list WHERE ban_time <= %d", time);
	mysql_tquery(mysql, query, "UnBanIPs", "i", time);

	return 1;
}

public: UnBanIPs(time)
{
	new ip[16];
	new query[64];
	new rows = cache_num_rows();

	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, ip);

			format(query, sizeof query, "unbanip %s", ip);
			SendRconCommand(query);
		}
		SendRconCommand("reloadbans");

		format(query, sizeof query, "DELETE FROM ban_list WHERE ban_time <= %d", time);
		mysql_query(mysql, query, false);
	}
	return 1;
}

public: PlayerOwnableCarInit(playerid, idcar)
{
	new index;
	new vehicleid = -1;

	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

		//SetPlayerVehicleData(playerid, idcar, vehicleid);
		AttachCarNumber(vehicleid, index);
		SetVehicleNumber(index);
		break;
	}
}

public: SaveOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[600];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);

		format
		(
			query, sizeof query,
			"UPDATE ownable_cars SET "\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"diski=%d,"\
			"gidra=%d,"\
			"nitro=%d,"\
			"mileage=%f,"\
			"health=%f,"\
			"rent=%d,"\
			"rentp=%d,"\
			"vinil=%d,"\
			"number='%s'"\
			" WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetOwnableCarData(index, OC_DISKI),
			GetOwnableCarData(index, OC_GIDRA),
			GetOwnableCarData(index, OC_NITRO),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_HEALTH),
			GetVehicleData(vehicleid, V_RENT),
			GetVehicleData(vehicleid, V_RENTP),
			GetOwnableCarData(index, OC_VINIL),
			GetOwnableCarData(index, OC_NUMBER),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, query, false);

		return mysql_errno();
	}
	return -1;
}

public: ShowTrunkDialog(playerid, vehicleid, view)
{
	new count, type;

	new fmt_str[36];
	new string[(sizeof fmt_str) * MAX_VEHICLE_TRUNK_SLOTS + 1];

	ClearPlayerListitemValues(playerid);
	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(IsTrunkFreeSlot(vehicleid, idx)) continue;

		type = GetTrunkData(vehicleid, idx, VT_ITEM_TYPE);

		format(fmt_str, sizeof fmt_str, "%d. %s:\t{66CC00}%d %s\n", count + 1, GetItemInfo(type, I_NAME), GetTrunkData(vehicleid, idx, VT_ITEM_AMOUNT), GetItemInfo(type, I_NAME_COUNT));
		strcat(string, fmt_str);

		SetPlayerListitemValue(playerid, count ++, idx);
	}

	if(!view)
	{
		SetPlayerListitemValue(playerid, count, -1);
		SetPlayerUseTrunk(playerid, vehicleid);

		format(fmt_str, sizeof fmt_str, "{888888}%d. Положить", count + 1);
		strcat(string, fmt_str);

		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "{0099FF}Содержимое багажника", string, "Выбрать", "Закрыть");
	}
	else
	{
		if(!count)
			strcat(string, "{888888}Пусто");

		SetPlayerUseTrunk(playerid, INVALID_VEHICLE_ID);
		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "{0099FF}Содержимое багажника", string, "Закрыть", "");
	}
	return 1;
}
// ----------------------------------------Логи
// ------------------------------------------
stock GetTrunkFreeSlot(vehicleid, item_type)
{
	new free_slot = -1, comb_slot = -1;
	new bool: comb = GetItemInfo(item_type, I_COMBINATION);

	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type && comb)
		{
			comb_slot = idx;
		}
		else if(free_slot == -1 && IsTrunkFreeSlot(vehicleid, idx))
		{
			free_slot = idx;
		}
		else continue;
	}
	return comb_slot != -1 ? comb_slot : free_slot;
}

stock GetTrunkBusySlot(vehicleid, item_type)
{
	new busy_slot = -1;

	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type)
		{
			busy_slot = idx;
		}
		else continue;
	}
	return busy_slot;
}

stock AddTrunkItem(vehicleid, item_id, amount, value = 0)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new free_slot = GetTrunkFreeSlot(vehicleid, item_id);
		if(free_slot != -1)
		{
			SetTrunkData(vehicleid, free_slot, VT_SQL_ID, 1);

			SetTrunkData(vehicleid, free_slot, VT_ITEM_TYPE, item_id);
			SetTrunkData(vehicleid, free_slot, VT_ITEM_VALUE, value);

			new query[100],
				index,
				oc_id;

			index = GetVehicleData(vehicleid, V_ACTION_ID);
			oc_id = GetOwnableCarData(index, OC_SQL_ID);

			if(!IsTrunkFreeSlot(vehicleid, free_slot))
			{
				AddTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, +, amount);

				if((GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT) - amount) == 0)
				{
					mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
					mysql_query(mysql, query, false);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
			}

			else
			{
				SetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, amount);

				mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
				mysql_query(mysql, query, false);
			}

			return 1;
		}
		return -1;
	}
	return 0;
}

stock TakeTrunkItem(vehicleid, item_id, amount)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new busy_slot = GetTrunkBusySlot(vehicleid, item_id);

		new query[100],
			index,
			oc_id;

		index = GetVehicleData(vehicleid, V_ACTION_ID);
		oc_id = GetOwnableCarData(index, OC_SQL_ID);

		if(!IsTrunkFreeSlot(vehicleid, busy_slot))
		{
			AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, -, amount);

			if(GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT) >= 0)
			{
				if(!GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT))
				{
					mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE item_id='%d' AND oc_id='%d'", item_id, oc_id);
					mysql_query(mysql, query, false);

					RemoveTrunkItem(vehicleid, busy_slot);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
				return 1;
			}
			else
			{
				AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, +, amount);
				return -1;
			}
		}
		return -1;
	}
	return 0;
}

stock RemoveTrunkItem(vehicleid, item_slot)
{
	if(!IsTrunkFreeSlot(vehicleid, item_slot))
	{
		SetTrunkData(vehicleid, item_slot, VT_SQL_ID,	0);

		SetTrunkData(vehicleid, item_slot, VT_ITEM_TYPE, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_AMOUNT, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_VALUE, 	0);

		return 1;
	}
	return 0;
}

stock GetCoordVehicle(vehicleid, type, &Float:x, &Float:y, &Float:z, &Float:angle, &Float:distance) // by Essle (багажник / капот)
{
    GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, x, distance, z); // узнаем длину машины
    distance = distance / 2 + 0.1; // полученную длину делим на два

    GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
    GetVehicleZAngle(vehicleid, angle); // узнаем угол поворота авто

	switch(type)
	{
		case VEHICLE_COORD_TYPE_BOOT: // багажник
		{
			x += (distance * floatsin(-angle+180, degrees)); // вычитаем координату x бaгажника
			y += (distance * floatcos(-angle+180, degrees)); // вычитаем координату y бaгажника
		}
		case VEHICLE_COORD_TYPE_BONNET: // капот
		{
			x -= (distance * floatsin(-angle+180, degrees)); // вычитаем координату x капота
			y -= (distance * floatcos(-angle+180, degrees)); // вычитаем координату y капота
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

stock GetVehicleTurnSignalPos(vehicleid, type, &Float:x, &Float:y)
{
	/*

		Типы:
		1 - левый передний
		2 - левый задний
		3 - правый передний
		4 - правый задний

	*/

	new Float: size_x,
		Float: size_y,
		Float: size_z;

	GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, size_x, size_y, size_z);

	switch(type)
	{
		case 1:
		{
			x = -(size_x / 2) + 0.3;
			y = size_y / 2 - 0.5;
		}
		case 2:
		{
			x = -(size_x / 2) + 0.3;
			y = -(size_y / 2) + 0.4;
		}
		case 3:
		{
			x = size_x / 2 - 0.3;
			y = size_y / 2 - 0.5;
		}
		case 4:
		{
			x = size_x / 2 - 0.3;
			y = -(size_y / 2) + 0.4;
		}
	}

	return 1;
}

stock SetVehicleToHotelRespawn(hotelid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		new free_slot = GetHotelFreePark(hotelid);
		if(free_slot != -1)
		{
			g_hotel_car_park_pos[hotelid][free_slot][HC_VEHICLE_ID] = vehicleid;

			SetVehiclePos(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_POS_X], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Y], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Z]);
			SetVehicleZAngle(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_ANGLE]);

			return 1;
		}
	}
	return 0;
}

stock GetHotelFreePark(hotelid)
{
	new vehicleid, slot = -1;

	for(new idx; idx < sizeof(g_hotel_car_park_pos[]); idx ++)
	{
		vehicleid = g_hotel_car_park_pos[hotelid][idx][HC_VEHICLE_ID];
		if(GetVehicleDistanceFromPoint(vehicleid, g_hotel_car_park_pos[hotelid][idx][HC_POS_X], g_hotel_car_park_pos[hotelid][idx][HC_POS_Y], g_hotel_car_park_pos[hotelid][idx][HC_POS_Z]) >= 8.0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock ShowOwnableCarPass(playerid, vehicleid)
{
	new model_id = GetVehicleData(vehicleid, V_MODELID);

	if(model_id && IsAOwnableCar(vehicleid))
	{
		new fmt_str[300];
		new Float: health;
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new description[32];

		format(description, sizeof description, "{0099FF}Документы на ТС №%d", GetOwnableCarData(index, OC_SQL_ID));

		GetVehicleHealth(vehicleid, health);

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t{3399FF}%s\n\n"\
			"{FFFFFF}Модель:\t\t{3399FF}%d\n"\
			"{FFFFFF}Состояние:\t\t{3399FF}%d\n"\
			"{FFFFFF}Пробег:\t\t{3399FF}%07i\n"\
			"{FFFFFF}Цвет:\t\t\t{3399FF}ID %d, %d\n"\
			"{FFFFFF}Гос. стоимость:\t{3399FF}%d руб\n"\
			"{FFFFFF}Номерные знаки:\t{3399FF}%s",
			GetVehicleInfo(model_id-400, VI_NAME),
			model_id,
			floatround(health),
			floatround(GetVehicleData(vehicleid, V_MILEAGE), floatround_ceil),
			GetOwnableCarData(index, OC_COLOR_1),
			GetOwnableCarData(index, OC_COLOR_2),
			GetVehicleInfo(model_id-400, VI_PRICE),
			GetOwnableCarData(index, OC_NUMBER)
		);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, description, fmt_str, "Закрыть", "");

		return 1;
	}
	return 0;
}

stock ShowOwnableCarLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);

	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);

	Dialog
	(
		playerid, DIALOG_OWNABLE_CAR_LOAD, DIALOG_STYLE_LIST,
		"{FFCD00}Система управления транспортом",
		"1. Отметить транспорт на GPS {FF6600}(300 руб)\n"\
		"{888888}2. Загрузить транспорт",
		"Выбрать", "Закрыть"
	);
}

stock SpeedometrKeyStatusInit(playerid, vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetOwnableCarData(index, OC_KEY_IN))
		{
			PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], "~y~.");
		}
		else PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], ".");
	}
	else PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], "~y~.");
}

stock IsAOwnableCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock IsVehicleSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!IsPlayerInVehicle(i, vehicleid)) continue;
		else if(GetPlayerVehicleSeat(i) != seatid) continue;

		return 1;
	}

	return 0;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerInAnyVehicle(i)) continue;

		if(GetPlayerVehicleID(i) == vehicleid)
			return 1;
	}

	return 0;
}

stock IsTrailerAttachedToAnyVehicle(trailerid)
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
		if(!IsValidVehicle(i)) continue;

		if(GetVehicleTrailer(i) == trailerid)
			return 1;
	}

	return 0;
}

stock ShowPlayerHotelRoomPayForRent(playerid)
{
	new hotel_id = GetPlayerInHotelID(playerid);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		new rent_days = GetElapsedTime(GetHotelData(hotel_id, room_id, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
		if(rent_days < 0)
		{
			rent_days = 0;
		}

		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Оплаченных дней:\t\t%d из 30\n"\
			"Ежедневная плата:\t\t1000 руб\n\n"\
			"На сколько дней Вы хотите оплатить номер?",
			rent_days
		);
		Dialog(playerid, DIALOG_HOTEL_PAY_FOR_ROOM, DIALOG_STYLE_INPUT, "{66CC99}Оплата проживания в отеле", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHotelClientMenu(playerid, hotel_id)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		Dialog
		(
			playerid, DIALOG_HOTEL_CLIENT_MENU, DIALOG_STYLE_LIST,
			"{66CC99}Меню клиента",
			"1. Оплатить проживание\n"\
			"2. Информация о транспорте\n"\
			"3. Отметить транспорт на GPS\n"\
			"4. Подогнать транспорт к отелю (1000 руб)\n"\
			"5. Продать транспорт\n"\
			"6. Выселиться из отеля",
			"Выбрать", "Назад"
		);
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в этой гостинице");
		ShowPlayerHotelDialog(playerid);
	}
}

stock GetHotelFreeRoom(hotelid)
{
	new free_room = -1;
	if(0 <= hotelid <= MAX_HOTELS-1)
	{
		new max_rooms = g_hotel_rooms_loaded[hotelid] / 12;

		for(new idx; idx < max_rooms; idx ++)
		{
			if(IsHotelRoomOwned(hotelid, idx)) continue;

			free_room = idx;
			break;
		}
	}
	return free_room;
}

stock ExitPlayerFromHotelRoom(playerid)
{
	new room_id = GetPlayerData(playerid, P_IN_HOTEL_ROOM);
	if(room_id != -1)
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 490.0204, -992.8733, 1002.9255))
			{
				new floor = (room_id / 12) + 1;
				new index = (room_id % 12) / 5;

				SetPlayerPosEx
				(
					playerid,
					g_hotel_room_exit_pos[index][0],
					g_hotel_room_exit_pos[index][1],
					g_hotel_room_exit_pos[index][2],
					180.0,
					floor,
					((hotel_id + 1) * 200) + (floor + 1000)
				);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, -1);
			}
		}
	}
}

stock EnterPlayerToHotelRoom(playerid, hotel_id, room_id)
{
	if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) == -1)
	{
		if(!GetHotelData(hotel_id, room_id, H_STATUS) || GetPlayerAccountID(playerid) == GetHotelData(hotel_id, room_id, H_OWNER_ID))
		{
			SetPlayerPosEx(playerid, 491.5204, -992.8733, 1002.9255, 0.0, 6, ((hotel_id + 1) * 400) + (room_id + 2000));
			SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);

			SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);
		}
		else GameTextForPlayer(playerid, "~r~Closed", 2500, 1);
	}
	return 1;
}

stock ShowPlayerHotelFloorsInfo(playerid, hotel_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx; idx < max_floors; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d этаж\n", idx + 1);
		strcat(string, fmt_str);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_SELECT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx, count; idx <= max_floors; idx ++)
	{
		if(idx == floor_id) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Выход\n");

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_LIFT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorInfo(playerid, hotel_id, floor_id)
{
	if(0 <= hotel_id <= MAX_HOTELS-1)
	{
		if(0 <= floor_id <= MAX_HOTEL_FLOORS-1)
		{
			new string[512];
			new fmt_str[45 + 1];

			new rent_time;
			new time = gettime();

			new s_idx = floor_id * 12;
			new e_idx = s_idx + 12;

			string = "Номер\t\tСтатус\t\tОплаченные дни\tПостоялец\n\n{FFFFFF}";
			while(s_idx < e_idx)
			{
				if(IsHotelRoomOwned(hotel_id, s_idx))
				{
					rent_time = GetElapsedTime(GetHotelData(hotel_id, s_idx, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS);
					if(rent_time < 0)
						rent_time = 0;

					format(fmt_str, sizeof fmt_str, "%d\t\t%s\t\t%d\t\t%s\n", (s_idx % 12) + 1, rent_time > 0 ? ("Занят\t") : ("Выселение"), rent_time, GetHotelData(hotel_id, s_idx, H_OWNER_NAME));
				}
				else format(fmt_str, sizeof fmt_str, "%d\t\tСвободен\n", (s_idx % 12) + 1);
				strcat(string, fmt_str);

				s_idx ++;
			}

			format(fmt_str, sizeof fmt_str, "{66CC99}Список номеров на %d этаже", floor_id + 1);
			Dialog(playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX, fmt_str, string, "Назад", "Закрыть");
		}
	}
}

stock ShowPlayerHotelDialog(playerid)
{
	if(GetPlayerInHotelID(playerid) != -1)
	{
		new businessid = GetPlayerInBiz(playerid);

		Dialog
		(
			playerid, DIALOG_HOTEL, DIALOG_STYLE_LIST,
			GetBusinessData(businessid, B_NAME),
			"1. Список номеров\n"\
			"2. Регистрация\n"\
			"3. Меню клиента",
			"Выбрать", "Закрыть"
		);
	}
}

stock GetPlayerInHotelID(playerid)
{
	new hotel_id = -1;
	new businessid = GetPlayerInBiz(playerid);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_HOTEL)
		{
			switch(businessid)
			{
				case 30:
					hotel_id = 0;

				case 31:
					hotel_id = 1;

				case 32:
					hotel_id = 2;

				default:
					hotel_id = -1;
			}
		}
	}
	return hotel_id;
}

stock EntranceStatusInitAll()
{
	for(new idx; idx < g_entrance_loaded; idx ++)
	{
		CallLocalFunction("EntranceStatusInit", "i", idx);
	}
}

stock UpdateEntrance(entranceid, houses)
{
	new status = (houses >= GetEntranceData(entranceid, E_FLOORS) * 4);

	if(GetEntranceData(entranceid, E_STATUS) != status)
	{
		if(GetEntranceData(entranceid, E_PICKUP_ID))
			DestroyPickup(GetEntranceData(entranceid, E_PICKUP_ID));

		if(IsValidDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON)))
			DestroyDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON));

		SetEntranceData(entranceid, E_PICKUP_ID, CreatePickup((status ? 1272 : 1273), 23, GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, entranceid));
		SetEntranceData(entranceid, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), (status ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

		SetEntranceData(entranceid, E_STATUS, status);
	}
}

stock ShowPlayerEntranceFloorsLift(playerid, entranceid, floor)
{
	new fmt_str[10];
	new string[(sizeof fmt_str) * MAX_ENTRANCE_FLOORS];

	new max_floors = GetEntranceData(entranceid, E_FLOORS) + 1;

	for(new idx, count; idx < max_floors; idx ++)
	{
		if(idx == floor) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Подъезд\n");

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_ENTRANCE_LIFT, DIALOG_STYLE_LIST, "{FFCD00}Выберите этаж", string, "Выбрать", "Отмена");
}

stock EnterPlayerToEntrance(playerid, entranceid)
{
	if(GetPlayerInEntrance(playerid) == -1)
	{
		SetPlayerPosEx(playerid, 2772.2939,1697.9370,997.5250, 0.0, 5, entranceid + 2500);

		SetPlayerInEntranceFloor(playerid, 0);
		SetPlayerInEntrance(playerid, entranceid);
	}
}

stock SetPlayerFactoryDeskUse(playerid, deskid, bool: status)
{
	if(!(0 <= deskid <= sizeof factory_desk-1)) return ;

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(status)
		{
			if(!factory_desk[deskid][FD_USED] && GetPlayerData(playerid, P_FACTORY_USE_DESK) == -1)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATE_P)
				{
					factory_desk[deskid][FD_USED] = true;

					// static const
					//	p_object_id[3] = {1954, 2926, 1718};

					// static const
					//	Float: p_object_z[3] = {0.09, 0.0, 0.06};

					// new rand = random(sizeof(p_object_id));
					// new Float: x, Float: y, Float: z;
					// GetPlayerPos(playerid, x, y, z);

					new Float: angle;

					new take_metall = GetPVarInt(playerid, "factory_take_metall");
					new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

					SetPlayerData(playerid, P_FACTORY_USE_DESK, deskid);
					TogglePlayerFactoryCP(playerid, false);

					if(!((deskid / 4) % 2))
					{
						angle = 180.0;
					}
					else angle = 0.0;
					SetPlayerFacingAngle(playerid, angle);

					//factory_object[playerid] = CreateDynamicObject(p_object_id[rand], x, y, 1044.08 + p_object_z[rand], 0.0, 0.0, angle + 180.0);
					ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 20_000, 0, USE_ANIM_TYPE_NONE - 1);

					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18644, A_OBJECT_BONE_RIGHT_HAND, 0.06, 0.02, 0.0, 30.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 18635, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.06, -0.1, 180.0, 80.0, 0.0, 1.0, 1.0, 1.0, 0);

					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATED);
					SetTimerEx("CreateFactoryProd", 18_000, false, "i", playerid);

					SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuel - (take_metall * 6));
					UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
				}
				else
				{
					if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_PUT_PROD)
						SendClientMessage(playerid, 0x999999FF, "Возьмите металл у раздаточного стола");
				}
			}
		}
		else
		{
			if(factory_desk[deskid][FD_USED])
			{
				if(GetPlayerData(playerid, P_FACTORY_USE_DESK) == deskid)
				{
					TogglePlayerFactoryCP(playerid, true);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, -1);

					factory_desk[deskid][FD_USED] = false;
				}
			}
		}
		UpdateFactoryDesk(deskid);
	}
}

stock SetPlayerGravity(playerid, Float:newgravity)
{
        if(!IsPlayerConnected(playerid)) return 1;
        setgravity{playerid} = true;
        gravity[playerid] = newgravity*50.0;
        moving{playerid} = false;
        return 1;
}

stock ResetPlayerGravity(playerid)
{
        setgravity{playerid} = false;
        gravity[playerid] = 0.0;
        moving{playerid} = false;
        return 1;
}

stock AddBan(user_id, time, days, ip[], description[], admin_name[])
{
	new query[200];
	new c_time = time-(time % 86400);

	mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (days * 86400), ip, description, admin_name);
	mysql_query(mysql, query, false);

	return !mysql_errno();
}

stock GivePlayerDrinkItem(playerid, itemid)
{
	new action_id = -1;
	switch(itemid+1)
	{
		case 1: // Лимонад
		{
			action_id = 23;
		}
		case 2, 6..7: // Пиво, Коньяк, Виски
		{
			action_id = 20;
		}
		case 3..5, 8: // Вино, Шампанское, Водка, Абсент
		{
			action_id = 22;
		}
		case 9: // Закуска
		{
			if(GetPlayerData(playerid, P_DRINK_STEP))
			{
				SetPlayerData(playerid, P_DRINK_STEP, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}

			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10213, A_OBJECT_BONE_RIGHT_HAND, 0.08, 0.05, 0.06, 180.0, 270.0, -30.0, 1.0, 1.0, 1.0, 0, 0);
			SetPlayerData(playerid, P_SNACK, true);
		}
		case 10: // Сигара
		{
			action_id = 21;
		}
	}
	if(action_id != -1)
	{
		if(GetPlayerData(playerid, P_SNACK))
		{
			SetPlayerData(playerid, P_SNACK, false);
			T_RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		}

		SetPlayerData(playerid, P_DRINK_STEP, 7);
		SetPlayerSpecialAction(playerid, action_id);
	}
	return 1;
}

stock FactoryPlayerDrop(playerid, bool: reject = true)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(reject)
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_CREATED) return ;

			SetPlayerChatBubble(playerid, "Брак", 0xFF0000FF, 10.0, 1500);
			ApplyAnimationEx(playerid, "OTB", "WTCHRACE_LOSE", 4.1, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
		}
		else
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_DROP_P) return ;
			SetPlayerTempJobCheckAnim(playerid, false);

			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			SendClientMessage(playerid, 0xFF6600FF, "Вы уронили продукт");
		}

		new bad_prods = GetPVarInt(playerid, "factory_bad_prods") + 1;
		SetPVarInt(playerid, "factory_bad_prods", bad_prods);

		GameTextForPlayer(playerid, "~r~~h~fail", 4000, 1);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
	}
}
stock ShowPlayerCompClubPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
 		new string[256];
		format(string,sizeof(string),"\
			"P"Наименование\t"P"Стоимость\n"W"Билет [30 мин] \t"GREEN"$%d\n"W"Билет [1 час] \t\
			"GREEN"$%d\n\t"W"Билет [2 часа] \t"GREEN"$%d\n"W"Билет [3 часа] \t"GREEN"$%d", GetBusinessData(businessid, B_PROD_PRICE) * gCompCosts[0],
			GetBusinessData(businessid, B_PROD_PRICE) * gCompCosts[1], GetBusinessData(businessid, B_PROD_PRICE) * gCompCosts[2],
			GetBusinessData(businessid, B_PROD_PRICE) * gCompCosts[3]);

		Dialog(playerid, DIALOG_BIZ_COMP, DSTH, "Меню", string, "Купить", "Отмена");
	}
}
stock ShowPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerTeamEx(playerid) <= 0)
		{
			new select_skin = GetPlayerSelectSkin(playerid);
			if(select_skin == -1)
			{
				new type = GetBusinessData(businessid, B_INTERIOR);
				new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
				new
					Float: cam_x, Float: cam_y, Float: cam_z,
					Float: v_cam_x, Float: v_cam_y, Float: v_cam_z;

				GetPlayerCameraPos(playerid, cam_x, cam_y, cam_z);
				GetPlayerCameraFrontVector(playerid, v_cam_x, v_cam_y, v_cam_z);

				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, 1992.8246,1898.4010,1001.0000,358.8916, interior, playerid + 32, false);

				InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, 1992.870117,1901.877075,1002.250, 4000, CAMERA_MOVE);
				InterpolateCameraLookAt(playerid, cam_x + floatmul(v_cam_x, 5.0), cam_y + floatmul(v_cam_y, 5.0), cam_z + floatmul(v_cam_z, 5.0), 1993.102905,1892.338867,999.2, 5000, CAMERA_MOVE);

				ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_CLOTHING);
				SetPlayerSelectClothingSkin(playerid, 0);

				SendClientMessage(playerid, 0x9C9C9CFF, "Используйте {33CC00}курсор мышки {9C9C9C}для навигации по меню");
			}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы состоите в организации, купить новую внешность нельзя");
	}
}

stock ExitPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_CLOTHING)
		{
			HidePlayerSelectPanel(playerid);

			SetPlayerSkinInit(playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);

			SetPlayerVirtualWorld(playerid, businessid + 255);
			SetPlayerData(playerid, P_USE_SELECT_PANEL, SELECT_PANEL_TYPE_NONE);

			//PlayerTextDrawSetString(playerid, price_select_TD[playerid][1], "exit...");
			SetTimerEx("HidePlayerSelectPanelPriceTimer", 1000, false, "i", playerid);

			SetPlayerData(playerid, P_SELECT_SKIN, -1);
		}
	}
}

stock ShowPlayerSelectPanelPrice(playerid, price = 0)
{
	if(price_select_TD[playerid][0] == PlayerText:-1)
	{
		price_select_TD[playerid][0] = CreatePlayerTextDraw(playerid, 312.2666, 357.9999, "‰e®a:_1.000.000_rub"); // пусто
		PlayerTextDrawLetterSize(playerid, price_select_TD[playerid][0], 0.1896, 0.7039);
		PlayerTextDrawAlignment(playerid, price_select_TD[playerid][0], 2);
		PlayerTextDrawColor(playerid, price_select_TD[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, price_select_TD[playerid][0], 255);
		PlayerTextDrawFont(playerid, price_select_TD[playerid][0], 2);
		PlayerTextDrawSetProportional(playerid, price_select_TD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, price_select_TD[playerid][0], 0);

		DmArenaTextDraw[playerid] = CreatePlayerTextDraw(playerid, 520.00, 100.00, "~b~Kills: ~g~0~n~~b~Deatch: ~g~Kills~n~~b~Deatch:~g~ 0 km");
		PlayerTextDrawAlignment(playerid, DmArenaTextDraw[playerid], 0);
		PlayerTextDrawBackgroundColor(playerid, DmArenaTextDraw[playerid], 0x000000ff);
		PlayerTextDrawFont(playerid, DmArenaTextDraw[playerid], 3);
		PlayerTextDrawLetterSize(playerid, DmArenaTextDraw[playerid], 0.399999, 1.00);
		PlayerTextDrawColor(playerid, DmArenaTextDraw[playerid], 0x0054c6ff);
		PlayerTextDrawSetOutline(playerid, DmArenaTextDraw[playerid], 1);
		PlayerTextDrawSetProportional(playerid, DmArenaTextDraw[playerid], 1);
		PlayerTextDrawSetShadow(playerid, DmArenaTextDraw[playerid], 1);
	}
	if(price != -1)
	{
		new fmt_str[32];

		format(fmt_str, sizeof fmt_str, "Цена: %d", price);
		PlayerTextDrawSetString(playerid, price_select_TD[playerid][0], fmt_str);
	}
	PlayerTextDrawShow(playerid, price_select_TD[playerid][0]);
	//PlayerTextDrawShow(playerid, price_select_TD[playerid][1]);
}
stock HidePlayerSelectPanelPrice(playerid)
{
	for(new idx; idx < sizeof price_select_TD[]; idx ++)
	{
		if(price_select_TD[playerid][idx] != PlayerText: -1)
		{
			PlayerTextDrawHide(playerid, price_select_TD[playerid][idx]);
			PlayerTextDrawDestroy(playerid, price_select_TD[playerid][idx]);

			price_select_TD[playerid][idx] = PlayerText: -1;
		}
	}
}

stock SetPlayerSelectClothingSkin(playerid, index = 0)
{
	new sex = GetPlayerSex(playerid);

	SetPlayerSelectSkin(playerid, index, g_business_clothing_skins[sex][index][0]);
	ShowPlayerSelectPanelPrice(playerid, g_business_clothing_skins[sex][index][1]);
}

stock CreateTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] == -1)
		{
			g_teleport_object[playerid][idx] = CreatePlayerObject(playerid, 3034, 0.0, 0.0, -2000.0, 0.0, 0.0, 0.0);
		}
	}
}

stock DestroyTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] != -1)
		{
			DestroyPlayerObject(playerid, g_teleport_object[playerid][idx]);
			g_teleport_object[playerid][idx] = -1;
		}
	}
}

stock PlayerTeleportInit(playerid, Float: x, Float: y, Float: z, Float: angle)
{
	new Float: dist = -0.862;
	angle += 90.0; //прибавление угла; можно и отнимать

	for(new idx = 2; idx --; )
	{
		SetPlayerObjectPos(playerid, g_teleport_object[playerid][idx], x + dist * -floatsin(angle, degrees), y + dist * floatcos(angle, degrees), z - 1.02);
		SetPlayerObjectRot(playerid, g_teleport_object[playerid][idx], 90.0, 90.0, angle - 90.0);

		dist = floatabs(dist);
	}
}

stock GetOwnableCarBySqlID(sql_id, buffer[] = {0, 0, 0})
{
	buffer[2] = INVALID_VEHICLE_ID;
	for(buffer[0] = 1; buffer[0] < MAX_VEHICLES; buffer[0] ++)
	{
		if(!IsAOwnableCar(buffer[0])) continue;
		buffer[1] = GetVehicleData(buffer[0], V_ACTION_ID);

		if(GetOwnableCarData(buffer[1], OC_SQL_ID) != sql_id) continue;

		buffer[2] = buffer[0];
		break;
	}
	return buffer[2];
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;

		playerid = idx;
		break;
	}
	return playerid;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	sscanf(name, "u", playerid);

	return playerid;
}

stock GetPlayerSqlIDByName(name[])
{
	new sql_id,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM `accounts` WHERE name = '%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	sql_id = cache_num_rows() ? cache_get_row_int(0, 0) : -1;

	cache_delete(result);

	return sql_id;
}

stock GetPlayerNameBySqlID(sql_id)
{
	new name[21] = "none",
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT name FROM `accounts` WHERE id = '%e' LIMIT 1", sql_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, name);

	cache_delete(result);

	return name;
}

stock UpdateHouse(houseid)
{
	if(GetHouseData(houseid, H_ENTRACE) == -1)
	{
		if(GetHouseData(houseid, H_ENTER_PICKUP))
			DestroyPickup(GetHouseData(houseid, H_ENTER_PICKUP));

		if(IsValidDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON)))
			DestroyDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON));

		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseOwned(houseid) ? 1272 : 1273), 23, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseOwned(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
		home_area[houseid] = CreateDynamicSphere(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 3.0, 0, 0, -1);
	}
}

stock HouseHealthInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 2)
	{
		if(!GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			type = GetHouseData(houseid, H_TYPE);
			SetHouseData(houseid, H_HEALTH_PICKUP, CreatePickup(1240, 23, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_HOUSE_HEALTH, houseid));
		}
	}
	else
	{
		if(GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			DestroyPickup(GetHouseData(houseid, H_HEALTH_PICKUP));
			SetHouseData(houseid, H_HEALTH_PICKUP, 0);
		}
	}
}

stock HouseStoreInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
	{
		if(GetHouseData(houseid, H_STORE_LABEL) == Text3D:-1)
		{
			if(GetHouseData(houseid, H_STORE_X) == 0.0 && GetHouseData(houseid, H_STORE_Y) == 0.0 && GetHouseData(houseid, H_STORE_Z) == 0.0)
			{
				type = GetHouseData(houseid, H_TYPE);

				SetHouseData(houseid, H_STORE_X, GetHouseTypeInfo(type, HT_STORE_POS_X));
				SetHouseData(houseid, H_STORE_Y, GetHouseTypeInfo(type, HT_STORE_POS_Y));
				SetHouseData(houseid, H_STORE_Z, GetHouseTypeInfo(type, HT_STORE_POS_Z));
			}
			SetHouseData(houseid, H_STORE_LABEL, CreateDynamic3DTextLabel("Шкаф", 0xFFFF00FF, GetHouseData(houseid, H_STORE_X), GetHouseData(houseid, H_STORE_Y), GetHouseData(houseid, H_STORE_Z) + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));

			CallLocalFunction("UpdateHouseStore", "i", houseid);
		}
	}
	else
	{
		if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
		{
			if(IsValidDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL)))
			{
				DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
				SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
			}
		}
	}
}

stock SellHouse(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new house_price = GetHouseData(houseid, H_PRICE);
		new house_percent = house_price / 100 * 70;
		new house_improvemnts_price = HouseImprovementsPrice(houseid);

		if(house_improvemnts_price)
			house_improvemnts_price = house_improvemnts_price / 100 * 70;

		new query[200];
		new return_money = (house_price - house_percent) + house_improvemnts_price;

		CallLocalFunction("EvictHouseRentersAll", "i", houseid);

		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);

		SetHouseData(houseid, H_OWNER_ID,		0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа дома");

			SetHouseData(houseid, H_IMPROVEMENTS,	0);

			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts a,houses h SET a.bank=%d,a.house_type=-1,a.house=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

			UpdateHouse(houseid);

			HouseHealthInit(houseid);
			HouseStoreInit(houseid);

			GivePlayerMoneyEx(playerid, 0, "Продажа дома государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой дом!");

			format(query, sizeof query, "Налог за продажу дома составил 70 процентов от его стоимости {99CC00}(%d руб)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 30 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				CallLocalFunction("EntranceStatusInit", "i", entranceid);
			}
		}
		else
		{
			if(BuyPlayerHouse(to_player, houseid, true, price) == 1)
			{
				new total_price = price + house_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 50 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,house=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				GivePlayerMoneyEx(playerid, total_price, "Продажа дома игроку", false, false);

				house_price = price;
				house_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (house_price - house_percent), house_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerHouse(playerid, houseid, bool: buy_from_owner = false, price = -1)
{
	if(!IsHouseOwned(houseid) && GetPlayerHouse(playerid) == -1)
	{
		if(price <= 0)
			price = GetHouseData(houseid, H_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, houses h SET a.money=%d,a.house_type=%d,a.house=%d,h.owner_id=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOME, houseid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_HOUSE, 		houseid);
				SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_HOME);

				SetHouseData(houseid, H_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetHouseData(houseid, H_IMPROVEMENTS, 	0);

				SetHouseData(houseid, H_STORE_X, 0.0);
				SetHouseData(houseid, H_STORE_Y, 0.0);
				SetHouseData(houseid, H_STORE_Z, 0.0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetHouseData(houseid,	H_RENT_DATE,	rent_time);
					SetHouseData(houseid,	H_LOCK_STATUS,	false);

					new entranceid = GetHouseData(houseid, H_ENTRACE);
					if(entranceid != -1)
					{
						CallLocalFunction("EntranceStatusInit", "i", entranceid);
					}
				}
				else
				{
					if(GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetHouseData(houseid, H_RENT_DATE, rent_time);
					}
				}
				format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

				UpdateHouse(houseid);

				HouseHealthInit(houseid);
				HouseStoreInit(houseid);

				GivePlayerMoneyEx(playerid, -price, "Покупка дома", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {3399FF}/home {66CC00},чтобы узнать о возможностях");
				SendClientMessage(playerid, 0xFFCC00FF, "Используйте {3399FF}/exit {FFCC00}для выхода из дома");

				if(GetPlayerData(playerid, P_QUEST_2) != 1)
				{
					GivePlayerMoneyEx(playerid, 500000, "Квест жильё");
					AddPlayerData(playerid, P_EXP, +, 2);
					SetPlayerData(playerid, P_QUEST_2, 1);
					SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первое жильё'. За это вы получаете 500.000 рублей и 2 EXP");
					UpdatePlayerDatabaseInt(playerid, "quest2", 1);
					if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
					{
						SetPlayerData(playerid, P_EXP, 0);
						AddPlayerData(playerid, P_LEVEL, +, 1);
						SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
						SetPlayerLevelInit(playerid);
						UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
					}
					UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
				}

				format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 34)");

			return 0;
		}
		return 0;
	}
	return -1;
}


stock EnterPlayerToHouse(playerid, houseid)
{
	if(GetPlayerInHouse(playerid) == -1)
	{
		new type = GetHouseData(houseid, H_TYPE);

		SetPlayerPosEx
		(
			playerid,
			GetHouseTypeInfo(type, HT_ENTER_POS_X),
			GetHouseTypeInfo(type, HT_ENTER_POS_Y),
			GetHouseTypeInfo(type, HT_ENTER_POS_Z),
			GetHouseTypeInfo(type, HT_ENTER_POS_ANGLE),
			GetHouseTypeInfo(type, HT_INTERIOR),
			houseid + 2000
		);
		SetPlayerInHouse(playerid, houseid);
	}
}

stock ExitPlayerFromHouse(playerid, Float: radius = 3.0)
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
		{
			SetPlayerInHouse(playerid, -1);

			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				new floor = GetHouseData(houseid, H_FLAT_ID) / 4 + 1;
				type = GetHouseData(houseid, H_FLAT_ID) % 4;

				SetPlayerInEntrance(playerid, entranceid);
				SetPlayerInEntranceFloor(playerid, floor);

				SetPlayerPosEx
				(
					playerid,
					g_entrance_flat_pos[type][3],
					g_entrance_flat_pos[type][4],
					g_entrance_flat_pos[type][2],
					g_entrance_flat_pos[type][5],
					5,
					(entranceid * 100) + floor
				);
			}
			else
			{
				SetPlayerPosEx
				(
					playerid,
					GetHouseData(houseid, H_EXIT_POS_X),
					GetHouseData(houseid, H_EXIT_POS_Y),
					GetHouseData(houseid, H_EXIT_POS_Z),
					GetHouseData(houseid, H_EXIT_ANGLE),
					0,
					0
				);
			}
			return 1;
		}
	}
	return 0;
}

stock GetPlayerHouse(playerid, type = -1)
{
	new houseid = GetPlayerData(playerid, P_HOUSE);
	if(houseid != -1)
	{
		switch(type)
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOME)
				{
					if(GetHouseData(houseid, H_OWNER_ID) == GetPlayerAccountID(playerid))
					{
						return houseid;
					}
				}
			}
			case HOUSE_TYPE_ROOM:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_ROOM)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHouseRenterInfo(houseid, room, HR_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			case HOUSE_TYPE_HOTEL:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOTEL)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHotelData(houseid, room, H_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			default:
				return houseid;
		}
	}
	return -1;
}

stock HouseImprovementsPrice(houseid)
{
	new price;
	new level = GetHouseData(houseid, H_IMPROVEMENTS);

	if(1 <= level <= sizeof g_house_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_house_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock IsPlayerInRangeOfHouse(playerid, houseid, Float: radius = 10.0)
{
	new result;
	if(GetHouseData(houseid, H_ENTRACE) != -1)
	{
		new flatid = GetHouseData(houseid, H_FLAT_ID) % 4;
		result = IsPlayerInRangeOfPoint(playerid, radius, g_entrance_flat_pos[flatid][0], g_entrance_flat_pos[flatid][1], g_entrance_flat_pos[flatid][2]);
	}
	else result = IsPlayerInRangeOfPoint(playerid, radius, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z));

	return result;
}

stock BuyOwnableCar(playerid, marketid, ownablecar, color_1, color_2)
{
	printf("player_cars: %d / player_slots: %d", GetPlayerOwnableCarLasts(playerid), GetPlayerCarSlots(playerid));

	printf("BuyOwnableCar(%d, %d, %d, %d, %d)", playerid, marketid, ownablecar, color_1, color_2);

	ExitPlayerBuyCarMarket(playerid);

	if((GetPlayerOwnableCarLasts(playerid) + 1) > GetPlayerCarSlots(playerid))
	{
		SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");
		return -1;
	}
 	new modelid;

	if(ownablecar < 1000)
		modelid = car_market_data[marketid][ownablecar][0];
	else
		modelid = ownablecar - 1000;

	printf("modelid = %d | ownablecar = %d", modelid, ownablecar);

 	if(marketid != 0 && marketid != 2)
	{
	    if(GetPlayerPrem(playerid) == 0)
		if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
		{
			SendClientMessage(playerid, 0x999999FF, "Для покупки транспорта этого класса нужно иметь недвижимость");
			return -1;
		}
	}

 	/*if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, 0x999999FF, "Для покупки транспорта нужно выгрузить уже загруженный транспорт с сервера");
		return -1;
	}*/

	if(GetPlayerMoneyEx(playerid) < GetVehicleInfo(modelid - 400, VI_PRICE))
	{
		SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки этого транспорта");
		return -1;
	}

	GivePlayerMoneyEx(playerid, -GetVehicleInfo(modelid - 400, VI_PRICE), "Покупка ТС в автосалоне", true, true);

	new biz_id = marketid,
		take_prods = random(5) + 6;

	if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
	{
		AddBusinessData(biz_id, B_PRODS, -, take_prods);
		new cena = GetVehicleInfo(modelid - 400, VI_PRICE) / 100 * 9;
		AddBusinessData(biz_id, B_BALANCE, +, cena);
	}

	new buy_cars_count = cars_after_purchase_count[marketid]++;

	if(buy_cars_count >= 4)
		cars_after_purchase_count[marketid] = 0;

	new Float: pos_x = cars_pos_after_purchase[marketid][buy_cars_count][0];
	new Float: pos_y = cars_pos_after_purchase[marketid][buy_cars_count][1];
	new Float: pos_z = cars_pos_after_purchase[marketid][buy_cars_count][2];
	new Float: angle = cars_pos_after_purchase[marketid][buy_cars_count][3];

	new query[220],
		Cache: result;

	format
	(
		query, sizeof query,
		"INSERT INTO ownable_cars \
		(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
		VALUES \
		('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
		GetPlayerAccountID(playerid),
		modelid,
		color_1,
		color_2,
		pos_x,
		pos_y,
		pos_z,
		angle,
		gettime()
	);
	result = mysql_query(mysql, query, true);

	cache_delete(result);

	SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с покупкой нового транспорта!");
	SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы загрузить авто");
	SendClientMessage(playerid, 0x3399FFFF, "Документы на транспорт будут оформлены в течении нескольких минут");

	if(GetPlayerData(playerid, P_QUEST_3) != 1)
	{
		GivePlayerMoneyEx(playerid, 600000, "Квест авто");
		AddPlayerData(playerid, P_EXP, +, 2);
		SetPlayerData(playerid, P_QUEST_3, 1);
		SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первое авто'. За это вы получаете 600.000 рублей и 2 EXP");
		UpdatePlayerDatabaseInt(playerid, "quest3", 1);
		if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
		{
			SetPlayerData(playerid, P_EXP, 0);
			AddPlayerData(playerid, P_LEVEL, +, 1);
			SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
			SetPlayerLevelInit(playerid);
			UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
		}
		UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
	}

	return 1;
}

stock GetFreeHousesCount()
{
	new count;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock ShowHouseRenterInfo(playerid, houseid, roomid)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
	{
		if(0 <= roomid <= MAX_HOUSE_ROOMS-1)
		{
			if(IsHouseRoomOwned(houseid, roomid))
			{
				SetPlayerUseListitem(playerid, roomid);

				new string[144];
				new time = gettime();

				new s_year, s_month, s_day; // поселение
				timestamp_to_date(GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), s_year, s_month, s_day);

				//new e_year, e_month, e_day;	// выселение
				//timestamp_to_date(GetHouseRoomInfo(houseid, roomid, HR_RENT_DATE), e_year, e_month, e_day);

				format
				(
					string, sizeof string,
					"1. Арендатор\t\t\t{CCCC00}%s\n"\
					"2. Поселился\t\t\t%02d-%02d-%d\n"\
					"3. Проживает\t\t\t{66BB33}%d дней\n"\
					"{888888}4. Выселить",
					GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME),
					s_day, s_month, s_year,
					GetElapsedTime(time, GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), CONVERT_TIME_TO_DAYS)
				);
				Dialog(playerid, DIALOG_HOUSE_RENTER_INFO, DIALOG_STYLE_LIST, "{33AACC}Информация о арендаторе", string, "Действие", "Назад");
			}
			else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
		}
	}
}

stock ShowStockInfo(playerid, stockid, bool:error = false)
{
	new string[1544];
	new mojet = GetPlayerMoneyEx(playerid) / GetStonksData(stockid, S_PRICE);
	if(mojet > GetStonksData(stockid, S_KOLVO)) mojet = GetStonksData(stockid, S_KOLVO);
	new msg[40];
	format(msg, sizeof msg, "Информация о акциях %s(#%d)",GetStonksData(stockid, S_NAME), stockid);
	format
	(
		string, sizeof string,
		"Вы выбрали для просмотра акции %s\n"\
		"Цена за 1-у акцию на данный момент равна %d\n"\
		"Осталось акций у данной компании - %d\n"\
		"Если вы решили купить данные акции, то для начала ознакомьтесь с договором покупки ниже\n\n"\
		"1) Акциий можно купить минимум от 5-ти штук\n"\
		"2) При продаже акций с вас будет взыматься процент в зависимости от выбора банка...\n"\
		"через который будет проходить продажа(Процент продаже написан после договора)\n"\
		"3) Если вы продали акции и ушли в минут то не компания не администрация сервера не обязаны возвращать вам деньги\n"\
		"4) При продаже акций вы можете получить доход который даже не покроет ваши расходы.\n"\
		"Чтобы не уйти в минус перед продажей мониторьте цену на акции!\n\n"\
		"В данный момент вы можете купить - %d акций на все свои деньги\n\n"\
		"При продаже в государственном банке с вас будет взято 3 процента от сделки и 2 акции\n"\
		"Например при продажи 5 акций с вас возьмут 3 процента сделки и деньги вы получили за 3 акции (5-2=3)\n"\
		"При продажи через комерческий банк с вас возьмут 2% и 5 акций\n\n"\
		"Введите какое колличество акций хотите купить:\n",
		GetStonksData(stockid, S_NAME), GetStonksData(stockid, S_PRICE), GetStonksData(stockid, S_KOLVO), mojet
	);
	if(error == true) strcat(string, "{FF3300}Одно из условий нарушено!");
	SetPVarInt(playerid, "mojet_buy", mojet);
	SetPVarInt(playerid, "stonks_id", stockid);
	Dialog(playerid, DIALOG_STONKS_INFO, DIALOG_STYLE_INPUT, msg, string, "Купить", "Отмена");
}

stock AddHouseRenter(houseid, roomid, playerid)
{
	if(!IsHouseRoomOwned(houseid, roomid))
	{
		new query[128];
		new Cache: result;

		new time = gettime();

		format(query, sizeof query, "UPDATE accounts SET house_type=%d,house_room=%d,house=%d WHERE id=%d LIMIT 1", HOUSE_TYPE_ROOM, roomid, houseid, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "INSERT INTO houses_renters (owner_id,house_id,room_id,rent_time,time) VALUES (%d,%d,%d,%d,%d)", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID), roomid, 0, time);
		result = mysql_query(mysql, query, true);

		SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 		cache_insert_id());
		SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	GetPlayerAccountID(playerid));
		SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
		SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	time);

		format(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME), 21, GetPlayerNameEx(playerid));

		SetPlayerData(playerid, P_HOUSE, 		houseid);
		SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_ROOM);
		SetPlayerData(playerid, P_HOUSE_ROOM, 	roomid);

		AddHouseRentersCount(houseid, +, 1);

		cache_delete(result);
	}
}

stock EvictHouseRenter(houseid, roomid, renter_id = INVALID_PLAYER_ID, ownerid = INVALID_PLAYER_ID)
{
	if(IsHouseRoomOwned(houseid, roomid))
	{
		new query[90];

		format(query, sizeof query, "DELETE FROM houses_renters WHERE owner_id=%d AND house_id=%d", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d LIMIT 1", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			if(renter_id == INVALID_PLAYER_ID)
				renter_id = GetPlayerID(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME));

			if(renter_id != INVALID_PLAYER_ID)
			{
				if(GetPlayerHouse(renter_id, HOUSE_TYPE_ROOM) == houseid)
				{
					if(ownerid != INVALID_PLAYER_ID)
					{
						format(query, sizeof query, "%s выселил Вас из своего дома", GetPlayerNameEx(ownerid));
						SendClientMessage(renter_id, 0x3399FFFF, query);
					}

					SetPlayerData(renter_id, P_HOUSE, -1);
					SetPlayerData(renter_id, P_HOUSE_TYPE, -1);
					SetPlayerData(renter_id, P_HOUSE_ROOM, -1);
				}
			}

			SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 	0);
			SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	0);

			AddHouseRentersCount(houseid, -, 1);
			return 1;
		}
		return -1;
	}
	return 0;
}

stock GetHouseIndexBySQLID(sql_id)
{
	new index = -1;

	for(new idx; idx < MAX_HOUSES; idx ++)
	{
		if(GetHouseData(idx, H_SQL_ID) != sql_id) continue;

		index = idx;
		break;
	}
	return index;
}

stock GetHouseFreeRoom(houseid)
{
	new roomid = -1;

	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(IsHouseRoomOwned(houseid, idx)) continue;

		roomid = idx;
		break;
	}
	return roomid;
}

stock LotteryBuyTicketCount()
{
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!GetPlayerData(playerid, P_LOTTERY)) continue;

		count ++;
	}
	return count;
}

stock ShowPlayerWaitPanel(playerid)
{
	for(new idx; idx < sizeof wait_panel_TD; idx ++)
	{
		TextDrawShowForPlayer(playerid, wait_panel_TD[idx]);
	}
}

stock HidePlayerWaitPanel(playerid)
{
	for(new idx; idx < sizeof wait_panel_TD; idx ++)
	{
		TextDrawHideForPlayer(playerid, wait_panel_TD[idx]);
	}
}

stock ShowPlayerSelectPanel(playerid, type)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_NONE)
	{
		for(new idx; idx < 5; idx++)
		{
			TextDrawShowForPlayer(playerid, select_TD[idx]);
		}
		SetPlayerData(playerid, P_USE_SELECT_PANEL, type);

		SelectTextDraw(playerid, 0x009900FF);
	}
}

stock HidePlayerSelectPanel(playerid)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) != SELECT_PANEL_TYPE_NONE)
	{
		CancelSelectTextDraw(playerid);

		for(new idx; idx < 5; idx ++)
		{
			TextDrawHideForPlayer(playerid, select_TD[idx]);
		}
		SetPlayerData(playerid, P_USE_SELECT_PANEL, SELECT_PANEL_TYPE_NONE);
	}
}

stock IsPlayerHaveWeapon(playerid, weaponid)
{
	new weapon, ammo;
	new bool: is_have = false;

	for(new idx; idx <= 12; idx ++)
	{
		GetPlayerWeaponData(playerid, idx, weapon, ammo);
		if(weapon != weaponid) continue;

		is_have = true;
		break;
	}
	return is_have;
}

stock IsAJobCar(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_MECHANIC,
			VEHICLE_ACTION_TYPE_TRUCKER:
		{
			return 1;
		}
	}
	return 0;
}

stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;

	new vehicleid = INVALID_VEHICLE_ID;

	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;

	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;

		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}

stock ShowPlayerBuyJerricanDialog(playerid, stationid)
{
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_jerrican_in_fuelst", stationid);

		new fmt_str[70];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Канистра на этой заправке стоит %d руб\n"\
			"Вы хотите купить ее?",
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 250
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_JERRICA, DIALOG_STYLE_MSGBOX, "{FFCD00}Покупка канистры", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Канистру с топливом можно купить на любой АЗС");
}

stock LoadOrders()
{
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM orders");
	rows = cache_num_rows();

	if(rows > sizeof g_order)
		rows = sizeof g_order;

	new buffer;
	for(new idx; idx < rows; idx ++)
	{
		SetOrderData(idx, O_SQL_ID,	cache_get_row_int(idx, 0));
		SetOrderData(idx, O_TYPE, 	cache_get_row_int(idx, 1));

		SetOrderData(idx, O_COMPANY_ID, cache_get_row_int(idx, 2));
		SetOrderData(idx, O_AMOUNT, 	cache_get_row_int(idx, 3));
		SetOrderData(idx, O_PRICE, 		cache_get_row_int(idx, 4));
		SetOrderData(idx, O_TIME, 		cache_get_row_int(idx, 5));
		SetOrderData(idx, O_USED, 		false);

		buffer = GetOrderData(idx, O_COMPANY_ID);
		switch(GetOrderData(idx, O_TYPE))
		{
			case ORDER_TYPE_FUEL_STATION:
			{
				SetFuelStationData(buffer, FS_ORDER_ID, idx);
			}
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(buffer, B_ORDER_ID, idx);
			}
		}
	}
	cache_delete(result);

	printf("[Orders]: Заказов загружено: %d", rows);
}

stock CreateOrder(type, company, amount, price, description[] = "")
{
	#pragma unused description // TODO;

	new order_id = GetOrderFreeSlot();
	if(order_id != -1)
	{
		new query[128];
		new Cache: result;
		new time = gettime();

		format(query, sizeof query, "INSERT INTO orders (type,company,amount,price,time) VALUES (%d,%d,%d,%d,%d)", type, company, amount, price, time);
		result = mysql_query(mysql, query, true);

		if(!mysql_errno())
		{
			new year, month, day;
			getdate(year, month, day);

			SetOrderData(order_id, O_TYPE, type);
			SetOrderData(order_id, O_COMPANY_ID, company);
			SetOrderData(order_id, O_AMOUNT, amount);
			SetOrderData(order_id, O_PRICE, price);
			SetOrderData(order_id, O_TIME, time);
			SetOrderData(order_id, O_USED, false);

			SetOrderData(order_id, O_SQL_ID, cache_insert_id());

			switch(type)
			{
				case ORDER_TYPE_FUEL_STATION:
				{
					SetFuelStationData(company, FS_ORDER_ID, order_id);
				}
				case ORDER_TYPE_BUSINESS:
				{
					SetBusinessData(company, B_ORDER_ID, order_id);
				}
			}
		}
		else order_id = -1;

		cache_delete(result);
	}
	return order_id;
}

stock DeleteOrder(orderid)
{
	if(GetOrderData(orderid, O_SQL_ID) > 0)
	{
		new query[64];
		new company = GetOrderData(orderid, O_COMPANY_ID);

		switch(GetOrderData(orderid, O_TYPE))
		{
			case ORDER_TYPE_FUEL_STATION:
			{
				SetFuelStationData(company, FS_ORDER_ID, -1);
			}
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(company, B_ORDER_ID, -1);
			}
		}

		format(query, sizeof query, "DELETE FROM orders WHERE type=%d AND company=%d", GetOrderData(orderid, O_TYPE), GetOrderData(orderid, O_COMPANY_ID));
		mysql_query(mysql, query, false);

		SetOrderData(orderid, O_SQL_ID, 0);
		SetOrderData(orderid, O_PRICE,  0);
		SetOrderData(orderid, O_AMOUNT, 0);
	}
}

stock GetOrderFreeSlot()
{
	new slot = -1;

	for(new idx; idx < sizeof g_order; idx ++)
	{
		if(GetOrderData(idx, O_SQL_ID) > 0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock SellFuelStation(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fuel_st_price = GetFuelStationData(stationid, FS_PRICE);
		new fuel_st_percent = (fuel_st_price * 5) / 100;
		new fuel_st_improvemnts_price = FuelStationImprovementsPrice(stationid);

		if(fuel_st_improvemnts_price)
			fuel_st_improvemnts_price = (fuel_st_improvemnts_price * 95) / 100;

		new query[170];
		new return_money = (fuel_st_price - fuel_st_percent) + fuel_st_improvemnts_price;

		SetPlayerData(playerid, P_FUEL_ST, -1);

		SetFuelStationData(stationid, FS_OWNER_ID, 0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа АЗС");

			SetFuelStationData(stationid, FS_IMPROVEMENTS, 	0);

			SetFuelStationData(stationid, FS_FUELS, 		1000);
			SetFuelStationData(stationid, FS_FUEL_PRICE,	5);
			SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);

			SetFuelStationData(stationid, FS_BALANCE,		0);
			SetFuelStationData(stationid, FS_RENT_DATE,		0);
			SetFuelStationData(stationid, FS_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.bank=%d,a.fuel_st=-1,f.owner_id=0,f.fuels=1000,f.fuel_price=3,f.lock=0 WHERE a.id=%d AND f.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);

			//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа заправочной станции государству", false, false);
			CallLocalFunction("UpdateFuelStationLabel", "i", stationid);

			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свою заправочную станцию!");

			format(query, sizeof query, "Налог за продажу заправочной станции составил 30 процентов от ее стоимости {99CC00}(%d руб)", fuel_st_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", fuel_st_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

		}
		else
		{
			if(BuyPlayerFuelStation(to_player, stationid, true, price) == 1)
			{
				new total_price = price + fuel_st_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", fuel_st_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,fuel_st=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				GivePlayerMoneyEx(playerid, total_price, "Продажа заправочной станции игроку", false, false);

				fuel_st_price = price;
				fuel_st_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (fuel_st_price - fuel_st_percent), fuel_st_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerFuelStation(playerid, stationid, bool: buy_from_owner = false, price = -1)
{
	if(!IsFuelStationOwned(stationid) && GetPlayerFuelStation(playerid) == -1)
	{
		if(price <= 0)
			price = GetFuelStationData(stationid, FS_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,a.fuel_st=%d,f.owner_id=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, stationid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_FUEL_ST, stationid);

				SetFuelStationData(stationid, FS_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetFuelStationData(stationid, FS_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetFuelStationData(stationid, FS_FUELS, 		50);
					SetFuelStationData(stationid, FS_FUEL_PRICE,	5);
					SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);

					SetFuelStationData(stationid, FS_BALANCE,		0);
					SetFuelStationData(stationid, FS_RENT_DATE,		rent_time);
					SetFuelStationData(stationid, FS_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetFuelStationData(stationid, FS_RENT_DATE, rent_time);
					}
				}
				format(g_fuel_station[stationid][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", stationid);

				GivePlayerMoneyEx(playerid, -price, "Покупка заправочной станции", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {3399FF}/fuelst {66CC00}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE fuel_stations SET improvements=0,fuels=%d,fuel_price=%d,buy_fuel_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_RENT_DATE), GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 16)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock FuelStationFillCar(playerid, vehicleid, stationid)
{
	if(IsPlayerDriver(playerid) && IsPlayerInVehicle(playerid, vehicleid))
	{
		if(0 <= stationid <= g_fuel_station_loaded)
		{
			if(!GetFuelStationData(stationid, FS_LOCK_STATUS))
			{
				new fmt_str[150];

				new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay");
				new buy_fuel_count = GetPVarInt(playerid, "buy_fuel_count");

				new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 100;

				if(GetPlayerMoneyEx(playerid) >= price)
				{
					if((GetVehicleData(vehicleid, V_FUEL) + 10.0) <= 150.0)
					{
						if(GetFuelStationData(stationid, FS_FUELS) >= 10)
						{
							if(IsFuelStationOwned(stationid))
							{
								AddFuelStationData(stationid, FS_FUELS, -, 10);
								AddFuelStationData(stationid, FS_BALANCE, +, price);
							}
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 10);

							buy_fuel_count += 10;
							buy_fuel_pay += price;

							SetPVarInt(playerid, "buy_fuel_pay", buy_fuel_pay);
							SetPVarInt(playerid, "buy_fuel_count", buy_fuel_count);

							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);

							fmt_str = "";
							GivePlayerMoneyEx(playerid, -price, "Покупка топлива на заправке", false, false);
						}
						else strcat(fmt_str, "~n~~r~~h~no fuel");
					}
					else strcat(fmt_str, "~n~~r~~h~benzobak full");

					format(fmt_str, sizeof fmt_str, "~w~summa: ~g~~h~%d rub~n~~w~litres: ~b~%d%s", buy_fuel_pay, buy_fuel_count, fmt_str);
					GameTextForPlayer(playerid, fmt_str, 3000, 4);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для заправки");
			}
			else
			{
				GameTextForPlayer(playerid, "~w~fuel station~n~~r~~h~is closed", 3000, 4);
				//SendClientMessage(playerid, 0xFF6600FF, "Заправочная станция закрыта");
			}
		}
	}
}

stock GetFuelStationMaxFuel(stationid)
{
	new max_fuels = 4000;
	new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(i_level > 3)
		i_level = 3;

	max_fuels += i_level * 4000;
	return max_fuels;
}

stock GetNearestFuelStation(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new stationid = -1;
	new Float: my_dist;

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			stationid = idx;
		}
	}
	return stationid;
}

stock GetPlayerFuelStation(playerid)
{
	new stationid = GetPlayerData(playerid, P_FUEL_ST);

	if(stationid != -1)
	{
		if(GetFuelStationData(stationid, FS_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return stationid;
		}
	}
	return -1;
}

stock FuelStationImprovementsPrice(stationid)
{
	new price;
	new level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(1 <= level <= sizeof g_fuel_station_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_fuel_station_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock ShowPlayerFuelStationPayForRent(playerid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Заправочная станция:\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t%d руб\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать заправочную станцию?",
			stationid,
			GetFuelStationData(stationid, FS_NAME),
			GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_FUEL_ST, DIALOG_STYLE_INPUT, "{66CC00}Аренда заправочной станции", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerBusinessPayForRent(playerid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Бизнес:\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t%d руб\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать бизнес?",
			businessid,
			GetBusinessData(businessid, B_NAME),
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_BIZ, DIALOG_STYLE_INPUT, "{66CC00}Аренда бизнеса", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHousePayForRent(playerid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Дом:\t\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная квартплата:\t\t%d руб\n"\
			"Субсидия:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите оплатить дом?",
			houseid,
			GetHouseData(houseid, H_NAME),
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2,
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Нет") : ("Есть")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_HOUSE, DIALOG_STYLE_INPUT, "{66CC00}Оплата дома", fmt_str, "Оплатить", "Назад");
	}
}

stock SellBusiness(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetPlayerBusiness(playerid);

	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = biz_price / 100 * 60;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);

		if(biz_improvemnts_price)
			biz_improvemnts_price = biz_improvemnts_price / 100 * 35;

		new query[200];
		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;

		SetPlayerData(playerid, P_BUSINESS, 		-1);

		SetBusinessData(businessid, B_OWNER_ID, 	0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа бизнеса");

			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);

			SetBusinessData(businessid, B_BALANCE,			0);
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);

			BusinessHealthPickupInit(businessid);

			format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%d,a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);

			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой бизнес!");

			format(query, sizeof query, "Налог за продажу бизнеса составил 60 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 35 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 20 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,business=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);

				g_business_gps_init = false;
				GivePlayerMoneyEx(playerid, total_price, "Продажа бизнеса игроку", false, false);

				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (biz_price - biz_percent), biz_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock SellBusiness_2(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetBusiness_2(playerid);

	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = biz_price / 100 * 60;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);

		if(biz_improvemnts_price)
			biz_improvemnts_price = biz_improvemnts_price / 100 * 35;

		new query[200];
		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;

		SetPlayerData(playerid, P_BUSINESS_2, 		-1);

		SetBusinessData(businessid, B_OWNER_ID, 	0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа бизнеса");

			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);

			SetBusinessData(businessid, B_BALANCE,			0);
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);

			BusinessHealthPickupInit(businessid);

			format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%d,a.business_2=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);

			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой бизнес!");

			format(query, sizeof query, "Налог за продажу бизнеса составил 60 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 35 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 20 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,business_2=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);

				g_business_gps_init = false;
				GivePlayerMoneyEx(playerid, total_price, "Продажа бизнеса игроку", false, false);

				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (biz_price - biz_percent), biz_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerBusiness(playerid, businessid, bool: buy_from_owner = false, price = -1)
{
	if(!IsBusinessOwned(businessid) && GetPlayerBusiness(playerid) == -1)
	{
		if(price <= 0)
			price = GetBusinessData(businessid, B_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,a.business=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, businessid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_BUSINESS, businessid);

				SetBusinessData(businessid, B_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetBusinessData(businessid,	B_PRODS, 		20);
					SetBusinessData(businessid,	B_PROD_PRICE, 	0);

					SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
					SetBusinessData(businessid,	B_ENTER_PRICE, 	0);

					SetBusinessData(businessid,	B_BALANCE, 		0);
					SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
					SetBusinessData(businessid,	B_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetBusinessData(businessid, B_RENT_DATE, rent_time);
					}
				}
				format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", businessid);

				GivePlayerMoneyEx(playerid, -price, "Покупка бизнеса", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/business {66CC00}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	if(!IsBusinessOwned(businessid) && GetPlayerBusiness_2(playerid) == -1)
	{
		if(price <= 0)
			price = GetBusinessData(businessid, B_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,a.business_2=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, businessid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_BUSINESS_2, businessid);

				SetBusinessData(businessid, B_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetBusinessData(businessid,	B_PRODS, 		20);
					SetBusinessData(businessid,	B_PROD_PRICE, 	0);

					SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
					SetBusinessData(businessid,	B_ENTER_PRICE, 	0);

					SetBusinessData(businessid,	B_BALANCE, 		0);
					SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
					SetBusinessData(businessid,	B_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetBusinessData(businessid, B_RENT_DATE, rent_time);
					}
				}
				format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", businessid);

				GivePlayerMoneyEx(playerid, -price, "Покупка бизнеса", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/business {66CC00}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}


stock BusinessHealthPickupInit(businessid)
{
	if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 5)
	{
		if(!GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			new interior = GetBusinessData(businessid, B_INTERIOR);
			SetBusinessData(businessid, B_HEALTH_PICKUP, CreatePickup(1240, 25, GetBusinessInteriorInfo(interior, BT_HEALTH_POS_X), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Y), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Z), businessid + 255, PICKUP_ACTION_TYPE_BIZ_HEALTH, businessid));
		}
	}
	else
	{
		if(GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			DestroyPickup(GetBusinessData(businessid, B_HEALTH_PICKUP));
			SetBusinessData(businessid, B_HEALTH_PICKUP, 0);
		}
	}
}

stock GetBusinessEnterProdCount(businessid)
{
	new take_prods = 0;
	new enter_price = GetBusinessData(businessid, B_ENTER_PRICE);

	if(enter_price > 0)
	{
		if(enter_price < 150)
		{
			take_prods = 1;
		}
		else if(enter_price < 500)
		{
			take_prods = 2;
		}
		else take_prods = 3;
	}
	return take_prods;
}

stock GetBusinessMaxProd(businessid)
{
	new max_prods = 3000;
	new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(i_level >= 5)
	{
		max_prods = 20_000;
	}
	else if(i_level >= 1)
	{
		max_prods = 13_000;
	}
	else max_prods = 3000;

	return max_prods;
}

stock GetNearestBusiness(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new businessid = -1;
	new Float: my_dist;

	for(new idx; idx < g_business_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			businessid = idx;
		}
	}
	return businessid;
}

stock BusinessImprovementsPrice(businessid)
{
	new price;
	new level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(1 <= level <= sizeof g_business_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_business_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock EnterPlayerToBiz(playerid, businessid)
{
	if(GetPlayerInBiz(playerid) == -1)
	{
		new buffer = GetBusinessData(businessid, B_INTERIOR);


		SetPlayerPosEx
		(
			playerid,
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_X),
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Y),
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Z),
			GetBusinessInteriorInfo(buffer, BT_ENTER_ANGLE),
			GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR),
			businessid + 255, false
		);
		SetPlayerInBiz(playerid, businessid);

		buffer = GetBusinessData(businessid, B_ENTER_MUSIC);
		if(1 <= buffer <= sizeof g_business_sound)
		{
			PlayerPlaySound(playerid, g_business_sound[buffer - 1], 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

stock GetPlayerBusiness(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

stock GetPlayerBusiness_2(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS_2);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

stock GetFreeBusinessCount()
{
	new count;
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock IsPlayerInBuyPosBiz(playerid, businessid, type, Float: radius = 50.0)
{
	if(GetBusinessData(businessid, B_TYPE) == type)
	{
		new interior = GetBusinessData(businessid, B_INTERIOR);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetBusinessInteriorInfo(interior, BT_BUY_POS_X), GetBusinessInteriorInfo(interior, BT_BUY_POS_Y), GetBusinessInteriorInfo(interior, BT_BUY_POS_Z)))
		{
			return 1;
		}
	}
	return 0;
}

stock ShowPlayerRealtorHomeDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BIZ_REALTOR_HOME_GET, DIALOG_STYLE_INPUT,
		"{99CC00}Информация о доме",
		"{FFFFFF}Введите номер дома, информацию\n"\
		"о котором Вы хотите получить\n\n"\
		"{FFCD00}Стоимость услуги 50 рублей",
		"Далее", "Отмена"
	);
}

stock IsABike(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_MODELID))
	{
		case 481, 509, 510:
		{
			return 1;
		}
	}
	return 0;
}

stock IsModelHasBootAndBonnet(modelid)
{
	switch(modelid)
	{
		case 481,509,510,417,425,447,460,469,464,465,476,487,489,497,501,511,512,513,519,520,530,548,553,563,577,592,593: return 0;
	}
	return 1;
}

stock SetPlayerPhoneUseState(playerid, bool: use = true, bool: bubble = true)
{
	if(use)
	{
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, GetPlayerData(playerid, P_PHONE_COLOR) + 18865, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.001, 0.0, 280.0, 0.0, 200.0, 1.0, 1.0, 1.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE - 1);

		if(bubble)
			Action(playerid, "достал телефон", _, false);
	}
	else
	{
		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
}

stock GetNearestAtm(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm-1; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_atm[idx][A_POS_X], g_atm[idx][A_POS_Y], g_atm[idx][A_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock GetElapsedTime(time, to_time, type = CONVERT_TIME_TO_HOURS)
{
	new result;

	switch(type)
	{
		case CONVERT_TIME_TO_MINUTES:
		{
			result = ((time - (time % 60)) - (to_time - (to_time % 60))) / 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			result = ((time - (time % 3600)) - (to_time - (to_time % 3600))) / 3600;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			result = ((time - (time % 86400)) - (to_time - (to_time % 86400))) / 86400;
		}
		default:
			result = -1;
	}
	return result;
}

stock ConvertUnixTime(unix_time, type = CONVERT_TIME_TO_SECONDS)
{
	switch(type)
	{
		case CONVERT_TIME_TO_SECONDS:
		{
			unix_time %= 60;
		}
		case CONVERT_TIME_TO_MINUTES:
		{
			unix_time = (unix_time / 60) % 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			unix_time = (unix_time / 3600) % 24;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			unix_time = (unix_time / 86400) % 30;
		}
		case CONVERT_TIME_TO_MONTHS:
		{
			unix_time = (unix_time / 2629743) % 12;
		}
		case CONVERT_TIME_TO_YEARS:
		{
			unix_time = (unix_time / 31556926) + 1970;
		}
		default:
			unix_time %= 60;
	}
	return unix_time;
}

stock CheckPlayerFlood(playerid, bool:inc = true, max_rate = MAX_FLOOD_RATE, rate_inc = FLOOD_RATE_INC, kick_rate = FLOOD_RATE_KICK)
{
	new tick = GetTickCount();

	AddPlayerAntiFloodData(playerid, AF_RATE, +, inc ? rate_inc : 0);
	AddPlayerAntiFloodData(playerid, AF_RATE, -, (GetTickCount() - GetPlayerAntiFloodData(playerid, AF_LAST_TICK)));
	SetPlayerAntiFloodData(playerid, AF_LAST_TICK, tick);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) < 0)
		SetPlayerAntiFloodData(playerid, AF_RATE, 0);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= max_rate)
	{
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= kick_rate)
		{
			Kick:(playerid, _, 10);
		}
		return 1;
	}
	return 0;
}

stock ShowPhoneBookOperation(playerid, operationid, contactid=0)
{
	switch(operationid)
	{
		case PHONE_BOOK_OPERATION_OPTIONS:
		{
			SetPlayerPhoneBookSelectContact(playerid, GetPlayerListitemValue(playerid, contactid));

			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_OPTION, DIALOG_STYLE_LIST,
				"{FFCD00}Варианты",
				"1. Позвонить\n"\
				"2. Отправить SMS сообщение\n"\
				"3. Изменить имя контакта\n"\
				"4. Изменить номер контакта\n"\
				"5. Удалить контакт",
				"Выбрать", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CALL:
		{
			new number[11]; // TODO
			format(number, sizeof number, "%d", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER));
			callcmd::c(playerid, number);
		}
		case PHONE_BOOK_OPERATION_SEND_SMS:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_SEND_SMS, DIALOG_STYLE_INPUT,
				"{FFCD00}Отправка SMS сообщения",
				"{FFFFFF}-\t\t\tВведите текст SMS сообщения:\t\t-",
				"Отправить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NAM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NAME, DIALOG_STYLE_INPUT,
				"{FFCD00}Изменение имени контакта",
				"{FFFFFF}Введите новое имя для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NUM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NUMBER, DIALOG_STYLE_INPUT,
				"{FFCD00}Изменение номера контакта",
				"{FFFFFF}Введите новый номер для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_DELETE_CON:
		{
			if(GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID))
			{
				new query[80];

				format(query, sizeof query, "DELETE FROM phone_books WHERE id=%d LIMIT 1", GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerPhoneBookInitStatus(playerid, false);
				SendClientMessage(playerid, 0xFF9030FF, "Контакт удален с памяти телефона");
			}
		}
	}
}

stock AddPhoneBookContact(playerid, name[], number[])
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		InitPlayerPhoneBook(playerid);
	}
	if(GetPlayerPhoneBookContacts(playerid) < MAX_PHONE_BOOK_CONTACTS)
	{
		if(!CheckPhoneBookUsedNumber(playerid, number))
		{
			new fmt_str[128];
			SetPlayerPhoneBookInitStatus(playerid, false);

			format(fmt_str, sizeof fmt_str, "Вы добавили %s (тел. %s) в свой список контактов", name, number);
			SendClientMessage(playerid, 0x33FF66FF, fmt_str);

			mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO phone_books (owner_id,name,number,time) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), name, number, gettime());
			mysql_query(mysql, fmt_str, false);
		}
	}
	return 1;
}

stock CheckPhoneBookUsedNumber(playerid, number[])
{
	for(new idx, len; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
	{
		if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;

		len = strlen(GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
		if(len && !strcmp(GetPlayerPhoneBook(playerid, idx, PB_NUMBER), number, true))
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер %s уже записан для контакта %s", number, GetPlayerPhoneBook(playerid, idx, PB_NAME));
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6633}Ошибка", fmt_str, "Закрыть", "");

			return 1;
		}
	}
	return 0;
}

stock InitPlayerPhoneBook(playerid)
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		new query[80];
		new Cache: result, rows;

		format(query, sizeof query, "SELECT * FROM phone_books WHERE owner_id=%d ORDER BY id DESC LIMIT %d", GetPlayerAccountID(playerid), MAX_PHONE_BOOK_CONTACTS);
		result = mysql_query(mysql, query);

		rows = cache_num_rows();
		for(new idx; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
		{
			if(idx < rows)
			{
				SetPlayerPhoneBook(playerid, idx, PB_SQL_ID, cache_get_row_int(idx, 0));

				cache_get_row(idx, 2, g_player_phone_book[playerid][idx][PB_NAME], mysql, 21);
				cache_get_row(idx, 3, g_player_phone_book[playerid][idx][PB_NUMBER], mysql, 9);

				SetPlayerPhoneBook(playerid, idx, PB_TIME, cache_get_row_int(idx, 4));
				continue;
			}
			ClearPlayerPhoneBookContact(playerid, idx);
		}
		cache_delete(result);

		SetPlayerPhoneBookContacts(playerid, rows);
		SetPlayerPhoneBookInitStatus(playerid, true);
	}
	return 1;
}

stock ClearPlayerPhoneBookContact(playerid, contactid)
{
	SetPlayerPhoneBook(playerid, contactid, PB_SQL_ID, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NAME, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NUMBER, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_TIME, 	0);
}

stock GetPlayerIDByPhone(number)
{
	new playerid = INVALID_PLAYER_ID;

	if(1000 <= number <= 9999999)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(number != GetPlayerPhone(i)) continue;

			playerid = i;
			break;
		}
	}
	return playerid;
}

stock CheckPlayerTempJobState(playerid)
{
	new job = GetPlayerTempJob(playerid);
	new j_state = GetPlayerTempJobState(playerid);

	//new s_action = GetPlayerSpecialAction(playerid);

	switch(job)
	{
		case TEMP_JOB_LOADER:
		{
			if(j_state == TEMP_JOB_STATE_LOADER_DROP_LOAD)
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

				DisablePlayerCheckpoint(playerid);
				SetTimerEx("SetPlayerLoaderJobLoadCP", 1000, false, "i", playerid);

				SendClientMessage(playerid, 0xFF6600FF, "Вы уронили ящик");
			}
		}
		case TEMP_JOB_MINER:
		{
			if(j_state == TEMP_JOB_STATE_MINER_DROP_LOAD) // || s_action != SPECIAL_ACTION_NONE
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);

				RemovePlayerAttachedObjects(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				SetPlayerMinerJobLoadCP(playerid);

				SendClientMessage(playerid, 0xFF6600FF, "Вы сломали тележку");
			}
		}
		case TEMP_JOB_FACTORY:
		{
			if(j_state == TEMP_JOB_STATE_FACTORY_DROP_P)
			{
				FactoryPlayerDrop(playerid, false);
			}
		}
		case TEMP_JOB_LUMBERJACK:
		{
			if(j_state == TEMP_JOB_STATE_LUMBERJACK_DROP)
			{
				LumberJackPlayerDrop(playerid, true);
			}
		}
		case TEMP_JOB_FERMER:
		{
			if(j_state == TEMP_JOB_STATE_FERMER_DROP)
			{
				FermerPlayerDrop(playerid, true);
			}
		}
	}
}

stock ChangePlayerName(playerid, name[], bool: non_rp_nick = false)
{
	new query[128];
	new Cache: result, rows;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();
	cache_delete(result);

	if(3 <= strlen(name) <= 20 && !rows)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET name='%e' WHERE id=%d LIMIT 1", name, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			mysql_format(mysql, query, sizeof query, "INSERT INTO change_names (owner_id,name,time,ip) VALUES (%d,'%e',%d,'%e')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), gettime(), GetPlayerIpEx(playerid));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "%s сменил %s на %s", GetPlayerNameEx(playerid), non_rp_nick ? "нон-рп имя" : "имя", name);

			format(g_player[playerid][P_NAME], 21, "%s", name);
			SetPlayerName(playerid, GetPlayerNameEx(playerid));

			SendClientMessageToAll(0xCCFF00FF, query);
			UpdateCharity();

			new buffer;
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				format(g_fuel_station[buffer][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", buffer);
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				format(g_business[buffer][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", buffer);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				format(g_house[buffer][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_house_renters[buffer][room][HR_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_hotel[buffer][room][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			return 1;
		}
	}
	return 0;
}

stock EndPlayerTempJob(playerid, job, bool:annul = false)
{
	if(GetPlayerTempJob(playerid) == job)
	{
		SetPlayerTempJobCheckAnim(playerid, false);

		RemovePlayerAttachedObjects(playerid);
		SetPlayerSkinInit(playerid);

		new items = GetPlayerJobLoadItems(playerid);
		new pay_sum = items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD);

		pay_sum = pay_sum * g_doubling[DOUBLING_WAGE];

		for(new is = 1; is < MAX_VEHICLES; is++)
		{
		    if(!IsValidVehicle(is)) continue;
	 		else if(vodila[is] != playerid || vodila[is] == -1) continue;
	 		else if(GetVehicleData(is, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FERMA_CAR) continue;
	 		else if(IsVehicleOccupied(is)) continue;
			vodila[is] = -1;
			//DestroyVehicleLabel(is);
			SetVehicleToRespawn(is);
		}

		new fmt_str[128];
		switch(job)
		{
			case TEMP_JOB_LOADER:
			{
				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);

				TogglePlayerDynamicCP(playerid, help_info_CP, true);

				if(!annul)
				{
					new ts_pay = false;
					if(pay_sum > 0)
						format(fmt_str, sizeof fmt_str, " Заработано {FFFF00}%d руб", pay_sum);

					strins(fmt_str, "Рабочий день завершен!", 0, sizeof fmt_str);
					SendClientMessage(playerid, 0x3399FFFF, fmt_str);

					if(ts_pay)
					{
						format(fmt_str, sizeof fmt_str, "%d руб {3399FF}за работу на погрузчике", pay_sum);
						SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
					}

					if(pay_sum > 0)
						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе грузчика", true, false);

					format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию склада. Заработок был аннулирован");

				items = GetPlayerVehicleID(playerid); // в items временно хранится ид авто
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы добыли %d кг руды", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Всего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе шахтера", true, false);

						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию шахты. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FACTORY:
			{
				pay_sum = GetPlayerJobWage(playerid);

				new bad_items = GetPVarInt(playerid, "factory_bad_prods");
				new skill = GetPVarInt(playerid, "factory_skill");
				new waste_sum = bad_items * (random(16) + 5);

				if(!annul)
				{
					SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
					if(pay_sum > 0 && waste_sum < pay_sum)
					{
						format(fmt_str, sizeof fmt_str, "Всего создано {FFFF00}%d {66CC00}продуктов, забракованно {FFFF00}%d шт.", items, bad_items) ;
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						if(skill > 0)
						{
							format(fmt_str, sizeof fmt_str, "Рабочий навык увеличился {66CCFF}на %d единиц(ы)", skill);
						}
						else fmt_str = "Рабочий навык не изменился";
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Заработано {00CC00}%d руб, {FFFFFF}из них {FF6600}%d руб {FFFFFF}- штраф за брак продуктов", pay_sum, waste_sum);
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

						pay_sum -= waste_sum;
						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе в цеху (завод)", true, false);
					}
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию завода. Выручка была аннулирована");

				skill = GetPlayerData(playerid, P_FACTORY_USE_DESK);
				SetPlayerFactoryDeskUse(playerid, skill, false);
			}
			case TEMP_JOB_LUMBERJACK:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы принесли %d шт дров", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Всего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе лесоруба", true, false);

						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию лесопилки. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FERMER:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						new ferma = GetPVarInt(playerid, "ferma_id");
					    if(GetBusinessData(ferma, B_BALANCE) < pay_sum)
					    {
					        new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);
					        SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount - items);
					        format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы принесли %d стог(ов) сена", items);
							SendClientMessage(playerid, COLOR_GOLD, fmt_str);

							format(fmt_str, sizeof fmt_str, "Всего заработано: {"#cW"}%d руб", pay_sum);
							SendClientMessage(playerid, COLOR_GOLD, fmt_str);
					        GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе фермера");
					        SendClientMessage(playerid, -1, "Вы закончили работу, но на ферме нет денег для оплаты. По этому оплатило государство...");
					        SendClientMessage(playerid, -1, "всё ваше принесённое сено было списано со склада.");

							if(items >= 5)
							{
								if(GetPlayerData(playerid, P_QUEST_4) != 1)
								{
									GivePlayerMoneyEx(playerid, 400000, "Квест ферма");
									AddPlayerData(playerid, P_EXP, +, 1);
									SetPlayerData(playerid, P_QUEST_4, 1);
									SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первая работа'. За это вы получаете 400.000 рублей и 1 EXP");
									UpdatePlayerDatabaseInt(playerid, "quest4", 1);
									if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
									{
										SetPlayerData(playerid, P_EXP, 0);
										AddPlayerData(playerid, P_LEVEL, +, 1);
										SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
										SetPlayerLevelInit(playerid);
										UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
									}
									UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
								}
							}
					    }
					    else
					    {
							format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы принесли %d стог(ов) сена", items);
							SendClientMessage(playerid, COLOR_GOLD, fmt_str);

							if(items >= 5)
							{
								if(GetPlayerData(playerid, P_QUEST_4) != 1)
								{
									GivePlayerMoneyEx(playerid, 400000, "Квест ферма");
									AddPlayerData(playerid, P_EXP, +, 1);
									SetPlayerData(playerid, P_QUEST_4, 1);
									SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первая работа'. За это вы получаете 400.000 рублей и 1 EXP");
									UpdatePlayerDatabaseInt(playerid, "quest4", 1);
									if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
									{
										SetPlayerData(playerid, P_EXP, 0);
										AddPlayerData(playerid, P_LEVEL, +, 1);
										SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
										SetPlayerLevelInit(playerid);
										UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
									}
									UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
								}
							}

							format(fmt_str, sizeof fmt_str, "Всего заработано: {"#cW"}%d руб", pay_sum);
							SendClientMessage(playerid, COLOR_GOLD, fmt_str);

							GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе фермера", true, false);

							format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
							GameTextForPlayer(playerid, fmt_str, 4000, 1);
							AddBusinessData(ferma, B_BALANCE, -, pay_sum);
							new query[520];
							mysql_format(mysql, query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)+pay_sum, GetBusinessData(ferma, B_BALANCE), GetPlayerAccountID(playerid), GetBusinessData(ferma, B_SQL_ID));
							mysql_query(mysql, query, false);
						}

						//mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(sto_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), pay_sum, IsBusinessOwned(sto_id));
						//mysql_query(mysql, query, false);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию фермы. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
				SetPVarInt(playerid, "ferma_id", 0);
			}
		}

		SetPlayerJobLoadItems(playerid, 0);
		SetPlayerData(playerid, P_JOB_WAGE, 0);
		SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	}
}

stock TogglePlayerFactoryCP(playerid, toggle)
{
	for(new idx; idx < sizeof factory_desk; idx ++)
	{
		TogglePlayerDynamicCP(playerid, factory_desk[idx][FD_CHEK_ID], toggle);
	}
}

stock KillEndJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_JOB_TIMER));
	SetPlayerData(playerid, P_END_JOB_TIMER, -1);
}

stock StartEndJobTimer(playerid, time = 15_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock KillCarJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_CAR_TIMER));
	SetPlayerData(playerid, P_END_CAR_TIMER, -1);
}

stock StartCarJobTimer(playerid, time = 15_000, veh_id)
{
	if(GetPlayerData(playerid, P_END_CAR_TIMER) == -1)
		SetPlayerData(playerid, P_END_CAR_TIMER, SetTimerEx("EndCarJob", time, false, "ii", playerid, veh_id));
}

stock ShowPlayerBuyMetalDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_MINER_BUY_METALL, DIALOG_STYLE_INPUT,
		"{FFCD00}Покупка металла",
		"{FFFFFF}Сколько кг металла вы хотите купить?\n"\
		"{00CC00}Цена за кг: 15 рублей",
		"Купить", "Отмена"
	);
}

stock SetPlayerMinerJobLoadCP(playerid, bool: status = false)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		for(new i; i < sizeof miner_job_load_cp; i ++)
			TogglePlayerDynamicCP(playerid, miner_job_load_cp[i], status ^ true);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
	}
}

stock SetPlayerMinerJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		//SetPlayerCheckpoint(playerid, 2712.590332, -1551.885620, 1401.908935, 2.0, CP_ACTION_TYPE_MINER_JOB_PUT);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_UNLOAD);
	}
}

stock SetPlayerLoaderJobUnLoadCP(playerid) // установить чекпоинт где ложить груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		new rand = random(sizeof loader_job_unload_cp);

		SetPlayerCheckpoint(playerid, loader_job_unload_cp[rand][0], loader_job_unload_cp[rand][1], loader_job_unload_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADER_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_UNLOAD);

		SetPlayerTempJobCheckAnim(playerid, true);
	}
}
stock GetString(param1[],param2[])
{
	return !strcmp(param1, param2, false);
}
stock SetString(param_1[], param_2[], size = 300)
{
	return strmid(param_1, param_2, 0, strlen(param_2), size);
}
public: SetPlayerLoaderJobLoadCP(playerid) // установить чекпоинт где брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		SetPlayerTempJobCheckAnim(playerid, false);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);
		SetPlayerCheckpoint(playerid, 110.6495, 1675.5002, 11.9957, 2.0, CP_ACTION_TYPE_LOADER_JOB_TAKE);
	}
}

stock SetPlayerLumberJackChopCP(playerid)
{
	new rand = random(sizeof lumberjack_job_chop_cp);

	SetPlayerCheckpoint(playerid, lumberjack_job_chop_cp[rand][0], lumberjack_job_chop_cp[rand][1], 12.0020, 2.0, CP_ACTION_TYPE_LUMBERJACK_TAKE);
}

stock ShowPlayerDrivingTutorial(playerid)
{
	Dialog
	(
		playerid, DIALOG_DRIVING_TUTORIAL_START, DIALOG_STYLE_MSGBOX,
		"{0099FF}Введение",
		"{FFFFFF}Это пособие поможет вам хорошо подготовиться\n"\
		"к экзамену по вождению\n\n"\
		"{CC9900}Для того, чтобы начать обучение нажмите \"Далее\"",
		"Далее", "Отмена"
	);
	return 1;
}

stock ShowDrivingTutorialSection(playerid, step)
{
	if(0 <= step <= sizeof driving_tutorial-1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_TUTORIAL, DIALOG_STYLE_MSGBOX,
			driving_tutorial[step][DT_TITLE],
			driving_tutorial[step][DT_INFO],
			"Далее", "Назад"
		);
		SetPVarInt(playerid, "driving_tutorial_step", step);
	}
}

stock ShowPlayerDrivingExam(playerid, step)
{
	if(0 <= step <= sizeof driving_exam - 1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM, DIALOG_STYLE_LIST,
			driving_exam[step][DE_TITLE],
			driving_exam[step][DE_LIST_ITEMS],
			"Ответить", ""
		);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, step);
	}
	else if(step >= sizeof driving_exam)
	{
		new points = GetPlayerDrivingExamInfo(playerid, DE_POINTS);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, 0);
		SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, 0);

		if(points >= 9)
			SetPlayerData(playerid, P_DRIVING_LIC, 1);

		new fmt_str[256];
		format(fmt_str, sizeof fmt_str, "{FFFFFF}Количество правильных ответов: {66CC00}%d\n\n", points);

		if(points == 9)
		{
			strcat
			(
				fmt_str,
				"{6699FF}Поздравляем!\n"\
				"Вы набрали минимальное количество баллов, чтобы приступить ко второй части экзамена!"
			);
		}
		else if(points >= 10)
		{
			static const
				medal_name[3][12] = {"бронзовую", "серебрянную", "золотую"};

			format(fmt_str, sizeof fmt_str, "%s{6699FF}Поздравляем!\nВы получаете %s медаль за теоретическую часть экзамена!", fmt_str, medal_name[points - 10]);
		}
		else
		{
			ClearPlayerDrivingExamInfo(playerid);
			strcat
			(
				fmt_str,
				"{FF6600}К сожалению вы не набрали необходимого количества баллов\n"\
				"В следующий раз внимательно прочитайте обучающий раздел\n"\
				"Ждем вас на пересдаче!"
			);
		}

		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_RESULT, DIALOG_STYLE_MSGBOX,
			"{FFFF00}Результаты теоретической части",
			fmt_str,
			"Ок", ""
		);
	}
	return 1;
}

stock NextDrivingExamRouteCP(playerid)
{
	new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

	SetPlayerRaceCheckpoint
	(
		playerid,
		0,
		driving_exam_route[step][0],
		driving_exam_route[step][1],
		driving_exam_route[step][2],
		driving_exam_route[step + 1][0],
		driving_exam_route[step + 1][1],
		driving_exam_route[step + 1][2],
		4.0,
		RCP_ACTION_TYPE_DRIVING_EXAM
	);
	SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, step + 1);
}

stock GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	}
	else GetPlayerVelocity(playerid, x, y, z);

	return floatround(floatsqroot(x*x+y*y+z*z)*100);
}

stock SetVehicleSpeed(vehicleid, Float: speed)
{
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed /= 100.0;
        x = speed * floatsin(-angle, degrees);
        y = speed * floatcos(-angle, degrees);

        return SetVehicleVelocity(vehicleid, x, y, z - speed / 1000.0);
	}

	return 0;
}

stock IsPlayerDriver(playerid) // сидит ли игрок за рулем ТС
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}

stock IsPlayerPassenger(playerid) // сидит ли игрок как пассажир
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER);
}

stock SpeedometrShowForPlayer(playerid)
{
	for(new idx; idx < sizeof speedometr_TD; idx ++)
		TextDrawShowForPlayer(playerid, speedometr_TD[idx]);

	//SpeedometrKeyStatusInit(playerid, vehicleid);

	for(new idx; idx < sizeof speedometr_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, speedometr_PTD[playerid][idx]);
}

stock SpeedometrHideForPlayer(playerid)
{
	for(new idx; idx < sizeof speedometr_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, speedometr_PTD[playerid][idx]);

	for(new idx; idx < sizeof speedometr_TD; idx ++)
		TextDrawHideForPlayer(playerid, speedometr_TD[idx]);
}

stock CreateSpeedometrForPlayer(playerid)
{
	speedometr_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 573.3336, 349.7037, ""); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][0], 0.7346, 3.3006);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][0], 0);

	speedometr_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 574.6668, 383.3037, "000012"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][1], 0.1635, 0.7204);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][1], 0);

	speedometr_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 569.6668, 383.5003, "speed:right"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][2], 30.0000, 31.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][2], 0);

	speedometr_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 580.8665, 383.5744, "speed:right"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][3], -32.0000, 31.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][3], 0);

	speedometr_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 523.0000, 323.9887, "speed:key"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][4], 5.0000, 10.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][4], 0);

	speedometr_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 503.6668, 340.9960, "speed:lcar"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][5], 9.0000, 7.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][5], 0);

	speedometr_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 496.6668, 367.9590, "speed:door"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][6], 9.0000, 9.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid,
	speedometr_PTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][6], 0);

	speedometr_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 506.3334, 392.8478, "speed:temp"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][7], 6.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][7], 0);

	speedometr_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 525.3336, 406.5368, "speed:fuel"); // ?????
	PlayerTextDrawTextSize(playerid, speedometr_PTD[playerid][8], 8.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][8], 0);

	speedometr_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 543.3331, 409.8518, "82%"); // ?????
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][9], 0.2259, 1.0068);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][9], 0);

	/*speedometr_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 527.555786, 353.422241, "0");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][0], 0.559777, 2.207288);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][0], 1);

	speedometr_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 462.888488, 397.235595, "100 л");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][1], 0.241999, 1.127110);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][1], 1);

	speedometr_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 463.221862, 408.680053, "100 %");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][2], 0.241999, 1.127110);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][2], 1);

	speedometr_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 501.333099, 395.733276, "_");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][3], 0.178000, 0.937955);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][3], 1);

	speedometr_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 605.888793, 395.737731, "_");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][4], 0.178000, 0.937955);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][4], 3);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][4], 1);

	speedometr_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 453.333496, 405.688964, "~y~.");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][5], 0.934888, 3.406939);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xCECECEFF);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][5], 1);

	speedometr_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 451.666839, 377.817779, "_");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][6], 0.359777, 1.908622);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], -11193481);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][6], 1);

	speedometr_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 552.444702, 424.106719, "0000000 ~y~km");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][7], 0.248666, 1.107197);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][7], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][7], 1);*/

/*

	speedometr_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 451.200164, 366.613281, "0_~b~~h~~h~~h~:km/h");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][0], 0.354799, 1.764266);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][0], 1);

	speedometr_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 522.5, 366.613281, "0000000");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][1], 0.273346, 1.764266);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][1], 2);

	speedometr_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 450.400085, 394.986785, "Fuel:_~y~50~n~~w~limit:_~r~off");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][2], 0.313199, 1.663698);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][2], 59);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][2], 1);

	speedometr_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 517.5, 393.653259, "E__L__B");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][3], 0.437357, 2.124531);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][3], 59);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][3], 1);

	speedometr_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 543.068115, 410.499603, "~r~close");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][4], 0.309199, 1.659733);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][4], 1);

	speedometr_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 567.199645, 387.427215, "~y~.");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][5], 1.000398, 4.579195);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xCECECEFF);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][5], 1);

	speedometr_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 450.400115, 378.560241, "_");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][6], 0.463600, 2.100265);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 0xFF9933AA);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][6], 1);

*/
}

stock CreateBilet()
{
    fly_TD[0] = TextDrawCreate(257.333312, 115.733322, "fly:russia");
	TextDrawLetterSize(fly_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(fly_TD[0], 127.666709, 240.592559);
	TextDrawAlignment(fly_TD[0], 1);
	TextDrawColor(fly_TD[0], -1);
	TextDrawSetShadow(fly_TD[0], 0);
	TextDrawSetOutline(fly_TD[0], 0);
	TextDrawFont(fly_TD[0], 4);

	fly_TD[1] = TextDrawCreate(298.000000, 328.533325, "LD_SPAC:white");
	TextDrawLetterSize(fly_TD[1], 0.000000, 0.000000);
	TextDrawTextSize(fly_TD[1], 49.000000, 19.496307);
	TextDrawAlignment(fly_TD[1], 1);
	TextDrawColor(fly_TD[1], -1);
	TextDrawSetShadow(fly_TD[1], 0);
	TextDrawSetOutline(fly_TD[1], 0);
	TextDrawFont(fly_TD[1], 4);
	TextDrawSetSelectable(fly_TD[1], true);

	fly_TD[2] = TextDrawCreate(369.333343, 121.955551, "LD_SPAC:white");
	TextDrawLetterSize(fly_TD[2], 0.000000, 0.000000);
	TextDrawTextSize(fly_TD[2], 10.999969, 13.274078);
	TextDrawAlignment(fly_TD[2], 1);
	TextDrawColor(fly_TD[2], -1);
	TextDrawSetShadow(fly_TD[2], 0);
	TextDrawSetOutline(fly_TD[2], 0);
	TextDrawFont(fly_TD[2], 4);
	TextDrawSetSelectable(fly_TD[2], true);
}

stock ShowBuyBiletRussia(playerid)
{
    TextDrawSetString(fly_TD[0], "fly:russia");
	TextDrawShowForPlayer(playerid, fly_TD[0]);
	TextDrawShowForPlayer(playerid, fly_TD[1]);
	TextDrawShowForPlayer(playerid, fly_TD[2]);

	SelectTextDraw(playerid, 0xFFFFFFFF);
}

stock ShowBuyBiletMiam(playerid)
{
    TextDrawSetString(fly_TD[0], "fly:miami");
    TextDrawShowForPlayer(playerid, fly_TD[0]);
	TextDrawShowForPlayer(playerid, fly_TD[1]);
	TextDrawShowForPlayer(playerid, fly_TD[2]);

	SelectTextDraw(playerid, 0xFFFFFFFF);
}

stock ShowAuthPlayer(playerid)
{
    TextDrawShowForPlayer(playerid, fly_TD[2]);
}

stock HideBuyBilet(playerid)
{
	TextDrawHideForPlayer(playerid, fly_TD[0]);
	TextDrawHideForPlayer(playerid, fly_TD[1]);
	TextDrawHideForPlayer(playerid, fly_TD[2]);

	CancelSelectTextDraw(playerid);
}

stock CreateBizInfo(playerid)
{
    Info_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 548.9997, 145.8740, "biz:fon"); // пусто
	PlayerTextDrawTextSize(playerid, Info_PTD[playerid][0], 88.0000, 157.0000);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][0], 0);

	Info_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 631.2674, 169.7591, "MAВAИЕH_1"); // пусто
	PlayerTextDrawLetterSize(playerid, Info_PTD[playerid][1], 0.2953, 1.1520);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][1], 3);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][1], 0);

	Info_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 571.8342, 158.3184, "biz:close"); // пусто
	PlayerTextDrawTextSize(playerid, Info_PTD[playerid][2], 89.0000, 79.0000);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][2], 0);

	Info_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 591.6011, 182.3777, "biz:open"); // пусто
	PlayerTextDrawTextSize(playerid, Info_PTD[playerid][3], 42.0000, 14.0000);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][3], 0);

	Info_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 631.6668, 228.1629, "Nick_Name"); // пусто
	PlayerTextDrawLetterSize(playerid, Info_PTD[playerid][4], 0.2343, 1.0109);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][4], 3);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][4], 0);

	Info_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 630.6663, 256.7847, "5000_p"); // пусто
	PlayerTextDrawLetterSize(playerid, Info_PTD[playerid][5], 0.2546, 1.0607);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][5], 3);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][5], 0);

	Info_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 632.0000, 284.5776, "12.000.000_p"); // пусто
	PlayerTextDrawLetterSize(playerid, Info_PTD[playerid][6], 0.2286, 1.0524);
	PlayerTextDrawAlignment(playerid, Info_PTD[playerid][6], 3);
	PlayerTextDrawColor(playerid, Info_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Info_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, Info_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, Info_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Info_PTD[playerid][6], 0);
}

stock CreateCellSalon(playerid)
{
	cell_salon_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 111.000022, 127.348167, "cell_salon:apple_fone");
	PlayerTextDrawLetterSize(playerid, cell_salon_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cell_salon_PTD[playerid][0], 429.666625, 165.511077);
	PlayerTextDrawAlignment(playerid, cell_salon_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, cell_salon_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, cell_salon_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, cell_salon_PTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, cell_salon_PTD[playerid][0], 4);

	cell_salon_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 161.333328, 259.259246, "");
	PlayerTextDrawLetterSize(playerid, cell_salon_PTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cell_salon_PTD[playerid][1], 34.666671, 13.274078);
	PlayerTextDrawAlignment(playerid, cell_salon_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, cell_salon_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, cell_salon_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, cell_salon_PTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, cell_salon_PTD[playerid][1], 4);
	PlayerTextDrawSetSelectable(playerid, cell_salon_PTD[playerid][1], true);

	cell_salon_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 242.333343, 258.429626, "");
	PlayerTextDrawLetterSize(playerid, cell_salon_PTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cell_salon_PTD[playerid][2], 36.999969, 14.103698);
	PlayerTextDrawAlignment(playerid, cell_salon_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, cell_salon_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, cell_salon_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, cell_salon_PTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, cell_salon_PTD[playerid][2], 4);
	PlayerTextDrawSetSelectable(playerid, cell_salon_PTD[playerid][2], true);

	cell_salon_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 326.333343, 258.429626, "");
	PlayerTextDrawLetterSize(playerid, cell_salon_PTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cell_salon_PTD[playerid][3], 35.333343, 14.933349);
	PlayerTextDrawAlignment(playerid, cell_salon_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, cell_salon_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, cell_salon_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, cell_salon_PTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, cell_salon_PTD[playerid][3], 4);
	PlayerTextDrawSetSelectable(playerid, cell_salon_PTD[playerid][3], true);

	cell_salon_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 408.333312, 258.429626, "");
	PlayerTextDrawLetterSize(playerid, cell_salon_PTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cell_salon_PTD[playerid][4], 36.000030, 13.274078);
	PlayerTextDrawAlignment(playerid, cell_salon_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, cell_salon_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, cell_salon_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, cell_salon_PTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, cell_salon_PTD[playerid][4], 4);
	PlayerTextDrawSetSelectable(playerid, cell_salon_PTD[playerid][4], true);

	cell_salon_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 492.666656, 258.429626, "");
	PlayerTextDrawLetterSize(playerid, cell_salon_PTD[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cell_salon_PTD[playerid][5], 35.999969, 14.518524);
	PlayerTextDrawAlignment(playerid, cell_salon_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, cell_salon_PTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, cell_salon_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, cell_salon_PTD[playerid][5], 0);
	PlayerTextDrawFont(playerid, cell_salon_PTD[playerid][5], 4);
	PlayerTextDrawSetSelectable(playerid, cell_salon_PTD[playerid][5], true);
}

stock CreateCafe(playerid)
{
    cafe_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 100.000015, 111.170372, "cell_salon:cafe_fone");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][0], 442.333312, 221.925933);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][0], 4);

	cafe_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 149.666656, 217.777770, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][1], 38.333343, 11.200012);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][1], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][1], true);

	cafe_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 235.333328, 217.362960, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][2], 37.666671, 11.199996);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][2], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][2], true);

	cafe_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 321.000000, 216.948150, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][3], 38.000000, 11.614807);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][3], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][3], true);

	cafe_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 406.666687, 217.362960, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][4], 37.666656, 11.614822);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][4], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][4], true);

	cafe_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 491.333343, 216.533325, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][5], 39.333282, 12.444458);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][5], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][5], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][5], true);

	cafe_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 150.333343, 307.792602, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][6], 38.000000, 11.614807);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][6], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][6], true);

	cafe_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 234.666671, 306.962951, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][7], 38.666671, 12.444458);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][7], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][7], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][7], true);

	cafe_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 321.000000, 306.962951, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][8], 37.333312, 12.444458);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][8], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][8], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][8], true);

	cafe_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 406.666687, 306.548126, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][9], 37.666656, 12.029663);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][9], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][9], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][9], true);

	cafe_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 491.666687, 307.377777, "");
	PlayerTextDrawLetterSize(playerid, cafe_PTD[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, cafe_PTD[playerid][10], 38.000000, 12.029632);
	PlayerTextDrawAlignment(playerid, cafe_PTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, cafe_PTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, cafe_PTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, cafe_PTD[playerid][10], 0);
	PlayerTextDrawFont(playerid, cafe_PTD[playerid][10], 4);
	PlayerTextDrawSetSelectable(playerid, cafe_PTD[playerid][10], true);
}

stock CreateCar(playerid)
{
    car_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 105.666625, 103.288909, "cell_salon:car_fone");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][0], 429.333679, 241.007339);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][0], 4);

	car_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 156.333328, 219.022216, "cell_salon:lock");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][1], 35.333328, 12.444442);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][1], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][1], true);

	car_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 239.333328, 219.022216, "cell_salon:key");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][2], 34.999984, 12.859268);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][2], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][2], true);

	car_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 320.666656, 218.192596, "cell_salon:gps");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][3], 35.666687, 13.688888);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][3], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][3], true);

	car_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 403.000000, 218.192596, "cell_salon:trunk");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][4], 37.000000, 13.274063);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][4], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][4], true);

	car_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 487.000000, 218.607406, "cell_salon:carpass");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][5], 36.666625, 13.274078);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][5], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][5], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][5], true);

	car_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 154.333328, 316.088897, "cell_salon:park");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][6], 36.333343, 13.688873);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][6], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][6], true);

	car_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 237.333343, 317.333312, "cell_salon:load");
	PlayerTextDrawLetterSize(playerid, car_PTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, car_PTD[playerid][7], 36.999969, 13.274108);
	PlayerTextDrawAlignment(playerid, car_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, car_PTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, car_PTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, car_PTD[playerid][7], 0);
	PlayerTextDrawFont(playerid, car_PTD[playerid][7], 4);
	PlayerTextDrawSetSelectable(playerid, car_PTD[playerid][7], true);
}

stock CreateShop(playerid)
{
	shop_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 81.666656, 110.340705, "cell_salon:mar_fone");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][0], 486.333374, 223.585144);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][0], 4);

	shop_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 139.000000, 216.948150, "cell_salon:verev");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][1], 40.000000, 13.274078);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][1], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][1], true);

	shop_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 230.666671, 216.118530, "cell_salon:photo");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][2], 41.333328, 13.274063);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][2], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][2], true);

	shop_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 325.333312, 216.948150, "cell_salon:repair");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][3], 40.333343, 12.859252);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][3], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][3], true);

	shop_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 418.666656, 216.948150, "cell_salon:med");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][4], 41.333343, 12.029632);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][4], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][4], true);

	shop_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 513.333312, 218.192596, "cell_salon:mask");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][5], 41.000061, 11.199996);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][5], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][5], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][5], true);

	shop_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 136.333328, 308.207397, "cell_salon:buket");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][6], 42.000015, 11.614807);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][6], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][6], true);

	shop_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 230.666671, 307.792602, "cell_salon:prochee");
	PlayerTextDrawLetterSize(playerid, shop_PTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, shop_PTD[playerid][7], 40.666671, 12.444458);
	PlayerTextDrawAlignment(playerid, shop_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, shop_PTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, shop_PTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, shop_PTD[playerid][7], 0);
	PlayerTextDrawFont(playerid, shop_PTD[playerid][7], 4);
	PlayerTextDrawSetSelectable(playerid, shop_PTD[playerid][7], true);
}


stock CreateHomeInfo(playerid)
{
    hometd_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 548.9996, 145.8739, "home:home"); // пусто
	PlayerTextDrawTextSize(playerid, hometd_PTD[playerid][0], 88.0000, 157.0000);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][0], 0);

	hometd_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 631.2673, 169.7590, "MAВAИЕH_1"); // пусто
	PlayerTextDrawLetterSize(playerid, hometd_PTD[playerid][1], 0.2953, 1.1519);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][1], 3);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][1], 0);

	hometd_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 631.3335, 182.9480, "CpeЪЃЬЭ_kЮacc"); // пусто
	PlayerTextDrawLetterSize(playerid, hometd_PTD[playerid][2], 0.1589, 0.6748);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][2], 3);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][2], -1061109505);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][2], 0);

	hometd_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 632.0002, 188.7554, "KoѓЃa¶a:_1"); // пусто
	PlayerTextDrawLetterSize(playerid, hometd_PTD[playerid][3], 0.1589, 0.6748);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][3], 3);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][3], -1061109505);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][3], 0);

	hometd_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 631.6668, 228.1629, "Nick_Name"); // пусто
	PlayerTextDrawLetterSize(playerid, hometd_PTD[playerid][4], 0.2343, 1.0109);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][4], 3);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][4], 0);

	hometd_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 630.6663, 256.7846, "5000_p"); // пусто
	PlayerTextDrawLetterSize(playerid, hometd_PTD[playerid][5], 0.2545, 1.0607);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][5], 3);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][5], 0);

	hometd_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 632.0000, 284.5776, "12.000.000_p"); // пусто
	PlayerTextDrawLetterSize(playerid, hometd_PTD[playerid][6], 0.2285, 1.0523);
	PlayerTextDrawAlignment(playerid, hometd_PTD[playerid][6], 3);
	PlayerTextDrawColor(playerid, hometd_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, hometd_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, hometd_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, hometd_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, hometd_PTD[playerid][6], 0);
}

stock CreateDriveLicText(playerid)
{
	licdrive_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 209.666687, 174.911148, "");
	PlayerTextDrawLetterSize(playerid, licdrive_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, licdrive_PTD[playerid][0], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, licdrive_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, licdrive_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, licdrive_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, licdrive_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, licdrive_PTD[playerid][0], 1107292160);
	PlayerTextDrawFont(playerid, licdrive_PTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, licdrive_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, licdrive_PTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, licdrive_PTD[playerid][0], 293);
	PlayerTextDrawSetPreviewRot(playerid, licdrive_PTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

	licdrive_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 296.000030, 172.162933, "Woody_Clown");
	PlayerTextDrawLetterSize(playerid, licdrive_PTD[playerid][1], 0.268665, 1.434072);
	PlayerTextDrawAlignment(playerid, licdrive_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, licdrive_PTD[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, licdrive_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, licdrive_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, licdrive_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, licdrive_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, licdrive_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, licdrive_PTD[playerid][1], 0);

	licdrive_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 296.666809, 185.436981, "20");
	PlayerTextDrawLetterSize(playerid, licdrive_PTD[playerid][2], 0.268665, 1.434072);
	PlayerTextDrawAlignment(playerid, licdrive_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, licdrive_PTD[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, licdrive_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, licdrive_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, licdrive_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, licdrive_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, licdrive_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, licdrive_PTD[playerid][2], 0);

	Metro_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 213.666687, 216.548217, "Arzamas-Citi");
	PlayerTextDrawLetterSize(playerid, Metro_PTD[playerid][0], 0.407666, 1.496296);
	PlayerTextDrawAlignment(playerid, Metro_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Metro_PTD[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, Metro_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Metro_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, Metro_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Metro_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Metro_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Metro_PTD[playerid][0], 0);

	Metro_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 214.000030, 319.422302, "Arzamas-Citi");
	PlayerTextDrawLetterSize(playerid, Metro_PTD[playerid][1], 0.407666, 1.496296);
	PlayerTextDrawAlignment(playerid, Metro_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, Metro_PTD[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, Metro_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Metro_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, Metro_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Metro_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Metro_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Metro_PTD[playerid][1], 0);
}

stock CreateMvdLicText(playerid)
{
	mvd_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 161.666671, 164.955566, "");
	PlayerTextDrawLetterSize(playerid, mvd_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, mvd_PTD[playerid][0], 89.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, mvd_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, mvd_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, mvd_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, mvd_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, mvd_PTD[playerid][0], 1107292160);
	PlayerTextDrawFont(playerid, mvd_PTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, mvd_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, mvd_PTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, mvd_PTD[playerid][0], 293);
	PlayerTextDrawSetPreviewRot(playerid, mvd_PTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

	mvd_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 379.333404, 192.488891, "Woody_Extraside");
	PlayerTextDrawLetterSize(playerid, mvd_PTD[playerid][1], 0.249666, 1.019259);
	PlayerTextDrawAlignment(playerid, mvd_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, mvd_PTD[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, mvd_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, mvd_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, mvd_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, mvd_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, mvd_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, mvd_PTD[playerid][1], 0);

	mvd_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 380.666717, 202.859329, "Polkovnik");
	PlayerTextDrawLetterSize(playerid, mvd_PTD[playerid][2], 0.237999, 0.948740);
	PlayerTextDrawAlignment(playerid, mvd_PTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, mvd_PTD[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, mvd_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, mvd_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, mvd_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, mvd_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, mvd_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, mvd_PTD[playerid][2], 0);
}

stock CreatePassPlayer(playerid)
{
	pass_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 306.000091, 241.851852, "Dom");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][0], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][0], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][0], 0);

	pass_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 305.666778, 228.992568, "Woody_Clown");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][1], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][1], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][1], 0);

	pass_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 302.666748, 254.296325, "777777");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][2], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][2], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][2], 0);

	pass_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 330.000122, 266.740783, "pps");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][3], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][3], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][3], 0);

	pass_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 295.666809, 280.429687, "MYSH.");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][4], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][4], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][4], 0);

	pass_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 343.000244, 280.429656, "7");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][5], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][5], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][5], 0);

	pass_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 301.666931, 304.903717, "Nety");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][6], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][6], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][6], 0);

	pass_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 383.666961, 132.755584, "10");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][7], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][7], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][7], 0);

	pass_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 264.000396, 94.592590, "100");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][8], 0.197666, 0.708148);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][8], 1951751935);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][8], 0);

	pass_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 214.000030, 245.014846, "");
	PlayerTextDrawLetterSize(playerid, pass_PTD[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pass_PTD[playerid][9], 77.000000, 77.000000);
	PlayerTextDrawAlignment(playerid, pass_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, pass_PTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, pass_PTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, pass_PTD[playerid][9], 1107292160);
	PlayerTextDrawFont(playerid, pass_PTD[playerid][9], 5);
	PlayerTextDrawSetProportional(playerid, pass_PTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, pass_PTD[playerid][9], 0);
	PlayerTextDrawSetPreviewModel(playerid, pass_PTD[playerid][9], 292);
	PlayerTextDrawSetPreviewRot(playerid, pass_PTD[playerid][9], 0.000000, 0.000000, 0.000000, 0.899999);
}

stock CreateDetTextDraw(playerid)
{
	Vinyl_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 43.9999, 165.7850, "stonkss:one"); // пусто
	PlayerTextDrawTextSize(playerid, Vinyl_PTD[playerid][0], 96.0000, 28.0000);
	PlayerTextDrawAlignment(playerid, Vinyl_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Vinyl_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Vinyl_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Vinyl_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, Vinyl_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, Vinyl_PTD[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, Vinyl_PTD[playerid][0], true);

	Vinyl_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 43.9999, 201.4589, "stonkss:two"); // пусто
	PlayerTextDrawTextSize(playerid, Vinyl_PTD[playerid][1], 96.0000, 28.0000);
	PlayerTextDrawAlignment(playerid, Vinyl_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, Vinyl_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Vinyl_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Vinyl_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, Vinyl_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, Vinyl_PTD[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, Vinyl_PTD[playerid][1], true);

	Vinyl_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 43.9999, 238.3775, "stonkss:three"); // пусто
	PlayerTextDrawTextSize(playerid, Vinyl_PTD[playerid][2], 96.0000, 28.0000);
	PlayerTextDrawAlignment(playerid, Vinyl_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, Vinyl_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Vinyl_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, Vinyl_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, Vinyl_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, Vinyl_PTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, Vinyl_PTD[playerid][2], true);

	Vinyl_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 43.9999, 274.8813, "stonkss:four"); // пусто
	PlayerTextDrawTextSize(playerid, Vinyl_PTD[playerid][3], 96.0000, 28.0000);
	PlayerTextDrawAlignment(playerid, Vinyl_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, Vinyl_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Vinyl_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, Vinyl_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, Vinyl_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, Vinyl_PTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, Vinyl_PTD[playerid][3], true);

	Vinyl_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 43.9997, 315.5333, "stonkss:buy"); // пусто
	PlayerTextDrawTextSize(playerid, Vinyl_PTD[playerid][4], 41.0000, 19.0000);
	PlayerTextDrawAlignment(playerid, Vinyl_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, Vinyl_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Vinyl_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, Vinyl_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, Vinyl_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, Vinyl_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, Vinyl_PTD[playerid][4], true);

	Vinyl_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 97.6665, 314.8035, "stonkss:otmena"); // пусто
	PlayerTextDrawTextSize(playerid, Vinyl_PTD[playerid][5], 41.0000, 19.0000);
	PlayerTextDrawAlignment(playerid, Vinyl_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, Vinyl_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Vinyl_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, Vinyl_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, Vinyl_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, Vinyl_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, Vinyl_PTD[playerid][5], true);
}

stock CreateAutoMarketForPlayer(playerid)
{
	buy_menu_PTD[playerid] = CreatePlayerTextDraw(playerid, 317.600006, 347.199920, "---");
	PlayerTextDrawLetterSize(playerid, buy_menu_PTD[playerid], 0.346798, 1.861333);
	PlayerTextDrawAlignment(playerid, buy_menu_PTD[playerid], 2);
	PlayerTextDrawColor(playerid, buy_menu_PTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_menu_PTD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, buy_menu_PTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, buy_menu_PTD[playerid], 51);
	PlayerTextDrawFont(playerid, buy_menu_PTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_menu_PTD[playerid], 1);

	buy_car_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 313.5999, 362.5628, "ЙeЃa:_1.000.000_rub"); // пусто
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][0], 0.1896, 0.7038);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][0], 0);

	buy_car_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 313.9331, 354.6813, "BMW_M5_F90"); // пусто
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][1], 0.1896, 0.7038);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][1], 0);

	buy_car_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 400.3332, 388.5407, "stonks:colors"); // пусто
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][2], 75.0000, 32.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][2], 0);

	buy_car_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 402.6667, 390.2000, "stonks:click"); // white
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][3], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][3], true);

	buy_car_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 418.0000, 390.2000, "stonks:click"); // blue
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][4], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][4], true);

	buy_car_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 433.6666, 390.2000, "stonks:click"); // red
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][5], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][5], true);

	buy_car_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 449.0000, 390.6148, "stonks:click"); // red 2
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][6], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][6], true);

	buy_car_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 464.6667, 390.2000, "stonks:click"); // yellow
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][7], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][7], true);

	buy_car_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 402.3334, 407.2075, "stonks:click"); // black
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][8], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][8], true);

	buy_car_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 417.6667, 407.2075, "stonks:click"); // blue 2
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][9], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][9], true);

	buy_car_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 433.3333, 407.6223, "stonks:click"); // gray
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][10], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][10], true);

	buy_car_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 449.3333, 407.6223, "stonks:click"); // green
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][11], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][11], true);

	buy_car_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 465.3333, 407.2074, "stonks:click"); // green 2
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][12], 9.0000, 11.0000);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][12], true);
}

stock CreateAutoTuningForPlayer(playerid)
{
	change_color_PTD[0][playerid] = CreatePlayerTextDraw(playerid, 321.889190, 346.457916, "цвет 1");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[0][playerid], 0.193553, 0.913064);
	PlayerTextDrawTextSize(playerid, change_color_PTD[0][playerid], 27.999996, 26.382226);
	PlayerTextDrawAlignment(playerid, change_color_PTD[0][playerid], 2);
	PlayerTextDrawColor(playerid, change_color_PTD[0][playerid], -1);
	PlayerTextDrawUseBox(playerid, change_color_PTD[0][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[0][playerid], -256);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[0][playerid], 1);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[0][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, change_color_PTD[0][playerid], 51);
	PlayerTextDrawFont(playerid, change_color_PTD[0][playerid], 2);
	PlayerTextDrawSetProportional(playerid, change_color_PTD[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[0][playerid], true);

	change_color_PTD[1][playerid] = CreatePlayerTextDraw(playerid, 342.444366, 359.402191, "usebox");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[1][playerid], 0.000000, 4.030000);
	PlayerTextDrawTextSize(playerid, change_color_PTD[1][playerid], 300.222320, 0.000000);
	PlayerTextDrawAlignment(playerid, change_color_PTD[1][playerid], 1);
	PlayerTextDrawColor(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawUseBox(playerid, change_color_PTD[1][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[1][playerid], 102);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawFont(playerid, change_color_PTD[1][playerid], 0);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[1][playerid], true);

	change_color_PTD[2][playerid] = CreatePlayerTextDraw(playerid, 402.999755, 359.406555, "usebox");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[2][playerid], 0.000000, 4.030000);
	PlayerTextDrawTextSize(playerid, change_color_PTD[2][playerid], 360.666625, 0.000000);
	PlayerTextDrawAlignment(playerid, change_color_PTD[2][playerid], 1);
	PlayerTextDrawColor(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawUseBox(playerid, change_color_PTD[2][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[2][playerid], -171);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawFont(playerid, change_color_PTD[2][playerid], 0);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[2][playerid], true);

	change_color_PTD[3][playerid] = CreatePlayerTextDraw(playerid, 283.555328, 359.411010, "usebox");
	PlayerTextDrawLetterSize(playerid, change_color_PTD[3][playerid], 0.000000, 4.030000);
	PlayerTextDrawTextSize(playerid, change_color_PTD[3][playerid], 241.111145, 0.000000);
	PlayerTextDrawAlignment(playerid, change_color_PTD[3][playerid], 1);
	PlayerTextDrawColor(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawUseBox(playerid, change_color_PTD[3][playerid], true);
	PlayerTextDrawBoxColor(playerid, change_color_PTD[3][playerid], 865730389);
	PlayerTextDrawSetShadow(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawFont(playerid, change_color_PTD[3][playerid], 0);
	PlayerTextDrawSetSelectable(playerid, change_color_PTD[3][playerid], true);
}

stock IntToString(integer)
{
	new string[sizeof integer + 5];

	format(string, sizeof string, "%d", integer);

	return string;
}

stock SendMessageInChat(playerid, text[], Float: radius = 30.0)
{
	new Float: dist, type;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerChatBubble(playerid, text, 0x00CCFFFF, 30.0, 8000);

	ChatMessageInit(playerid, text);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		dist = GetPlayerDistanceFromPoint(idx, x, y, z);

		if(dist > radius) continue;
		type = GetPlayerChatType(idx);

		switch(GetPlayerSettingData(idx, S_CHAT_TYPE))
		{
			case SETTING_CHAT_ADVANCE:
			{
				if(dist < (radius / 4))
				{
					SendClientMessage(idx, 0xCECECEFF, chat_message[type]);
				}
				else if(dist < (radius / 2))
				{
					SendClientMessage(idx, 0x999999FF, chat_message[type]);
				}
				else
				{
					SendClientMessage(idx, 0x6B6B6BFF, chat_message[type]);
				}
			}
			case SETTING_CHAT_STANDART:
			{
				if(GetPlayerSettingData(idx, S_NICK_IN_CHAT))
				{
					SendPlayerMessageToPlayer(idx, playerid, chat_message[type]);
				}
				else SendClientMessage(idx, 0xCECECEFF, text);
			}
			default: continue;
		}
	}
	if(!IsPlayerDriver(playerid))
	{
		if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_NONE)
		{
			ApplyAnimationEx(playerid, "PED", "IDLE_chat", 4.100, 0, 1, 1, 1, 1, 0, USE_ANIM_TYPE_CHAT);
			SetTimerEx("ClearPlayerChatAnim", strlen(text) * 400, false, "i", playerid);
		}
	}
	return 1;
}

stock ChatMessageInit(playerid, text[])
{
	format(chat_message[0], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
	format(chat_message[1], 129, "- %s {%06x}(%s)", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid));
	format(chat_message[2], 129, "- %s", text);

	format(chat_message[3], 129, "(%d): %s", playerid, text);
	format(chat_message[4], 129, "%s", text);
}

stock SetPlayerChatInit(playerid)
{
	new type = 0;
	switch(GetPlayerSettingData(playerid, S_CHAT_TYPE))
	{
		case SETTING_CHAT_ADVANCE:
		{
			if(GetPlayerSettingData(playerid, S_NICK_IN_CHAT) == SETTING_TYPE_ON)
			{
				if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
				{
					type = 0;
				}
				else type = 1;
			}
			else type = 2;
		}
		case SETTING_CHAT_STANDART:
		{
			if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
			{
				type = 3;
			}
			else type = 4;
		}
		default: type = 0;
	}
	SetPlayerChatType(playerid, type);
}

stock SetPlayerSpawnInit(playerid)
{
	new spawn_id = 0,
		level = GetPlayerLevel(playerid);

	if(level >= 12)
		spawn_id = 3;
	else if(level >= 7)
		spawn_id = 2;
	else if(level >= 6)
		spawn_id = 1;
	else if(level >= 3)
		spawn_id = 0;

	SetSpawnInfo
	(
		playerid,
		0,
		GetPlayerSkinEx(playerid),
		spawn_pos_data[spawn_id][0], // + random(3),
		spawn_pos_data[spawn_id][1], // + random(3),
		spawn_pos_data[spawn_id][2],
		spawn_pos_data[spawn_id][3],
		0, 0, 0, 0, 0, 0
	);

	return 1;
}

stock SetPlayerSpawnPos(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		new jail_pos = random(sizeof g_jail_positions);

		SetPlayerPosEx
		(
			playerid,
			g_jail_positions[jail_pos][0],
			g_jail_positions[jail_pos][1],
			g_jail_positions[jail_pos][2],
			g_jail_positions[jail_pos][3],
			1, 6
		);

		SetPlayerData(playerid, P_HEALTH, 100);
		SetPlayerHealthEx(playerid, 100);
		return 1;
	}
	if(GetPlayerData(playerid, P_HOSPITAL))
	{
		SetPlayerPosEx
        (
            playerid,
            433.8349 + random(3) - random(3),
            1698.1234 + random(3) - random(3),
            1001.0000,
            -90.0,
			3, 5
		);
		return 1;
	}
	else
	{
		switch(GetPlayerSpawnSetting(playerid))
		{
			case 1:
			{

				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_HOME));
			}
			case 2:
			{

				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				new hotel_id = GetPlayerData(playerid, P_HOUSE),
					room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				SetPlayerData(playerid, P_IN_BUSINESS, hotel_id + 30);
				EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
			}
			case 3:
			{

				new team_id = GetPlayerTeamEx(playerid);

				if(!team_id)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				SetPlayerPosEx
				(
					playerid,
					GetTeamData(team_id, O_SPAWN)[0],
					GetTeamData(team_id, O_SPAWN)[1],
					GetTeamData(team_id, O_SPAWN)[2],
					GetTeamData(team_id, O_SPAWN)[3],
					GetTeamData(team_id, O_SPAWN_INT),
					GetTeamData(team_id, O_SPAWN_VW)
				);
			}
			case 4:
			{
			    if(GetPVarInt(playerid, "spawn_") == 1) return true;

				if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_ROOM));
			}
		}
	}

	return 1;
}

stock SetPlayerInit(playerid)
{
	SetPlayerLevelInit(playerid);
	SetPlayerColorInit(playerid);
	SetPlayerSuspectInit(playerid);
	SetPlayerSkinInit(playerid);
	SetPlayerChatInit(playerid);
	SetPlayerMoneyInit(playerid);

	CreateTeleportObjects(playerid);
	CreateSpeedometrForPlayer(playerid);
	CreateAutoMarketForPlayer(playerid);
	CreateBizInfo(playerid);
	CreateHomeInfo(playerid);
	CreateDriveLicText(playerid);
	CreateMvdLicText(playerid);
	CreatePassPlayer(playerid);
	CreateDetTextDraw(playerid);
	CreatePlayerGreenZoneText(playerid);
	//CreateAvtorizPlayer(playerid);
	CreatePlayerCityZoneText(playerid);
	// CreateAutoTuningForPlayer(playerid);
	createTextDrawToPlayer(playerid);

	CreatePhonePlayer(playerid);

	CreateCellSalon(playerid);

	CreateCafe(playerid);
	
	CreateShop(playerid);
	
	CreateCar(playerid);

	PlayerTextDrawSetString(playerid, city_zone_PTD[playerid], city_zone_name_TD[sizeof city_zones]);
	PlayerTextDrawShow(playerid, city_zone_PTD[playerid]);

	SetPlayerLogged(playerid, true);
}

stock GetPlayerSkinEx(playerid)
{
	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		return GetPlayerData(playerid, P_OSKIN);
	else
		return GetPlayerData(playerid, P_SKIN);
}

stock PreLoadPlayerAnims(playerid)
{
	for(new idx; idx < sizeof g_anim_libs; idx ++)
	{
		PreloadAnimLib(playerid, g_anim_libs[idx]);
	}
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 0);
}

stock SetPlayerMoneyInit(playerid)
{
	ResetPlayerMoney(playerid);
	return GivePlayerMoney(playerid, GetPlayerMoneyEx(playerid));
}

stock SetPlayerColorInit(playerid)
{
	return SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
}

stock SetPlayerColorEx(playerid, color)
{
	SetPlayerData(playerid, P_COLOR, color);
	return SetPlayerColor(playerid, color);
}

stock SetPlayerHealthEx(playerid, Float: health, bool: inc_health = false)
{
	if(inc_health)
	{
		AddPlayerData(playerid, P_HEALTH, +, health);
	}
	else SetPlayerData(playerid, P_HEALTH, health);

	if(GetPlayerData(playerid, P_HEALTH) > 100.0)
		SetPlayerData(playerid, P_HEALTH, 100.0);

	return SetPlayerHealth(playerid, GetPlayerData(playerid, P_HEALTH));
}

stock GetPlayerTeamColor(playerid)
{
	return team_colors[GetPlayerTeamEx(playerid)];
}

stock SetPlayerSuspectInit(playerid)
{
	return SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
}

stock SetPlayerSkinInit(playerid)
{
	return SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
}

stock SetPlayerLevelInit(playerid)
{
	return SetPlayerScore(playerid, GetPlayerLevel(playerid));
}

stock SetPlayerSkillsInit(playerid)
{
	SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
	SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
	SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
	SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
	SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
	SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
	SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
	SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
	SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
	SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
	SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);

	return 1;
}

stock SetPlayerSelectSkin(playerid, select_skin, skinid)
{
	SetPlayerData(playerid, P_SELECT_SKIN, select_skin);
	SetPlayerSkin(playerid, skinid);
}

stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, Float: angle, interior = -1, virtual_world = -1, freeze = true)
{
	if(interior > -1)
		PlayerTeleportInit(playerid, x, y,  z, angle);

	SetPlayerPos(playerid, x, y, z);

	SetPlayerFacingAngle(playerid, angle);
	SetCameraBehindPlayer(playerid);

	if(interior != -1 && GetPlayerInterior(playerid) != interior)
	{
		SetPlayerInterior(playerid, interior);
	}
	if(virtual_world != -1 && GetPlayerVirtualWorld(playerid) != virtual_world)
	{
		SetPlayerVirtualWorld(playerid, virtual_world);
	}
	if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}
	if(freeze)
	{
		TeleportFreeze(playerid, 1200);
	}
	return 1;
}

stock TeleportFreeze(playerid, ms)
{
	if(ms <= 0)
		return 0;

	ShowPlayerWaitPanel(playerid);
	TogglePlayerControllable(playerid, false);

	SetTimerEx("TeleportUnfreeze", ms, false, "d", playerid);

	return 1;
}

public: TeleportUnfreeze(playerid)
{
	HidePlayerWaitPanel(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

stock JailPlayer(playerid, jail_time)
{
	new jail_pos = random(sizeof g_jail_positions);

	SetPlayerPosEx
	(
		playerid,
		g_jail_positions[jail_pos][0],
		g_jail_positions[jail_pos][1],
		g_jail_positions[jail_pos][2],
		g_jail_positions[jail_pos][3],
		1, 6
	);

	SetPlayerData(playerid, P_JAIL, jail_time * 60);
	UpdatePlayerDatabaseInt(playerid, "jail", jail_time * 60);
}

stock UnjailPlayer(playerid)
{
	SetPlayerPosEx
	(
		playerid,
  		189.1794,1446.3762,12.0100,255.3777,
		0, 0
	);

	SetPlayerData(playerid, P_JAIL, 0);
	UpdatePlayerDatabaseInt(playerid, "jail", 0);
}

stock UpdatePlayerDatabaseInt(playerid, field[], value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%d WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock UpdatePlayerDatabaseFloat(playerid, field[], Float:value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%f WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock UpdatePlayerDatabaseString(playerid, field[], value[])
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%s WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock FixKick(playerid, message[] = "Введите /q (/quit) чтобы выйти", time_ms = 500)
{
	if(strlen(message) > 10000)
		SendClientMessage(playerid, 0xFF6600FF, message);

	if(time_ms == 10000000)
	{
		new fmt_text[65];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] кикнут антифлуд-системой", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SetTimerEx("FixedKick", time_ms, false, "i", playerid);

	return 1;
}

stock ClearPlayerInfo(playerid)
{
	g_player[playerid] = g_player_default_values;
	g_player_gps[playerid] = g_gps_default_values;
	g_player_setting[playerid] = g_settings_default_values;
	g_player_driving_exam[playerid] = g_driving_exam_default_values;

	g_pickup_flood[playerid] = 0;
	g_speed_line_update[playerid] = -1;
	g_teleport_object[playerid] = {-1, -1};
	player_in_city_zone[playerid] = -1;

	price_select_TD[playerid] = PlayerText:{-1};

	SetPlayerPhoneBookInitStatus(playerid, false);
	SetPlayerPhoneBookContacts(playerid, 0);

	ClearPlayerOffer(playerid);
	ClearPlayerListitemValues(playerid);
	ClearPlayerPhoneCall(playerid);

	AntiFloodPlayerInit(playerid);
	// ClearBankAccountsData(playerid);

	DestroyTeleportObjects(playerid);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	#if defined _SYSTEM_CP
	ClearPlayerCPInfo(playerid);
	#endif

	#if defined _SYSTEM_RACE_CP
	ClearPlayerRCPInfo(playerid);
	#endif

	#if defined _blackjack_included
		BJ_PlayerInfo[playerid] = NULL_BJ_PI;
	#endif

	SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);

	mysql_race[playerid] ++;
}

stock CreatePlayerAccount(playerid)
{
	new query[256];
	new Cache: result;

	new time = gettime();

	SetPlayerData(playerid, P_REG_TIME, time);
	SetPlayerData(playerid, P_LAST_LOGIN_TIME, time);

	format(g_player[playerid][P_REG_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_LAST_IP], 16, "%s", GetPlayerIpEx(playerid));

	mysql_format
	(
		mysql, query, sizeof query,
		"INSERT INTO accounts "\
			"(name,password,email,refer,sex,reg_time,reg_ip,last_ip,last_login) "\
			"VALUES "\
			"('%e','%e','%e',%d,%d,%d,'%e','%e',%d)",
		GetPlayerNameEx(playerid),
		GetPlayerData(playerid, P_PASSWORD),
		GetPlayerData(playerid, P_EMAIL),
		GetPlayerData(playerid, P_REFER),
		GetPlayerData(playerid, P_SEX),
		GetPlayerData(playerid, P_REG_TIME),
		GetPlayerData(playerid, P_REG_IP),
		GetPlayerData(playerid, P_LAST_IP),
		GetPlayerData(playerid, P_LAST_LOGIN_TIME)
	);
	result = mysql_query(mysql, query);

	SetPlayerData(playerid, P_ACCOUNT_ID, cache_insert_id());
	cache_delete(result);

	return GetPlayerAccountID(playerid);
}

stock CreateTextDraws()
{
    //Global Textdraws:

	Metro_TD[0] = TextDrawCreate(144.000076, 109.370353, "metro:bilet");
	TextDrawLetterSize(Metro_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(Metro_TD[0], 344.000000, 232.000000);
	TextDrawAlignment(Metro_TD[0], 1);
	TextDrawColor(Metro_TD[0], -1);
	TextDrawSetShadow(Metro_TD[0], 0);
	TextDrawSetOutline(Metro_TD[0], 0);
	TextDrawBackgroundColor(Metro_TD[0], 255);
	TextDrawFont(Metro_TD[0], 4);
	TextDrawSetProportional(Metro_TD[0], 0);
	TextDrawSetShadow(Metro_TD[0], 0);

	Metro_TD[1] = TextDrawCreate(359.000091, 249.163009, "");
	TextDrawLetterSize(Metro_TD[1], 0.000000, 0.000000);
	TextDrawTextSize(Metro_TD[1], 69.000000, 32.000000);
	TextDrawAlignment(Metro_TD[1], 1);
	TextDrawColor(Metro_TD[1], 255);
	TextDrawSetShadow(Metro_TD[1], 0);
	TextDrawSetOutline(Metro_TD[1], 0);
	TextDrawBackgroundColor(Metro_TD[1], 255);
	TextDrawFont(Metro_TD[1], 4);
	TextDrawSetProportional(Metro_TD[1], 0);
	TextDrawSetShadow(Metro_TD[1], 0);
	TextDrawSetSelectable(Metro_TD[1], true);

	Metro_TD[2] = TextDrawCreate(359.333435, 290.644531, "");
	TextDrawLetterSize(Metro_TD[2], 0.000000, 0.000000);
	TextDrawTextSize(Metro_TD[2], 69.000000, 31.000000);
	TextDrawAlignment(Metro_TD[2], 1);
	TextDrawColor(Metro_TD[2], 255);
	TextDrawSetShadow(Metro_TD[2], 0);
	TextDrawSetOutline(Metro_TD[2], 0);
	TextDrawBackgroundColor(Metro_TD[2], 255);
	TextDrawFont(Metro_TD[2], 4);
	TextDrawSetProportional(Metro_TD[2], 0);
	TextDrawSetShadow(Metro_TD[2], 0);
	TextDrawSetSelectable(Metro_TD[2], true);

	Metro_TD[3] = TextDrawCreate(175.000000, 204.933380, "22:40");
	TextDrawLetterSize(Metro_TD[3], 0.400000, 1.600000);
	TextDrawAlignment(Metro_TD[3], 2);
	TextDrawColor(Metro_TD[3], 255);
	TextDrawSetShadow(Metro_TD[3], 0);
	TextDrawSetOutline(Metro_TD[3], 0);
	TextDrawBackgroundColor(Metro_TD[3], 255);
	TextDrawFont(Metro_TD[3], 1);
	TextDrawSetProportional(Metro_TD[3], 1);
	TextDrawSetShadow(Metro_TD[3], 0);

	Metro_TD[4] = TextDrawCreate(172.333312, 308.222259, "23:40");
	TextDrawLetterSize(Metro_TD[4], 0.400000, 1.600000);
	TextDrawAlignment(Metro_TD[4], 2);
	TextDrawColor(Metro_TD[4], 255);
	TextDrawSetShadow(Metro_TD[4], 0);
	TextDrawSetOutline(Metro_TD[4], 0);
	TextDrawBackgroundColor(Metro_TD[4], 255);
	TextDrawFont(Metro_TD[4], 1);
	TextDrawSetProportional(Metro_TD[4], 1);
	TextDrawSetShadow(Metro_TD[4], 0);

	Metro_TD[5] = TextDrawCreate(231.999969, 203.688812, "22.04.2020");
	TextDrawLetterSize(Metro_TD[5], 0.272333, 1.110519);
	TextDrawAlignment(Metro_TD[5], 2);
	TextDrawColor(Metro_TD[5], -2139062017);
	TextDrawSetShadow(Metro_TD[5], 0);
	TextDrawSetOutline(Metro_TD[5], 0);
	TextDrawBackgroundColor(Metro_TD[5], 255);
	TextDrawFont(Metro_TD[5], 1);
	TextDrawSetProportional(Metro_TD[5], 1);
	TextDrawSetShadow(Metro_TD[5], 0);

	Metro_TD[6] = TextDrawCreate(232.333282, 307.392547, "22.04.2020");
	TextDrawLetterSize(Metro_TD[6], 0.272333, 1.110519);
	TextDrawAlignment(Metro_TD[6], 2);
	TextDrawColor(Metro_TD[6], -2139062017);
	TextDrawSetShadow(Metro_TD[6], 0);
	TextDrawSetOutline(Metro_TD[6], 0);
	TextDrawBackgroundColor(Metro_TD[6], 255);
	TextDrawFont(Metro_TD[6], 1);
	TextDrawSetProportional(Metro_TD[6], 1);
	TextDrawSetShadow(Metro_TD[6], 0);

	PHONE_TD[0] = TextDrawCreate(498.666748, 209.340789, "phone:samsung");
	TextDrawLetterSize(PHONE_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(PHONE_TD[0], 84.000000, 215.000000);
	TextDrawAlignment(PHONE_TD[0], 1);
	TextDrawColor(PHONE_TD[0], -1);
	TextDrawSetShadow(PHONE_TD[0], 0);
	TextDrawSetOutline(PHONE_TD[0], 0);
	TextDrawBackgroundColor(PHONE_TD[0], 255);
	TextDrawFont(PHONE_TD[0], 4);
	TextDrawSetProportional(PHONE_TD[0], 0);
	TextDrawSetShadow(PHONE_TD[0], 0);

	server_logo_TD[0] = TextDrawCreate(518.333435, -15.348147, "logo:logo");
	TextDrawLetterSize(server_logo_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(server_logo_TD[0], 156.999908, 96.237060);
	TextDrawAlignment(server_logo_TD[0], 1);
	TextDrawColor(server_logo_TD[0], -1);
	TextDrawSetShadow(server_logo_TD[0], 0);
	TextDrawSetOutline(server_logo_TD[0], 0);
	TextDrawFont(server_logo_TD[0], 4);

	tuning_TD[0] = TextDrawCreate(17.3332, 119.3258, "sto:fon"); // пусто
	TextDrawTextSize(tuning_TD[0], 120.0000, 236.0000);
	TextDrawAlignment(tuning_TD[0], 1);
	TextDrawColor(tuning_TD[0], -1);
	TextDrawBackgroundColor(tuning_TD[0], 255);
	TextDrawFont(tuning_TD[0], 4);
	TextDrawSetProportional(tuning_TD[0], 0);
	TextDrawSetShadow(tuning_TD[0], 0);

	Vinyl_TD[0] = TextDrawCreate(28.3332, 104.3923, "stonkss:fon"); // пусто
	TextDrawTextSize(Vinyl_TD[0], 128.0000, 257.0000);
	TextDrawAlignment(Vinyl_TD[0], 1);
	TextDrawColor(Vinyl_TD[0], -1);
	TextDrawBackgroundColor(Vinyl_TD[0], 255);
	TextDrawFont(Vinyl_TD[0], 4);
	TextDrawSetProportional(Vinyl_TD[0], 0);
	TextDrawSetShadow(Vinyl_TD[0], 0);

	tuning_TD[1] = TextDrawCreate(49.7333, 277.6182, "tuning:left"); // ?????
	TextDrawTextSize(tuning_TD[1], 16.0000, 18.0000);
	TextDrawAlignment(tuning_TD[1], 1);
	TextDrawColor(tuning_TD[1], -1);
	TextDrawBackgroundColor(tuning_TD[1], 255);
	TextDrawFont(tuning_TD[1], 4);
	TextDrawSetProportional(tuning_TD[1], 0);
	TextDrawSetShadow(tuning_TD[1], 0);
	TextDrawSetSelectable(tuning_TD[1], true);

	tuning_TD[2] = TextDrawCreate(37.3333, 305.5779, "sto:buy"); // пусто
	TextDrawTextSize(tuning_TD[2], 30.0000, 16.0000);
	TextDrawAlignment(tuning_TD[2], 1);
	TextDrawColor(tuning_TD[2], -1);
	TextDrawBackgroundColor(tuning_TD[2], 255);
	TextDrawFont(tuning_TD[2], 4);
	TextDrawSetProportional(tuning_TD[2], 0);
	TextDrawSetShadow(tuning_TD[2], 0);
	TextDrawSetSelectable(tuning_TD[2], true);

	tuning_TD[3] = TextDrawCreate(81.9999, 305.5779, "sto:exit"); // пусто
	TextDrawTextSize(tuning_TD[3], 30.0000, 16.0000);
	TextDrawAlignment(tuning_TD[3], 1);
	TextDrawColor(tuning_TD[3], -1);
	TextDrawBackgroundColor(tuning_TD[3], 255);
	TextDrawFont(tuning_TD[3], 4);
	TextDrawSetProportional(tuning_TD[3], 0);
	TextDrawSetShadow(tuning_TD[3], 0);
	TextDrawSetSelectable(tuning_TD[3], true);

	licdrive_TD[0] = TextDrawCreate(228.000000, 144.629592, "doc:licdrive");
	TextDrawLetterSize(licdrive_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(licdrive_TD[0], 183.000000, 143.000000);
	TextDrawAlignment(licdrive_TD[0], 1);
	TextDrawColor(licdrive_TD[0], -1);
	TextDrawSetShadow(licdrive_TD[0], 0);
	TextDrawSetOutline(licdrive_TD[0], 0);
	TextDrawBackgroundColor(licdrive_TD[0], 255);
	TextDrawFont(licdrive_TD[0], 4);
	TextDrawSetProportional(licdrive_TD[0], 0);
	TextDrawSetShadow(licdrive_TD[0], 0);
	TextDrawSetSelectable(licdrive_TD[0], true);

	mvd_TD[0] = TextDrawCreate(177.666671, 159.977783, "doc:mvd");
	TextDrawLetterSize(mvd_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(mvd_TD[0], 267.000000, 103.000000);
	TextDrawAlignment(mvd_TD[0], 1);
	TextDrawColor(mvd_TD[0], -1);
	TextDrawSetShadow(mvd_TD[0], 0);
	TextDrawSetOutline(mvd_TD[0], 0);
	TextDrawBackgroundColor(mvd_TD[0], 255);
	TextDrawFont(mvd_TD[0], 4);
	TextDrawSetProportional(mvd_TD[0], 0);
	TextDrawSetShadow(mvd_TD[0], 0);
	TextDrawSetSelectable(mvd_TD[0], true);

	pass_TD[0] = TextDrawCreate(205.666748, 31.385190, "doc:pass");
	TextDrawLetterSize(pass_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(pass_TD[0], 238.000000, 356.000000);
	TextDrawAlignment(pass_TD[0], 1);
	TextDrawColor(pass_TD[0], -1);
	TextDrawSetShadow(pass_TD[0], 0);
	TextDrawSetOutline(pass_TD[0], 0);
	TextDrawBackgroundColor(pass_TD[0], 255);
	TextDrawFont(pass_TD[0], 4);
	TextDrawSetProportional(pass_TD[0], 0);
	TextDrawSetShadow(pass_TD[0], 0);
	TextDrawSetSelectable(pass_TD[0], true);

	tuning_TD[4] = TextDrawCreate(33.9999, 154.5852, "sto:diski"); // пусто
	TextDrawTextSize(tuning_TD[4], 86.0000, 26.0000);
	TextDrawAlignment(tuning_TD[4], 1);
	TextDrawColor(tuning_TD[4], -1);
	TextDrawBackgroundColor(tuning_TD[4], 255);
	TextDrawFont(tuning_TD[4], 4);
	TextDrawSetProportional(tuning_TD[4], 0);
	TextDrawSetShadow(tuning_TD[4], 0);
	TextDrawSetSelectable(tuning_TD[4], true);

	tuning_TD[5] = TextDrawCreate(33.9999, 190.6740, "sto:nitro"); // пусто
	TextDrawTextSize(tuning_TD[5], 86.0000, 26.0000);
	TextDrawAlignment(tuning_TD[5], 1);
	TextDrawColor(tuning_TD[5], -1);
	TextDrawBackgroundColor(tuning_TD[5], 255);
	TextDrawFont(tuning_TD[5], 4);
	TextDrawSetProportional(tuning_TD[5], 0);
	TextDrawSetShadow(tuning_TD[5], 0);
	TextDrawSetSelectable(tuning_TD[5], true);

	tuning_TD[6] = TextDrawCreate(33.3333, 228.4222, "sto:gidra"); // пусто
	TextDrawTextSize(tuning_TD[6], 86.0000, 26.0000);
	TextDrawAlignment(tuning_TD[6], 1);
	TextDrawColor(tuning_TD[6], -1);
	TextDrawBackgroundColor(tuning_TD[6], 255);
	TextDrawFont(tuning_TD[6], 4);
	TextDrawSetProportional(tuning_TD[6], 0);
	TextDrawSetShadow(tuning_TD[6], 0);
	TextDrawSetSelectable(tuning_TD[6], true);

	tuning_TD[7] = TextDrawCreate(33.3333, 265.3410, "sto:tuning"); // пусто
	TextDrawTextSize(tuning_TD[7], 86.0000, 26.0000);
	TextDrawAlignment(tuning_TD[7], 1);
	TextDrawColor(tuning_TD[7], -1);
	TextDrawBackgroundColor(tuning_TD[7], 255);
	TextDrawFont(tuning_TD[7], 4);
	TextDrawSetProportional(tuning_TD[7], 0);
	TextDrawSetShadow(tuning_TD[7], 0);
	TextDrawSetSelectable(tuning_TD[7], true);

	tuning_TD[8] = TextDrawCreate(116.0333, 277.4703, "tuning:right"); // ?????
	TextDrawTextSize(tuning_TD[8], 15.6700, 18.1500);
	TextDrawAlignment(tuning_TD[8], 1);
	TextDrawColor(tuning_TD[8], -1);
	TextDrawBackgroundColor(tuning_TD[8], 255);
	TextDrawFont(tuning_TD[8], 4);
	TextDrawSetProportional(tuning_TD[8], 0);
	TextDrawSetShadow(tuning_TD[8], 0);
	TextDrawSetSelectable(tuning_TD[8], true);

	tuning_TD[9] = TextDrawCreate(49.5000, 250.6079, "tuning:paint1"); // ?????
	TextDrawTextSize(tuning_TD[9], 85.0000, 21.0000);
	TextDrawAlignment(tuning_TD[9], 1);
	TextDrawColor(tuning_TD[9], -1);
	TextDrawBackgroundColor(tuning_TD[9], 255);
	TextDrawFont(tuning_TD[9], 4);
	TextDrawSetProportional(tuning_TD[9], 0);
	TextDrawSetShadow(tuning_TD[9], 0);
	TextDrawSetSelectable(tuning_TD[9], true);


	gps_TD = TextDrawCreate(70.000, 320.000, "GPS_On");
	TextDrawLetterSize(gps_TD, 0.300, 1.300);
	TextDrawAlignment(gps_TD, 1);
	TextDrawBackgroundColor(gps_TD, 0x000000FF);
	TextDrawColor(gps_TD, 0x66CC00FF);
	TextDrawFont(gps_TD, 1);
	TextDrawSetOutline(gps_TD, 1);
	TextDrawSetProportional(gps_TD, 1);
	TextDrawSetShadow(gps_TD, 2);

	anim_TD = TextDrawCreate(630.000, 430.000, "~k~~PED_SPRINT~_~w~to_stop_the_animation");
	TextDrawLetterSize(anim_TD, 0.300, 1.100);
	TextDrawAlignment(anim_TD, 3);
	TextDrawBackgroundColor(anim_TD, 0x000000FF);
	TextDrawColor(anim_TD, 0x00CC00FF);
	TextDrawFont(anim_TD, 2);
	TextDrawSetOutline(anim_TD, 1);
	TextDrawSetProportional(anim_TD, 1);
	TextDrawSetShadow(anim_TD, 2);


	speedometr_TD[0] = TextDrawCreate(441.3331, 190.2592, "speed:speed"); // ?????
	TextDrawTextSize(speedometr_TD[0], 265.0000, 304.0000);
	TextDrawAlignment(speedometr_TD[0], 1);
	TextDrawColor(speedometr_TD[0], -1);
	TextDrawBackgroundColor(speedometr_TD[0], 255);
	TextDrawFont(speedometr_TD[0], 4);
	TextDrawSetProportional(speedometr_TD[0], 0);
	TextDrawSetShadow(speedometr_TD[0], 0);

	fly_TD[0] = TextDrawCreate(257.333312, 115.733322, "fly:russia");
	TextDrawLetterSize(fly_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(fly_TD[0], 127.666709, 240.592559);
	TextDrawAlignment(fly_TD[0], 1);
	TextDrawColor(fly_TD[0], -1);
	TextDrawSetShadow(fly_TD[0], 0);
	TextDrawSetOutline(fly_TD[0], 0);
	TextDrawFont(fly_TD[0], 4);

	fly_TD[1] = TextDrawCreate(298.000000, 328.533325, "");
	TextDrawLetterSize(fly_TD[1], 0.000000, 0.000000);
	TextDrawTextSize(fly_TD[1], 49.000000, 19.496307);
	TextDrawAlignment(fly_TD[1], 1);
	TextDrawColor(fly_TD[1], -1);
	TextDrawSetShadow(fly_TD[1], 0);
	TextDrawSetOutline(fly_TD[1], 0);
	TextDrawFont(fly_TD[1], 4);
	TextDrawSetSelectable(fly_TD[1], true);

	fly_TD[2] = TextDrawCreate(369.333343, 121.955551, "");
	TextDrawLetterSize(fly_TD[2], 0.000000, 0.000000);
	TextDrawTextSize(fly_TD[2], 10.999969, 13.274078);
	TextDrawAlignment(fly_TD[2], 1);
	TextDrawColor(fly_TD[2], -1);
	TextDrawSetShadow(fly_TD[2], 0);
	TextDrawSetOutline(fly_TD[2], 0);
	TextDrawFont(fly_TD[2], 4);
	TextDrawSetSelectable(fly_TD[2], true);

	registr_TD[0] = TextDrawCreate(91.3332, 112.6887, "stonks:registr"); // пусто
	TextDrawTextSize(registr_TD[0], 121.0000, 216.0000);
	TextDrawAlignment(registr_TD[0], 1);
	TextDrawColor(registr_TD[0], -1);
	TextDrawBackgroundColor(registr_TD[0], 255);
	TextDrawFont(registr_TD[0], 4);
	TextDrawSetProportional(registr_TD[0], 0);
	TextDrawSetShadow(registr_TD[0], 0);

	wait_panel_TD[0] = TextDrawCreate(239.6665, 181.1333, "stonks:load"); // пусто
	TextDrawTextSize(wait_panel_TD[0], 160.0000, 104.0000);
	TextDrawAlignment(wait_panel_TD[0], 1);
	TextDrawColor(wait_panel_TD[0], -1);
	TextDrawBackgroundColor(wait_panel_TD[0], 255);
	TextDrawFont(wait_panel_TD[0], 4);
	TextDrawSetProportional(wait_panel_TD[0], 0);
	TextDrawSetShadow(wait_panel_TD[0], 0);

    select_TD[0] = TextDrawCreate(250.6665, 347.8888, "stonks:fon"); // пусто
	TextDrawTextSize(select_TD[0], 129.0000, 87.0000);
	TextDrawAlignment(select_TD[0], 1);
	TextDrawColor(select_TD[0], -1);
	TextDrawBackgroundColor(select_TD[0], 255);
	TextDrawFont(select_TD[0], 4);
	TextDrawSetProportional(select_TD[0], 0);
	TextDrawSetShadow(select_TD[0], 0);

	select_TD[1] = TextDrawCreate(297.9999, 372.7777, "stonks:buy"); // пусто
	TextDrawTextSize(select_TD[1], 35.0000, 19.0000);
	TextDrawAlignment(select_TD[1], 1);
	TextDrawColor(select_TD[1], -1);
	TextDrawBackgroundColor(select_TD[1], 255);
	TextDrawFont(select_TD[1], 4);
	TextDrawSetProportional(select_TD[1], 0);
	TextDrawSetShadow(select_TD[1], 0);
	TextDrawSetSelectable(select_TD[1], true);

	select_TD[2] = TextDrawCreate(336.3333, 372.3627, "stonks:right"); // пусто
	TextDrawTextSize(select_TD[2], 35.0000, 19.0000);
	TextDrawAlignment(select_TD[2], 1);
	TextDrawColor(select_TD[2], -1);
	TextDrawBackgroundColor(select_TD[2], 255);
	TextDrawFont(select_TD[2], 4);
	TextDrawSetProportional(select_TD[2], 0);
	TextDrawSetShadow(select_TD[2], 0);
	TextDrawSetSelectable(select_TD[2], true);

	select_TD[3] = TextDrawCreate(259.0000, 372.3629, "stonks:left"); // пусто
	TextDrawTextSize(select_TD[3], 35.0000, 19.0000);
	TextDrawAlignment(select_TD[3], 1);
	TextDrawColor(select_TD[3], -1);
	TextDrawBackgroundColor(select_TD[3], 255);
	TextDrawFont(select_TD[3], 4);
	TextDrawSetProportional(select_TD[3], 0);
	TextDrawSetShadow(select_TD[3], 0);
	TextDrawSetSelectable(select_TD[3], true);

	select_TD[4] = TextDrawCreate(298.3331, 400.9851, "stonks:exit"); // пусто
	TextDrawTextSize(select_TD[4], 35.0000, 19.0000);
	TextDrawAlignment(select_TD[4], 1);
	TextDrawColor(select_TD[4], -1);
	TextDrawBackgroundColor(select_TD[4], 255);
	TextDrawFont(select_TD[4], 4);
	TextDrawSetProportional(select_TD[4], 0);
	TextDrawSetShadow(select_TD[4], 0);
	TextDrawSetSelectable(select_TD[4], true);


	buy_car_TD[0] = TextDrawCreate(383.6665, 373.6075, "stonks:colorofon"); // пусто
	TextDrawTextSize(buy_car_TD[0], 108.0000, 61.0000);
	TextDrawAlignment(buy_car_TD[0], 1);
	TextDrawColor(buy_car_TD[0], -1);
	TextDrawBackgroundColor(buy_car_TD[0], 255);
	TextDrawFont(buy_car_TD[0], 4);
	TextDrawSetProportional(buy_car_TD[0], 0);
	TextDrawSetShadow(buy_car_TD[0], 0);

	capture_TD[0] = TextDrawCreate(170.444442, 260.842224, "usebox");
	TextDrawLetterSize(capture_TD[0], 0.000000, 4.293703);
	TextDrawTextSize(capture_TD[0], -0.222222, 0.000000);
	TextDrawAlignment(capture_TD[0], 1);
	TextDrawColor(capture_TD[0], 0);
	TextDrawUseBox(capture_TD[0], true);
	TextDrawBoxColor(capture_TD[0], 102);
	TextDrawSetShadow(capture_TD[0], 0);
	TextDrawSetOutline(capture_TD[0], 0);
	TextDrawFont(capture_TD[0], 0);

	capture_TD[1] = TextDrawCreate(3.555550, 260.337829, "_");
	TextDrawLetterSize(capture_TD[1], 0.410000, 1.380977);
	TextDrawAlignment(capture_TD[1], 1);
	TextDrawColor(capture_TD[1], 13369599);
	TextDrawSetShadow(capture_TD[1], 0);
	TextDrawSetOutline(capture_TD[1], 1);
	TextDrawBackgroundColor(capture_TD[1], 255);
	TextDrawFont(capture_TD[1], 1);
	TextDrawSetProportional(capture_TD[1], 1);

	green_zone_TD[0] = TextDrawCreate(617.555786, 140.877868, "");
	TextDrawLetterSize(green_zone_TD[0], 0.000000, 1.984567);
	TextDrawTextSize(green_zone_TD[0], 488.666442, 0.000000);
	TextDrawAlignment(green_zone_TD[0], 1);
	TextDrawColor(green_zone_TD[0], 0);
	TextDrawUseBox(green_zone_TD[0], true);
	TextDrawBoxColor(green_zone_TD[0], 102);
	TextDrawSetShadow(green_zone_TD[0], 0);
	TextDrawSetOutline(green_zone_TD[0], 0);
	TextDrawFont(green_zone_TD[0], 0);

	green_zone_TD[1] = TextDrawCreate(617.666870, 140.384552, "");
	TextDrawLetterSize(green_zone_TD[1], 0.000000, -0.104321);
	TextDrawTextSize(green_zone_TD[1], 488.666442, 0.000000);
	TextDrawAlignment(green_zone_TD[1], 1);
	TextDrawColor(green_zone_TD[1], 0);
	TextDrawUseBox(green_zone_TD[1], true);
	TextDrawBoxColor(green_zone_TD[1], 865730423);
	TextDrawSetShadow(green_zone_TD[1], 0);
	TextDrawSetOutline(green_zone_TD[1], 0);
	TextDrawFont(green_zone_TD[1], 0);

	radio_edit_TD = TextDrawCreate(9.838958, 385.000122, "_");
	TextDrawLetterSize(radio_edit_TD, 0.362385, 1.605833);
	TextDrawTextSize(radio_edit_TD, -0.468522, -161.583328);
	TextDrawAlignment(radio_edit_TD, 1);
	TextDrawColor(radio_edit_TD, -1);
	TextDrawSetShadow(radio_edit_TD, 0);
	TextDrawSetOutline(radio_edit_TD, 1);
	TextDrawBackgroundColor(radio_edit_TD, 255);
	TextDrawFont(radio_edit_TD, 1);
	TextDrawSetProportional(radio_edit_TD, 1);

	change_color_TD[0] = TextDrawCreate(434.889099, 332.522338, "usebox");
	TextDrawLetterSize(change_color_TD[0], 0.000000, 9.385062);
	TextDrawTextSize(change_color_TD[0], 207.777801, 0.000000);
	TextDrawAlignment(change_color_TD[0], 1);
	TextDrawColor(change_color_TD[0], 0);
	TextDrawUseBox(change_color_TD[0], true);
	TextDrawBoxColor(change_color_TD[0], 102);
	TextDrawSetShadow(change_color_TD[0], 0);
	TextDrawSetOutline(change_color_TD[0], 0);
	TextDrawFont(change_color_TD[0], 0);

	change_color_TD[1] = TextDrawCreate(434.000000, 333.517761, "usebox");
	TextDrawLetterSize(change_color_TD[1], 0.000000, 1.121358);
	TextDrawTextSize(change_color_TD[1], 208.666671, 0.000000);
	TextDrawAlignment(change_color_TD[1], 1);
	TextDrawColor(change_color_TD[1], 0);
	TextDrawUseBox(change_color_TD[1], true);
	TextDrawBoxColor(change_color_TD[1], 865730389);
	TextDrawSetShadow(change_color_TD[1], 0);
	TextDrawSetOutline(change_color_TD[1], 0);
	TextDrawFont(change_color_TD[1], 0);

	change_color_TD[2] = TextDrawCreate(322.222564, 333.511169, "Перекраска транспорта");
	TextDrawLetterSize(change_color_TD[2], 0.219777, 1.077329);
	TextDrawAlignment(change_color_TD[2], 2);
	TextDrawColor(change_color_TD[2], -1);
	TextDrawSetShadow(change_color_TD[2], 1);
	TextDrawSetOutline(change_color_TD[2], 0);
	TextDrawBackgroundColor(change_color_TD[2], 51);
	TextDrawFont(change_color_TD[2], 2);
	TextDrawSetProportional(change_color_TD[2], 1);

	change_color_TD[3] = TextDrawCreate(321.778656, 402.717987, "usebox");
	TextDrawLetterSize(change_color_TD[3], 0.000000, 1.453209);
	TextDrawTextSize(change_color_TD[3], 208.666885, 0.000000);
	TextDrawAlignment(change_color_TD[3], 1);
	TextDrawColor(change_color_TD[3], 0);
	TextDrawUseBox(change_color_TD[3], true);
	TextDrawBoxColor(change_color_TD[3], 1724658517);
	TextDrawSetShadow(change_color_TD[3], 0);
	TextDrawSetOutline(change_color_TD[3], 0);
	TextDrawBackgroundColor(change_color_TD[3], 1714657791);
	TextDrawFont(change_color_TD[3], 0);
	TextDrawSetSelectable(change_color_TD[3], true);

	change_color_TD[4] = TextDrawCreate(433.889801, 402.722534, "usebox");
	TextDrawLetterSize(change_color_TD[4], 0.000000, 1.453209);
	TextDrawTextSize(change_color_TD[4], 319.333526, 0.000000);
	TextDrawAlignment(change_color_TD[4], 1);
	TextDrawColor(change_color_TD[4], 0);
	TextDrawUseBox(change_color_TD[4], true);
	TextDrawBoxColor(change_color_TD[4], -11193515);
	TextDrawSetShadow(change_color_TD[4], 0);
	TextDrawSetOutline(change_color_TD[4], 0);
	TextDrawFont(change_color_TD[4], 0);
	TextDrawSetSelectable(change_color_TD[4], true);

	change_color_TD[5] = TextDrawCreate(265.110870, 404.222503, "Выбрать");
	TextDrawLetterSize(change_color_TD[5], 0.222444, 1.052441);
	TextDrawAlignment(change_color_TD[5], 2);
	TextDrawColor(change_color_TD[5], -1);
	TextDrawSetShadow(change_color_TD[5], 1);
	TextDrawSetOutline(change_color_TD[5], 0);
	TextDrawBackgroundColor(change_color_TD[5], 51);
	TextDrawFont(change_color_TD[5], 2);
	TextDrawSetProportional(change_color_TD[5], 1);

	change_color_TD[6] = TextDrawCreate(377.444671, 404.715820, "Отмена");
	TextDrawLetterSize(change_color_TD[6], 0.224666, 1.012619);
	TextDrawAlignment(change_color_TD[6], 2);
	TextDrawColor(change_color_TD[6], -1);
	TextDrawSetShadow(change_color_TD[6], 1);
	TextDrawSetOutline(change_color_TD[6], 0);
	TextDrawBackgroundColor(change_color_TD[6], 51);
	TextDrawFont(change_color_TD[6], 2);
	TextDrawSetProportional(change_color_TD[6], 1);
	
	time_TD = TextDrawCreate(289.0000, 420.7600, "2021.12.21_12:00:00"); // ?????
	TextDrawLetterSize(time_TD, 0.1931, 1.1600);
	TextDrawAlignment(time_TD, 1);
	TextDrawColor(time_TD, -1);
	TextDrawBackgroundColor(time_TD, 255);
	TextDrawFont(time_TD, 1);
	TextDrawSetProportional(time_TD, 1);
	TextDrawSetShadow(time_TD, 0);
	
	adm_menu_TD[0] = TextDrawCreate(39.6667, 432.2520, "Box"); // пусто
	TextDrawLetterSize(adm_menu_TD[0], 0.0000, 0.8666);
	TextDrawTextSize(adm_menu_TD[0], 476.0000, 0.0000);
	TextDrawAlignment(adm_menu_TD[0], 1);
	TextDrawColor(adm_menu_TD[0], -1);
	TextDrawUseBox(adm_menu_TD[0], 1);
	TextDrawBoxColor(adm_menu_TD[0], -2004645889);
	TextDrawBackgroundColor(adm_menu_TD[0], 255);
	TextDrawFont(adm_menu_TD[0], 1);
	TextDrawSetProportional(adm_menu_TD[0], 1);
	TextDrawSetShadow(adm_menu_TD[0], 0);

	adm_menu_TD[1] = TextDrawCreate(109.3334, 433.4965, "Box"); // пусто
	TextDrawLetterSize(adm_menu_TD[1], 0.0000, 0.6333);
	TextDrawTextSize(adm_menu_TD[1], 475.0000, 0.0000);
	TextDrawAlignment(adm_menu_TD[1], 1);
	TextDrawColor(adm_menu_TD[1], -1);
	TextDrawUseBox(adm_menu_TD[1], 1);
	TextDrawBoxColor(adm_menu_TD[1], 140);
	TextDrawBackgroundColor(adm_menu_TD[1], 255);
	TextDrawFont(adm_menu_TD[1], 1);
	TextDrawSetProportional(adm_menu_TD[1], 1);
	TextDrawSetShadow(adm_menu_TD[1], 0);

	adm_menu_TD[2] = TextDrawCreate(46.9999, 432.2518, "НЕОТВЕЧЕННЫЕ ЗАПРОСЫ"); // пусто
	TextDrawLetterSize(adm_menu_TD[2], 0.1380, 0.8740);
	TextDrawAlignment(adm_menu_TD[2], 1);
	TextDrawColor(adm_menu_TD[2], -1);
	TextDrawBackgroundColor(adm_menu_TD[2], 255);
	TextDrawFont(adm_menu_TD[2], 1);
	TextDrawSetProportional(adm_menu_TD[2], 1);
	TextDrawSetShadow(adm_menu_TD[2], 0);

	print("[TextDraw]: Все текстдравы созданы");
}

stock CreateMenus()
{
	admin_spec_menu = CreateMenu("_", 1, 550.0, 130.0, 50.0);
    AddMenuItem(admin_spec_menu, 0, "-EXIT-");
    AddMenuItem(admin_spec_menu, 0, "Update");
    AddMenuItem(admin_spec_menu, 0, "Stats");
    AddMenuItem(admin_spec_menu, 0, "Slap");
    AddMenuItem(admin_spec_menu, 0, "Info");
    AddMenuItem(admin_spec_menu, 0, "-EXIT-");




	print("[Menu]: Все меню созданы");
}

stock CreateVehicles()
{
	new spawn_time = 60 * 5; // 5 минут
 // --------------- Правительство
	CreateVehicle(604,-2334.8799,1525.4777,52.9575,103.4134,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // панамера
	CreateVehicle(490,-2342.1279,1523.7949,53.1380,102.8301,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ренж
	CreateVehicle(505,-2349.9072,1522.1130,52.9450,102.2168,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // бентли
	CreateVehicle(487,-2367.7432,1468.0935,53.1948,3.6891,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // вертолёт
	CreateVehicle(502,-2337.9004,1534.1808,52.8300,102.7346,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //ролс
	CreateVehicle(489,-2348.6987,1531.4937,53.2176,102.9852,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //тойота
	CreateVehicle(436,-2358.7942,1529.1357,52.9017,103.0065,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //киа
	CreateVehicle(409,-2333.8821,1513.3893,52.9988,102.7390,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //ролс 2
	CreateVehicle(400,-2343.7471,1510.9586,53.2302,102.6053,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //каен
	CreateVehicle(429,-2341.8679,1545.2183,52.7633,103.4309,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //майбах
	CreateVehicle(604,-2360.7239,1540.9913,52.9575,102.7946,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); //панамера 2


	for(new idxs; idxs < sizeof g_ferm_car; idxs ++)
	{
	    CreateVehicle(478,g_ferm_car[idxs][FER_POS_X],g_ferm_car[idxs][FER_POS_Y],g_ferm_car[idxs][FER_POS_Z],g_ferm_car[idxs][FER_POS_A],28,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
		vodila[idxs] = -1;
	}

	//==============================================================================
	CreateVehicle(420,-727.0438,941.0878,11.8670,359.6479,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,-733.5024,940.9460,11.9932,1.6170,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-738.6214,940.5186,11.8676,359.6027,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,-744.6390,940.4180,11.9977,1.3923,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,837.8394,650.4630,15.7235,221.5873,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,834.9374,647.8789,15.5913,221.4567,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,831.8992,645.1924,15.7237,220.0638,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,828.5351,642.3461,15.5930,218.7861,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,1658.2952,2247.5205,13.9271,88.9874,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1658.3738,2243.4268,13.7893,89.2612,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-2463.0664,2851.5962,37.3412,89.2700,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,-2448.1985,2851.5500,37.4715,91.2053,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-2460.9868,2825.5234,37.3419,90.3418,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,-2447.3132,2825.6052,37.3414,90.3419,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);

	//==============================================================================

	// --------------- Армия
	CreateVehicle(433,495.3294,2843.8464,7.5701,2.9655,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,489.0961,2842.8333,7.5655,1.3531,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,483.6270,2841.9758,7.5747,3.0850,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,476.7592,2840.9910,7.5657,1.2250,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(578,451.8553,2842.1970,7.5675,359.499,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(578,446.6103,2841.0149,7.5640,1.0197,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,471.4866,2842.1313,7.5649,2.2909,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,440.2967,2840.5374,7.5630,1.3122,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(551,311.6888,2819.1396,7.5946,359.3636,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(551,308.1850,2819.1965,7.5931,359.4627,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,434.6584,2840.3210,7.5640,1.3651,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,318.8001,2819.3623,7.5952,0.5150,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,315.3150,2819.1169,7.5919,0.3621,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); // VEHICLE_ACTION_TYPE_TAXI_DRIVER
	//CreateVehicle(15166,315.3150,2819.1169,7.5919,0.3621,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	// --------------- ФСИН
	CreateVehicle(427,-1713.8611,-2831.5842,13.7646,316.7470,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Автозак 1
	CreateVehicle(427,-1711.5802,-2833.5315,13.7429,320.7965,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Автозак 2
	CreateVehicle(427,-1721.4055,-2818.4089,14.3379,238.8103,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Автозак 3
	CreateVehicle(405,-1719.6936,-2815.7354,14.3609,240.4077,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ауди 1
	CreateVehicle(405,-1718.3409,-2813.3638,14.3749,242.0831,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ауди 2 66
	// --------------- Больница
	CreateVehicle(416, 434.2172,1722.1104,11.8401,75.0257,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 1
	CreateVehicle(416, 432.7232,1717.9496,11.8402,74.6033,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 2
	CreateVehicle(416, 431.7292,1713.6519,11.8401,73.6032,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 3
	CreateVehicle(416, 430.6960,1709.2373,11.8419,75.7904,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 4
	CreateVehicle(416, 429.1296,1705.4556,11.8425,74.9353,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 5
	CreateVehicle(416, 428.3296,1701.1339,11.8439,76.6674,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 6
	CreateVehicle(487, 416.7857,1736.3452,21.3920,74.9525,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Карета 7
	CreateVehicle(466, 436.4980,1730.7366,11.7124,74.2003,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Волга 1
	CreateVehicle(466, 434.9053,1726.4570,11.7128,75.0543,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Волга 2
	CreateVehicle(487, 408.9429,1704.5665,21.4297,72.0857,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // Вертолет

	// --------------- Радио ТРК ритм
	CreateVehicle(488,-2705.6899,2761.5171,37.7932,50.0,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, вертолет
	CreateVehicle(582,-2698.3494,2710.3298,37.2274,50.2159,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 1
	CreateVehicle(582,-2695.5610,2713.6748,37.2280,49.8447,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 2
	CreateVehicle(582,-2692.9331,2716.6587,37.2291,49.3312,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 3
	CreateVehicle(582,-2690.2358,2719.8857,37.2259,50.8637,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 5
	CreateVehicle(551,-2687.2122,2722.6384,37.2973,49.6484,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, Марк 2
	CreateVehicle(551,-2684.8364,2725.3521,37.2973,50.1215,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(551,-2682.5610,2727.9666,37.2973,49.0242,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(551,-2679.8833,2730.7644,37.1097,50.9312,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	// --------------- ДПС
	//CreateVehicle(596,1781.7279,-2268.7795,10.4007,267.6318,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // жигуль
	//CreateVehicle(596,1781.1688,-2264.7998,10.4045,88.6463,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // жигуль 2
	//CreateVehicle(596,1763.7177,-2226.5569,10.7155,180.0455,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // жигуль 4
	//CreateVehicle(596,1767.7755,-2226.5818,10.7152,180.8842,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // жигуль 5
	CreateVehicle(15143,1781.5975,-2261.0354,10.4532,270.0429,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // мерс дпс
	CreateVehicle(598,1804.1135,-2226.7896,10.4713,179.3379,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); //бмв дпс 2
	CreateVehicle(598,1800.0463,-2226.5439,10.4707,180.0928,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); //бмв дпс 3
	CreateVehicle(15143,1796.0995,-2226.6731,10.4578,180.2773,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // мерс дпс 2
	CreateVehicle(15143,1791.9785,-2226.6333,10.4578,180.5500,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // мерс дпс 3
	CreateVehicle(597,1788.0060,-2226.7114,10.7908,180.4520,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // веста дпс
	CreateVehicle(597,1783.7490,-2226.8035,10.8001,178.9523,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // веста дпс 2
	//CreateVehicle(596,1779.7498,-2226.6606,10.7154,179.5067,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // жигуль 6
	//CreateVehicle(596,1775.8317,-2226.5698,10.7155,180.5267,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // жигуль 7
	//CreateVehicle(596,1771.7018,-2226.5139,10.7150,179.7211,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); //жигуль 8
	CreateVehicle(598,1781.5813,-2252.9185,10.4627,270.2164,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // бмв дпс 4
	CreateVehicle(598,1781.8140,-2256.9153,10.4617,270.2824,1,79, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // бмв дпс 5
	// --------------- ППС
	CreateVehicle(598,166.3754,1384.1549,11.6288,257.9703,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,167.2589,1387.8993,11.9909,258.3884,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(598,167.6617,1391.6226,11.6286,259.1289,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(482,170.2281,1394.7888,12.0800,258.5131,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(482,170.9533,1398.4562,12.0730,259.2719,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,170.3388,1402.3401,12.0614,257.4996,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,171.1549,1405.8087,12.0560,257.4980,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,171.9969,1409.4236,11.9989,257.4955,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,172.7919,1413.2052,11.9882,257.4993,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,173.6382,1416.6925,12.0017,257.5071,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(528,174.4421,1420.3931,11.9866,257.6848,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	CreateVehicle(405,175.0343,1424.0237,11.9036,257.3146,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); //
	// --------------- ОПГ Центральное"
	CreateVehicle(579, -223.6436,-1073.4432,41.2267,235.5663,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);// ?????
	CreateVehicle(579, -221.6211,-1070.7927,41.2274,238.3434,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);// ????? 2
	CreateVehicle(579,-219.5863,-1067.6552,41.2284,237.1620,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);// ????? 3
	CreateVehicle(459,-217.2582,-1063.9126,40.6293,238.9574,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//????
	CreateVehicle(459,-215.4127,-1060.5150,40.6405,238.2990,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//???? 2
	CreateVehicle(459,-214.0396,-1057.4523,40.6406,240.0175,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//???? 3
	CreateVehicle(585,-201.4632,-1056.0046,40.8043,149.1365,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//?????
	CreateVehicle(585,-198.1627,-1057.9841,40.8038,149.3278,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//????? 2
	CreateVehicle(585,-195.0323,-1059.7374,40.8100,150.9055,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // ????? 3
	CreateVehicle(561,-201.4303,-1091.0649,40.7854,26.5815,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);// ??? 2115
	CreateVehicle(561,-185.7491,-1065.0148,40.7856,60.8164,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//??? 2115 2
	CreateVehicle(561,-187.5594,-1068.3981,40.7874,60.2327,128,128, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);//??? 2115 3
	// --------------- ОПГ Западное"
	CreateVehicle(579,-2348.6848,161.0554,21.5746,258.2853,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ????? 2
	CreateVehicle(579,-2347.8062,164.7261,21.5754,258.2986,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ????? 3
	CreateVehicle(579,-2347.0002,168.3379,21.5757,258.9432,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ????? 4
	CreateVehicle(585,-2346.2285,171.7591,21.1096,258.9959,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ?????
	CreateVehicle(585,-2345.3406,175.1346,21.1118,259.3694,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ????? 2
	CreateVehicle(585,-2344.5969,178.6359,21.1112,259.7422,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ????? 3
	CreateVehicle(459,-2344.0383,182.4227,20.9533,258.9554,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ????
	CreateVehicle(459,-2343.4026,185.8390,20.9539,259.3742,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ???? 2
	CreateVehicle(459,-2342.6768,189.0848,20.9547,259.3851,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ???? 3
	CreateVehicle(561,-2332.0657,191.8439,21.0866,169.0992,125,125, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ??? 2115
	// ---------------- ОПГ Северное"---------------------
	CreateVehicle(585,-2626.6746,2901.7158,37.4148,90.1641,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ?????
	CreateVehicle(585,-2626.7771,2898.0720,37.4137,91.1495,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ????? 2
	CreateVehicle(585,-2626.6907,2894.6069,37.4148,92.0194,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ????? 3
	CreateVehicle(579,-2626.4319,2890.9285,37.8382,90.1163,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ?????
	CreateVehicle(579,-2626.3855,2887.4932,37.8379,90.3927,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ????? 2
	CreateVehicle(579,-2626.4424,2884.0454,37.8383,90.4051,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ????? 3
	CreateVehicle(459,-2609.3481,2900.4736,37.2509,179.2685,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ????
	CreateVehicle(459,-2604.8989,2900.4224,37.2508,181.4422,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ???? 2
	CreateVehicle(561,-2636.6917,2880.5181,37.3879,359.9123,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ??? 2115

	//=========================================================аренда===============

 /*	arendaveh[0] = CreateVehicle(15085, 2144.0156,-1812.1764,18.4875,359.9574, 6, 6, -1, 0);

	SetVehicleData(arendaveh[0], V_RENT, 36);
	SetVehicleData(arendaveh[0], V_RENTP, 100000);
	SetVehicleData(arendaveh[0], V_OWRENT, 0);

 	arendaveh[1] = CreateVehicle(15116, 2147.4895,-1812.3109,18.5471,0.6105, 6, 6, -1, 0);

	SetVehicleData(arendaveh[1], V_RENT, 36);
	SetVehicleData(arendaveh[1], V_RENTP, 100000);
	SetVehicleData(arendaveh[1], V_OWRENT, 0);

	arendaveh[2] = CreateVehicle(15159, 2151.0271,-1811.9778,18.6786,359.7066, 6, 6, -1, 0);

	SetVehicleData(arendaveh[2], V_RENT, 36);
	SetVehicleData(arendaveh[2], V_RENTP, 100000);
	SetVehicleData(arendaveh[2], V_OWRENT, 0);

	arendaveh[3] = CreateVehicle(400, 2154.5510,-1812.0975,18.9538,1.2257, 6, 6, -1, 0);

	SetVehicleData(arendaveh[3], V_RENT, 36);
	SetVehicleData(arendaveh[3], V_RENTP, 100000);
	SetVehicleData(arendaveh[3], V_OWRENT, 0);

	arendaveh[4] = CreateVehicle(15167, 2158.0481,-1812.1659,18.7436,359.4655, 6, 6, -1, 0);

	SetVehicleData(arendaveh[4], V_RENT, 36);
	SetVehicleData(arendaveh[4], V_RENTP, 100000);
	SetVehicleData(arendaveh[4], V_OWRENT, 0);

	arendaveh[5] = CreateVehicle(15159, 2161.6943,-1812.8040,18.9367,0.0177, 6, 6, -1, 0);

	SetVehicleData(arendaveh[5], V_RENT, 36);
	SetVehicleData(arendaveh[5], V_RENTP, 100000);
	SetVehicleData(arendaveh[5], V_OWRENT, 0);

	arendaveh[6] = CreateVehicle(999, 2165.0598,-1812.4137,18.7696,359.3905, 6, 6, -1, 0);

	SetVehicleData(arendaveh[6], V_RENT, 36);
	SetVehicleData(arendaveh[6], V_RENTP, 100000);
	SetVehicleData(arendaveh[6], V_OWRENT, 0);

	arendaveh[7] = CreateVehicle(400, 2140.6797,-1811.9991,18.5939,0.0427, 6, 6, -1, 0);

	SetVehicleData(arendaveh[7], V_RENT, 36);
	SetVehicleData(arendaveh[7], V_RENTP, 100000);
	SetVehicleData(arendaveh[7], V_OWRENT, 0);

	//=====================вторая аренда==========================================

 	arendaveh[8] = CreateVehicle(999, 422.1423,1809.2489,12.3920,271.5281, 3, 1, -1, 0);

	SetVehicleData(arendaveh[8], V_RENT, 60);
	SetVehicleData(arendaveh[8], V_RENTP, 100000);
	SetVehicleData(arendaveh[8], V_OWRENT, 0);

	arendaveh[9] = CreateVehicle(15085, 421.8577,1804.0323,12.3921,270.5798, 3, 1, -1, 0);

	SetVehicleData(arendaveh[9], V_RENT, 60);
	SetVehicleData(arendaveh[9], V_RENTP, 100000);
	SetVehicleData(arendaveh[9], V_OWRENT, 0);

	arendaveh[10] = CreateVehicle(15116, 422.1949,1798.4261,12.3920,272.0365, 3, 1, -1, 0);

	SetVehicleData(arendaveh[10], V_RENT, 60);
	SetVehicleData(arendaveh[10], V_RENTP, 100000);
	SetVehicleData(arendaveh[10], V_OWRENT, 0);

	arendaveh[11] = CreateVehicle(15167, 423.0486,1793.5099,12.3921,269.7274, 3, 1, -1, 0);

	SetVehicleData(arendaveh[11], V_RENT, 60);
	SetVehicleData(arendaveh[11], V_RENTP, 100000);
	SetVehicleData(arendaveh[11], V_OWRENT, 0);

	arendaveh[12] = CreateVehicle(15164, 435.2710,1809.9153,12.3920,89.3308, 3, 1, -1, 0);

	SetVehicleData(arendaveh[12], V_RENT, 60);
	SetVehicleData(arendaveh[12], V_RENTP, 100000);
	SetVehicleData(arendaveh[12], V_OWRENT, 0);

	arendaveh[13] = CreateVehicle(15159, 435.2743,1804.3234,12.3920,91.7322, 3, 1, -1, 0);

	SetVehicleData(arendaveh[13], V_RENT, 60);
	SetVehicleData(arendaveh[13], V_RENTP, 100000);
	SetVehicleData(arendaveh[13], V_OWRENT, 0);

	arendaveh[14] = CreateVehicle(400, 435.2034,1798.9636,12.3920,92.3003, 3, 1, -1, 0);

	SetVehicleData(arendaveh[14], V_RENT, 60);
	SetVehicleData(arendaveh[14], V_RENTP, 100000);
	SetVehicleData(arendaveh[14], V_OWRENT, 0);

	arendaveh[15] = CreateVehicle(415, 435.3548,1794.0073,12.3921,89.6630, 3, 1, -1, 0);

	SetVehicleData(arendaveh[15], V_RENT, 60);
	SetVehicleData(arendaveh[15], V_RENTP, 100000);
	SetVehicleData(arendaveh[15], V_OWRENT, 0);*/

	print("[Vehicle]: Все транспортные средства созданы");
}

stock CreateMedBeds()
{
	for(new i; i < sizeof g_med_bed_pos; i ++)
	{
		g_med_bed_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFEE, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 5.0, _, _, _, -1, -1, _, 30.0);
		UpdateMedBed(i);
	}
}

stock CreateCasinoTables()
{
	for(new idx; idx < sizeof g_casino_table_pos; idx ++)
	{
		g_casino_area[idx] = CreateDynamicSphere
		(
			g_casino_table_pos[idx][0],
			g_casino_table_pos[idx][1],
			g_casino_table_pos[idx][2],
			2.0
		);

		CreateDynamic3DTextLabel
		(
			"- Казино -\n\n{FFFFFF}Для игры используйте:\n{9999ff}/dice",
			0x3399FFFF,
			g_casino_table_pos[idx][0], g_casino_table_pos[idx][1], g_casino_table_pos[idx][2] + 1.5,
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
}

stock CreateArmories()
{
	for(new idx; idx < sizeof g_armory; idx ++)
	{
		CreatePickup
		(
			g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? 1242 : 1239,
			23,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z],
			-1,
			PICKUP_ACTION_TYPE_ARMORY, g_armory[idx][A_TYPE]
		);

		new fmt_text[55];

		format(fmt_text, sizeof fmt_text, "- %s -\n{FFFFFF}%s",
		g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? "Получение бронежилета" : "Оружейный склад",
		g_armory[idx][A_DESCRIPTION]);

		CreateDynamic3DTextLabel
		(
			fmt_text,
			0x3399FFFF,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z] + 1.5,
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
}

stock IsPlayerInRangeOfAnyCasinoTable(playerid)
{
	for(new idx; idx < sizeof g_casino_table_pos; idx ++)
	{
		if(IsPlayerInDynamicArea(playerid, g_casino_area[idx])) return 1;
	}

	return 0;
}

stock LoadPomoi()
{
	for(new idx = 0; idx < 45; idx ++)
	{
		new fmt_text[120];
		format(fmt_text, sizeof fmt_text, "'{358C7C}%s{FFFFFF}'\nПодобрать {FFFFFF}'{FF8C00}ALT{FFFFFF}'",b_betch[idx][BM_NAME]);
		b_betch[idx][BULABEL] = CreateDynamic3DTextLabel
		(
			fmt_text, 0xFFFFFFFF,
			b_betch[idx][B_CLOSED][0],
		    b_betch[idx][B_CLOSED][1],
			b_betch[idx][B_CLOSED][2],
			10.0
		);

    	b_betch[idx][B_OBJ] = CreateDynamicObject
		(
			b_betch[idx][B_MODEL],
			b_betch[idx][B_CLOSED][0], b_betch[idx][B_CLOSED][1], b_betch[idx][B_CLOSED][2], b_betch[idx][B_CLOSED][3],
   			b_betch[idx][B_CLOSED][4], b_betch[idx][B_CLOSED][5]
		);

	}
	return 1;
}

public: ReturnPomoi(id)
{
    b_betch[id][BSTATUS] = 1;
	new fmt_text[160];
	format(fmt_text, sizeof fmt_text, "'{358C7C}%s{FFFFFF}'\nПодобрать {FFFFFF}'{FF8C00}ALT{FFFFFF}'",b_betch[id][BM_NAME]);
	b_betch[id][BULABEL] = CreateDynamic3DTextLabel(fmt_text, 0xFFFFFFFF, 	b_betch[id][B_CLOSED][0], b_betch[id][B_CLOSED][1], b_betch[id][B_CLOSED][2]+1, 5.0);
    b_betch[id][B_OBJ] = CreateDynamicObject
	(
		b_betch[id][B_MODEL],
		b_betch[id][B_CLOSED][0], b_betch[id][B_CLOSED][1], b_betch[id][B_CLOSED][2], b_betch[id][B_CLOSED][3],
		b_betch[id][B_CLOSED][4], b_betch[id][B_CLOSED][5]
	);
	return 1;
}

stock LoadLoad()
{
	for(new idx = 0; idx < 26; idx ++)
	{
		new fmt_text[120];
		format(fmt_text, sizeof fmt_text, "'{358C7C}%s{FFFFFF}'\nПодобрать {FFFFFF}'{FF8C00}ALT{FFFFFF}'",l_lod[idx][LM_NAME]);
		l_lod[idx][LULABEL] = CreateDynamic3DTextLabel
		(
			fmt_text, 0xFFFFFFFF,
			l_lod[idx][L_CLOSED][0],
		    l_lod[idx][L_CLOSED][1],
			l_lod[idx][L_CLOSED][2],
			10.0
		);

    	l_lod[idx][L_OBJ] = CreateDynamicObject
		(
			l_lod[idx][L_MODEL],
			l_lod[idx][L_CLOSED][0], l_lod[idx][L_CLOSED][1], l_lod[idx][L_CLOSED][2], l_lod[idx][L_CLOSED][3],
   			l_lod[idx][L_CLOSED][4], l_lod[idx][L_CLOSED][5]
		);

	}
	return 1;
}

public: ReturnLoad(id)
{
    l_lod[id][LSTATUS] = 1;
	new fmt_text[160];
	format(fmt_text, sizeof fmt_text, "'{358C7C}%s{FFFFFF}'\nПодобрать {FFFFFF}'{FF8C00}ALT{FFFFFF}'",l_lod[id][LM_NAME]);
	l_lod[id][LULABEL] = CreateDynamic3DTextLabel(fmt_text, 0xFFFFFFFF, 	l_lod[id][L_CLOSED][0], l_lod[id][L_CLOSED][1], l_lod[id][L_CLOSED][2]+1, 5.0);
    l_lod[id][L_OBJ] = CreateDynamicObject
	(
		l_lod[id][L_MODEL],
		l_lod[id][L_CLOSED][0], l_lod[id][L_CLOSED][1], l_lod[id][L_CLOSED][2], l_lod[id][L_CLOSED][3],
		l_lod[id][L_CLOSED][4], l_lod[id][L_CLOSED][5]
	);
	return 1;
}

stock ShowPlayerPayForRentDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PAY_FOR_RENT, DIALOG_STYLE_LIST,
		"{66CC00}Оплата",
		"1. Заплатить за дом\n"\
		"2. Оплатить аренду бизнеса\n"\
		"3. Оплатить аренду АЗС",
		"Далее", "Отмена"
	);
	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strmid(g_bank_account[playerid][accountid][BA_NAME], "None", 0, 21, 21);

	SetBankAccountData(playerid, accountid, BA_ID, 0);
	SetBankAccountData(playerid, accountid, BA_PIN_CODE, 0);

	SetBankAccountData(playerid, accountid, BA_BALANCE, 0);
	SetBankAccountData(playerid, accountid, BA_REG_TIME, 0);
}

stock ClearBankAccountsData(playerid)
{
	for(new idx; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
	}
}

stock ShowPlayerBankDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK, DIALOG_STYLE_LIST,
		"{00CC00}Банк",
		"Мои счета\n"\
		"Открыть новый счет",
		"Выбрать", "Отмена"
	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new query[64];
	new Cache: result;
	new rows;
	new bank_accounts_list[(37 * MAX_BANK_ACCOUNTS) + 22 + 1];

	format(query, sizeof query, "SELECT * FROM bank_accounts WHERE uid=%d LIMIT %d", GetPlayerAccountID(playerid), MAX_BANK_ACCOUNTS);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();

	bank_accounts_list = "{99CC00}Основной счет\n";
	for(new idx, count; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);

		if(idx < rows)
		{
			SetBankAccountData(playerid, idx, BA_ID, cache_get_row_int(idx, 0));

			cache_get_row(idx, 2, g_bank_account[playerid][idx][BA_NAME], mysql, 21);
			cache_get_row(idx, 4, g_bank_account[playerid][idx][BA_PIN_CODE], mysql, 9);

			SetBankAccountData(playerid, idx, BA_BALANCE, cache_get_row_int(idx, 3));
			SetBankAccountData(playerid, idx, BA_REG_TIME, cache_get_row_int(idx, 5));

			format(query, sizeof query, "%s - №%d\n", GetBankAccountData(playerid, idx, BA_NAME), GetBankAccountData(playerid, idx, BA_ID));
			strcat(bank_accounts_list, query);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
	}
	cache_delete(result);

	return Dialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST, "{FFCD00}Ваши счета", bank_accounts_list, "Операции", "Назад");
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(GetBankAccountData(playerid, accountid, BA_ID) > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock UpdateBankAccountData(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new query[64];
		new Cache: result;

		format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", GetBankAccountData(playerid, accountid, BA_ID));
		result = mysql_query(mysql, query);

		if(cache_num_rows())
			SetBankAccountData(playerid, accountid, BA_BALANCE, cache_get_row_int(0, 0));

		cache_delete(result);
	}
}

stock ShowPlayerBankAccountOperation(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"{0099FF}Список операций",
		"1. Информация о счете\n"\
		"2. История операций\n"\
		"3. Снять деньги\n"\
		"4. Положить деньги\n"\
		"5. Перевести на другой счет\n"\
		"6. Переименовать счет\n"\
		"7. Изменить PIN-код",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerBankAccountTransfer(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Исходный счет:\t%d\n"\
			"Назначение:\t\t\"%s\", №%d\n\n"\
			"Введите сумму для перевода:",
			GetBankAccountData(playerid, accountid, BA_ID),
			GetPlayerBankTransfer(playerid, BT_NAME),
			GetPlayerBankTransfer(playerid, BT_ID)
		);
		Dialog(playerid, DIALOG_BANK_ACCOUNT_TRANSFER_2, DIALOG_STYLE_INPUT, "{FFCD00}Перевод средств", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock ShowPlayerATMTransfer(playerid)
{
	new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
	if(transfer_id)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Вы выполняете перевод на счет №%d\n"\
			"Укажите сумму:",
			transfer_id
		);
		Dialog(playerid, DIALOG_ATM_TRANSFER_MONEY_2, DIALOG_STYLE_INPUT, "{FFCD00}Безналичный перевод", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case
				'a'..'z', 'A'..'Z', 'а'..'я', 'А'..'Я', '0'..'9': continue;

			default:
				is_bad_name = true;

		}
	}
	while(dest[++pos]);

	return is_bad_name;
}

stock BankAccountLog(playerid, accountid, description[])
{
	new query[180 + 1];

	mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts_log (acc_id,uip,time,description) VALUES (%d,'%e',%d,'%e')", accountid, GetPlayerIpEx(playerid), gettime(), description);
	mysql_query(mysql, query, false);

	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;

	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", accountid);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();

	if(rows)
	{
		new text[900] = "{FFFFFF}";
		new day, month, year;

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", year, month, day);

			cache_get_row(idx, 1, fmt_str);

			format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(text, fmt_str);
		}
		Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}Последние 10 операций", text, "Вернуться", "");
	}
	else Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}История", "{FFFFFF}История операций пуста", "Вернуться", "");

	cache_delete(result);
	return 1;
}

stock RemovePlayerAttachedObjects(playerid)
{
	for(new idx; idx < MAX_PLAYER_ATTACHED_OBJECTS; idx ++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, idx))
		{
			RemovePlayerAttachedObject(playerid, idx);
		}
	}
}

stock RemovePlayerAttachedObjectEx(playerid, ...)
{
	new args = numargs()-1;
	for(new idx; idx < args; idx ++)
		RemovePlayerAttachedObject(playerid, getarg(idx + 1));
}

stock HelpInfoInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof help_info; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, help_info[idx][H_TITLE]);
		strcat(help_info_items, fmt_str);

		format(fmt_str, sizeof fmt_str, "{FFCD00}%d. ", idx + 1);
		strins(help_info[idx][H_TITLE], fmt_str, 0, 64);

		//strins(help_info[idx][H_INFO], "{FFFFFF}", 0, 1024);
	}

	help_info_CP = CreateDynamicCP(411.7095,1549.9658,12.0500, 1.9, _, _, _, 60.0); // арзамас (спавн)
	CreateDynamic3DTextLabel("Раздел для новичков\n{FFFF00}Помощь по игре", 0x3399FFFF, 411.7095,1549.9658,12.0500 + 0.66, 15.0, _, _, _, 0, 0);

	//help_info_CP[1] = CreateDynamicCP(1763.693, -1885.828, 13.555, 2.1, _, _, _, 23.0); // ЖД-вокзал ЛС
	//CreateDynamic3DTextLabel("Раздел для новичков\n{FFFF00}Помощь по игре", 0x3399FFFF, 1763.693, -1885.828, 13.555 + 0.66, 26.0, _, _, _, 0, 0);
}

stock ShowPlayerHelpSection(playerid, sectionid)
{
	new next_buttom[9] = "Далее >>";
	if(sectionid >= sizeof help_info - 1)
	{
		next_buttom[0] = '\0';
	}

	Dialog
	(
		playerid, DIALOG_HELP_SECTION, DIALOG_STYLE_MSGBOX,
		GetHelpInfoData(sectionid, H_TITLE),
		GetHelpInfoData(sectionid, H_INFO),
		"<< Меню", next_buttom
	);
	SetPVarInt(playerid, "help_section", sectionid);
}

stock ServerRadioInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof g_server_radio; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetServerRadioData(idx, SR_CHANNEL_NAME));
		strcat(g_server_radio_items, fmt_str);
	}
}

stock MapIconsInit()
{
	for(new idx; idx < sizeof map_icons; idx ++)
	{
		CreateDynamicMapIcon
		(
			GetMapIconsData(idx, MI_POS_X),
			GetMapIconsData(idx, MI_POS_Y),
			GetMapIconsData(idx, MI_POS_Z),
			GetMapIconsData(idx, MI_TYPE),
			0,
			0,
			0,
			-1,
			MAP_ICON_STREAM_DISTANCE,
			MAPICON_LOCAL
		);
	}
}

stock TeleportPickupsInit()
{
	new Text3D:buffer;
	for(new idx; idx < sizeof g_teleport; idx ++)
	{
		if(strlen(GetTeleportData(idx, T_NAME)) && !GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD))
		{
			buffer = CreateDynamic3DTextLabel
			(
				GetTeleportData(idx, T_NAME),
				0x3399FFEE,
				GetTeleportData(idx, T_PICKUP_POS_X),
				GetTeleportData(idx, T_PICKUP_POS_Y),
				GetTeleportData(idx, T_PICKUP_POS_Z) + 0.8,
				5.0,
				INVALID_PLAYER_ID,
				INVALID_VEHICLE_ID,
				0,
				0,
				0,
				-1,
				STREAMER_3D_TEXT_LABEL_SD
			);
			SetTeleportData(idx, T_LABEL, buffer);
		}
		CreatePickup(1318, 23, GetTeleportData(idx, T_PICKUP_POS_X), GetTeleportData(idx, T_PICKUP_POS_Y), GetTeleportData(idx, T_PICKUP_POS_Z), GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD), PICKUP_ACTION_TYPE_TELEPORT, idx);
	}

	CreatePickup(1318, 23, 5.6028, -23.3124, 1080.9968, -1, PICKUP_ACTION_TYPE_BIZ_CAR_ENT); // авторынок телепорт ко входу
	CreatePickup(1318, 23, 5.9334, -25.4932, 1085.9291, -1, PICKUP_ACTION_TYPE_BIZ_CAR_EXI); // авторынок телепорт к выходу

	print("[TP]: Все входы/выходы созданы");
}

stock DrivingSchoolInit()
{
	new buffer[2];

	driving_exam_CP = CreateDynamicCP(2019.2322,-1995.9023,1001.2400, 1.5, -1, 4, -1, 15.0); // автошкола
	CreateDynamic3DTextLabel("Сдача\nэкзамена", 0x99CC00BB, 2019.2322,-1995.9023,1001.2400, 7.0);

	CreatePickup(2894, 23, 2018.1621,-1989.2711,1001.2400, -1, PICKUP_ACTION_TYPE_DRIVING_TUTO); // автошкола обучающий раздел
	CreateDynamic3DTextLabel("Обучающий\nраздел", 0xCC9900BB, 2018.1621,-1989.2711,1001.2400 + 0.2, 5.0);

	buffer[0] = AddStaticVehicleEx(550,1915.4553,1932.0382,15.2235,90.0,17,17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); // учебный 1
	AddStaticVehicleEx(550,1915.4767,1929.0923,15.2216,90.0,17,17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); 			// учебный 2
	AddStaticVehicleEx(550,1915.0641,1925.9163,15.2233,90.0,17,17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); 			// учебный 3
	AddStaticVehicleEx(550,1915.1366,1922.5725,15.2262,90.0,17,17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); 			// учебный 4
	buffer[1] = AddStaticVehicleEx(550,1915.6567,1919.5016,15.2258,90.0,17,17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); // учебный 5

	for(new idx = buffer[0]; idx <= buffer[1]; idx ++)
		CreateDynamic3DTextLabel("Учебный", 0xFF0000FF, 0.0, 0.0, 1.2, 16.0, INVALID_PLAYER_ID, idx);

	new fmt_str[64];
	for(new idx; idx < sizeof driving_tutorial; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "{CC9900}Раздел %d: ", idx + 1);
		strins(driving_tutorial[idx][DT_TITLE], fmt_str, 0, 64);
	}

	for(new idx; idx < sizeof driving_exam; idx ++)
	{
		strins(driving_exam[idx][DE_TITLE], "{00CC66}", 0, 64);
	}
}

stock GatesInit()
{
	new type;
	new Float: x, Float: y, Float: z;
	new Float: angle, Float: dist = 3.5;

	for(new idx; idx < sizeof g_gate; idx ++)
	{
		type = GetGateData(idx, G_TYPE);

		x = GetGateData(idx, G_POS_X);
		y = GetGateData(idx, G_POS_Y);
		z = GetGateData(idx, G_POS_Z);
		angle = GetGateData(idx, G_ANGLE);

		switch(type)
		{
			case
				GATE_TYPE_BARRIER,
				GATE_TYPE_BARRIER_MSG,
				GATE_TYPE_BARRIER_BUTTON:
			{
				g_gate[idx][G_OBJECT_ID][0] = CreateDynamicObject(966, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 300.0, 200.0);
				g_gate[idx][G_OBJECT_ID][1] = CreateDynamicObject(968, x, y, z + 0.8, 0.0, 0.0, angle, -1, -1, -1, 300.0, 200.0);

				if(type != GATE_TYPE_BARRIER_BUTTON)
				{
					angle += 90.0;

					SetGateData(idx, G_OPEN_POS_X, x + (dist * floatsin(-angle, degrees)));
					SetGateData(idx, G_OPEN_POS_Y, y + (dist * floatcos(-angle, degrees)));
					SetGateData(idx, G_OPEN_POS_Z, z);
				}
				else
				{
					type = g_gate_buttons_count;

					g_gate_button[type][1] = idx;
					g_gate_button[type][0] = CreateButton(GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z), GetGateData(idx, G_OPEN_ANGLE));

					g_gate_buttons_count ++;
				}
				// CreateDynamic3DTextLabel("Шлагбаум", 0xFF6600FF, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z), 10.0);
			}
			case GATE_TYPE_NORMAL:
			{

			}
		}
		SetGateStatus(idx, GetGateData(idx, G_STATUS), -1);
	}
	print("[Gates]: Все шлагбаумы созданы");
}

stock IsGateButtonID(buttonid)
{
	return (g_gate_button[0][0] <= buttonid <= g_gate_button[g_gate_buttons_count - 1][0]);
}

stock GetNearestGate(playerid, Float: dist = 10.0)
{
	if(!(0.0 <= dist <= 20.0))
	{
		dist = 10.0;
	}
	//if(dist == 0.0)
	//	dist = FLOAT_INFINITY;

	new gateid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_gate; idx ++)
	{
		if(GetGateData(idx, G_TYPE) == GATE_TYPE_BARRIER_BUTTON) continue;

		my_dist = GetPlayerDistanceFromPoint(playerid, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			gateid = idx;
		}
	}
	return gateid;
}

stock AtmsInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
	new Float: dist = 0.6; // дистацния пикапа от банкомата

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		x = GetATMInfo(idx, A_POS_X);
		y = GetATMInfo(idx, A_POS_Y);
		z = GetATMInfo(idx, A_POS_Z);
		rot_z = GetATMInfo(idx, A_ROT_Z);

		CreateDynamicObject(2942, x, y, z, 0.0, 0.0, rot_z, 0, 0, -1, STREAMER_OBJECT_SD, 100.0);
		//SetDynamicObjectMaterialText(buffer, 2, "Банкомат\n\n\n\n\n", OBJECT_MATERIAL_SIZE_256x256, "Tahoma", 48, 1, 0xFF000000, 0xFFFF9966, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

		CreateDynamic3DTextLabel("Банкомат\n{FFCC33}Нажмите ~k~~SNEAK_ABOUT~", 0x00CC00FE, x, y, z + 0.7, 3.0); // 0x00CC00EE

		#if defined ATM_CREATED_PICKUP
		rot_z += 180.0;
		CreatePickup(1212, 23, x + dist * -floatsin(rot_z, degrees), y + dist * floatcos(rot_z, degrees), z, -1, PICKUP_ACTION_TYPE_ATM, idx);
		#endif
	}
	print("[ATM]: Все банкоматы созданы");
}

stock GetPlayerNearestATM(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetATMInfo(idx, A_POS_X), GetATMInfo(idx, A_POS_Y), GetATMInfo(idx, A_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock ShowPlayerATMDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
		"{FFCD00}Банкомат",
		"1. Снять с банковского счета\n"\
		"2. Положить на банковский счет\n"\
		"3. Баланс банковского счета\n"\
		"4. Снять со счета предприятия\n"\
		"5. Положить на счет предприятия\n"\
		"6. Пополнить мобильный телефон\n"\
		"7. Безналичный перевод\n"\
		"8. Оплата штрафа\n"\
		"9. Благотворительность",
		"Выбрать", "Выйти"
	);
	return 1;
}

stock ShowPlayerATMSelectSumDialog(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_MONEY : DIALOG_ATM_PUT_MONEY, DIALOG_STYLE_LIST,
		"Выберите сумму",
		"100 руб\n"\
		"200 руб\n"\
		"500 руб\n"\
		"1000 руб\n"\
		"2000 руб\n"\
		"5000 руб\n"\
		"10000 руб\n"\
		"Другая сумма...",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMSelectOtherSum(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_OTHER_MONEY : DIALOG_ATM_PUT_OTHER_MONEY, DIALOG_STYLE_INPUT,
		"{FFCD00}Другая сумма",
		"{FFFFFF}Укажите сумму:",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMCharityDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM_CHARITY, DIALOG_STYLE_INPUT,
		"{FFCD00}Благотворительность",
		"{FFFFFF}Мы предлагаем вам перечислить любую\n"\
		"сумму на благотворительный счет\n"\
		"государства. Все средства пойдут на\n"\
		"развитие нашей страны и поднятие\n"\
		"экономики.\n\n"\
		"Помимо этого, в мэриях время от времени\n"\
		"будут публиковаться списки тех, кто\n"\
		"сделал наибольшие взносы.\n\n"\
		"Этот список можно просмотреть командой\n"\
		"/charity. Там же можно узнать общую\n"\
		"сумму сделанных Вами пожертвований.",
		"Внести", "Закрыть"
	);
	return 1;
}

stock ShowPlayerATMCompanyDialog(playerid, bool: take)
{
	new stationid = GetPlayerFuelStation(playerid);
	new businessid = GetPlayerBusiness(playerid);

	if(stationid != -1 && businessid != -1)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"1. %s (№%d)\n"\
			"2. %s (№%d)",
			GetBusinessData(businessid, B_NAME), businessid,
			GetFuelStationData(stationid, FS_NAME), stationid
		);
		Dialog(playerid, take ? DIALOG_ATM_SELECT_COMPANY_TAKE : DIALOG_ATM_SELECT_COMPANY_PUT, DIALOG_STYLE_LIST, "{FFCD00}Выберите предприятие", fmt_str, "Выбрать", "Назад");
	}
	else if(stationid != -1)
	{
		ShowPlayerATMFuelStationDialog(playerid, take);
	}
	else if(businessid != -1)
	{
		ShowPlayerATMBusinessDialog(playerid, take);
	}
}

stock ShowPlayerATMFuelStationDialog(playerid, bool:take)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_FUEL_ST_TAKE_MONEY : DIALOG_ATM_FUEL_ST_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetFuelStationData(stationid, FS_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock ShowPlayerATMBusinessDialog(playerid, bool:take)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_BIZ_TAKE_MONEY : DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetBusinessData(businessid, B_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock BanksInit()
{
	CreatePickup(1274, 23, 300.5571,304.2417,1001.0000, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 300.5571,304.2417,1001.0000 + 0.8, 8.0);

	CreatePickup(1274, 23, 294.5605,304.2592,1001.0000, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nбизнеса\nАЗС", 0x66CC66FF, 294.5605,304.2592,1001.0000 + 0.8, 8.0);
}

stock TempJobsInit()
{
	new idx;
	for(idx = 0; idx < sizeof g_temp_jobs; idx ++)
	{
		if(idx == 3) continue; // пикап в заводе (создается отдельно от всех)

		CreatePickup(1275, 23, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z), -1, PICKUP_ACTION_TYPE_TEMP_JOB, idx);
	}
	loader_job_area = CreateDynamicRectangle(591.4026, 1781.0015, 482.7329, 1534.9045, 0, 0);


	// шахта
	for(idx = 1; idx < sizeof miner_carriage; idx ++)
	{
		miner_carriage[idx][MC_STATUS] = false;
		miner_carriage[idx][MC_OBJECT_ID] = CreateDynamicObject(1769, miner_carriage[idx][MC_START_POS_X], miner_carriage[idx][MC_START_POS_Y], miner_carriage[idx][MC_START_POS_Z], 0.0, 0.0, 90.0);

		Streamer_SetIntData(STREAMER_TYPE_OBJECT, miner_carriage[idx][MC_OBJECT_ID], E_STREAMER_EXTRA_ID, OBJECT_TYPE_CARRIAGE);

		miner_carriage[idx][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[idx][MC_PICKUP_ID] = CreatePickup(19135, 23, -2375.1228, 296.8900, -15.7689, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
	}
	miner_job_area = CreateDynamicRectangle(2447.1799,1697.9985, 2279.3557,1806.0872, 0, 0);

	for(new i; i < sizeof miner_job_load_pos; i ++)
	{
		CreateDynamic3DTextLabel("Место\nдобычи руды", 0xFFFF00AA, miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 10.0);
		miner_job_load_cp[i] = CreateDynamicCP(miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 1.2, _, _, _, 1.3);
	}

	CreatePickup(19134, 23, -939.2739,1217.1615,10.5244, 0, PICKUP_ACTION_TYPE_MINER_SELL_M);
	CreateDynamic3DTextLabel("Продажа металла\n{00CC00}1500 рублей {FFFFFF}за 1 кг", 0x9966FFBB,  -939.2739,1217.1615,10.5244 + 1.2, 10.0);

	CreateDynamic3DTextLabel("Шахта\n\n{3399CC}1. Выдача инструментов\n2. Получение зарплаты", 0x009933FF, GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_X), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Y), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Z) + 0.82, 5.0);

	// завод
	for(idx = 1; idx < 3; idx ++)
	{
		CreatePickup(1275, 33, 264.4713, -217.2706 + float(idx * 2), 1006.5694, -1, PICKUP_ACTION_TYPE_TEMP_JOB, TEMP_JOB_FACTORY);
	}
	for(idx = 0; idx < sizeof factory_take_metall_pos; idx ++)
	{
		CreatePickup(19135, 23, factory_take_metall_pos[idx][0], factory_take_metall_pos[idx][1], factory_take_metall_pos[idx][2] - 0.4, -1, PICKUP_ACTION_TYPE_FACTORY_MET);
	}

	new Float: x = 311.6580, Float: y = -207.6711, Float: z = 1006.5694;
	for(idx = 0; idx < sizeof factory_desk; idx ++)
	{
		if(idx && !(idx % 4))
			y -= (idx != 8 ? 2.9917 : 3.0085);

		factory_desk[idx][FD_POS_X] = x - (float(idx % 4) * 5.5003);
		factory_desk[idx][FD_POS_Y] = y;
		factory_desk[idx][FD_POS_Z] = z;

		factory_desk[idx][FD_USED] = false;
		factory_desk[idx][FD_OBJECT_ID] = -1;

		factory_desk[idx][FD_CHEK_ID] = CreateDynamicCP(factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z], 0.3, _, _, _, 0.3);
		factory_desk[idx][FD_LABEl] = CreateDynamic3DTextLabel("Рабочее место", 0xFFFFFFEE, factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z] + 1.0, 5.0);

		CallLocalFunction("UpdateFactoryDesk", "i", idx);
	}
	factory_put_zone = CreateDynamicRectangle(264.8033, -199.8648, 296.8693, -202.0421);
	factory_job_area = CreateDynamicRectangle(-981.2298, 2098.1736, -1170.6591, 2263.3167, 0, 0);

 	// Лесопилка
	CreatePickup(19197, 23, 984.9355,1562.1138,12.5103, 0, PICKUP_ACTION_TYPE_LUMBERJACK_P, 0);
	CreatePickup(19197, 23, -848.5493,-2073.9116,36.9400, 0, PICKUP_ACTION_TYPE_LUMBERJACK_P, 1);

	// Ферма
	CreatePickup(19197, 23, 1657.3654,692.2846,16.4430, 0, PICKUP_ACTION_TYPE_FERMER_P); // склад фермы
	//CreatePickup(19197, 23, -438.9230,-1370.2463,41.0988, 0, PICKUP_ACTION_TYPE_FERMER_P); // мельница фермы
}
stock InfoPickupsInit()
{
	new title_color[16];
	for(new idx; idx < sizeof info_pickup; idx ++)
	{
		CreatePickup(1239, 23, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z), -1, PICKUP_ACTION_TYPE_INFO_PICKUP, idx);

		format(title_color, sizeof title_color, "{%06x}", GetInfoPickupData(idx, IP_TITLE_COLOR) >>> 8);
		strins(GetInfoPickupData(idx, IP_TITLE), title_color, 0, 64);

		strins(GetInfoPickupData(idx, IP_INFO), "{FFFFFF}", 0, 1024);
		if(strlen(GetInfoPickupData(idx, IP_LABEL_INFO)) > 3)
			CreateDynamic3DTextLabel(GetInfoPickupData(idx, IP_LABEL_INFO), 0x99CC00DD, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z) + 0.7, 9.5);
	}
}

stock BusRoutesInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof g_bus_routes; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d.  %s\n", idx + 1, g_bus_routes[idx][BR_NAME]);
		strcat(g_bus_routes_list, fmt_str);

		if(g_bus_routes[idx][BR_COLOR] > 0)
		{
			g_bus_routes[idx][BR_COLOR] = 0x66CC00FF;
		}
		else g_bus_routes[idx][BR_COLOR] = 0x3399FFFF;
	}
}

stock AnimListInit()
{
	new fmt_str[64];
	for(new idx; idx < sizeof anim_list; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetAnimListData(idx, AL_DESCRIPTION));
		strcat(anim_list_items, fmt_str);

		if(GetAnimListData(idx, AL_LOOP) > 2)
			anim_list[idx][AL_DESCRIPTION] = 2;
	}
	strcat(anim_list_items, "{33CC00}Информация");
}

stock RepositoriesLoad()
{
	new Cache: result;
	new type, action_id;

	result = mysql_query(mysql, "SELECT * FROM repositories ORDER BY type,action_id ASC");
	new rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		type = cache_get_row_int(idx, 1);
		action_id = cache_get_row_int(idx, 2);

		if(0 <= type <= sizeof g_repository-1)
		{
			if(0 <= action_id <= sizeof g_repository[]-1)
			{
				SetRepositoryData(type, action_id, R_AMOUNT, cache_get_row_int(idx, 3));
			}
		}
	}
	cache_delete(result);

	RepositoriesInit();
}

stock RepositoriesInit()
{
	// шахта



	// ----------------------

	// ----------------------


	// завод

	// нефтезавод

	// воинская часть
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2] + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0)); // металл
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 240.9847,2868.7051,7.4377 + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0)); // патроны

	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);

	SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL, CreateDynamic3DTextLabel("-No Init-", COLOR_WHITE, 1657.3654,692.2846,16.4430, 30.0));
	//SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", COLOR_WHITE, -438.9230,-1370.2463,41.0988, 30.0));
	UpdateRepository(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER);

	// лесопилка

}
stock UpdateRepository(type, actionid)
{
	new fmt_str[128];
	new amount = GetRepositoryData(type, actionid, R_AMOUNT);
	new Text3D: label = GetRepositoryData(type, actionid, R_LABEL);
	new Text3D: label_2 = GetRepositoryData(type, actionid, R_LABEL_2);

	switch(type)
	{
		case REPOSITORY_TYPE_MINER:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_MINER_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Покупка металла\n(для развозчиков)\n\n{FFCD00}На складе %d кг\nКупить: /buym", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Металл\n{0099CC}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_ORE:
				{
					format(fmt_str, sizeof fmt_str, "Руда\n{00CC00}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_REMELTI:
				{
					format(fmt_str, sizeof fmt_str, "Кузница\n{CC9900}%d кг руды\nна переплавке", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FACTORY_METAL..REPOSITORY_ACTION_FACTORY_PROD:
				{
					if(actionid != REPOSITORY_ACTION_FACTORY_PROD)
					{
						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Топливо: %d / 1000000 л\n\n{6699FF}/sellf", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[0], 0xFFFFFFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Металл: %d / 1000000 кг\n\n{6699FF}/sellm", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[1], 0xFFFFFFFF, fmt_str);
					}

					label = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL);
					label_2 = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2);

					format
					(
						fmt_str, sizeof fmt_str,
						"Исходные материалы:\n"\
						"{FF9900}Топливо: %d / 1000000 л\n"\
						"Металл: %d / 1000000 кг\n"\
						"{33CC00}Продукты: %d шт.",
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT)
					);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FERMER:
		{
			format(fmt_str, sizeof fmt_str, "Склад фермы\n{CC9900}%d / 5000", amount);
			UpdateDynamic3DTextLabelText(label, COLOR_WHITE, fmt_str);

			//format(fmt_str, sizeof fmt_str, "Мельница\n{CC9900}%d / 3000", amount);
			//UpdateDynamic3DTextLabelText(label_2, COLOR_WHITE, fmt_str);
		}
		case REPOSITORY_TYPE_OIL_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_OIL_FACTORY_F:
				{
					format(fmt_str, sizeof fmt_str, "Топливо для АЗС\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Топливо для завода\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
			case REPOSITORY_TYPE_ARMY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_ARMY_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Металл на складе:\n{66cc33}%d кг\n\n{9999ff}/takem\n/putm", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case  REPOSITORY_ACTION_ARMY_AMMO:
				{
					format(fmt_str, sizeof fmt_str, "Патроны на складе:\n%d / 200000 шт.", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFCD00FF, fmt_str);
				}
			}
		}
  case REPOSITORY_TYPE_SAWMILL:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_SAWMILL_WOOD:
				{
					format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Дерево: %d / 1000000 ед", GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
	}
}

public: UpdateOilFactory()
{
	new add_fuels = (random(2500) + 500);
	new fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT) + add_fuels;

	new time = (random(fuels <= 20_000 ? 1 : 180) + 60) * 1000;

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, fuels);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetTimer("UpdateOilFactory", time, false);
}

public: UpdateMinerRemelting()
{
	new remelting = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT);
	new ore = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
	new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	new rand;

	// берем с переплавки руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting > 0) // если на переплавке есть руда
	{
		if(rand > remelting) // если взяли больше чем было
			rand = remelting; // берем все что осталось

		remelting -= rand;

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting); // забрали с переплавки
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall + rand); // добавили на склад металл
	}

	// берем со склада руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting < 100) // если на пререплавке меньше 100 кг
	{
		if(rand > ore) // если взяли больше чем на складе
			rand = ore; // берем все что осталось

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, ore - rand); // взяли со склада
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting + rand); // добавили в переплавку
	}

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetTimer("UpdateMinerRemelting", (random(16)+15) * 1000, false);
}

stock SaveRepository(type = -1, actionid = -1)
{
	new fmt_str[228];

	if(type != -1 && actionid != -1)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(type, actionid, R_AMOUNT), type, actionid);
		mysql_query(mysql, fmt_str, false);
	}
	else
	{
		for(new idx, idx_2; idx < sizeof g_repository; idx ++)
		{
			for(idx_2 = 0; idx_2 < sizeof g_repository[]; idx_2 ++)
			{
				if(GetRepositoryData(idx, idx_2, R_NOT_SAVE)) continue;

				format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(idx, idx_2, R_AMOUNT), idx, idx_2);
				mysql_query(mysql, fmt_str, false);
			}
		}
	}
}

stock PreLoadPlayerAnimList(playerid)
{
	if(!GetPlayerData(playerid, P_ANIM_LIST_INIT))
	{
		PreLoadPlayerAnims(playerid);
		SetPlayerData(playerid, P_ANIM_LIST_INIT, true);

		return 1;
	}
	return 0;
}

stock SetPlayerAnimation(playerid, animid)
{
	if(0 <= animid <= sizeof anim_list-1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			switch(animid+1)
			{
				case 1..4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1 + animid);
				}
				default:
				{
					new type = USE_ANIM_TYPE_NONE - 1;
					if(GetAnimListData(animid, AL_LOOP))
					{
						SetPlayerData(playerid, P_USE_ANIM, true);
						TextDrawShowForPlayer(playerid, anim_TD);
					}
					else
					{
						if(IsPlayerUseAnim(playerid))
						{
							SetPlayerData(playerid, P_USE_ANIM, false);
							TextDrawHideForPlayer(playerid, anim_TD);
						}
						type = USE_ANIM_TYPE_NONE;
					}
					ApplyAnimationEx(playerid, GetAnimListData(animid, AL_LIB), GetAnimListData(animid, AL_NAME), GetAnimListData(animid, AL_DELTA), (GetAnimListData(animid, AL_LOOP) % 2), GetAnimListData(animid, AL_LOCK_X), GetAnimListData(animid, AL_LOCK_Y), GetAnimListData(animid, AL_FREEZE), GetAnimListData(animid, AL_TIME), 0, type);
				}
			}
		}
		return 1;
	}
	return 0;
}

stock ClearPlayerUseAnim(playerid)
{
	if(IsPlayerUseAnim(playerid))
	{
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		SetPlayerData(playerid, P_USE_ANIM, false);
		TextDrawHideForPlayer(playerid, anim_TD);

		ClearPlayerAnim(playerid);
	}
}

stock IsValidMail(email[], len = sizeof email)
{
    new count[2];
    if(!(5 <= len <= 60)) return 0;
    for(new i; i != len; i++)
    {
		switch(email[i])
		{
			case '@':
			{
				count[0]++;
				if(count[0] != 1 || i == len - 1 || i == 0) return 0;
			}
			case '.':
			{
				if(count[0] == 1 && count[1] == 0 && i != len - 1)
				{
					count[1] = 1;
				}
			}
			case '0'..'9', 'a'..'z', 'A'..'Z', '_', '-':
			{
				continue;
			}
			default:
				return 0;
		}
    }
    if(count[1] == 0) return 0;
    return 1;
}

stock ShowPlayerRegDialog(playerid, step)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_REGISTER) return 0;

	switch(step)
	{
		case REGISTER_STATE_PASSWORD:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Регистрация",
				"{FFFFFF}Добро пожаловать на сервер "SERVER_NAME" RolePlay\n"\
				"Чтобы начать игру сначала необходимо зарегистрироваться\n\n"\
				"Пожалуйста укажите пароль для Вашего аккаунта\n"\
				"Он будет запрашиваться каждый раз, когда вы заходите на сервер\n\n"\
				"\t{66CC66}Примечания:\n"\
				"\t- Пароль может состоять из русских и латинских символов\n"\
				"\t- Пароль чувствителен к регистру\n"\
				"\t- Длина пароля от 6-ти до 15-ти символов",
				"Далее", ""
			);
		}
		case REGISTER_STATE_EMAIL:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Email",
				"{FFFFFF}Введите адрес Вашей электронной почты\n"\
				"Используя его, вы сможете восстановить доступ к аккаунту\n"\
				"в случае взлома или если забудете пароль.\n\n"\
				"На email мы вышлем ссылку. В течение 14 дней Вы можете\n"\
				"перейти по ней для подтверждения почты.\n\n"\
				"Убедитесь в правильности ввода и нажмите \"Далее\"",
				"Далее", ""
			);
		}
		case REGISTER_STATE_REFER:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Ник пригласившего игрока",
				"{FFFFFF}Если Вы узнали о нашем сервере от своего друга\n"\
				"который тут играет, укажите его ник в поле ниже\n\n"\
				"{66CC66}При достижении вами 4-го уровня он получит вознаграждение",
				"Ввести", "Пропустить"
			);
		}
		case REGISTER_STATE_SEX:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
				"{66CCFF}Пол",
				"{FFFFFF}Выберите пол вашего персонажа",
				"Мужской", "Женский"
			);
		}
		case REGISTER_STATE_RULES:
		{
			ShowServerRules(playerid, true);
		}
		case REGISTER_STATE_CREATE_ACC:
		{
			if(CreatePlayerAccount(playerid))
			{
				SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);

				SetSpawnInfo(playerid, 0, 0, 1992.8246,1898.4010,1001.0000,358.8916, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);

				SendClientMessage(playerid, 0xFFFFFFFF, " ");
				SendClientMessage(playerid, 0xFFFFFFFF, "Регистрация завершена!");
				SendClientMessage(playerid, 0x66CC00FF, "Теперь выберите внешность Вашего персонажа");
				SendClientMessage(playerid, 0xCECECEFF, "Подсказка: Используйте {FF6600}курсор мышки {CECECE}для выбора внешности");
			}
			else
			{
				SendClientMessage(playerid, 0xFF6600FF, "Ошибка создания аккаунта, перезайдите и повторите попытку");
				Kick:(playerid);
			}
		}
		default:
			return 1;
	}

	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);
	return 1;
}

stock ShowServerRules(playerid, bool: reg = false)
{
	Dialog
	(
		playerid, reg ? DIALOG_REGISTER : DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX,
		"{66CCFF}Правила сервера",
		"{FFCD00}1. Основное\n"\
		"{FFFFFF}- Запрещено использовать любые читы, трейнеры, моды или CLEO скрипты\n"\
		"- Запрещен DeathMatch (DM) - убийство и нанесение вреда игрокам без причины\n"\
		"- Запрещено убивать игроков на спавне (на месте, где они появляются в игре)\n"\
		"- Запрещены убийства путем наезда на него или стрельбы из авто\n"\
		"- Запрещено уходить на паузу в целях спасения от нападающих\n"\
		"- Запрещено использование возможностей сервера для создания неудобств другим игрокам\n\n"\
		"{FFCD00}2. Процесс общения\n"\
		"{FFFFFF}- Запрещен мат, оскорбление других игроков\n"\
		"- Запрещены угрозы другим игрокам (не относящиеся к игровому процессу)\n"\
		"- Запрещено писать транслитом (например \"vsem privet ya priwel\")\n"\
		"- Запрещена любая реклама сторонних ресурсов\n"\
		"- Запрещено флудить (часто повторять одинаковые фразы, или фразы без смысловой нагрузки)\n\n"\
		"{FFCD00}3. Администрация\n"\
		"{FFFFFF}- Необходимо сообщать администрации сервера о любых случаях нарушения данных правил\n"\
		"- Администрация самостоятельно выбирает штрафные санкции для каждого конкретного случая\n"\
		"- Санкции могут применяться сразу после нарушения или через время (например, впоследствии поступления жалобы)\n"\
		"- Если штрафная санкция была применена к вам ошибочно, свяжитесь с администрацией",
		"Принять", "Отмена"
	);
}

stock GetPlayerHouseName(playerid)
{
	new name[32];
	new houseid = GetPlayerHouse(playerid);

	if(houseid != -1)
	{
		switch(GetPlayerData(playerid, P_HOUSE_TYPE))
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					format(name, sizeof name, "Подъезд %d (№%d на %d этаже)", GetHouseData(houseid, H_ENTRACE) + 1, GetHouseData(houseid, H_FLAT_ID) + 1, GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				}
				else format(name, sizeof name, "%s (№%d)", GetHouseData(houseid, H_NAME), houseid);
			}
			case HOUSE_TYPE_ROOM:
			{
				format(name, sizeof name, "В гостях (дом №%d)", houseid);
			}
			case HOUSE_TYPE_HOTEL:
			{
				format(name, sizeof name, "Гостиница (№%d на %d этаже)", (GetPlayerData(playerid, P_HOUSE_ROOM) % 12) + 1, (GetPlayerData(playerid, P_HOUSE_ROOM) / 12) + 1);
			}
		}
	}
	else name = "Бездомный";

	return name;
}

stock GetPlayerBizName(playerid)
{
	new name[32];
	new businessid = GetPlayerBusiness(playerid);

	if(businessid != -1)
	{
		format(name, sizeof name, "%s (№%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Нет";

	return name;
}

stock GetPlayerBizNames(playerid)
{
	new name[32];
	new businessid = GetBusiness_2(playerid);

	if(businessid != -1)
	{
		format(name, sizeof name, "%s (№%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Отсутствует";

	return name;
}

stock ShowPlayerCellSalon(playerid, cell)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		new price;
		new take_prods;

		switch(cell)
		{
			case CELL_SALON_BUY_PHONE:
			{
				price = 25000;
				take_prods = 2;

				if(!GetPlayerPhone(playerid))
				{
					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);

							GivePlayerMoneyEx(playerid, -price, "Покупка телефона", false, true);
							SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

							SendClientMessage(playerid, 0x66CC00FF, "Используйте {0099FF}/c(/call) или /call [номер телефона] {66CC00}чтобы сделать звонок.");
							SendClientMessage(playerid, 0x66CC00FF, "Для отправки SMS сообщения используйте {0099FF}/sms{66CC00}. Другие команды: {0099FF}/menu > Список команд > Общение");

							if(GetPlayerData(playerid, P_QUEST_1) != 1)
							{
								GivePlayerMoneyEx(playerid, 300000, "Квест телефон");
								AddPlayerData(playerid, P_EXP, +, 1);
								SetPlayerData(playerid, P_QUEST_1, 1);
								SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первый телефон'. За это вы получаете 300.000 рублей и 1 EXP");
								UpdatePlayerDatabaseInt(playerid, "quest1", 1);
								if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
								{
									SetPlayerData(playerid, P_EXP, 0);
									AddPlayerData(playerid, P_LEVEL, +, 1);
									SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
									SetPlayerLevelInit(playerid);
									UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
								}
								UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
							}

							format
							(
								query, sizeof query,
								"{FFFFFF}Поздравляем!\n"\
								"Вы купили мобильный телефон. Ваш номер: {0099FF}%d",
								GetPlayerPhone(playerid)
							);
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка мобильного телефона", query, "Закрыть", "");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Мобильный телефон стоит 25000 рублей");
				}
				else
				{
					SendClientMessage(playerid, 0x999999FF, "У Вас уже есть мобильный телефон");
					if(GetPlayerData(playerid, P_QUEST_1) != 1)
					{
						GivePlayerMoneyEx(playerid, 300000, "Квест телефон");
						AddPlayerData(playerid, P_EXP, +, 1);
						SetPlayerData(playerid, P_QUEST_1, 1);
						SendClientMessage(playerid, -1, "Поздравляем Вас! Вы выполнили квест 'Первый телефон'. За это вы получаете 300.000 рублей и 1 EXP");
						UpdatePlayerDatabaseInt(playerid, "quest1", 1);
						if(GetPlayerExp(playerid) >= GetExpToNextLevel(playerid))
						{
							SetPlayerData(playerid, P_EXP, 0);
							AddPlayerData(playerid, P_LEVEL, +, 1);
							SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
							SetPlayerLevelInit(playerid);
							UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
						}
						UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
					}
				}
			}
			case CELL_SALON_BUY_SIM:
			{
				price = 10000;
				if(GetPlayerPhone(playerid))
				{
					if(GetPlayerMoneyEx(playerid) >= price)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
							"{66CC00}Изменение номера",
							"{FFFFFF}Введите новый номер в поле ниже\n\n"\
							"{FF6633}Примечания:\n"\
							"{FFCD00}- Номер должен быть шестизначным,\n"\
							"например: 777777\n"\
							"- Номер не должен начинаться с 0\n\n"\
							"{FFFFFF}Вы также можете вернуть свой\n"\
							"стандартный номер. Для этого\n"\
							"введите в поле {3399FF}цифру 0",
							"Сменить", "Отмена"
						);

						return 1;
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Для изменение номера телефона необходимо 10000 рублей");
				}
				else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

				callcmd::buy(playerid, "");
			}
			case CELL_SALON_BUY_COLOR:
			{
				price = 10000;
				if(GetPlayerPhone(playerid))
				{
					if(GetPlayerMoneyEx(playerid) >= price)
					{
						Dialog
						(
							playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
							"{66CC00}Изменение цвета телефона",
							"1. Карамельный\n"\
							"2. Синий\n"\
							"3. Оранжевый\n"\
							"4. Серебристый\n"\
							"5. Розовый\n"\
							"6. Красный\n"\
							"7. Зеленый\n"\
							"8. Темно-синий\n"\
							"9. Желтый\n"\
							"10. Белый",
							"Поменять", "Отмена"
						);

						return 1;
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 2500 рублей");
				}
				else SendClientMessage(playerid, 0x999999FF, "Сначала нужно приобрести мобильный телефон");

				callcmd::buy(playerid, "");
			}
			case CELL_SALON_BUY_BALANCE:
			{
				if(GetPlayerPhone(playerid) != 0)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
						"{FFCD00}Пополнение мобильного телефона",
						"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
						"Готово", "Назад"
					);

					return 1;
				}
				else SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

				callcmd::buy(playerid, "");
			}
			case CELL_SALON_BUY_MCBOOK:
			{
				price = 100000;
				take_prods = 5;

				if(!GetPlayerMcBook(playerid))
				{
					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.mcbook=1,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d,mcbook=1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);

							GivePlayerMoneyEx(playerid, -price, "Покупка ноутбука", false, true);
							SetPlayerData(playerid, P_MCBOOK, GetPlayerAccountID(playerid) + 1000000);

							SendClientMessage(playerid, 0x66CC00FF, "Используйте {0099FF}/mcbook{66CC00} чтобы включить ноутбук");

							format(query, sizeof query, "{FFFFFF}Поздравялем с успешной покупкой ноутбука!");
							Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Покупка ноутбука", query, "Закрыть", "");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ноутбук стоит 100000 рублей");
				}
				else
				{
					SendClientMessage(playerid, 0x999999FF, "У Вас уже есть ноутбук");
				}
			}
			default:
				return 1;
		}
	}
	return 1;
}

stock ShowPlayerShop(playerid, shop)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
		{
			new price;
			new take_prods;

			switch(shop)
			{
				case SHOP_MED:
				{
					price = 15000;
					take_prods = 2;

					if(GetPlayerData(playerid, P_MED_CHEST) < 2)
					{
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							new query[175];

							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessData(businessid, B_PRODS, -, take_prods);
									AddBusinessData(businessid, B_BALANCE, +, price);
								}

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
								mysql_query(mysql, query, false);

								GivePlayerMoneyEx(playerid, -price, "Покупка аптечки", false, true);

								AddPlayerData(playerid, P_MED_CHEST, +, 2);
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили набор аптечек. Используйте {3399FF}/healme {66CC00}для их использования");

								format(query, sizeof query, "Текущее количество аптечек: %d", GetPlayerData(playerid, P_MED_CHEST));
								SendClientMessage(playerid, 0xDD90FFFF, query);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Набор аптечек стоит 15000 рублей");
					}
					else SendClientMessage(playerid, 0x999999FF, "Вы не можете купить больше аптечек");
				}
				case SHOP_PHOTO:
				{
					price = 6000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];
						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);

							GivePlayerMoneyEx(playerid, -price, "Покупка фотоаппарата", false, true);

							GivePlayerWeapon(playerid, 43, 15);
							SendClientMessage(playerid, 0x66CC00FF, "Вы купили фотоаппарат на 15 снимков");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 29)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Набор фотографа стоит 6000 рублей");
				}
				case SHOP_BUKET:
				{
					price = 6500;
					take_prods = 1;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];
						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);

							GivePlayerMoneyEx(playerid, -price, "Покупка букета цветов", false, true);
							GivePlayerWeapon(playerid, WEAPON_FLOWER, 1);

							SendClientMessage(playerid, 0x66CC00FF, "Вы купили букет цветов");
							SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/present {66CC00}чтобы подарить их кому нибудь");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 30)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Букет стоит 6500 рублей");
				}
				case SHOP_TAPOR:
				{
					price = 1800;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];
						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);

							GivePlayerMoneyEx(playerid, -price, "Покупка трости", false, true);
							GivePlayerWeapon(playerid, WEAPON_CANE, 1);

							SendClientMessage(playerid, 0x66CC00FF, "Вы купили трость");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Трость стоит 18000 рублей");
				}
				case SHOP_PARASH:
				{
					price = 24000;
					take_prods = 5;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];
						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);

							GivePlayerMoneyEx(playerid, -price, "Покупка парашюта", false, true);
							GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);

							SendClientMessage(playerid, 0x66CC00FF, "Вы купили парашют");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Парашют стоит 24000 рублей");
				}
				case SHOP_LATTER:
				{
									price = 15000;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка лотерейного билета", false, true);
											SetPlayerData(playerid, P_LOTTERY, random(900) + 100);

											CallLocalFunction("ShowPlayerLotteryDialog", "i", playerid);
											SendClientMessage(playerid, 0x66CC00FF, "Вы купили лотерейный билет");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 32)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Лотерейный билет стоит 15000 рублей");
				}
				case SHOP_REPAIR:
				{
					price = 50000;
					take_prods = 2;

					if(GetPlayerData(playerid, P_REPAIR) < 3)
					{
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							new query[175];

							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessData(businessid, B_PRODS, -, take_prods);
									AddBusinessData(businessid, B_BALANCE, +, price);
								}

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
								mysql_query(mysql, query, false);

								GivePlayerMoneyEx(playerid, -price, "Покупка рем.комплекта", false, true);

								AddPlayerData(playerid, P_REPAIR, +, 1);
								UpdatePlayerDatabaseInt(playerid, "repair", GetPlayerData(playerid, P_REPAIR));
								SendClientMessage(playerid, 0x66CC00FF, "Вы купили набор рем.комплектов. Используйте {3399FF}/repaircar {66CC00}для их использования");

								format(query, sizeof query, "Текущее количество рем.комплектов: %d", GetPlayerData(playerid, P_REPAIR));
								SendClientMessage(playerid, 0xDD90FFFF, query);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Рем.комплект стоит 50000 рублей");
					}
					else SendClientMessage(playerid, 0x999999FF, "Вы не можете купить больше рем.комплектов");
				}
				case SHOP_MASK:
				{
					price = 7100;
					take_prods = 1;

					if(!GetPlayerData(playerid, P_MASK))
					{
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							new query[175];
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessData(businessid, B_PRODS, -, take_prods);
									AddBusinessData(businessid, B_BALANCE, +, price);
								}

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
								mysql_query(mysql, query, false);

								GivePlayerMoneyEx(playerid, -price, "Покупка маски", false, true);
								SetPlayerData(playerid, P_MASK, 1);

								SendClientMessage(playerid, 0x66CC00FF, "Вы купили маску");
								SendClientMessage(playerid, 0x66CC00FF, "Используйте {FFCD00}/mask {66CC00}для скрытия Вашего расположения на карте (на 10 минут)");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 33)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Маска стоит 7100 рублей");
					}
					else SendClientMessage(playerid, 0x999999FF, "Вы уже приобрели маску");
				}
				case SHOP_BOOMBOX:
				{
					price = 5000;
					take_prods = 3;

					if(!GetPlayerBoombox(playerid))
					{
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							new query[175];
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessData(businessid, B_PRODS, -, take_prods);
									AddBusinessData(businessid, B_BALANCE, +, price);
								}

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
								mysql_query(mysql, query, false);

								GivePlayerMoneyEx(playerid, -price, "Покупка бумбокса", false, true);
								//SetPlayerData(playerid, P_MASK, 1);
								mysql_format(mysql, query, sizeof query, "UPDATE accounts SET boombox=1 WHERE id=%d", GetPlayerAccountID(playerid));
								mysql_query(mysql, query, false);

								SendClientMessage(playerid, COLOR_GOLD, "Вы купили бумбокс");
								SendClientMessage(playerid, COLOR_WHITE, "Используйте {2f89f7}/boombox {"#cW"}для управления");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {"#cGold"}(equ-code 33)");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Бумбокс стоит 5000 рублей");
					}
					else SendClientMessage(playerid, 0xFF6600FF, "У Вас уже есть бумбокс");
				}
				case SHOP_VEREV:
				{
					price = 1500;
					take_prods = 3;

					if(GetPlayerVerevka(playerid) > 2)
					{
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							new query[175];
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
							}
							else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								if(GetBusinessData(businessid, B_PRODS) >= take_prods)
								{
									AddBusinessData(businessid, B_PRODS, -, take_prods);
									AddBusinessData(businessid, B_BALANCE, +, price);
								}

								mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
								mysql_query(mysql, query, false);

								GivePlayerMoneyEx(playerid, -price, "Покупка верёвки", false, true);
								AddPlayerData(playerid, P_VEREV, +, 1);
								mysql_format(mysql, query, sizeof query, "UPDATE accounts SET verevka=%d WHERE id=%d", GetPlayerData(playerid, P_VEREV), GetPlayerAccountID(playerid));
								mysql_query(mysql, query, false);

								SendClientMessage(playerid, COLOR_GOLD, "Вы купили верёвку");
								SendClientMessage(playerid, COLOR_WHITE, "Используйте {2f89f7}/tie чтобы связать человека");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {"#cGold"}(equ-code 33)");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Верёвка стоит 1500 рублей");
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Нельзя носить с собой больше 3-х верёвок");
				}
				default:
					return 1;
			}
		}
	}
	return 1;
}

stock ShowPlayerCafe(playerid, cafe)
{
	new businessid = GetPVarInt(playerid, "pickup_biz");
	if(businessid != -1)
	{
		new price;
		new take_prods;

		switch(cafe)
		{
			case CAFE_CESAR:
			{
					price = 10000;
					take_prods = 2;
					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];
						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 40);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка цезаря", false, true);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Цезарь стоит 1000");
			}
			case CAFE_BORSH:
			{
					price = 13000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);


							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 50);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка борщя", false, true);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Борщ стоит 1000");
			}
			case CAFE_FILA:
			{
					price = 9000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							//GivePlayerMoneyEx(playerid, -price, "Покупка филадельфии", false, true);
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 40);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка филадельфии", false, true);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Филадельфия стоит 1000");
			}
			case CAFE_KOTLETA:
			{
					price = 9000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 40);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка котлеты", false, true);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Котлетки с пюрешкой стоит 1000");
			}
			case CAFE_SHAURMA:
			{
					price = 8000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 35);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка шаурмы", false, true);

						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Шаурма стоит 1000");
			}
			case CAFE_MINERAL:
			{
					price = 3000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 25);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка воды", false, true);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Минеральная вода стоит 1000");
			}
			case CAFE_COLA:
			{
					price = 4000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 30);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка колы", false, true);

						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Кола стоит 1000");
			}
			case CAFE_SOK:
			{
					price = 3000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 25);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка сока", false, true);

						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Сок стоит 1000");
			}
			case CAFE_SPRITE:
			{
					price = 3000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 25);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка спрайта", false, true);

						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Спрайт стоит 1000");
			}
			case CAFE_KVAS:
			{
					price = 3000;
					take_prods = 2;

					if(GetPlayerMoneyEx(playerid) >= price)
					{
						new query[175];

						if(GetBusinessData(businessid, B_PRODS) >= take_prods)
						{
							format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
						}
						else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							if(GetBusinessData(businessid, B_PRODS) >= take_prods)
							{
								AddBusinessData(businessid, B_PRODS, -, take_prods);
								AddBusinessData(businessid, B_BALANCE, +, price);
							}

							mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
							mysql_query(mysql, query, false);
							
							new Float:health = GetPlayerHealthEx(playerid);
					       	if(GetPlayerHealthEx(playerid) >= 100) return SCM(playerid, -1, "Вы не голодны");
							if(health > 100)
							{
								SetPlayerData(playerid, P_HEALTH, 100);
								SetPlayerHealthEx(playerid, 100, true);
							}
							AddPlayerData(playerid, P_HEALTH, +, 25);
							SetPlayerHealthEx(playerid, GetPlayerData(playerid, P_HEALTH));
							GivePlayerMoneyEx(playerid, -price, "Покупка кваса", false, true);

						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Баба Зина: Квас стоит 1000");
			}
			default:
				return 1;
		}
	}
	return 1;
}

stock Float:GetPlayerPacketLoss(playerid)
{
    new stats[401], stringstats[70];
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
    new len = strfind(stats, "Packetloss: ");
    new Float:packetloss = 0.0;
    if(len != -1)
    {
        strmid(stringstats, stats, len, strlen(stats));
        new len2 = strfind(stringstats, "%");
        if(len != -1)
        {
            strdel(stats, 0, strlen(stats));
            strmid(stats, stringstats, len2-3, len2);
            packetloss = floatstr(stats);
        }
    }
    return packetloss;
}

stock GetPlayerJobAndRankName(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];

	if(TEAM_GOVERNMENT <= team <= TEAM_OPG_LYTKARINSKAYA)
	{
		if(!(1 <= rang <= 10))
			rang = 1;

		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}
	else
	{
	    format(fmt_rank, sizeof fmt_rank, GetPlayerJobName(playerid));
	}

	return fmt_rank;
}

stock GetPlayerTeamName(playerid)
{
	new team_name_id = GetPlayerTeamEx(playerid);
	switch(team_name_id)
	{
		case TEAM_GOVERNMENT..TEAM_RADIO:
			return team_names[team_name_id];

		case TEAM_DPS..TEAM_PJ:
			return team_names[5];

		case TEAM_OPG_ARZAMASKAYA..TEAM_OPG_LYTKARINSKAYA:
			return team_names[team_name_id - 2];

		default:
			return team_names[0];
	}
	return team_names[0];
}

stock IsTeamSubdivision(team)
{
	if(TEAM_DPS <= team <= TEAM_PJ)
	{
		return true;
	}
	return false;
}

stock GetPlayerSubdivisionName(playerid)
{
	new player_team = GetPlayerTeamEx(playerid);

	if(IsTeamSubdivision(player_team))
		return team_subdivision_name[player_team - 4];

	return team_subdivision_name[0];
}

stock GetPlayerTeamStats(playerid)
{
	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Организация:\t\t\t%s\n", GetPlayerTeamName(playerid));

	if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
	{
	    format(fmt_text, sizeof fmt_text, "%sПодразделение:\t\t%s\n", fmt_text, GetPlayerSubdivisionName(playerid));
	}

	return fmt_text;
}

stock GetPlayerGameStatus(playerid)
{
	new status[16];

	switch(GetPlayerLevel(playerid))
	{
	    case 0: status = "Ошибка";
	    case 1: status = "Без статуса";
	    case 2..5: status = "Новичок";
	    case 6..9: status = "Развивающийся";
	    case 10..14: status = "Освоившийся";
	    case 15..19: status = "Опытный игрок";
	    case 20..29: status = "Активный игрок";
	    default: status = "Легендарный";
	}

	if(GetPlayerTeamEx(playerid) && (GetPlayerJob(playerid) == 10)) status = "Лидер";
	if(GetPlayerAdminEx(playerid) != 0) status = "Администратор";

	return status;
}

stock ShowPlayerStats(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new fmt_str[800],
	    rank_value[3] = "—";

    if(1 <= GetPlayerTeamEx(playerid) <= 10)
	{
		if(1 <= GetPlayerJob(playerid) <= 10)
			valstr(rank_value, GetPlayerJob(playerid));
		else
			rank_value = "1";
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Имя:\t\t\t\t{0099FF}%s\n"\
		"{FFFFFF}Уровень:\t\t\t%d\n"\
		"Очки опыта:\t\t\t%d из %d\n"\
		"Номер телефона:\t\t%d\n"\
		"На счету телефона:\t\t%d руб\n"\
		"Ваше RP:\t\t\t%d\n"\
		"Денег на руках:\t\t%d\n"\
		"Можно купить акций:\t\t%d\n"\
		"Законопослушность:\t\t%d\n"\
		"Уровень розыска:\t\t%d\n"\
		"Уровень улучшений:\t\t%d\n"\
		"Сила:\t\t\t\t%d\n"\
		"Наркотики:\t\t\t%d\n"\
		"Патроны:\t\t\t%d\n"\
		"Металл:\t\t\t%d\n"\
		"Пол:\t\t\t\t%s\n"\
		"%s:\t\t\t%s\n\n"\
		"%s"\
		"Работа / должность:\t\t%s\n"\
		"Ранг:\t\t\t\t%s\n\n"\
		"Проживание:\t\t\t%s\n"\
		"Бизнес:\t\t\t%s\n"\
		"Игровой статус:\t\t%s",
		GetPlayerNameEx(playerid),
		GetPlayerLevel(playerid),
		GetPlayerExp(playerid),
		GetExpToNextLevel(playerid),
		GetPlayerPhone(playerid),
		GetPlayerData(playerid, P_PHONE_BALANCE),
        RPPoint[playerid],
		GetPlayerData(playerid, P_MONEY),
		GetPlayerData(playerid, P_SLOT_AC),
		GetPlayerData(playerid, P_LAW_ABIDING),
		GetPlayerSuspect(playerid),
		GetPlayerData(playerid, P_IMPROVEMENTS),
		GetPlayerData(playerid, P_POWER),
		GetPlayerData(playerid, P_DRUGS),
		GetPlayerData(playerid, P_AMMO),
		GetPlayerData(playerid, P_METALL),
		GetPlayerSexName(playerid),
		GetPlayerSex(playerid) ? ("Замужем за") : ("Женат на"),
		GetPlayerData(playerid, P_WIFE_NAME),
		GetPlayerTeamStats(playerid), 		// P_TEAM | P_SUBDIVISON
		GetPlayerJobAndRankName(playerid),
		rank_value, 			// P_JOB
		GetPlayerHouseName(playerid),
		GetPlayerBizName(playerid),
		GetPlayerGameStatus(playerid)
	);
	return Dialog(to_player, DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX, "{CC9900}Статистика игрока", fmt_str, "Назад", "Закрыть");
}

stock ShowPlayerCMDSDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_LIST,
		"Список команд",
		"1. Общие команды\n"\
		"2. Общение\n"\
		"3. Дома и транспорт\n"\
		"4. Бизнес и АЗС\n"\
		"5. Работы\n"\
		"6. Нелегальные структуры\n"\
		"7. Правительство\n"\
		"8. ППС и ДПС\n"\
		"9. Мин. Обороны\n"\
		"10. Больница\n"\
		"11. Радио Арзамас\n"\
		"12. Лидерам\n"\
		"13. Семья\n"\
		"14. Мультиплеер",
		"Выбрать", "Назад"
	);
	return 1;
}
stock ShowPlayerSettings(playerid)
{
	static const
		chat_type_name[3][35] = {"{FF3333}Отключен", "{00CC00}Стандарт", "{0099FF}"SERVER_NAME" RolePlay"};

	new s_info[256];
	format
	(
		s_info, sizeof s_info,
		"Основной чат\t\t%s\n"\
		"Чат организации\t%s\n"\
		"Ники над игроками\t%s\n"\
		"Ники в чате\t\t%s\n"\
		"ID игроков в чате\t%s\n"\
		"Управл. транспортом\t%s\n"\
		"{888888}[Сохранить настройки]",
		chat_type_name[GetPlayerSettingData(playerid, S_CHAT_TYPE)],
		GetPlayerSettingData(playerid, S_TEAM_CHAT) 	? ("{00CC00}Включен")  : ("{FF3333}Отключен"),
		GetPlayerSettingData(playerid, S_PLAYERS_NICK) 	? ("{00CC00}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_NICK_IN_CHAT) 	? ("{00CC00}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_ID_IN_CHAT) 	? ("{00CC00}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_VEH_CONTROL) 	? ("{00CC00}Клавиши и команды") : ("{FF9900}Только команды")
	);
	return Dialog(playerid, DIALOG_PLAYER_SETTINGS, DIALOG_STYLE_LIST, "{FFCD00}Личные настройки", s_info, "Вкл|Выкл", "Назад");
}

stock ShowPlayerSecuritySettings(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_SECURITY_SETTINGS, DIALOG_STYLE_LIST,
		"{FFCD00}Настройки безопасности",
		"1. Информация о настройках\n"\
		"2. Мобильный телефон\n"\
		"3. 'Случайный' PIN-код\n"\
		"{00CC66}4. Изменить пароль\n"\
		"5. Изменить 'случайный' PIN-код\n"\
		"{0099FF}6. Статус безопасности\n"\
		"{999999}7. Подтвердить Email",
		"Выбрать", "Назад"
	);
}

stock ShowPlayerReportDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_REPORT, DIALOG_STYLE_INPUT,
		"{FFCD00}Связь с администрацией",
		"{FFFFFF}Введите свое сообщение для администрации сервера\n"\
		"Оно должно быть кратким и ясным\n\n"\
		"{66CC66}Если вы хотите подать жалобу на игрока,\n"\
		"обязательно укажите его ID и причину жалобы",
		"Отправить", "Назад"
	);
}

stock ShowPlayerChangeNameDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_CHANGE_NAME, DIALOG_STYLE_INPUT,
		"{FFCD00}Изменение имени",
		"{FFFFFF}Вы можете изменить имя своего персонажа, если оно не соответствует RP правилам\n"\
		"Во всех остальных случаях смена имени осуществляется в {6699FF}/menu > Дополнительно.\n\n"\
		"{FFFFFF}RP ник имеет формат Имя_Фамилия.\n"\
		"Например: Polina_Marmeladova, Nikolas_Ryan, Kate_Valente и т. п.\n\n"\
		"Введите новое имя в поле ниже. Допустимы только латинские символы:",
		"Изменить", "Закрыть"
	);
}

stock ShowPlayerImprovementsDialog(playerid)
{
	new fmt_str[67 + 1];
	new dest[((sizeof(fmt_str)-1) * (sizeof(g_player_improvements))) + 10 + 1];

	new str_numeric[14 + 1];
	new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);

	for(new idx = 0; idx < sizeof g_player_improvements; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\t\t", idx + 1, GetPlayerImprovementInfo(idx, I_NAME));
		if(idx == 2)
			strcat(fmt_str, "\t");

		if(my_i_level > idx)
		{
			strins(fmt_str, "{FFCD00}", 0);
			strcat(fmt_str, "Активно\n");
			strcat(dest, fmt_str);

			continue;
		}
		else if(my_i_level < idx)
		{
			strins(fmt_str, "{FF3333}", 0);
		}
		else
		{
			strcat(fmt_str, "{00CC00}");
		}
		strcat(dest, fmt_str);
		valfmt(str_numeric, GetPlayerImprovementInfo(idx, I_PRICE));

		format(fmt_str, sizeof fmt_str, "требуется %d уровень и %s руб\n", GetPlayerImprovementInfo(idx, I_LEVEL), str_numeric);
		strcat(dest, fmt_str);
	}
	strcat(dest, "Информация");

	return Dialog(playerid, DIALOG_PLAYER_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFCD00}Улучшения", dest, "Выбрать", "Назад");
}

stock SendMessageToPrem(message[], color)
{

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerPremium(playerid) > 0) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToAdmins(message[], color, a_level = 1)
{
	if(a_level < 1)
		a_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerAdminEx(playerid) < a_level) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToYAdmins(message[], color, y_level = 1)
{
	if(y_level < 1)
		y_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerYAdminEx(playerid) < y_level) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToTeam(team, message[], color = -1, playerid = -1)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerSettingData(i, S_TEAM_CHAT) == 0) continue;
		else if(GetPlayerTeamEx(i) != team) continue;
		else if(i == playerid) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock SendMessageToPoliceTeam(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_DPS, message, color, playerid);
	SendMessageToTeam(TEAM_PPS, message, color, playerid);
	SendMessageToTeam(TEAM_PJ, message, color, playerid);

	return 1;
}

stock SendMessageToGang(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_OPG_ARZAMASKAYA, message, color, playerid);
	SendMessageToTeam(TEAM_OPG_BATYREVSKAYA, message, color, playerid);
	SendMessageToTeam(TEAM_OPG_LYTKARINSKAYA, message, color, playerid);

	return 1;
}

stock SendMessageToJob(to_job, message[], color = -1, playerid = -1, bool: org_chat = false)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerJob(playerid) != to_job) continue;
		else if(org_chat && !GetPlayerSettingData(playerid, S_TEAM_CHAT)) continue;
		else if(playerid == i) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock HidePlayerDialog(playerid)
{
	return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "NULL", "NULL", "NULL", "NULL");
}

stock Shuffle(array[], size = sizeof array)
{
	new
		index,
		rand,
		buffer;

	for(index = 0; index < size; index ++)
	{
		rand = random(size);
		buffer = array[index];

		array[index] = array[rand];
		array[rand] = buffer;
	}
}

stock ShowPlayerPinCodePTD(playerid, s_state)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE) return ;
	pin_code_input[playerid][0] = 0;

	switch(s_state)
	{
		case PIN_CODE_STATE_SET:
			SendClientMessage(playerid, 0x3399FFFF, "Придумайте свой PIN-код и наберите его");

		case PIN_CODE_STATE_CHECK:
			SendClientMessage(playerid, 0xFFFF00FF, "Наберите Ваш текущий PIN-код");

		case PIN_CODE_STATE_CHANGE:
			SendClientMessage(playerid, 0xFFFF00FF, "Наберите новый PIN-код");

		case PIN_CODE_STATE_LOGIN_CHECK:
			SendClientMessage(playerid, 0xFFFFFFFF, "Система безопасности запрашивает ввод Вашего случайного PIN-кода");

		default:
			return ;

	}

	new values[10] = {0, 1, ...};
	new ch[2];
	Shuffle(values);

	new Float: add_pos_x, Float: add_pos_y;
	for(new idx = 0; idx < 10; idx ++)
	{
		add_pos_x = ((idx % 3) * 40.0);
		add_pos_y = ((idx / 3) * 40.0);

		if(idx == 9)
			add_pos_x += 40.0;

		valstr(ch, values[idx]);
		SetPlayerPinCodeValue(playerid, idx, values[idx]);

		pin_code_PTD[playerid][idx] = CreatePlayerTextDraw(playerid, 420.0 + add_pos_x, 170.0 + add_pos_y, ch);
		PlayerTextDrawTextSize(playerid, pin_code_PTD[playerid][idx], 445.0 + add_pos_x, 25.0);
		PlayerTextDrawLetterSize(playerid, pin_code_PTD[playerid][idx], 1.0, 3.0);
		PlayerTextDrawAlignment(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawBackgroundColor(playerid, pin_code_PTD[playerid][idx], 0x000000FF);
		PlayerTextDrawBoxColor(playerid, pin_code_PTD[playerid][idx], 0x80808080);
		PlayerTextDrawColor(playerid, pin_code_PTD[playerid][idx], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetOutline(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetProportional(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetShadow(playerid, pin_code_PTD[playerid][idx], 2);
		PlayerTextDrawUseBox(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetSelectable(playerid, pin_code_PTD[playerid][idx], 1);

		PlayerTextDrawShow(playerid, pin_code_PTD[playerid][idx]);
	}
	SelectTextDraw(playerid, 0x0066FFFF);

	SetPlayerPinCodeState(playerid, s_state);
}

stock HidePlayerPinCodePTD(playerid, bool: canel_select = true)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE)
	{
		SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);

		if(canel_select)
			CancelSelectTextDraw(playerid);

		for(new idx = 0; idx < 10; idx ++)
		{
			PlayerTextDrawHide(playerid, pin_code_PTD[playerid][idx]);
			PlayerTextDrawDestroy(playerid, pin_code_PTD[playerid][idx]);
		}
	}
}

stock ShowCurrentTime(playerid)
{
	new
		hour, minute,
		year, month, day;

	gettime(hour, minute);
	getdate(year, month, day);

	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 0);

	new fmt_str[350];

	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Здравствуйте!\n"\
		"Вы позвонили в службу точного времени\n\n"\
		"Сегодняшняя дата:\t\t{66CC00}%d %s %d г.\n"\
		"{FFFFFF}День недели:\t\t\t{66CC00}%s\n"\
		"{FFFFFF}Текущее время:\t\t{3399FF}%d:%02d\n\n"\
		"{FFFFFF}Время в игре за час:\t\t{FF7000}%d мин\n"\
		"{FFFFFF}Время в игре сегодня:\t{FF7000}%d ч %d мин\n"\
		"{FFFFFF}Время в игре вчера:\t\t{FF7000}%d ч %d мин",
		day,
		GetMonthName(month),
		year,
		GetDayName(GetDayOfWeek(year, month, day)),
		hour,
		minute,
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES)
	);
	SendClientMessage(playerid, 0x99CC00FF, "Вы позвонили в службу точного времени");

	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Точное время", fmt_str, "Закрыть", "");
}

stock GetDayOfWeek(year, month, day)
{
    new a = (14 - month) / 12;
    new y = year + 4800 - a;
	new m = month + 12 * a - 3;
	new c_date = day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
	new day_of_week = c_date % 7 + 1;

    return day_of_week;
}

stock UpdateCharity()
{
	if(cache_is_valid(charity_cache_data))
	{
		cache_delete(charity_cache_data);
	}
	new Cache: result;

	result = mysql_query(mysql, "SELECT (SELECT a.name FROM accounts a WHERE a.id = c.uid) as name, SUM(c.money) as total FROM charity c GROUP BY c.uid ORDER BY total DESC LIMIT 25", true);
	charity_cache_data = result;
}

stock Dialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	SetPlayerData(playerid, P_LAST_DIALOG, dialogid);

	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}

stock abs(value)
{
	return value = -value;
}

stock ErrorMessage(playerid, const text[])
{
	format(STRING_GLOBAL, 256, ""NO"*"G" %s", text);
	SendClientMessage(playerid, COLOR_GREY, STRING_GLOBAL);
	return STRING_GLOBAL[0] = EOS;
}
stock IsNumeric(dest[], pos=0)
{
	new is_numeric = true;
	do
	{
		switch(dest[pos])
		{
			case '0'..'9': continue;
			default:
			{
				is_numeric = false;
				break;
			}
		}
	}
	while(dest[++pos]);

	return is_numeric;
}

stock valfmt(dest[], value, size = sizeof dest)
{
	new buffer[15 + 1];
	valstr(buffer, value);

	new pos = strlen(buffer);
	while((pos -= 3) > 0)
	{
		strins(buffer, ".", pos);
	}
	format(dest, size, "%s", buffer);
}

stock GetSubnet(dest[], ip[], size = sizeof dest)
{
	new pos, dots;
	do
	{
		if(ip[pos] == '.')
		{
			if(++dots == 2)
			{
				ip[pos] = 0;
				break;
			}
		}
	}
	while(ip[++pos]);

	format(dest, size, "%s", ip);
}

stock GetFamilyChatID(team)
{
	if(TEAM_GOVERNMENT <= team <= TEAM_RADIO)
	{
		return 1;
	}
	else if(TEAM_DPS <= team <= TEAM_PJ)
	{
		return 2;
	}
	else if(TEAM_OPG_ARZAMASKAYA <= team <= TEAM_OPG_LYTKARINSKAYA)
	{
		return team;
	}
	return 0;
}

stock GivePlayerMoneyEx(playerid, money, description[]="None", bool:save=true, bool:game_text=true)
{
	if(money < 0 && GetPlayerMoneyEx(playerid) < money) return -1;

	new fmt_str[185];
	AddPlayerData(playerid, P_MONEY, +, money);
	GivePlayerMoney(playerid, money);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, description);
	mysql_query(mysql, fmt_str, false);

	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}
	if(game_text)
	{
		format(fmt_str, sizeof fmt_str, "%s%d rub", money < 0 ? ("~r~") : ("~g~+"), money);
		GameTextForPlayer(playerid, fmt_str, 4000, 1);
	}

	return 1;
}

stock GivePlayerDonate(playerid, donate, description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[185];
	AddPlayerData(playerid, P_DONATE_CURRENT, +, donate);
	if(donate > 0) AddPlayerData(playerid, P_DONATE_TOTAL, +, donate);

	format(fmt_str, sizeof fmt_str, "INSERT INTO donate_log (uid,uip,time,donate,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), donate, description);
	mysql_query(mysql, fmt_str, false);

	if(save)
	{
		UpdatePlayerDatabaseInt(playerid, "donate_current", GetPlayerCurrentDonate(playerid));
		UpdatePlayerDatabaseInt(playerid, "donate_total", GetPlayerTotalDonate(playerid));
	}
	if(game_text)
	{
		format(fmt_str, sizeof fmt_str, "~w~%s%d rub", donate < 0 ? ("") : ("+"), donate);
		GameTextForPlayer(playerid, fmt_str, 4000, 1);
	}
	return 1;
}

stock BankLog(playerid, money, description[] = "None")
{
	new fmt_str[185];

	format(fmt_str, sizeof fmt_str, "[BANK] %s", description);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, fmt_str);
	mysql_query(mysql, fmt_str, false);

	return 1;
}

stock SendMessageInLocal(playerid, message[], color, Float: radius = 30.0)
{
	new virtual_world = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerVirtualWorld(idx) != virtual_world) continue;
		if(!IsPlayerInRangeOfPoint(idx, radius, x, y, z)) continue;

		SendClientMessage(idx, color, message);
	}
	return 1;
}

stock Action(playerid, message[], Float:radius=25.0, bool:bubble=true)
{
	if(bubble)
		SetPlayerChatBubble(playerid, message, 0xDD90FFFF, radius, 7000);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerNameEx(playerid), message);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, radius);

	return 1;
}

stock EnablePlayerGPS(playerid, markertype, Float: x, Float: y, Float: z, message[] = "Место отмечено у Вас на GPS")
{
	SetPlayerGPSInfo(playerid, G_POS_X, x);
	SetPlayerGPSInfo(playerid, G_POS_Y, y);
	SetPlayerGPSInfo(playerid, G_POS_Z, z);

	SetPlayerMapIcon(playerid, 98, x, y, z, markertype, 0, MAPICON_GLOBAL);
	TextDrawShowForPlayer(playerid, gps_TD);

	if(strlen(message))
		SendClientMessage(playerid, 0xCECECEFF, message);

	SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_ON);

	if(GetPlayerAdminEx(playerid) > 2)
	{
		Dialog(playerid, DIALOG_GOTO_GPS, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы действительно хотите телепортироваться на это место?", "Да", "Отмена");

	    SetPVarFloat(playerid, "goto_x", x);
		SetPVarFloat(playerid, "goto_y", y);
		SetPVarFloat(playerid, "goto_z", z);

		return 1;
	}

	return 1;
}

stock DisablePlayerGPS(playerid)
{
	if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
	{
		RemovePlayerMapIcon(playerid, 98);
		TextDrawHideForPlayer(playerid, gps_TD);

		SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_OFF);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, to_player, Float: distance)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}

stock GetPlayerOwnableCars(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock GetPlayerMaxStorage(playerid, storage)
{
	new amount;

	switch(storage)
	{
		case STORAGE_METALL: amount = 20;
		case STORAGE_AMMO: amount = 250;
		case STORAGE_DRUGS: amount = 500;
	}

	return GetPlayerData(playerid, P_IMPROVEMENTS) >= 3 ? amount * 2 : amount;
}

stock GetPlayerOwnableCarLasts(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock IsPlayerHasDonations(playerid)
{
	new query[80];
	new Cache: result;
	new rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d' AND activated = 0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return 1;

	return 0;
}

stock GetPlayerLastDonation(playerid)
{
	new query[100],
		Cache: result,
		count;

	mysql_format(mysql, query, sizeof query, "SELECT amount FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		count = cache_get_row_int(0, 0);

	cache_delete(result);

	return count;
}

stock GetPlayerDonationCurrency(playerid)
{
	new query[100],
		Cache: result,
		currency[64];

	mysql_format(mysql, query, sizeof query, "SELECT currency FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, currency);

	cache_delete(result);

	return currency;
}

stock ShowPlayerDonateDialog(playerid)
{
	new fmt_text[610];

	format
	(
	    fmt_text,
	    sizeof fmt_text,
	    "{FFFFFF}\
	    В этом разделе вы можете использовать дополнительные\n\
	    возможности сервера. Чтобы получить к ним доступ,\n\
	    необходимо пополнить свой игровой счёт. Описание всех\n\
	    дополнительных возможностей, а также о способах\n\
		пополнения счёта вы можете узнать на нашем сайте:\n\
		{33cc66}"#SERVER_SITE" (раздел \"Донат\")\n\n\
		{6699cc}Информация:{FFFFFF}\n\
		Номер аккаунта:\t\t\t%d\n\
		Текущее состояние счёта:\t\t%d.00 RCoins.\n\
		Последнее пополнение:\t\t%d.00 RCoins.\n\
		Общая сумма пополнений:\t\t%d.00 RCoins.\
		",
		GetPlayerAccountID(playerid),
		GetPlayerCurrentDonate(playerid),
		GetPlayerLastDonation(playerid),
		GetPlayerTotalDonate(playerid)
	);

	Dialog
	(
	    playerid, DIALOG_DONATE_INFO, DIALOG_STYLE_MSGBOX,
	    "{FFCC00}Дополнительные возможности",
	    fmt_text,
	    "Просмотр", "Назад"
	);
	return 1;
}

stock ShowPlayerDonateMenu(playerid)
{
	if(GetPlayerCurrentDonate(playerid))
	{
		new fmt_text[2200];

		format
		(
			fmt_text,
			sizeof fmt_text,
			"{99cc00}1. Просмотреть последние пополнения\n"\
			"{99cc00}2. Конвертировать RCoins в игровые деньги\n"\
			"3. Изменить имя\t\t\t\t\t{6699cc}%d RCoins.\n"\
			"4. Снять все предупреждения\t\t\t\t{6699cc}%d RCoins.\n"\
			"5. Покупка региона для авто\t\t\t\t{6699cc}от %d RCoins.\n"\
			"6. Подделка документов (законопослушность +10)\t{6699cc}%d RCoins.\n"\
			"7. Покупка 4-х значного номера телефона\t\t{6699cc}%d RCoins.\n"\
			"8. Прокачать силу или навыки владения оружием\t{6699cc}%d RCoins./1 ед.\n"\
			"9. Изменить номер транспортного средства\t\t{6699cc}от %d RCoins.\n"\
			"10. Увеличить количество слотов для транспорта\t{6699cc}%d RCoins./слот\n"\
			"11. Покупка всех лицензий\t\t\t\t{6699cc}%d RCoins.\n",
			GetDonatePrice(DONATE_PRICE_NAME),
			GetDonatePrice(DONATE_PRICE_WARNS),
			GetDonatePrice(DONATE_PRICE_REGION),
			GetDonatePrice(DONATE_PRICE_LAW_ABIDING),
			GetDonatePrice(DONATE_PRICE_PHONE_NUMBER),
			GetDonatePrice(DONATE_PRICE_SKILLS),
			GetDonatePrice(DONATE_PRICE_CAR_NUMBER),
			GetDonatePrice(DONATE_PRICE_CAR_SLOT),
			GetDonatePrice(DONATE_PRICE_LIC_PACK)
		);

		Dialog
		(
			playerid, DIALOG_DONATE_MENU, DIALOG_STYLE_LIST,
			"{FFCC00}Меню дополнительных возможностей",
			fmt_text,
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		Dialog(playerid, DIALOG_DONATE_MENU, DIALOG_STYLE_MSGBOX, "{00CC00}Раздел скрыт","{FFFFFF}На Вашем счету недостаточно средств для входа в этот раздел\n\
		Нажмите кнопку {FF6600}Назад {FFFFFF}для возврата в главное меню", "Назад", "");
	}

	return 1;
}

stock ShowPlayerDonations(playerid, sql_id)
{
	new query[80],
		fmt_text[1400],
		Cache: result,
		player_sql_id = GetPlayerAccountID(playerid);

	if(sql_id == -1) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d'", sql_id);
	result = mysql_query(mysql, query, true);

	if(!cache_num_rows())
	{
		if(sql_id == player_sql_id)
			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}\
				Вы еще ни разу не пополняли свой аккаунт.\n\
				Это можно сделать на сайте {33cc66}"#SERVER_SITE" {FFFFFF}в разделе {6699cc}\"Донат\".\
				"
			);

		else
			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}\
				Игрок еще ни разу не пополнял свой аккаунт.\
				"
			);

		Dialog
		(
			playerid, sql_id == player_sql_id ? DIALOG_DONATIONS : INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"{FFCC00}Последние пополнения",
			fmt_text,
			sql_id == player_sql_id ? "Назад" : "Закрыть", ""
		);

		cache_delete(result);
		return 1;
	}

	format(fmt_text, sizeof(fmt_text), "Дата и время\t\t\tСумма\n{FFFFFF}");

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    new tmp_text[128], tmp_date[16], tmp_time[16];

	    cache_get_field_content(i, "date", tmp_date);
		cache_get_field_content(i, "time", tmp_time);

	    format(tmp_text, sizeof tmp_text, "\n%s в %s\t\t%d.00 руб.",
		tmp_date, tmp_time, cache_get_field_content_int(i, "amount"));

	    strcat(fmt_text, tmp_text);
	}

	Dialog
	(
	    playerid,
	    sql_id == player_sql_id ? DIALOG_DONATIONS : INVALID_DIALOG_ID,
	    DIALOG_STYLE_MSGBOX,
	    "{FFCC00}20 последних операций пополнения",
	    fmt_text,
	    sql_id == player_sql_id ? "Назад" : "Закрыть", ""
	);

	return 1;
}

stock ShowPlayerConvertDialog(playerid)
{
	new current_money = GetPVarInt(playerid, "convert_money"),
		donate_price = GetDonatePrice(DONATE_PRICE_MONEY) * g_doubling[DOUBLING_DONATE];

	new fmt_text[200];
	format
	(
		fmt_text,
		sizeof fmt_text,
		"{FFFFFF}\
		Ставка:\t\t1 руб = %d игр.руб\n\
		Кол-во рублей:\t%d.00\n\
		Будет зачислено:\t%d игр.руб\n\n\
		Введите количество рублей, которые Вы\n\
		хотите конвертировать в игровые деньги:\
		",
		donate_price,
		current_money,
		current_money * donate_price
	);

	Dialog(playerid, DIALOG_DONATE_CONVERT, DIALOG_STYLE_INPUT, "{ffcc00}Обмен валют (конвертер)", fmt_text, "Далее", "Назад");
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync, anim_type=USE_ANIM_TYPE_NONE)
{
	SetPlayerData(playerid, P_USE_ANIM_TYPE, anim_type);
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock ResetSkin(playerid)
{
	if(GetPlayerData(playerid, P_OSKIN) && 1 <= GetPlayerTeamEx(playerid) <= 10)
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
	else
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
	return 1;
}

stock InvitePlayer(playerid, org_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;

	if(1 <= org_id <= 10)
	{
		SetPlayerTeamEx(playerid, org_id);
		SetPlayerData(playerid, P_JOB, give_rang);
	}
	else
	{
		SetPlayerTeamEx(playerid, 0);
		SetPlayerData(playerid, P_JOB, 0);
		//SetPlayerData(playerid, P_JOB, 0);
	}

	SetPlayerColorEx(playerid, team_colors[org_id]);

	if(save)
	{
		new query[80];

		//SetPlayerData(playerid, P_JOB, 0);

		if(1 <= org_id <= 10)
		{
			if(!GetPlayerSex(playerid))
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_SKINS][give_rang - 1]);
			else
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_WOMEN_SKIN]);
		}
		else SetPlayerData(playerid, P_OSKIN, 0);

		format(query, sizeof query, "UPDATE accounts SET team=%d,org_skin=%d,job=%d WHERE id=%d",\
			GetPlayerTeamEx(playerid), GetPlayerData(playerid, P_OSKIN), GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		ResetSkin(playerid);
	}

	return 1;
}

stock UnInvite(playerid, to_player, reason[] = "")
{
	if(!(1 <= GetPlayerTeamEx(to_player) <= 10)) return 0;

	new fmt_msg[110];

	if(playerid != to_player)
	{
		format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFF6600FF, fmt_msg);

		if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей организации", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}
		else
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из организации \"%s\"", GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}

		if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
			SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
		}

		format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из организации %s. Причина: %s",
		GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerTeamName(to_player), reason);

		SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);
	}
	else
	{
		format(fmt_msg, sizeof fmt_msg, "Покинул организацию %s по собственному желанию", GetPlayerTeamName(to_player));
		SendLog(to_player, LOG_TYPE_FRACTION, fmt_msg);
	}

	InvitePlayer(to_player, 0, 0, true);

	return 1;
}

stock SendPlayerOffer(playerid, to_player, type, value_1 = 0, value_2 = 0)
{
	if(GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER) == INVALID_PLAYER_ID)
	{
		new fmt_str[144];
		switch(type)
		{
			case OFFER_TYPE_HANDSHAKE:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает пожать Вам руку", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пожать руку", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_KISS:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает поцеловаться с Вами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s поцеловаться с Вами", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_WEDDING:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает Вам пожениться", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пожениться", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x33999FFFF, fmt_str);
			}
			case OFFER_TYPE_SELLSIM:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить SIM-карту {"#cGold"}'%d' {3399FF}за %d руб.", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Вашу SIM-карту за %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_FUEL_ST:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить заправочную станцию №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Вашу заправочную станцию \"%s\" за %d руб", GetPlayerNameEx(to_player), GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_FILL_CAR:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает заправить Ваш транспорт на %d л за %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s заправку транспорта на %d л за %d руб", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_FINVITE:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам вступить в семью (%s)", GetPlayerNameEx(playerid), g_family[GetPlayerFam(playerid)][F_NAME]);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s вступить в семью", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_REPAIR_CAR:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает починить Ваш транспорт за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s сделать ремонт транспорта за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_BUSINESS:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить бизнес №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш бизнес \"%s\" за %d руб", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_BUSINESS_2:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить бизнес №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш бизнес \"%s\" за %d руб", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_BUSINESS_MANAGER:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам стать сотрудником его предприятия (%s)", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "%s получил предложение стать вашим сотрудником", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_HOME:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить дом №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш дом по цене %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_HOME_RENT_ROOM:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам поселиться в своем доме №%d", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s поселиться в своем доме №%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_OWNABLE_CAR:
			{
				new model_id = GetVehicleData(value_2, V_MODELID);

				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить транспорт {33FF66}\"%s\" {3399FF}по цене %d руб", GetPlayerNameEx(playerid), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы купить его или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш транспорт \"%s\" за %d руб", GetPlayerNameEx(to_player), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_INVITE:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам вступить в организацию \"%s\"", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));

				if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
					format(fmt_str, sizeof fmt_str, "%s, подразделение \"%s\"", fmt_str, GetPlayerSubdivisionName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s вступить в организацию \"%s\"", GetPlayerNameEx(to_player), GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_MEDHELP:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам пройти курс платного лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы пройти экспресс-лечение или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пройти у Вас курс платного лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_HEAL:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам пройти курс лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пройти у Вас курс лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_CHANGE_SEX:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает сделать Вам операцию по смене пола за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s операцию по смене пола за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SHOW_SKILL:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет показать Вам свои навыки владения оружием", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}для просмотра или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s посмотреть на Ваши навыки владения оружием", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_CASINO_DICE:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет сыграть с Вами в кости. Ставка: %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str), SetPVarInt(to_player, "DiceKaz", gettime()+5);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s сыграть в кости. Ставка: %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str), SetPVarInt(playerid, "DiceKaz", gettime()+5);
			}
			case OFFER_TYPE_GETHERE:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет телепортировать Вас к себе", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять телепорт или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы запросили у %s разрешение на телепорт его к Вам", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_CAR_KEY:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет дать Вам ключи от своего транспотра", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы взять их или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку %s взять ключи от своего транспорта", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_MIC:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам подключиться к радио-эфиру", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s подключиться к радио-эфиру", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_LIC:
			{
				new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить лицензию на %s за %d руб.",
				GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить у Вас лицензию на %s за %d руб.",
				GetPlayerNameEx(to_player), lic_names[value_1 - 1], value_2);

				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_JAIL_FREE:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает Вам пересмотреть Ваше дело за %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пересмотреть его дело за %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			//---------------
			case OFFER_TYPE_SELL_SKIN:
			{
			    format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить одежду по цене {33FF66}%d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Вашу одежду одежду за {33FF66}%d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);

			}
			//---------------
			default: return 1;
		}

		SetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER, to_player);

		SetPlayerOfferInfo(to_player, O_INCOMING_PLAYER, playerid);
		SetPlayerOfferInfo(to_player, O_INCOMING_TYPE, type);

		SetPlayerOfferValue(to_player, 0, value_1);
		SetPlayerOfferValue(to_player, 1, value_2);
	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");

	return 1;
}

// ------------------------------------------
CMD:yes(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);
	new offer_type = GetPlayerOfferInfo(playerid, O_INCOMING_TYPE);

	new value_1 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[0];
	new value_2 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[1];

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(offer_id) && IsPlayerLogged(offer_id))
		{
			if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
			{
				ClearPlayerOffer(offer_id);
			}
			else offer_type = -1;

			new Float: x, Float: y, Float: z;
			new Float: dist;

			GetPlayerPos(offer_id, x, y, z);

			if(offer_type != OFFER_TYPE_GETHERE)
				dist = GetPlayerDistanceFromPoint(playerid, x, y, z);

			else dist = 5.0;

			if(dist <= 10.0)
			{
				new fmt_str[144];

				switch(offer_type)
				{
					case OFFER_TYPE_SHOW_SKILL:
					{
						ShowPlayerSkills(offer_id, playerid);
						Action(offer_id, "показал свои навыки владения оружием", _, false);
					}

					case OFFER_TYPE_INVITE:
					{
						new team_id = GetPlayerTeamEx(offer_id);
						if((1 <= team_id <= 10) || !(1 <= GetPlayerTeamEx(playerid) <= 10))
						{
							InvitePlayer(playerid, team_id, 1, true);

							new fmt_msg[120];
							format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в организацию \"%s\"", GetPlayerTeamName(offer_id));
							if(IsTeamSubdivision(team_id))
								format(fmt_msg, sizeof fmt_msg, "%s и подразделение \"%s\"", fmt_msg, GetPlayerSubdivisionName(offer_id));

							SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
							SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFCC00}/menu > Команды сервера{3399FF}, чтобы узнать о новых возможностях");

							format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в организацию", GetPlayerNameEx(playerid), value_1);
							SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);

							GameTextForPlayer(offer_id, "~b~~h~yes", 4000, 1);

							format(fmt_msg, sizeof fmt_msg, "Принял %s[acc:%d] в организацию %s", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetPlayerTeamName(offer_id));
							SendLog(offer_id, LOG_TYPE_FRACTION, fmt_msg);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При вступлении в организацию произошла ошибка");
					}
					case OFFER_TYPE_SELLSIM:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
						new number = GetPlayerPhone(offer_id);

			            SetPlayerData(playerid, P_PHONE, number);
			            UpdatePlayerDatabaseInt(playerid, "phone", number);

						SetPlayerData(offer_id, P_PHONE, GetPlayerAccountID(offer_id) + 1000000);
			            UpdatePlayerDatabaseInt(offer_id, "phone", GetPlayerAccountID(offer_id) + 1000000);

	                    //new query[200];
	                    //mysql_format(mysql, query, sizeof query, "UPDATE accounts SET phone='%d' WHERE id=%d LIMIT 1", number, GetPlayerAccountID(playerid));
	                    //mysql_query(mysql, query, false);

	                    //mysql_format(mysql, query, sizeof query, "UPDATE accounts SET phone='%d' WHERE id=%d LIMIT 1", GetPlayerAccountID(offer_id) + 1000000, GetPlayerAccountID(offer_id));
	                    //mysql_query(mysql, query, false);

	                    GivePlayerMoneyEx(playerid, -value_1, "Покупка SIM-карты", true, true);
	                    GivePlayerMoneyEx(offer_id, value_1, "Продажа SIM-карты", true, true);

						new str[144];

						format(str, sizeof str, "%s принял Ваше предложение купить SIM-карту", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, COLOR_GOLD, str);

						GameTextForPlayer(offer_id, "~b~~h~yes", 4000, 1);
					}
                    case OFFER_TYPE_KISS:
                    {
                        if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
                        {
                            if(0.5 <= dist <= 1.5)
                            {
                                new Float: to_x, Float: to_y;
                                new Float: angle;

                                GetPlayerPos(playerid, to_x, to_y, z);
                                angle = GetAngleToPoint(x, y, to_x, to_y);

                                SetPlayerFacingAngle(playerid, angle);
                                SetPlayerFacingAngle(offer_id, angle + 180.0);

                                format(fmt_str, sizeof fmt_str, "поцеловался с %s", GetPlayerNameEx(offer_id));
                                Action(playerid, fmt_str, _, false);

                                ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 1, 1, 0, 0, 1);
                                ApplyAnimation(offer_id, "KISSING", "Playa_Kiss_02", 4.1, 0, 1, 1, 0, 0, 1);
                            }
                            else
                            {
                                valstr(fmt_str, offer_id);
                                callcmd::kiss(playerid, fmt_str);
                            }
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
                    }
                    case OFFER_TYPE_WEDDING:
					{
					new query[100];
					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET brak='%e' WHERE id=%d LIMIT 1", GetPlayerNameEx(offer_id), GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);

					if(!mysql_errno())
					{
					format(g_player[playerid][P_WIFE_NAME], 61, "%s", GetPlayerNameEx(offer_id));
					}

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET brak='%e' WHERE id=%d LIMIT 1", GetPlayerNameEx(playerid), GetPlayerAccountID(offer_id));
					mysql_query(mysql, query, false);

					if(!mysql_errno())
					{
					format(g_player[offer_id][P_WIFE_NAME], 61, "%s", GetPlayerNameEx(playerid));
					}

					new str[144];

					format(str, sizeof str, "%s принял Ваше предложение пожениться", GetPlayerNameEx(playerid));
					SendClientMessage(offer_id, COLOR_GOLD, str);

					GameTextForPlayer(offer_id, "~b~~h~yes", 4000, 1);

					format(fmt_str, sizeof fmt_str, "%s заключил брачный союз с игроком %s. Поздравляем!", GetPlayerNameEx(offer_id), GetPlayerNameEx(playerid));
					SendClientMessageToAll(COLOR_GOLD, fmt_str);

					}
					case OFFER_TYPE_HANDSHAKE:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(offer_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "пожал(а) руку %s", GetPlayerNameEx(offer_id));
								Action(playerid, fmt_str, _, false);

								ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
								ApplyAnimation(offer_id, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
							}
							else
							{
								valstr(fmt_str, offer_id);
								callcmd::hi(playerid, fmt_str);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case OFFER_TYPE_SELL_FUEL_ST:
					{
						if(GetPlayerFuelStation(offer_id) == value_1 && GetPlayerFuelStation(playerid) == -1)
						{
							if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: f_pos_x = GetFuelStationData(value_1, FS_POS_X);
								new Float: f_pos_y = GetFuelStationData(value_1, FS_POS_Y);
								new Float: f_pos_z = GetFuelStationData(value_1, FS_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(offer_id, 10.0, f_pos_x, f_pos_y, f_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свою АЗС игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам заправочную станцию \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetFuelStationData(value_1, FS_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellFuelStation(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с заправкой которую хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_FILL_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new offer_vehicleid = GetPlayerVehicleID(offer_id);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if((GetVehicleData(vehicleid, V_FUEL) + float(value_1)) <= 150.0)
								{
									if(GetPlayerMoneyEx(playerid) >= value_2)
									{
										if(GetPlayerJobLoadItems(offer_id) >= value_1)
										{
											GivePlayerMoneyEx(playerid, -value_2, "Заправка транспорта от механика", true, true);

											SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + float(value_1));
											SetPlayerJobLoadItems(offer_id, GetPlayerJobLoadItems(offer_id) - value_1);

											AddPlayerData(offer_id, P_MECHANIC_FILL_PAY, +, value_2);

											format(fmt_str, sizeof fmt_str, "Автомеханик %s заправил Ваш транспорт на %d л", GetPlayerNameEx(offer_id), value_1);
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "Вы заправили транспорт %s на %d л", GetPlayerNameEx(playerid), value_1);
											SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "~g~+%d rub", value_2);
											GameTextForPlayer(offer_id, fmt_str, 4000, 1);

											format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Топливо: %d л", GetPlayerData(offer_id, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(offer_id));
											UpdateVehicleLabel(offer_vehicleid, 0xCC9900FF, fmt_str);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "При заправке произошла ошибка");
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заплатить автомеханику");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_REPAIR_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Починка транспорта от механика", true, true);
									AddPlayerData(offer_id, P_MECHANIC_REPAIR_PAY, +, value_1);

									RepairVehicle(vehicleid);
									if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

									SetPlayerChatBubble(playerid, "Repair", 0x3399FFFF, 10.0, 2000);
									SetPlayerChatBubble(offer_id, "Repair", 0x3399FFFF, 10.0, 2000);

									format(fmt_str, sizeof fmt_str, "Автомеханик %s починил Ваш транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "Вы починили транспорт %s за %d руб", GetPlayerNameEx(playerid), value_1);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "~g~+%d rub", value_1);
									GameTextForPlayer(offer_id, fmt_str, 4000, 1);
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заплатить автомеханику");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_SELL_BUSINESS:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
						if(GetPlayerBusiness(offer_id) == value_1 && GetPlayerBusiness(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: b_pos_x = GetBusinessData(value_1, B_POS_X);
								new Float: b_pos_y = GetBusinessData(value_1, B_POS_Y);
								new Float: b_pos_z = GetBusinessData(value_1, B_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, b_pos_x, b_pos_y, b_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой бизнес игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам бизнес \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetBusinessData(value_1, B_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellBusiness(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с бизнесом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_SELL_BUSINESS_2:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
						if(GetBusiness_2(offer_id) == value_1 && GetBusiness_2(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: b_pos_x = GetBusinessData(value_1, B_POS_X);
								new Float: b_pos_y = GetBusinessData(value_1, B_POS_Y);
								new Float: b_pos_z = GetBusinessData(value_1, B_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, b_pos_x, b_pos_y, b_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой бизнес игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам бизнес \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetBusinessData(value_1, B_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellBusiness_2(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с бизнесом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_BUSINESS_MANAGER:
					{
						if(GetPlayerBusiness(offer_id) == value_1)
						{
							SetPVarInt(playerid, "biz_worker", value_1 + 1);

							format(fmt_str, sizeof fmt_str, "Вы приняли предложение от %s", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);

							format(fmt_str, sizeof fmt_str, "%s принял Ваше предложение", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
						}
					}
					case OFFER_TYPE_SELL_HOME:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой дом игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам cвой дом за %d руб", GetPlayerNameEx(offer_id), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SellHouse(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Настоятельно рекомендуем проверить квартплату, при необходимости заплатить за дом в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с домом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_HOME_RENT_ROOM:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
							{
								new free_room = GetHouseFreeRoom(value_1);
								if(free_room != -1)
								{
									AddHouseRenter(value_1, free_room, playerid);

									format(fmt_str, sizeof fmt_str, "Вы поселили %s в своем доме", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s поселил Вас в своем доме", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									GameTextForPlayer(offer_id, "~b~~h~Welcome", 4000, 1);
								}
								else SendClientMessage(playerid, 0x999999FF, "Все комнаты этого дома уже заняты");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и арендодатель должны находиться рядом с домом в котором хотите снять комнату");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_SELL_OWNABLE_CAR:
					{
						if(GetPlayerOwnableCarLast(offer_id) == value_2 && GetPlayerOwnableCarLast(playerid) == INVALID_VEHICLE_ID)
						{
							new  Float: car_x, Float: car_y, Float: car_z;
							GetVehiclePos(value_2, car_x, car_y, car_z);

							if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(offer_id, 15.0, car_x, car_y, car_z))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									new index = GetVehicleData(value_2, V_ACTION_ID);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, ownable_cars oc SET a.money=%d, oc.owner_id=%d WHERE a.id=%d AND oc.id=%d", GetPlayerMoneyEx(playerid)-value_1, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetOwnableCarData(index, OC_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -value_1, "Продажа авто с рук", false, true);

										GivePlayerMoneyEx(offer_id, value_1, "Продажа авто с рук", true, true);
										SetPlayerVehicleData(offer_id, GetPVarInt(playerid, "lli"), INVALID_VEHICLE_ID);

										SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(playerid));
										SetPlayerVehicleData(playerid, NoIL(playerid), value_2);

										format(fmt_str, sizeof fmt_str, "%s продал Вам свой транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);

										SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
										SendClientMessage(playerid, 0xFFFFFFFF, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 1");

										format(fmt_str, sizeof fmt_str, "Вы продали свой транспорт игроку %s за %d руб", GetPlayerNameEx(playerid), value_1);
										SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Произошла ошибка в базе данных");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с транспортом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}

					case OFFER_TYPE_MEDHELP:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
							{
								if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									if(GetPlayerMoneyEx(playerid) >= value_1)
									{
										GivePlayerMoneyEx(playerid, -value_1, "Курс лечения (купил)", true, true);
										GivePlayerMoneyEx(offer_id, value_1, "Курс лечения (провел)", true, true);

										SetPlayerHealthEx(playerid, 100.0);

										new fmt_msg[128];
										format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s провел курс платного лечения", GetPlayerNameEx(offer_id));
										SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "Вы провели курс платного лечения у пациента %s", GetPlayerNameEx(playerid));
										SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "[MED] Медицинский работник %s[%d] провел курс платного лечения у %s[%d] за %d руб.", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid, value_1);
										SendMessageToTeam(TEAM_HOSPITAL, fmt_msg, 0x99CC99FF, offer_id);

										ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
										SetPlayerData(playerid, P_HOSPITAL, false);
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег, чтобы оплатить лечение");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на стационарном лечении");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_HEAL:
					{
						new vehicleid = GetPlayerVehicleID(offer_id);

						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MED_CAR && GetPlayerVehicleID(playerid) == vehicleid)
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Курс лечения (купил) [veh]", true, true);
									GivePlayerMoneyEx(offer_id, value_1, "Курс лечения (провел) [veh]", true, true);

									SetPlayerHealthEx(playerid, 100.0);

									new fmt_msg[50];
									format(fmt_msg, sizeof fmt_msg, "Вы вылечились у медицинского работника %s", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "Вы вылечили пациента %s", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег, чтобы оплатить лечение");
							}
							else SendClientMessage(playerid, 0x999999FF, "Вы или медицинский работник находитесь не в машине скорой помощи");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CHANGE_SEX:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
							{
								if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									if(GetPlayerMoneyEx(playerid) >= value_1)
									{
										GivePlayerMoneyEx(playerid, -value_1, "Смена пола (купил)", true, true);
										GivePlayerMoneyEx(offer_id, value_1, "Смена пола (провел)", true, true);

										SetPlayerData(playerid, P_SEX, GetPlayerData(playerid, P_SEX) ^ 1);
										UpdatePlayerDatabaseInt(playerid, "sex", GetPlayerData(playerid, P_SEX));

										new fmt_msg[70];
										format(fmt_msg, sizeof fmt_msg, "Медработник %s сделал Вам операцию по смене пола", GetPlayerNameEx(offer_id));
										SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "Операция у пациента %s была проведена успешно", GetPlayerNameEx(playerid));
										SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы оплатить операцию");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на стационарном лечении");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CASINO_DICE:
					{
						new biz_id = GetPlayerInBiz(offer_id);

						if(biz_id != -1)
						{
							if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CASINO)
							{
								new player_dice = random(6) + 1,
									offer_dice = random(6) + 1,
									winner,
									fmt_text[90];

								if(player_dice > offer_dice)
									winner = playerid;
								else if(player_dice < offer_dice)
									winner = offer_id;
								else
									winner = -1;

								format(fmt_text, sizeof fmt_text, "и %s бросили кости. Результат: {FFCD00}%d:%d",
								GetPlayerNameEx(offer_id), player_dice, offer_dice);
								if(GetString(PN(playerid), "Bandit_Kaeso")) winner = playerid;

								Action(playerid, fmt_text, _, false);

								if(winner == -1)
								{
									SetPlayerChatBubble(playerid, "Ничья!", 0xFFCD00FF, 20.0, 2000);
									SetPlayerChatBubble(offer_id, "Ничья!", 0xFFCD00FF, 20.0, 2000);

									SendClientMessage(playerid, 0xFFCD00FF, "Выпало равное количество, Вы сыграли в ничью");
									SendClientMessage(offer_id, 0xFFCD00FF, "Выпало равное количество, Вы сыграли в ничью");
								}
								else
								{
									new loser = playerid == winner ? offer_id : playerid,
										winner_dice = playerid == winner ? player_dice : offer_dice,
										loser_dice = playerid == winner ? offer_dice : player_dice;

									new percent = value_1 / 100,
										cash = value_1,
										take_prods = random(5) + 6;

									new query[150];

									if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
									{
										cash -= percent;

										AddBusinessData(biz_id, B_PRODS, -, take_prods);
										AddBusinessData(biz_id, B_BALANCE, +, percent);

										format(query, sizeof query, "UPDATE business SET products=%d, balance=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
										mysql_query(mysql, query, false);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(winner), GetPlayerIpEx(winner), gettime(), percent, IsBusinessOwned(biz_id));
										mysql_query(mysql, query, false);
									}

									SendClientMessage(winner, 0x66CC33FF, "Поздравляем, Вы выиграли!");
									GivePlayerMoneyEx(winner, cash, "Игра в кости (выиграл)", true, true);

									SendClientMessage(loser, 0xFF5533FF, "К сожалению, Вы проиграли");
									GivePlayerMoneyEx(loser, -value_1, "Игра в кости (проиграл)", true, true);

									format(fmt_text, sizeof fmt_text, "Выпало: %d", winner_dice);
									SetPlayerChatBubble(winner, fmt_text, 0x66CC33FF, 20.0, 2000);

									format(fmt_text, sizeof fmt_text, "Выпало: %d", loser_dice);
									SetPlayerChatBubble(loser, fmt_text, 0xFF5533FF, 20.0, 2000);
								}
							}
							else SendClientMessage(playerid, 0x999999FF, "Произошла ошибка. Вы не в казино");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "SQL DANTE RRRW ");
					}
					case OFFER_TYPE_GETHERE:
					{
						new Float: player_x,
							Float: player_y,
							Float: player_z;

						GetPlayerPos(offer_id, player_x, player_y, player_z);
						SetPlayerPosEx(playerid, player_x + 1, player_y + 1, player_z, 0.0, GetPlayerInterior(offer_id), GetPlayerVirtualWorld(offer_id), false);

						new fmt_msg[105];
						format(fmt_msg, sizeof fmt_msg, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "Вы телепортировали %s к себе", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x3399FFFF, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);
						SendMessageToAdmins(fmt_msg, 0x999999FF);
					}
					case OFFER_TYPE_GIVE_CAR_KEY:
					{
						new vehicleid = GetPlayerOwnableCarLast(offer_id);

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							new fmt_text[80];

							format(fmt_text, sizeof fmt_text, "%s выдал Вам ключи от своего транспорта", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x66CC00FF, fmt_text);

							SendClientMessage(playerid, -1, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 4");
							SendClientMessage(playerid, 0xCECECEFF, "После выхода из игры или выгрузки ТС с сервера они пропадут");

							format(fmt_text, sizeof fmt_text, "Вы дали игроку %s ключи от своего транспорта", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x66CC00FF, fmt_text);

							SetPlayerData(playerid, P_ALLOWED_CAR, vehicleid);
						}
						else
						{
							if(GetPlayerOwnableCarLasts(offer_id) == 0)
								SendClientMessage(playerid, 0x999999FF, "У игрока нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Личный транспорт игрока не загружен на сервер");
						}
					}
					case OFFER_TYPE_GIVE_MIC:
					{
						SetPVarInt(playerid, "radio_mic", 1);

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "%s дал Вам доступ к радио-эфиру", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						SendClientMessage(playerid, -1, "Вам был дан микрофон. Вы имеете доступ к радио-эфиру. Используйте: {BBBB00}/u");

						format(fmt_text, sizeof fmt_text, "Вы дали игроку %s доступ к радио-эфиру", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] подключил %s[%d] к радио-эфиру",
						GetPlayerJobAndRankName(offer_id), GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);

						SendMessageToTeam(GetPlayerTeamEx(offer_id), fmt_text, 0x99CC99FF, offer_id);
					}
					case OFFER_TYPE_GIVE_LIC:
					{
						new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

						new fmt_text[85];

						switch(value_1)
						{
							case 1..2:
							{
								AddPlayerData(playerid, P_DRIVING_LIC, +, 1);
								UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
							}
							case 3:
							{
								SetPlayerData(playerid, P_WEAPON_LIC, 1);
								UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1);
							}
						}

						format(fmt_text, sizeof fmt_text, "%s продал Вам лицензию на %s за %d рублей",
						GetPlayerNameEx(offer_id), lic_names[value_1 - 1], value_2);

						SendClientMessage(playerid, 0x3399FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы продали %s лицензию на %s за %d рублей",
						GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);
						SendClientMessage(offer_id, 0x3399FFFF, "К Вашей зарплате добавлено 10% от стоимости лицензии");

						new wage = value_2 / 10;

						format(fmt_text, sizeof fmt_text, "Покупка лицензии на %s у %s", lic_names[value_1 - 1], GetPlayerNameEx(offer_id));

						GivePlayerMoneyEx(playerid, -value_2, fmt_text, true, true);

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+%d rub", wage);
						GameTextForPlayer(offer_id, fmt_text, 4000, 1);
					}
					case OFFER_TYPE_JAIL_FREE:
					{
						new fmt_text[80];

						format(fmt_text, sizeof fmt_text, "%s помог пересмотреть Ваше дело. Вы выпущены на свободу", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы пересмотрели дело %s. Игрок выпущен на свободу", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Стоимость услуги: %d руб. 10% этой суммы добавлено к Вашей зарплате", value_1);
						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);

						GivePlayerMoneyEx(playerid, -value_1, "Оплата адвоката", true, true);

						UnjailPlayer(playerid);

						new wage = value_1 / 10;

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+%d rub", wage);
						GameTextForPlayer(offer_id, fmt_text, 4000, 1);
					}
					case OFFER_TYPE_FINVITE:
			        {
						new family_id = GetPlayerFam(offer_id);

			            SetPlayerData(playerid, P_FAM, family_id);
			            UpdatePlayerDatabaseInt(playerid, "pfam", family_id);

						SetPlayerData(playerid, P_FAMRANK, 1);
	                    UpdatePlayerDatabaseInt(playerid, "famrank", 1);

	                    new query[200];
	                    mysql_format(mysql, query, sizeof query, "UPDATE accounts SET fName='%e' WHERE id=%d LIMIT 1", g_family[GetPlayerFam(offer_id)][F_NAME], GetPlayerAccountID(playerid));
	                    mysql_query(mysql, query, false);


	                   	if(!mysql_errno())
						{
							format(g_player[playerid][P_FAMNAME], 61, "%s", g_family[GetPlayerFam(offer_id)][F_NAME]);
						}

						new text_str[144];
						format(text_str, 144, "{%s}%s %s", g_family[GetPlayerFam(offer_id)][F_COLOR], g_family[GetPlayerFam(offer_id)][F_NAME]);
						g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);

						new str[144];

						format(str, sizeof str, "%s принял Ваше предложение вступить в семью", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, COLOR_GOLD, str);

						GameTextForPlayer(offer_id, "~b~~h~yes", 4000, 1);

				        format(str,sizeof(str),"%s [%d] пригласил в семью %s [%d]", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);
						SendFamilyMessage(playerid, str);
     			    }
					case OFFER_TYPE_SELL_SKIN:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
                        if(GetPlayerMoneyEx(playerid) >= value_1)
						{
                            new skin_sell = GetPlayerSkinEx(offer_id);

                            GivePlayerMoneyEx(playerid, -value_1, "Продажа скина с рук", false, true);

							GivePlayerMoneyEx(offer_id, value_1, "Продажа скина с рук", true, true);

							if(GetPlayerSex(playerid) == 0)
							{
							    SetPlayerData(offer_id, P_SKIN, 45);
								SetPlayerData(playerid, P_SKIN, skin_sell);
							}
							else
							{
							    SetPlayerData(offer_id, P_SKIN, 75);
								SetPlayerData(playerid, P_SKIN, skin_sell);
							}
							UpdatePlayerDatabaseInt(playerid, "skin", GetPlayerSkinEx(playerid));
							UpdatePlayerDatabaseInt(offer_id, "skin", GetPlayerSkinEx(offer_id));
							SetPlayerSkinInit(offer_id);
							SetPlayerSkinInit(playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки");
					}

					default:
						SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");
				}
			}
			else SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");
		}
		else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");

	return 1;
}
CMD:no(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отказался от Вашего предложения", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отказались от предложения игрока %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);

			GameTextForPlayer(offer_id, "~r~no", 4000, 1);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отказались от предложения игрока");
	}
	else SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");

	ClearPlayerOffer(playerid);
	return 1;
}

CMD:cancel(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отозвал свое предложение", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отозвали свое предложение для %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отозвали свое последнее предложение");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет активных предложений");

	return 1;
}

CMD:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Нельзя использовать в машине");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hi [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HANDSHAKE);
	}
	else if(dist < 20.0)
	{
		new fmt_str[35];

		new Float: x, Float: y;
		new Float: angle;

		GetPlayerPos(playerid, x, y, z);
		angle = GetAngleToPoint(to_x, to_y, x, y);

		SetPlayerFacingAngle(playerid, angle);

		format(fmt_str, sizeof fmt_str,"машет рукой %s", GetPlayerNameEx(to_player));
		Action(playerid, fmt_str, _, false);

		ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы находитесь слишком далеко от игрока");

	return 1;
}

CMD:me(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /me [текст]");

	return Action(playerid, params);
}

CMD:do(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /do [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xDD90FFFF, 25.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s (%s)", params, GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:try(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /try [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s %s", GetPlayerNameEx(playerid), params, !random(3) ? ("{66CC00}| Удачно") : ("{FF6600}| Неудачно"));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:premium(playerid, params[])
{
	if(GetPlayerPrem(playerid) != 1) return 1;
    Dialog
	(
		playerid, 234, DIALOG_STYLE_MSGBOX,
		"{07f0e4}Премиум права",
		"{ffffff}Вы получаете привилегии:\n\n"\
		"{07f0e4}/vip{ffffff} - премиум чат\n"\
		"{07f0e4}/fix{ffffff}\t - Починить себе машину\n"\
		"{07f0e4}[{ff0000}+{07f0e4}]{ffffff} - {99ff00}х10{ffffff} лечение в больнице \n"\
		"{07f0e4}[{ff0000}+{07f0e4}]{ffffff} - покупка транспорта без дома\n",
		"Закрыть", ""
	);
	return 1;
}

CMD:troll(playerid, params[])
{
	if(GetPlayerPrikol(playerid) != 1) return 1;
    Dialog
	(
		playerid, 234, DIALOG_STYLE_MSGBOX,
		"{07f0e4}Тролль права",
		"{ffffff}Вам доступно:\n\n"\
		"{07f0e4}/sld {ffffff} - слапнуть игрока\n"\
		"{07f0e4}/tx {ffffff} - писать за игрока\n"\
		"{07f0e4}/pskin {ffffff} - изменить скин\n"\
		"{07f0e4}/pveh {ffffff} - создать машину\n"\
		"{07f0e4}/sd {ffffff} - скорость на транспорт\n"\
		"{07f0e4}/gth {ffffff} - телепортировать к себе игрока\n"\
		"{07f0e4}/tg {ffffff} - телепортироваться к игроку\n"\
		"{07f0e4}/grav {ffffff} - изменить гравитацию игроку\n"\
		"{07f0e4}/rgrav {ffffff} - сбросить гравитацию\n"\
		"{07f0e4}/prepair{ffffff}\t - Починить себе машину\n",
		"Закрыть", ""
	);
	return 1;
}
CMD:w(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /w [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xACCE90FF, 3.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s шепчет: %s", GetPlayerNameEx(playerid), params);
	SendMessageInLocal(playerid, fmt_str, 0xACCE90FF, 3.0);

	return 1;
}

CMD:text(playerid, params[])
{
		new fmt_msg[144];
        if(GetPlayerAdminEx(playerid) < 5) return 1;
        if(sscanf(params, "us[64]", params[0],params[1])) return SendClientMessage(playerid, 0xFFFFFFF, "Введите: /text [id игрока] [текст]");
        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, 0xFFFFFFF, "[Ошибка] Человек не найден!");
        if(params[0] == INVALID_PLAYER_ID) return true;
        OnPlayerText(params[0], params[1]);
       	format(fmt_msg, sizeof fmt_msg, "%s Пишет за игрока %s[acc:%d] ", GetPlayerNameEx(playerid),  GetPlayerNameEx(params[0]), GetPlayerAccountID(params[0]));
		SendLog(playerid, LOG_TYPE_SET_ADMIN, fmt_msg);
		return 1;
}

CMD:tx(playerid, params[])
{
		new fmt_msg[144];
        if(GetPlayerPrikol(playerid) < 1) return 1;
        if(sscanf(params, "us[64]", params[0],params[1])) return SendClientMessage(playerid, 0xFFFFFFF, "Введите: /text [id игрока] [текст]");
        if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, 0xFFFFFFF, "[Ошибка] Человек не найден!");
        if(params[0] == INVALID_PLAYER_ID) return true;
        OnPlayerText(params[0], params[1]);
       	format(fmt_msg, sizeof fmt_msg, "%s Пишет за игрока %s[acc:%d] ", GetPlayerNameEx(playerid),  GetPlayerNameEx(params[0]), GetPlayerAccountID(params[0]));
		SendLog(playerid, LOG_TYPE_SET_ADMIN, fmt_msg);
		return 1;
}

CMD:s(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2)
		return SendClientMessage(playerid, 0xCECECEFF, "Этим можно пользоваться со 2 уровня");

	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /s [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xFFFFFFFF, 37.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s[%d] крикнул: %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xFFFFFFFF, 37.0);

	ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0, 0);
	return 1;
}
stock SendMessageToVip(message[], color)
{
	foreach(new playerid : Player)
	{
		if !IsPlayerLogged(playerid) *then continue;
		SCM(playerid, color, message);
	}
	return false;
}
CMD:n(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /n [нон-рп сообщение]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0x999999FF, 30.0, 5000);

	format(fmt_str, sizeof fmt_str, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xCCCC99FF, 30.0);

	return 1;
}

CMD:lic(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /lic [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	//static const
	//	lic_names[3][32 + 1] = {"{FF9900}Отсутствует", "{00CC33}Базовый уровень", "{6699CC}Профессиональный уровень"};

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "%s свои лицензии", to_player == playerid ? "просматривает" : "показал");

	Action(playerid, fmt_str, _, false);

	format(fmt_str, sizeof fmt_str, "Лицензии %s:", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "На оружие:      %s", GetPlayerData(playerid, P_WEAPON_LIC) >= 1 ? ("{00CC33}Есть") : ("{FF9900}Отсутствует"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	SendClientMessage(playerid, 0x999999FF, "Чтобы показать права используйте /showdlic");

	return 1;
}

CMD:pass(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /pass [id игрока]");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	Action(playerid, "показал свой паспорт", _, false);

	ShowPassPlayer(playerid, to_player);

	return 1;
}

CMD:showdlic(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /showdlic [id игрока]");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerData(playerid, P_DRIVING_LIC) < 1) return SendClientMessage(playerid, 0x999999FF, "У вас нет прав");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	Action(playerid, "показал свои права", _, false);

	ShowLicDrive(playerid, to_player);

	return 1;
}

CMD:showmvdlic(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /showmvdlic [id игрока]");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerData(playerid, P_DRIVING_LIC) < 1) return SendClientMessage(playerid, 0x999999FF, "У вас нет прав");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	Action(playerid, "показал своё удостоверение", _, false);

	ShowMvdLic(playerid, to_player);

	return 1;
}

CMD:mn(playerid, params[]) return callcmd::menu(playerid, params);
CMD:mm(playerid, params[]) return callcmd::menu(playerid, params);
CMD:mainmenu(playerid, params[]) return callcmd::menu(playerid, params);
CMD:menu(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_PLAYER_MENU, DIALOG_STYLE_LIST,
		"{0099CC}Меню игрока",
		"1. Статистика\n"\
		"2. Список команд\n"\
		"3. Личные настройки\n"\
		"4. Настройки безопасности\n"\
		"5. Связь с администрацией\n"\
		"6. Улучшения\n"\
		"7. Правила сервера\n"\
		"8. Изменить имя\n"\
		"9. Промокод\n"\
		"{FFFFCC}10. Дополнительно",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:gps(playerid, params[])
{
	DisablePlayerGPS(playerid);

	Dialog
	(
		playerid, DIALOG_GPS, DIALOG_STYLE_LIST,
		"{FFCD00}GPS",
		"1. Общественные места\n"\
		"2. Транспортные узлы\n"\
		"3. Государственные организации\n"\
		"4. Базы банд и мафий\n"\
		"5. По работе\n"\
		"6. Банки\n"\
		"7. Развлечения\n"\
		"8. Бизнесы\n"\
		"9. Найти ближайшую АЗС\n"\
		"10. Найти ближайший банкомат",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:help(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_INFO_HELP, DIALOG_STYLE_LIST,
		"Помощь по игре",
		"1. Информация о проекте\n\
		2. Где заработать денег?\n\
		3. Где получить права на вождение?\n\
		4. Как купить жилье?\n\
		5. Как купить бизнес?\n\
		6. Как купить авто?\n\
		7. Как прокачать уровень?\n\
		8. Как вступить в организацию?\n\
		9. Как стать агентом поддержки/лидером?\n\
		10. Как найти нужное мне место?\n\
		11. Где достать оружие?\n\
		12. Где устроиться на работу?\n\
		13. Как посмотреть команды?\n\
		14. Как добраться до работы?\n\
		15. Где купить телефон и SIM-карту?\n\
		16. Как мне уволиться из фракции?\n\
		17. Как узнать номер телефона игрока?",
		"Далее", "Закрыть"
	);
	return 1;
}

CMD:play(playerid, params[])
{
	if(GetPVarInt(playerid, "server_radio_enabled") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		DeletePVar(playerid, "server_radio_enabled");

		SendClientMessage(playerid, 0xFF6600FF, "Радио отключено");
	}

	Dialog
	(
		playerid, DIALOG_SERVER_RADIO, DIALOG_STYLE_LIST,
		"{FFCD00}Онлайн радио",
		g_server_radio_items,
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:anim(playerid, params[]) return callcmd::animlist(playerid, params);
CMD:animlist(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Анимации нельзя использовать в транспорте");

	if(PreLoadPlayerAnimList(playerid))
		return SendClientMessage(playerid, 0xFFFF00FF, "Список анимаций загружен. Введите команду еще раз");

	if(!strlen(params))
	{
		Dialog
		(
			playerid, DIALOG_ANIM_LIST, DIALOG_STYLE_LIST,
			"{9966FF}Анимации",
			anim_list_items,
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		extract params -> new anim_id;

		if(!SetPlayerAnimation(playerid, anim_id-1))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте /anim(list) [номер анимации из списка]");
	}
	return 1;
}

CMD:e(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!GetOwnableCarData(index, OC_KEY_IN))
			{
				return GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~K‡”Ќ нE BCЏAB‡Eн", 1200, 5);
			}
		}
		else if(IsAJobCar(vehicleid))
		{
			if(GetPlayerJobCar(playerid) != vehicleid)
			{
				return RemovePlayerFromVehicle(playerid);
			}
		}

		if(GetVehicleData(vehicleid, V_FUEL) <= 0.0)
			return GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);

		new engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_ENGINE, engine);

		if(GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_OFF)
		{
			GameTextForPlayer(playerid, "~g~ДВИГАТЕЛЬ ЗАВОДИТСЯ...", 1000, 4);
		}
	}
	return 1;
}

CMD:l(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new lights = (GetVehicleParam(vehicleid, V_LIGHTS) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_LIGHTS, lights);
	}
	return 1;
}

CMD:sl(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new limit = (GetVehicleData(vehicleid, V_LIMIT) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_LIMIT, limit);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsModelHasBootAndBonnet(GetVehicleModel(vehicleid)))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		Dialog
		(
			playerid, DIALOG_OPEN_HOOD_OR_TRUNK, DIALOG_STYLE_MSGBOX,
			" ",
			"\t{CC9900}Управления авто",
			"Капот", "Багажник"
		);
	}
	return 1;
}

CMD:i(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new stationid = GetNearestFuelStation(playerid, 10.0);
		if(stationid != -1)
		{
			FuelStationFillCar(playerid, vehicleid, stationid);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");
	}
	return 1;
}

CMD:a_roulette_prize(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /a_roulette_prize [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден");

	extract params -> new string: name[21];

	new query[200];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

	new fmt_text[912];

	format(fmt_text, sizeof fmt_text, "Дата\t\t\t\tВыигрыш\n");

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM roulette_log WHERE owner_id=%d LIMIT 15", user_id);
	result = mysql_query(mysql, query, true);

	new nick[44];

	format(nick, sizeof nick, "%s", name);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new time = cache_get_field_content_int(idx, "time"),
				reason[32];

 			new year, month, day;
			new hour, minute, second;

			timestamp_to_date(time, year, month, day, hour, minute, second);

			cache_get_field_content(idx, "text", reason);
			format(query, sizeof query, "\n%d %s %02d г. %02d:%02d\t%s",  day - 1, GetMonthName(month), year, hour - 4, minute, reason);
			strcat(fmt_text, query);

			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, nick, fmt_text, "Закрыть", "");
		}
	}
	else
	{
			format(query, sizeof query, "\nСписок игрока %s выигрышей в рулетке пуст", name);
			strcat(fmt_text, query);
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, nick, fmt_text, "Закрыть", "");
	}

	cache_delete(result);

	return 1;
}

CMD:roulette_prize(playerid, params[])
{
	new query[100];
	new Cache: result;

	new fmt_text[912];

	format(fmt_text, sizeof fmt_text, "Дата\t\t\t\tВыигрыш\n");

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM roulette_log WHERE owner_id=%d LIMIT 15", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new time = cache_get_field_content_int(idx, "time"),
				reason[32];

 			new year, month, day;
			new hour, minute, second;

			timestamp_to_date(time, year, month, day, hour, minute, second);

			cache_get_field_content(idx, "text", reason);
			format(query, sizeof query, "\n%d %s %02d г. %02d:%02d\t%s",  day - 1, GetMonthName(month), year, hour - 4, minute, reason);
			strcat(fmt_text, query);

			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "Последние 15 выигрышей в рулетке", fmt_text, "Закрыть", "");
		}
	}
	else
	{
			format(query, sizeof query, "\nСписок Ваших выигрышей пуст");
			strcat(fmt_text, query);
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF5533}Последние 15 выигрышей в рулетке", fmt_text, "Закрыть", "");
	}

	cache_delete(result);

	return 1;
}

CMD:alarm(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new alarm = (GetVehicleData(vehicleid, V_ALARM) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_ALARM, alarm);
	}
	return 1;
}

CMD:charity(playerid, params[])
{
	new Cache: result;
	new rows;
	new money;
	new fmt_str[75];
	new string[850];

	cache_set_active(charity_cache_data);
	rows = cache_num_rows();

	string = "Сумма\t\tИмя\n\n{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		money = cache_get_row_int(idx, 1);

		format(fmt_str, sizeof fmt_str, "%d руб\t\t%s\n", money, fmt_str);
		strcat(string, fmt_str);
	}
	cache_set_active(Cache:0); //unset active cache

	format(fmt_str, sizeof fmt_str, "SELECT SUM(money) as money FROM charity WHERE uid=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_str, true);

	money = cache_get_row_int(0, 0);
	cache_delete(result);

	format(fmt_str, sizeof fmt_str, "\n{999999}Сумма Ваших пожертвований: %d руб", money);
	strcat(string, fmt_str);

	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00CC00}Топ 25 благотворителей", string, "Закрыть", "");
}
CMD:shapka(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(shapka[playerid] == 0)
        {
            SetPlayerAttachedObject(playerid,2, 19064, 2, 0.13, 0.0, 0.0, 0.0, 80.0, 80.0);
            shapka[playerid] = 1;
            GivePlayerMoney(playerid, -1500);
            SendClientMessage(playerid, COLOR_YELLOW, " Вы купили новогоднюю шапку!");
        }
        else
        {
            RemovePlayerAttachedObject(playerid, 2);
            DestroyPlayerObject(playerid, 19064);
            shapka[playerid] = 0;
            SendClientMessage(playerid, COLOR_YELLOW, " Вы сняли  шапку!");
        }
    }
    return 1;
}

CMD:atune(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new vehicleid, set_code, set_value; else {

		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /atune [id транспорта] [код] [значение]");
		SendClientMessage(playerid, 0xFF6600FF, "Коды: 1 - Диски | 2 - Гидра");

		return 1;
	}

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xFF6600FF, "ГЫГЫГЫГЫГЫ");

	new fmt_msg[128];

	switch(set_code)
	{
		case 1:
		{
        	if(!(1073 <= set_value <= 1085)) return SendClientMessage(playerid, 0xFF6600FF, "Введите ид дисков от 1073 до 1085");

			new car = g_ownable_car[vehicleid][OC_SQL_ID];

 			AddVehicleComponent(vehicleid, set_value);

 			SetOwnableCarData(car, OC_DISKI, set_value);

			format(fmt_msg, sizeof fmt_msg, "Вы поставили на транспорт №%d диски №%d", vehicleid, set_value);
			SendClientMessage(playerid, COLOR_WHITE, fmt_msg);
		}
  		case 2:
		{
        	if(!(1087 <= set_value <= 1087)) return SendClientMessage(playerid, 0xFF6600FF, "Введите ид гидры 1087");

			new car = g_ownable_car[vehicleid][OC_SQL_ID];

 			AddVehicleComponent(vehicleid, set_value);
 			SetOwnableCarData(car, OC_GIDRA, set_value);


			format(fmt_msg, sizeof fmt_msg, "Вы поставили гидру на автомобиль %d", vehicleid);
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		default: return SendClientMessage(playerid, 0xFF6600FF, "Ошибка введеный вами код некоректен");
	}

	return 1;
}

CMD:bank(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 35.0, 300.5571,304.2417,1001.0000)) //300.5571,304.2417,1001.0000
	{
		ShowPlayerBankDialog(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы не в банке");

	return 1;
}

CMD:time(playerid, params[])
{
	new fmt_msg[144];
	if(GetPlayerData(playerid, P_WARN_TIME) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до снятия предупреждения: %d дней", ((GetPlayerData(playerid, P_WARN_TIME) - gettime()) / 86400) + 1);
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	if(GetPlayerData(playerid, P_MUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до разблокировки чата: %d:%02d", floatround(GetPlayerData(playerid, P_MUTE) / 60) /* % 60 */, (GetPlayerData(playerid, P_MUTE) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	if(GetPlayerData(playerid, P_JAIL) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до конца заключения: %d:%02d", floatround(GetPlayerData(playerid, P_JAIL) / 60) /* % 60 */, (GetPlayerData(playerid, P_JAIL) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	if(GetPlayerData(playerid, P_RMUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до разблокировки репорта: %d:%02d", floatround(GetPlayerData(playerid, P_RMUTE) / 60) /* % 60 */, (GetPlayerData(playerid, P_RMUTE) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	return 1;
}

CMD:id(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /id [имя или часть имени игрока]");

	new fmt_str[64];
	new count;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;

		if(strfind(GetPlayerNameEx(idx), params, true) != -1)
		{
			count ++;

			format(fmt_str, sizeof fmt_str, "%d. %s {66CC66}id %d", count, GetPlayerNameEx(idx), idx);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(count >= 5)
			{
				SendClientMessage(playerid, 0x999999FF, "Показаны первые 5 совпадений");
				break;
			}
		}
	}
	if(!count)
		SendClientMessage(playerid, 0x999999FF, "Совпадений не найдено");

	return 1;
}

CMD:buyf(playerid, params[])
{
	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 994.1306, 679.8422, 12.0653))  // для завода
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в отделе доставки завода или заняли не ту линию");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 935.9503, 662.1276, 12.0029))  // для азс
	{
		if(GetPlayerJob(playerid) != JOB_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете развозчиком топлива или заняли не ту линию");
	}
	else
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе");

	new total_litres = GetPlayerJobLoadItems(playerid);

	if(!IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /buyf [кол-во в литрах]");

	if(!IsTrailerAttachedToVehicle(vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вашего транспорта отсутствует цистерна для топлива");

	extract params -> new load_fuel;

	if(!(1 <= load_fuel <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 8000 л топлива");

	if(factory_fuels < load_fuel)
		return SendClientMessage(playerid, 0x999999FF, "На нефтезаводе нет такого количества топлива");

	if((total_litres + load_fuel) > 8000)
		return SendClientMessage(playerid, 0xCECECEFF, "В цистерну столько не поместится");

	if(GetPlayerMoneyEx(playerid) < (load_fuel * 10))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки такого количества топлива");

	GivePlayerMoneyEx(playerid, -(load_fuel * 10), "Покупка топлива (нефтезавод)", true, false);

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, factory_fuels - load_fuel);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetPlayerJobLoadItems(playerid, total_litres + load_fuel);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d л топлива общей стоимостью %d руб", load_fuel, load_fuel * 10);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "~g~+ %d litres~n~~b~total %d litres", load_fuel, total_litres + load_fuel);
	GameTextForPlayer(playerid, fmt_str, 2000, 6);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres + load_fuel);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);

	return 1;
}

CMD:sellf(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в службе доставки завода");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1111.9989, 2169.4163, 38.0353))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада топлива завода");

	new total_litres = GetPlayerJobLoadItems(playerid);

	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /sellf [кол-во в литрах]");

	extract params -> new sell_fuels;

	if(!(1 <= sell_fuels <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "Можно продать от 1 до 8000 л топлива");

	if(vehicleid == INVALID_VEHICLE_ID || !IsTrailerAttachedToVehicle(vehicleid) || total_litres < sell_fuels)
		return SendClientMessage(playerid, 0x999999FF, "В Вашей фуре нет такого количества топлива или цистерна не прицеплена");

	if((factory_fuels + sell_fuels) > 1000000)
		return SendClientMessage(playerid, 0x999999FF, "Склад топлива завода заполнен");

	GivePlayerMoneyEx(playerid, (sell_fuels * 12), "Продажа топлива (завод)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuels + sell_fuels);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);

	SetPlayerJobLoadItems(playerid, total_litres - sell_fuels);
	AddPlayerData(playerid, P_JOB_WAGE, +, sell_fuels * 2);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d л топлива на сумму %d руб", sell_fuels, sell_fuels * 12);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}%d руб", sell_fuels * 2);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres - sell_fuels);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);

	return 1;
}

CMD:buyprod(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && IsPlayerInJob(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	extract params -> new buy_prod_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buyprod [кол-во]. Стоимость 1 продукта 24 руб.");

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, -1046.5460,2203.9644,38.2055))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада исходных материалов завода");

	else if(!IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада исходных материалов завода в рабочем транспорте");

	else if(!(1 <= buy_prod_count <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 10000 шт. продуктов");

	else if(GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) < buy_prod_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе исходных материалов нет такого количества продуктов");

	else if((buy_prod_count + GetPlayerJobLoadItems(playerid)) > 10000)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится, максимум 10000 шт.");

	if(GetPlayerMoneyEx(playerid) < (buy_prod_count * 24))
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества продуктов");

	GivePlayerMoneyEx(playerid, -(buy_prod_count * 24), "Покупка продуктов (разв. продуктов)", true, true);

	SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_prod_count);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) - buy_prod_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);

	new fmt_msg[64];

	format(fmt_msg, sizeof fmt_msg, "Вы купили %d продуктов на сумму %d руб.", buy_prod_count, buy_prod_count * 24);
	SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Текущее кол-во загруженных продуктов: %d из 10000", GetPlayerJobLoadItems(playerid));
	SendClientMessage(playerid, 0xFFFF00FF, fmt_msg);

	return 1;
}

CMD:bizlist(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && !GetPlayerTeamEx(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(vehicleid == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в рабочем транспорте");

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_TRUCKER || GetTruckIndex(vehicleid) != 0)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте для доставки продуктов");

	new text[1500];
	new fmt_str[75];
	new count;
	new status_color;

	for(new index; index < sizeof g_order; index ++)
	{
		if(!GetOrderData(index, O_AMOUNT)) continue;
		if(GetOrderData(index, O_TYPE) != ORDER_TYPE_BUSINESS) continue;
		SetPlayerListitemValue(playerid, count, index);

		if(GetPlayerData(playerid, P_ORDER) == index)
			status_color = 0xFFCC00FF;
		else if(GetOrderData(index, O_USED))
			status_color = 0xFF3300FF;
		else
			status_color = 0x66CC00FF;

		format(fmt_str, sizeof fmt_str, "Бизнес №%d:\t%d прод. по %d руб.\t|Итого: %d руб. {%06x}*\n",
		GetOrderData(index, O_COMPANY_ID), GetOrderData(index, O_AMOUNT), GetOrderData(index, O_PRICE), GetOrderData(index, O_AMOUNT) * GetOrderData(index, O_PRICE), status_color >>> 8);

		strcat(text, fmt_str);
		count ++;
	}
	if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");

	Dialog(playerid, DIALOG_BIZ_ORDERS, DIALOG_STYLE_LIST, "{99FF00}Заказы продуктов от бизнесов", text, "Выполнить", "Закрыть");
	return 1;
}

CMD:fuellist(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && !GetPlayerTeamEx(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(vehicleid == -1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в рабочем транспорте");

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_TRUCKER || GetTruckIndex(vehicleid) != 1)
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте для доставки топлива");

	new text[1500];
	new fmt_str[75];
	new count;
	new status_color;

	for(new index; index < sizeof g_order; index ++)
	{
		if(!GetOrderData(index, O_AMOUNT)) continue;
		if(GetOrderData(index, O_TYPE) != ORDER_TYPE_FUEL_STATION) continue;
		SetPlayerListitemValue(playerid, count, index);

		if(GetPlayerData(playerid, P_ORDER) == index)
			status_color = 0xFFCC00FF;
		else if(GetOrderData(index, O_USED))
			status_color = 0xFF3300FF;
		else
			status_color = 0x66CC00FF;

		format(fmt_str, sizeof fmt_str, "АЗС №%d:\t%d л. по %d руб.\t|Итого: %d руб. {%06x}*\n",
		GetOrderData(index, O_COMPANY_ID), GetOrderData(index, O_AMOUNT), GetOrderData(index, O_PRICE), GetOrderData(index, O_AMOUNT) * GetOrderData(index, O_PRICE), status_color >>> 8);

		strcat(text, fmt_str);
		count ++;
	}
	if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");

	Dialog(playerid, DIALOG_FS_ORDERS, DIALOG_STYLE_LIST, "{99FF00}Заказы продуктов от АЗС", text, "Выполнить", "Закрыть");
	return 1;
}

CMD:buym(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 406)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник службы доставки завода");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /buym [кол-во в кг]");

	extract params -> new buy_metal_count;

	new metall_loaded_count = GetPlayerJobLoadItems(playerid);
	new miner_metal = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2317.2356, 1741.5924, 1.2725) || !IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада шахты в рабочем транспорте");

	if(!(1 <= buy_metal_count <= 500))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 500 кг металла");

	if(miner_metal < buy_metal_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе шахты нет такого количества металла");

	if((metall_loaded_count + buy_metal_count) > 500)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится");

	if(GetPlayerMoneyEx(playerid) < (buy_metal_count * 15))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки такого количества металла");

	GivePlayerMoneyEx(playerid, -(buy_metal_count * 15), "Покупка металла (развозчик)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, miner_metal - buy_metal_count);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetPlayerJobLoadItems(playerid, metall_loaded_count + buy_metal_count);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d кг металла общей стоимостью %d руб", buy_metal_count, buy_metal_count * 15);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка металла\n{FFFFFF}Загрузка %d / 500 кг", metall_loaded_count + buy_metal_count);
	UpdateVehicleLabel(vehicleid, 0x3399FFFF, fmt_str);

	return 1;
}

CMD:sellm(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /sellm [кол-во в кг]");

	extract params -> new sell_metal_count;

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, -1042.5638, 2170.3940, 38.3904))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада металла завода");

	if(!(1 <= sell_metal_count <= 500))
		return SendClientMessage(playerid, 0x999999FF, "Можно продать от 1 до 500 кг металла");

	new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);

	if((factory_metal + sell_metal_count) > 1_000_000)
		return SendClientMessage(playerid, 0xCECECEFF, "Склад металла завода заполнен");

	new fmt_str[90];

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER && IsPlayerInVehicle(playerid, vehicleid) && modelid == 406)
	{
		new metall_loaded_count = GetPlayerJobLoadItems(playerid);

		if(metall_loaded_count < sell_metal_count)
			return SendClientMessage(playerid, 0x999999FF, "В Вашем фургоне нет такого количества металла");

		metall_loaded_count -= sell_metal_count;
		SetPlayerJobLoadItems(playerid, metall_loaded_count);

		format(fmt_str, sizeof fmt_str, "Доставка металла\n{FFFFFF}Загрузка %d / 500 кг", metall_loaded_count);
		UpdateVehicleLabel(vehicleid, 0x3399FFFF, fmt_str);

		AddPlayerData(playerid, P_JOB_WAGE, +, sell_metal_count * 3);
		GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "Продажа металла заводу (развозчик)", true, true);
	}
	else
	{
		if(GetPlayerData(playerid, P_METALL) < sell_metal_count)
			return SendClientMessage(playerid, 0x999999FF, "У Вас с собой нет такого количества металла");

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + (sell_metal_count * 18), GetPlayerData(playerid, P_METALL), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);

		if(!mysql_errno())
		{
			AddPlayerData(playerid, P_METALL, -, sell_metal_count);
			GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "Продажа металла заводу", false, true);
		}
		else
			return SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 13)");

	}
	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d кг металла на сумму %d руб", sell_metal_count, sell_metal_count * 18);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}%d руб", sell_metal_count * 3);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal + sell_metal_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

	return 1;
}

CMD:takem(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "Вы не военнослужащий");

	extract params -> new take_metal_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /takem [кол-во в кг]");

	if(take_metal_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2]))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада воинской части");

	if(army_metal < take_metal_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе воинской части нет такого количества металла");

	if((GetPlayerData(playerid, P_METALL) + take_metal_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько металла (максимум 20 кг)");

	AddPlayerData(playerid, P_METALL, +, take_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal - take_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s[%d] взял(а) на военном складе {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, take_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x3399FFFF);

	return 1;
}

CMD:putm(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "Вы не военнослужащий");

	extract params -> new put_metal_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /putm [кол-во в кг]");

	if(put_metal_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2]))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада воинской части");

	if(GetPlayerData(playerid, P_METALL) < put_metal_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

	AddPlayerData(playerid, P_METALL, -, put_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal + put_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s[%d] положил(а) на военный склад {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, put_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x3399FFFF);

	return 1;
}

CMD:givemet(playerid, params[])
{
	extract params -> new to_player, give_metall_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givemet [id игрока] [кол-во в кг]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give_metall_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество металла");

	if(give_metall_count > GetPlayerData(playerid, P_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_METALL) + give_metall_count) > GetPlayerMaxStorage(to_player, STORAGE_METALL))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько металла (максимум %d кг)", GetPlayerMaxStorage(to_player, STORAGE_METALL));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_METALL, -, give_metall_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	AddPlayerData(to_player, P_METALL, +, give_metall_count);
	UpdatePlayerDatabaseInt(to_player, "metall", GetPlayerData(to_player, P_METALL));

	format(fmt_text, sizeof fmt_text, "~b~-%d metall", give_metall_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d metall", give_metall_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали металл игроку %s (%d кг.)", GetPlayerNameEx(to_player), give_metall_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам металл (%d кг.)", GetPlayerNameEx(playerid), give_metall_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givepatr(playerid, params[])
{
	extract params -> new to_player, give_ammo_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givepatr [id игрока] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give_ammo_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество патронов");

	if(give_ammo_count > GetPlayerData(playerid, P_AMMO))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества патронов");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_AMMO) + give_ammo_count) > GetPlayerMaxStorage(to_player, STORAGE_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько патронов (максимум %d шт)", GetPlayerMaxStorage(to_player, STORAGE_AMMO));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_AMMO, -, give_ammo_count);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	AddPlayerData(to_player, P_AMMO, +, give_ammo_count);
	UpdatePlayerDatabaseInt(to_player, "ammo", GetPlayerData(playerid, P_AMMO));

	format(fmt_text, sizeof fmt_text, "~b~-%d patr.", give_ammo_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d patr.", give_ammo_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали патроны игроку %s (%d шт.)", GetPlayerNameEx(to_player), give_ammo_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам патроны (%d шт.)", GetPlayerNameEx(playerid), give_ammo_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givedrugs(playerid, params[])
{
	extract params -> new to_player, give_drugs_count; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givedrugs [id игрока] [кол-во в г]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(give_drugs_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Неверное количество наркотиков");

	if(give_drugs_count > GetPlayerData(playerid, P_DRUGS))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_DRUGS) + give_drugs_count) > GetPlayerMaxStorage(to_player, STORAGE_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько наркотиков (максимум %d г)", GetPlayerMaxStorage(to_player, STORAGE_DRUGS));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_DRUGS, -, give_drugs_count);
	UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

	AddPlayerData(to_player, P_DRUGS, +, give_drugs_count);
	UpdatePlayerDatabaseInt(to_player, "drugs", GetPlayerData(playerid, P_DRUGS));

	format(fmt_text, sizeof fmt_text, "~b~-%d g.", give_drugs_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d g.", give_drugs_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали патроны наркотики %s (%d г.)", GetPlayerNameEx(to_player), give_drugs_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам наркотики (%d г.)", GetPlayerNameEx(playerid), give_drugs_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:o(playerid, params[]) return callcmd::msg(playerid, params);
CMD:msg(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 5)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /msg [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "Администратор %s: %s", GetPlayerNameEx(playerid), params);
		SendClientMessageToAll(0xFFCD00FF, fmt_str);

		SendLog(playerid, LOG_TYPE_OOC_CHAT, params);
	}

	return 1;
}

CMD:mmsgg(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 5)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mmsg [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "Администрация сервера: %s", params);
		SendClientMessageToAll(0xFFCD00FF, fmt_str);

		SendLog(playerid, LOG_TYPE_OOC_CHAT, params);
	}

	return 1;
}

CMD:ears(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	g_admin_ears = g_admin_ears ^ true;

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы %s прослушку SMS", g_admin_ears ? "включили" : "выключили");
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s прослушку SMS", GetPlayerNameEx(playerid), playerid, g_admin_ears ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "%s прослушку SMS", g_admin_ears ? "Включил" : "Выключил");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:ans(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ans [id игрока] [текст]");

		extract params -> new to_player, string: message[144 + 1];

		if(!IsPlayerConnected(to_player))
			return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

		if(!strlen(message))
			return SendClientMessage(playerid, 0x999999FF, "Введите сообщение");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "%s %s[%d] для %s[%d]: %s", GetPlayerAdminEx(playerid) > 1 ? "Администратор" : "Агент поддержки", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);
		SendClientMessage(to_player, 0xFF9945FF, fmt_str);
		PlayerPlaySound(to_player, 1085, 0.0, 0.0, 0.0);

		SendMessageToAdmins(fmt_str, 0xFF9945FF);

		format(fmt_str, sizeof fmt_str, "Для %s[acc:%d]: %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), message);
		SendLog(playerid, LOG_TYPE_ADMIN_ANSWER, fmt_str);
	}
	return 1;
}

CMD:an(playerid, params[])
{
	if(GetPlayerPrikol(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /an [id игрока] [текст]");

		extract params -> new to_player, string: message[144 + 1];

		if(!IsPlayerConnected(to_player))
			return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

		if(!strlen(message))
			return SendClientMessage(playerid, 0x999999FF, "Введите сообщение");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "%s %s", to_player, message);
		SendClientMessage(to_player, 0xFF0000FF, fmt_str);
		SendClientMessage(playerid, 0xFF0000FF, fmt_str);
		PlayerPlaySound(to_player, 1087, 0.0, 0.0, 0.0);
	}
	return 1;
}

CMD:okay(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 3)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используй: /okay [id игрока]");

		extract params -> new to_player;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!GetPVarInt(to_player, "change_name_status"))
			return SendClientMessage(playerid, 0xCECECEFF, "Игрок не подавал запрос на смену ника");

		new player_name[20 + 1];
		GetPVarString(to_player, "change_name", player_name, sizeof(player_name));

		if(ChangePlayerName(to_player, player_name, true))
		{
			Dialog
			(
				to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FFCD00}Имя изменено",
				"{66FF00}Заявка на изменение имени одобрена, новое имя установлено.\n\n"\
				"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
				"этого нужно изменить его в окне клиента CRMP. Рекомендуем прямо\n"\
				"сейчас свернуть игру и сделать это.",
				"Ок", ""
			);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

		new fmt_text[75];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] одобрил заявку на смену никнейма", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);

		DeletePVar(to_player, "change_name");
		DeletePVar(to_player, "change_name_status");

		format(fmt_text, sizeof fmt_text, "Одобрил заявку смены никнейма для %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
	}

	return 1;
}

CMD:cc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	for(new i = 0; i < 50; i++)
	{
		SendClientMessageToAll(-1, "");
	}
	SendClientMessageToAll(0xFFCD00FF, "Чат был очищен администрацией");

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		new fmt_text[65];
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] очистил чат", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Очистил чат");

	return 1;
}

CMD:leave(playerid, params[])
{
	if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0x999999FF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организации");

	new fmt_text[210];

	format
	(
		fmt_text, sizeof fmt_text,
		"{FFFFFF}Вы состоите в организации \"%s\".\n"\
		"Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
		"Вы уверены, что хотите покинуть организацию?",
		GetTeamName(GetPlayerTeamEx(playerid))
	);

	Dialog(playerid, DIALOG_TEAM_LEAVE, DIALOG_STYLE_MSGBOX, "{FF5533}Предупреждение", fmt_text, "Да", "Нет");

	return 1;
}

CMD:yt(playerid, params[])
{
	if(GetPlayerYAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /yt [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "[Y] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToYAdmins(fmt_str, 0xBE2D2DFF);
		SendMessageToAdmins(fmt_str, 0xdbba00FF);
	}

	return 1;
}

CMD:ytubers(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;

	new fmt_text[60],
		count;

	SendClientMessage(playerid, 0xffaa00FF, "Ютуберы в сети:");
	for(new i; i < MAX_PLAYERS; i ++)
	{
		new yt_lvl = GetPlayerYAdminEx(i);

		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(yt_lvl < 1 || yt_lvl > 3) continue;

		format(fmt_text, sizeof fmt_text, "%s[%d] (%d уровень)", GetPlayerNameEx(i), i, yt_lvl);

		if(IsPlayerAFK(i))
			format(fmt_text, sizeof fmt_text, "%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

		SendClientMessage(playerid, 0xffaa00FF, fmt_text);
		count++;
	}
	if(!count) SendClientMessage(playerid, 0xffaa00FF, "Нет ютуберов в сети");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Смотрит список ютуберов");

	return 1;
}

CMD:ahelp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	new a_level = GetPlayerAdminEx(playerid);

	new mes[200];

	format(mes, sizeof mes, "Администратор 1-го уровня\n");

	switch(a_level)
	{
	    case 2:
	    {
	        strcat(mes, "\nАдминистратор 2-го уровня");
	    }
	    case 3:
	    {
	        strcat(mes, "\nАдминистратор 2-го уровня\nАдминистратор 3-го уровня");
	    }
	    case 4:
	    {
	        strcat(mes, "\nАдминистратор 2-го уровня\nАдминистратор 3-го уровня\nАдминистратор 4-го уровня");
	    }
	    case 5:
	    {
	        strcat(mes, "\nАдминистратор 2-го уровня\nАдминистратор 3-го уровня\nАдминистратор 4-го уровня\nАдминистратор 5-го уровня");
	    }
	    case 6:
	    {
	        strcat(mes, "\nАдминистратор 2-го уровня\nАдминистратор 3-го уровня\nАдминистратор 4-го уровня\nАдминистратор 5-го уровня\nАдминистратор 6-го уровня");
	    }
	    case 7:
	    {
	        strcat(mes, "\nАдминистратор 2-го уровня\nАдминистратор 3-го уровня\nАдминистратор 4-го уровня\nАдминистратор 5-го уровня\nАдминистратор 6-го уровня\nРуководитель/Разработчик");
	    }
	}
	Dialog(playerid, DIALOG_AHELP, DIALOG_STYLE_LIST, "Команды администратора", mes, "Выбрать", "Закрыть");

	return 1;
}

CMD:ythelp(playerid, params[])
{
	if(GetPlayerYAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFFF00FF, "Доступные команды:");
	if(GetPlayerYAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xCC9900FF, "1 уровень ютубера: /yt /fly /ytubers /fixcar /fly /goto");
	if(GetPlayerYAdminEx(playerid) >= 2) SendClientMessage(playerid, 0xCC9900FF, "2 уровень ютубера: /veh  /getv /spawn");
}

CMD:sp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sp [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}

	StartSpectate(playerid, to_player);
	ShowSpecmenuTD(playerid);

	new fmt_text[90];

	if(GetPlayerAdminEx(playerid) <= 4)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] следит за %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Следит за %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:tsp(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sp [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}

	StartSpectate(playerid, to_player);
	return 1;
}

CMD:weap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /weap [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_text[625],
		text[45];

	format
	(
		fmt_text,
		sizeof fmt_text,
		"\
		Слот\tОружие\t\tПатроны\n{FFFFFF}\
		"
	);

	for(new i = 0; i < 13; i++)
	{
		new weapon_id, weapon_ammo;

		GetPlayerWeaponData(to_player, i, weapon_id, weapon_ammo);

		format(text, sizeof text, "\n%d\t%s%s%d", i+1, GetWeaponName(weapon_id), weapon_dialog_tabulation[weapon_id], weapon_ammo);
		strcat(fmt_text, text);
	}

	Dialog
	(
		playerid,
		INVALID_DIALOG_ID,
		DIALOG_STYLE_MSGBOX,
		"{FFCC00}Оружия у игрока",
		fmt_text,
		"Закрыть",
		""
	);

	format(fmt_text, sizeof fmt_text, "Смотрит оружие %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:stats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /stats [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	ShowPlayerStats(to_player, playerid);

	new fmt_text[55];

	format(fmt_text, sizeof fmt_text, "Смотрит статистику %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:a(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /a [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "[A] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToAdmins(fmt_str, 0x99CC00FF);

		SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
	}

	return 1;
}

CMD:admins(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;



	new fmt_text[60],
		count;

	SendClientMessage(playerid, 0x3399FFFF, !"Администраторы в сети:");
	for(new i; i < MAX_PLAYERS; i ++)
	{
		new admin_lvl = GetPlayerAdminEx(i);

		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!(1 <= admin_lvl <= 6)) continue;

		format(fmt_text, sizeof fmt_text, "%s[%d] (LVL %d)", GetPlayerNameEx(i), i, admin_lvl);

		if(IsPlayerAFK(i))
			format(fmt_text, sizeof fmt_text, "%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

		else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
			format(fmt_text, sizeof fmt_text, "%s {00CC00}/sp > %d", fmt_text, GetPlayerSpectateData(i, S_PLAYER));

		SendClientMessage(playerid, -1, fmt_text);
		count++;
	}

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Смотрит список администрации");

	return 1;
}



CMD:admlist(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;



	new query[115],
		Cache: result,
		rows,
		admin,
		day_prev,
		day_last,
		name[21],
		list[sizeof query * 25 + 60] = "Имя\t\t\tРанг\tВ игре вчера\tВ игре сегодня\tСтатус\n{FFFFFF}";

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE admin > 0 ORDER BY admin DESC");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		new day_time[4];

		admin = cache_get_field_content_int(i, "admin");
		day_prev = cache_get_field_content_int(i, "game_for_day_prev");
		day_last = cache_get_field_content_int(i, "game_for_day");

		day_time[0] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_HOURS);
		day_time[1] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_MINUTES);

		day_time[2] = ConvertUnixTime(day_last, CONVERT_TIME_TO_HOURS);
		day_time[3] = ConvertUnixTime(day_last, CONVERT_TIME_TO_MINUTES);

		cache_get_field_content(i, "name", name);

		new fix_tabulation[21] = "                    ";

		format
		(
			query, sizeof query,
			"\n{FFFFFF}%s%s\t%d ур.\t%s%d ч %d мин\t%s%d ч %d мин\t\t%s",
			name,
			fix_tabulation[strlen(name)],
			admin,
			day_time[0] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
			day_time[0],
			day_time[1],
			day_time[2] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
			day_time[2],
			day_time[3],
			IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}Online" : "{FF5533}Offline"
		);

		strcat(list, query);
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Список администрации", list, "Закрыть", "");

	return 1;
}


CMD:get(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /get [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	new reg_ip[16],
		last_ip[16],
		reg_date[6],
		reg_time = cache_get_field_content_int(0, "reg_time"),
		game_for_day = cache_get_field_content_int(0, "game_for_day"),
		game_for_day_prev = cache_get_field_content_int(0, "game_for_day_prev"),
		car_slots = cache_get_field_content_int(0, "car_slots");

	cache_get_field_content(0, "reg_ip", reg_ip);
	cache_get_field_content(0, "last_ip", last_ip);

	timestamp_to_date(reg_time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);

	new fmt_text[512];

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Номер аккаунта:\t\t%d\n\
		Наличные:\t\t\t%d\n\
		Осн. банк счет:\t\t%d\n\
		Уровень:\t\t\t%d\n\
		IP адрес (регистр.):\t\t%s\n\
		IP адрес (послед.):\t\t%s\n\
		Дата и время регистрации:\t\%02d.%02d.%d в %02d:%02d:%02d\n\
		RCoins:\t\t\t\t%d (Всего: %d)\n\
		В игре сегодня:\t\t%d ч %d мин\n\
		В игре вчера:\t\t\t%d ч %d мин\n\n\
		Слоты для транспорта:\t%d\n\
		",
		user_id,
		cache_get_field_content_int(0, "money"),
		cache_get_field_content_int(0, "bank"),
		cache_get_field_content_int(0, "level"),
		reg_ip,
		last_ip,
		reg_date[0], reg_date[1], reg_date[2],
		reg_date[3], reg_date[4], reg_date[5],
		cache_get_field_content_int(0, "donate_current"),
		cache_get_field_content_int(0, "donate_total"),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_MINUTES),
		car_slots
	);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				modelid = cache_get_field_content_int(idx, "model_id"),
				Float: x = cache_get_field_content_float(idx, "pos_x"),
				Float: y = cache_get_field_content_float(idx, "pos_y"),
				Float: z = cache_get_field_content_float(idx, "pos_z"),
				Float: health = cache_get_field_content_float(idx, "health"),
				number[7];

			cache_get_field_content(idx, "number", number);

			format(query, sizeof query, "\n%s [%d] - %s (%.1f, %.1f, %.1f) HP: %.1f", GetVehicleInfo(modelid - 400, VI_NAME), id, number, x, y, z, health);
			strcat(fmt_text, query);
		}
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию об аккаунте %s[acc:%d]", name, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:money(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /money [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[90];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	new player_cash = cache_get_field_content_int(0, "money"),
		player_bank = cache_get_field_content_int(0, "bank"),
		player_wage = cache_get_field_content_int(0, "wage"),
		player_business = cache_get_field_content_int(0, "business"),
		player_fuel_st = cache_get_field_content_int(0, "fuel_st"),
		bank_accounts_money,
		fmt_text[310];

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM bank_accounts WHERE uid='%d'", user_id);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
			bank_accounts_money += cache_get_field_content_int(i, "balance");
	}

	cache_delete(result);

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Наличные деньги:\t\t\t%d руб\n\
		Осн.банковский счёт:\t\t\t%d руб\n\
		Временный З/П счёт:\t\t\t%d руб\n\n\
		На всех доп. банк. счетах:\t\t%d руб\n\n\
		",
		player_cash, player_bank, player_wage, bank_accounts_money
	);

	if(player_business != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM business WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету бизнеса:\t\t\t%d руб\n", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет бизнеса\n");

	if(player_fuel_st != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM fuel_stations WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету АЗС:\t\t\t\t%d руб", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет АЗС");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию о деньгах %s[acc:%d]", params, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:getlog(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getlog [имя игрока] [идентификатор лога] [кол-во дней]");
		SendClientMessage(playerid, 0xCECECEFF, "Идентификаторы:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Администраторский чат");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Ответы на репорты");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Администраторские действия");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Выдача администраторских прав");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Выдача лидерских прав");
		SendClientMessage(playerid, 0xCECECEFF, "6 - СМС сообщения");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Сообщения в общий чат");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Вопросы/жалобы в репорт");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Действия на посту лидера/заместителя");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Действия главного администратора");

		return 1;
	}

	extract params -> new string:name[21], log_id, time_limit;

	if(!(LOG_TYPE_ADMIN_CHAT <= log_id <= LOG_TYPE_SUPERADMIN_ACTION))
		return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор");

	if(!(0 <= time_limit <= 30))
		return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 30. Используйте 0 для отображения всех действий");

	if(!(3 <= strlen(name) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	new query[144];
	new Cache: result,
		rows,
		user_id,
		admin;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();

	if(rows)
	{
		user_id = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(rows && user_id)
	{
		if(GetPlayerAdminEx(playerid) >= admin)
		{
			mysql_format(mysql, query, sizeof query, "SELECT * FROM action_log WHERE acc_id=%d AND type=%d", user_id, log_id);

			new fmt_text[35];

			if(time_limit)
			{
				format(fmt_text, sizeof fmt_text, " AND time >= %d", gettime() - (time_limit * 86400));
				strcat(query, fmt_text);
			}

			result = mysql_query(mysql, query, true);

			rows = cache_num_rows();

			if(rows)
			{
				new log_name[10][37] =
				{
					"Администраторский чат",
					"Ответы на репорты",
					"Администраторские действия",
					"Выдача администраторских прав",
					"Выдача лидерских прав",
					"СМС сообщения",
					"Сообщения в общий чат",
					"Вопросы/жалобы в репорт",
					"Действия на посту лидера/заместителя",
					"Действия главного администратора"
				};

				format(query, sizeof query, "Найденные записи по параметру \"%s\" для игрока %s", log_name[log_id - 1], name);

				if(time_limit)
				{
					format(fmt_text, sizeof fmt_text, " за последние %d дн.", time_limit);
					strcat(query, fmt_text);
				}

				SendClientMessage(playerid, 0x66CC33FF, query);

				for(new idx; idx < rows; idx ++)
				{
					new desc[144],
						time[6],
						uip[17];

					cache_get_field_content(idx, "description", desc);
					cache_get_field_content(idx, "uip", uip);

					timestamp_to_date(cache_get_field_content_int(idx, "time"), time[2], time[1], time[0], time[3], time[4], time[5]);

					format
					(
						query, sizeof query,
						"#%d | %02d.%02d.%d в %02d:%02d:%02d | %s | %s",
						cache_get_field_content_int(idx, "id"),
						time[0], time[1], time[2], time[3], time[4], time[5],
						uip, desc
					);

					SendClientMessage(playerid, 0xFFCD00FF, query);
				}

				format(query, sizeof query, "Общее количество записей: %d", rows);
				SendClientMessage(playerid, 0x66CC33FF, query);
			}
			else SendClientMessage(playerid, 0x999999FF, "Записи в базе данных по данным параметрам не найдены");

			cache_delete(result);
		}
		else SendClientMessage(playerid, 0x999999FF, "Вы не можете просматривать логи администратора выше Вас рангом");
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	return 1;
}

CMD:lip(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lip [IP адрес]");

	new query[130],
		fmt_text[2300],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT name, reg_ip FROM accounts WHERE reg_ip = '%s' OR last_ip = '%s'", params, params);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		new l_acc_count;

		format(fmt_text, sizeof fmt_text, "IP: %s\n", params);

		for(new idx; idx < rows; idx ++)
		{
			new name[21],
				ip[17];

			cache_get_row(idx, 0, name);
			cache_get_row(idx, 1, ip);

			new bool: is_reg = false;

			if(!strcmp(ip, params, true))
				is_reg = true;

			else
				l_acc_count ++;

			format
			(
				query, sizeof query,
				"\n{FFFFFF}%d. %s - %s %s",
				idx + 1,
				name,
				is_reg ? "Reg" : "Last",
				IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}[online]" : "{888888}[offline]"
			);

			strcat(fmt_text, query);
		}

		format(query, sizeof query, "{FF9900}Найдено аккаунтов: %d / %d", l_acc_count, rows);

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, query, fmt_text, "Закрыть", "");
	}
	else SendClientMessage(playerid, 0x999999FF, "Данный IP адрес не найден в базе данных");

	cache_delete(result);

	return 1;
}

CMD:kick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kick [id игрока] [причина (необязательно)]");

	extract params -> new to_player;

    if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя заварнить!");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new reason[31];
	sscanf(params, "{d}s[30]", reason);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s кикнул игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	SetPlayerData(playerid, P_ANTIBAN, 1);
    SetTimerEx("AntiBan", 20000, false, "i", playerid);

	format(fmt_msg, sizeof fmt_msg, "Кикнул %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	Kick(to_player);

	return 1;
}

CMD:skick(playerid, params[])
{
    if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skick [id игрока]");

    if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя кикнуть!");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new fmt_msg[128];

	if(GetPlayerAdminEx(playerid) < 6)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] кикнул %s[%d] без лишнего шума", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Без шума кикнул %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
	SetPlayerData(playerid, P_ANTIBAN, 1);
    SetTimerEx("AntiBan", 20000, false, "i", playerid);

	Kick(to_player);
	return 1;
}
CMD:mute(playerid, params[])
{

	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя замутить!");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_MUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s поставил затычку игроку %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	SetPlayerData(playerid, P_ANTIBAN, 1);
    SetTimerEx("AntiBan", 20000, false, "i", playerid);

	SetPlayerData(to_player, P_MUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "mute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[acc:%d] блокировку чата на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
	SvMutePlayerEnable(playerid);
	return 1;
}
CMD:unmute(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_MUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял затычку с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_MUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "mute", 0);

	SendClientMessage(to_player, 0x66CC00FF, "Доступ в чат восстановлен");

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку чата у %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
	SvMutePlayerDisable(playerid);
	return 1;
}
CMD:jaillist(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	new query[115],
		Cache: result,
		rows,
		name[21],
		jail,
		list[sizeof query * 25 + 60] = "   Ник - Время - Причина\n";


	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE jail > 0 ORDER BY jail DESC");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		jail = cache_get_field_content_int(i, "jail");

		cache_get_field_content(i, "name", name);

		format
		(
			query, sizeof query,
			"\n%s - %d мин.",
			name,
			jail / 60
		);

		strcat(list, query);
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Игроки в деморгане", list, "Закрыть", "");

	return 1;
}
CMD:jail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /jail [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, jail_time, string: reason[30];

	if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя посадить!");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= jail_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 60 минут");
	if(GetPlayerData(to_player, P_JAIL) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s посадил в тюрьму игрока %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), jail_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	SetPlayerData(playerid, P_ANTIBAN, 1);
    SetTimerEx("AntiBan", 20000, false, "i", playerid);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	JailPlayer(to_player, jail_time);

	format(fmt_msg, sizeof fmt_msg, "Посадил в тюрьму %s[acc:%d] на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), jail_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:unjail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unjail [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_JAIL) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s выпустил из тюрьмы игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SendClientMessage(to_player, 0x66CC00FF, "Вы были выпущены на свободу");

	UnjailPlayer(to_player);

	format(fmt_msg, sizeof fmt_msg, "Выпустил из тюрьмы %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:ban(playerid, params[])
{
	if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");
	if(GetPlayerAdminEx(playerid) < 4) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ban [id игрока] [срок в дняй] [причина (необязательно)]");

	extract params -> new to_player, ban_time, string:reason[30];
	if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя забанить!");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new max_days = GetPlayerAdminEx(playerid) > 4 ? 365 : 30;

	new fmt_msg[128];

	if(!(1 <= ban_time <= max_days))
	{
		format(fmt_msg, sizeof fmt_msg, "Срок бана может быть от 1 до %d дней", max_days);

		return SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
	}

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить администратора выше по рангу");
	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить самого себя");

	format(fmt_msg, sizeof fmt_msg, "Администратор %s забанил игрока %s на %d дней", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), ban_time);

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	if(!strlen(reason)) reason = "None";

	format(fmt_msg, sizeof fmt_msg, "Забанил %s[acc:%d] на %d дней. Причина %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), reason);
    SetPlayerData(playerid, P_ANTIBAN, 1);
    SetTimerEx("AntiBan", 20000, false, "i", playerid);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_msg);
	SetPlayerData(to_player, P_ADMIN, 0);
	SetPlayerData(to_player, P_MIND, 0);
	SetPlayerData(to_player, P_FULL, 0);
	SetPlayerData(to_player, P_GIVEFULL, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);
	UpdatePlayerDatabaseInt(to_player, "mind", 0);
	UpdatePlayerDatabaseInt(to_player, "full", 0);
	UpdatePlayerDatabaseInt(to_player, "givefull", 0);

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	BanEx(to_player, reason);
	return 1;
}

CMD:colorveh(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 5) return 1;
    if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /colorveh [ид](3 чтобы убрать)(не на всех авто есть винилы!)");
    extract params -> new vehid;
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Вы не в авто");
    new query[144];
    new veh = GetPlayerVehicleID(playerid);
    ChangeVehiclePaintjob(veh, vehid);
    SetOwnableCarData(veh, OC_VINIL, vehid);
   	mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET vinil=%d WHERE id=%d", vehid, GetOwnableCarData(veh, OC_SQL_ID));
	mysql_query(mysql, query, false);
    SendClientMessage(playerid, 0xCECECEFF, "Вы установили винил своему авто");
    return 1;
}

CMD:unbanip(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unbanip [IP]");

	extract params -> new string:ip[64];

	new query[140];

	format(query, sizeof query, "unbanip %s", ip);
	SendRconCommand(query);

    format(query, sizeof query, "Вы разбанили IP: %s", ip);

	SendClientMessage(playerid, 0xCECECEFF, query);

	return 1;
}

CMD:banip(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 5) return 1;



    STRING_GLOBAL[0] = EOS;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /banip [IP]");

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s заблокировал IP адрес %s", GetPlayerNameEx(playerid), params);

	SendMessageToAdmins(STRING_GLOBAL, 0x3399FFFF);


  	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "banip %s", params);

  	SendRconCommand(STRING_GLOBAL);

	return true;
}

CMD:unban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new string: player_name[21];

	if(!strlen(player_name)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unban [ник игрока]");

	new query[80],
		Cache: result,
		rows,
		uid,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		cache_get_row(0, 1, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока не заблокирован");

	mysql_format(mysql, query, sizeof query, "DELETE FROM ban_list WHERE user_id=%d", uid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "unbanip %s", uip);
	SendRconCommand(query);

	SendRconCommand("reloadbans");

	format(query, sizeof query, "[A] Администратор %s разбанил игрока %s", GetPlayerNameEx(playerid), player_name);

	SendMessageToAdmins(query, 0x999999FF);

	format(query, sizeof query, "Разбанил %s[acc:%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	return 1;
}

CMD:offban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	if(GetPlayerAntiBan(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offban [ник игрока] [кол-во дней] [причина (необязательно)]");

	extract params -> new string: player_name[21], days, string: reason[30];

	if(!(-1 <= days <= 30)) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 30");
	if(days == 0) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 365");
	if(days == -1 && GetPlayerAdminEx(playerid) < 5) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 30");

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(GetPlayerAdminEx(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя забанить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока уже заблокирован");

	if(days != -1)
	{
		format(query, sizeof query, "Администратор %s забанил оффлайн игрока %s на %d дней", GetPlayerNameEx(playerid), player_name, days);

		if(strlen(reason) > 0)
			format(query, sizeof query, "%s. Причина: %s", query, reason);

		if(!strlen(reason)) reason = "None";

		SendClientMessageToAll(0xFF5533FF, query);

		format(query, sizeof query, "Оффлайн забанил %s[acc:%d] на %d дней. Причина: %s", player_name, uid, days, reason);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);
	 	SetPlayerData(playerid, P_ANTIBAN, 1);
    	SetTimerEx("AntiBan", 20000, false, "i", playerid);

		format(reason, sizeof reason, "[OFFLINE]%s", reason);

		AddBan(uid, gettime(), days, uip, reason, GetPlayerNameEx(playerid));
	}
	if(days == -1)
	{
	    format(query, sizeof query, "Администратор %s забанил оффлайн навсегда игрока %s", GetPlayerNameEx(playerid), player_name);

		if(strlen(reason) > 0)
			format(query, sizeof query, "%s. Причина: %s", query, reason);

		if(!strlen(reason)) reason = "None";

		SendClientMessageToAll(0xFF5533FF, query);

		format(query, sizeof query, "Оффлайн забанил %s[acc:%d] навсегда. Причина: %s", player_name, uid, reason);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

		format(reason, sizeof reason, "%s", reason);

		AddBan(uid, gettime(), 999, uip, reason, GetPlayerNameEx(playerid));
	}

	return 1;
}

CMD:offwarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offwarn [ник игрока] [причина (необязательно)]");

	extract params -> new string: player_name[21], string: reason[30];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16],
		warn,
		warn_time;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip, warn, warn_time FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
		warn = cache_get_row_int(0, 3);
		warn_time = cache_get_row_int(0, 4);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(GetPlayerAdminEx(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя дать варн администратору выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока находится в бане.");
	warn++;
	format(query, sizeof query, "Администратор %s оффлайн выдал предупреждение игроку %s [%d|3] ", GetPlayerNameEx(playerid), player_name, warn);

	if(strlen(reason) > 0)
	 format(query, sizeof query, "%s. Причина: %s", query, reason);

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Оффлайн заварнил %s[acc:%d]. Причина: %s", player_name, uid, reason);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	if(warn <= 2)
	{

	warn_time = gettime() + (86400 * 10);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET warn=%d,warn_time=%d WHERE id=%d", warn,warn_time,uid);
	mysql_query(mysql, query, false);
	}

	if(warn == 3)
	{
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET warn=0,warn_time=0 WHERE id=%d", uid);
	mysql_query(mysql, query, false);
	AddBan(uid, gettime(), 10, uip, "3/3 предупреждений", GetPlayerNameEx(playerid));
	}

	return 1;
}

CMD:offunwarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offunwarn [ник игрока]");

	extract params -> new string: player_name[21];


	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		warn;

	mysql_format(mysql, query, sizeof query, "SELECT id, warn FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		warn = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	if(warn < 1) return SendClientMessage(playerid, 0x999999FF, "У игрока нет предупреждений");
	format(query, sizeof query, "Администратор %s оффлайн снял все предупреждения игроку %s", GetPlayerNameEx(playerid), player_name);

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Оффлайн снял все варны %s[acc:%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET warn=0,warn_time=0 WHERE id=%d",uid);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:offjail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offjail [ник игрока] [время] [причина (необязательно)]");

	extract params -> new string: player_name[30], jail_time, string: reason[30];

	if(!(1 <= jail_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 60 минут");

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		jail;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, jail FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		jail = cache_get_row_int(0, 2);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(GetPlayerAdminEx(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя посадить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	if(jail > 0) return SendClientMessage(playerid, 0x999999FF, "Игрок уже в тюрьме");
	format(query, sizeof query, "Администратор %s оффлайн посадил игрока %s на %d минут", GetPlayerNameEx(playerid), player_name, jail_time);

	if(strlen(reason) > 0)
	 format(query, sizeof query, "%s. Причина: %s", query, reason);

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Оффлайн посадил %s[acc:%d]. Причина: %s", player_name, uid, reason);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET jail=%d WHERE id=%d", jail_time * 60, uid);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:offunjail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offunjail [ник игрока]");

	extract params -> new string: player_name[21], to_player;


	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		jail;

	mysql_format(mysql, query, sizeof query, "SELECT id, jail FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		jail = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);


	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	if(jail < 1) return SendClientMessage(playerid, 0x999999FF, "Игрок не в тюрьме!");
	format(query, sizeof query, "[A] Администратор %s выпустил из тюрьмы игрока %s", GetPlayerNameEx(playerid), player_name);

	SendMessageToAdmins(query, 0x999999FF);

	format(query, sizeof query, "Оффлайн выпустил %s[acc:%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);


	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET jail=0 WHERE id=%d", uid);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:soffban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /soffban [ник игрока][причина (необязательно)]");

	extract params -> new string: player_name[21], string: reason[30];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(GetPlayerAdminEx(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя забанить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока уже заблокирован");
 	format(query, sizeof query, "[A] Администратор %s забанил оффлайн навсегда игрока %s", GetPlayerNameEx(playerid), player_name);

	if(strlen(reason) > 0)
		format(query, sizeof query, "%s. Причина: %s", query, reason);

	if(!strlen(reason)) reason = "None";

	SendMessageToAdmins(query, 0x6b6b6bFF);

	format(query, sizeof query, "Оффлайн забанил %s[acc:%d] навсегда. Причина: %s", player_name, uid, reason);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	format(reason, sizeof reason, "%s", reason);

	AddBan(uid, gettime(), 999, uip, reason, GetPlayerNameEx(playerid));

	return 1;
}

CMD:delacc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new string:name[21], string:reason[30]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delacc [имя игрока] [причина]");

	new query[128],
		Cache: result,
		admin,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE name='%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		admin = cache_get_row_int(0, 0);

		if(admin && GetPlayerAdminEx(playerid) < 5)
		{
			SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить аккаунт администратора выше Вас рангом");

			cache_delete(result);

			format(query, sizeof query, "Попытался удалить аккаунт %s", name);
			SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

			return 1;
		}
		mysql_format(mysql, query, sizeof query, "DELETE FROM accounts WHERE name='%s' LIMIT 1", name);
		mysql_query(mysql, query, false);

		format(query, sizeof query, "Администратор %s удалил аккаунт игрока %s", GetPlayerNameEx(playerid), name);

		if(strlen(reason) > 0)
		{
			new fmt_text[45];

			format(fmt_text, sizeof fmt_text, ". Причина: %s", reason);
			strcat(query, fmt_text);
		}

		SendClientMessageToAll(0xFF5533FF, query);

		format(query, sizeof query, "Удалил аккаунт %s. Причина: %s", name, reason);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	cache_delete(result);

	return 1;
}

CMD:setskin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /setskin [id игрока] [скин]");

	if(!(-1 <= skin_id <= 16370) || skin_id == 0) return SendClientMessage(playerid, 0x999999FF, "Только от -1 до 16370!");

	if(skin_id != -1)
		SetPlayerSkin(to_player, skin_id);
	else
		SetPlayerSkin(to_player, GetPlayerSkinEx(to_player));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Администратор %s выдал вам %s скин", GetPlayerNameEx(playerid), skin_id != -1 ? "Постоянный" : "Личный");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "Постоянный" : "Личный");
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);


	SetPlayerData(to_player, P_SKIN, skin_id);
	UpdatePlayerDatabaseInt(to_player, "skin", skin_id);
	SetPlayerSkin(to_player, skin_id);
	return 1;
}

CMD:skin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-1 <= skin_id <= 16370) || skin_id == 0) return SendClientMessage(playerid, 0x999999FF, "ID скина от 1 до 16370");

	if(skin_id != -1)
		SetPlayerSkin(to_player, skin_id);
	else
		SetPlayerSkin(to_player, GetPlayerSkinEx(to_player));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Администратор %s выдал Вам %s скин", GetPlayerNameEx(playerid), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		if(skin_id != -1)
			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] скин №%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		else
			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] прежний скин", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:house(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /house [номер дома]");

	if(!(0 <= house_id <= g_house_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");

	new Float: x,
		Float: y,
		Float: z,
		Float: angle;

	if(GetHouseData(house_id, H_ENTRACE) != -1)
	{
		EnterPlayerToEntrance(playerid, GetHouseData(house_id, H_ENTRACE));

		x = GetHouseData(house_id, H_POS_X);
		y = GetHouseData(house_id, H_POS_Y);
		z = GetHouseData(house_id, H_POS_Z);
	}
	else
	{
		x = GetHouseData(house_id, H_EXIT_POS_X);
		y = GetHouseData(house_id, H_EXIT_POS_Y);
		z = GetHouseData(house_id, H_EXIT_POS_Z);
		angle = GetHouseData(house_id, H_EXIT_ANGLE);
	}
	SetPlayerPosEx(playerid, x, y, z, angle);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к дому №%d", house_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к дому %d", house_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:biz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /biz [номер бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE)
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к бизнесу №%d", biz_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к бизнесу %d", biz_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fuelstation(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new fs_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fuelstation [номер АЗС]");

	if(!(0 <= fs_id <= g_fuel_station_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данной АЗС не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetFuelStationData(fs_id, FS_POS_X),
		GetFuelStationData(fs_id, FS_POS_Y),
		GetFuelStationData(fs_id, FS_POS_Z),
		0.0
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к АЗС №%d", fs_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к АЗС %d", fs_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:inter(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, interior; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /inter [id игрока] [интерьер]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerInterior(to_player, interior);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] интерьер %d", GetPlayerNameEx(to_player), to_player, interior);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам интерьер %d", GetPlayerNameEx(playerid), playerid, interior);
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] установил %s[%d] интерьер №%d", GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, interior);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] интерьер %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), interior);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:world(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player, world; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /world [id игрока] [вирт.мир]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerVirtualWorld(to_player, world);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] вирт.мир %d", GetPlayerNameEx(to_player), to_player, world);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам вирт.мир %d", GetPlayerNameEx(playerid), playerid, world);
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] установил %s[%d] вирт.мир №%d", GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, world);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] вирт.мир %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), world);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:warn(playerid, params[])
{
    //if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

    if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя заспавнить!");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение админу выше по рангу");

	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение самому себе");

	AddPlayerData(to_player, P_WARN, +, 1);
	SetPlayerData(to_player, P_WARN_TIME, gettime() + (86400 * 10));

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s выдал предупреждение игроку %s [%d|3]", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_WARN));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);

	InvitePlayer(to_player, 0, 0, true);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_WARN);
	new warns_time = GetPlayerData(to_player, P_WARN_TIME);

	format(fmt_msg, sizeof fmt_msg, "Выдал варн %s[acc:%d] (%d/3). Причина: %d", GetPlayerNameEx(to_player), uid, warns, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Аккаунт заблокирован на 10 дней");

		warns =
		warns_time = 0;

		AddBan(uid, gettime(), 10, GetPlayerIpEx(to_player), "получено 3 варна", GetPlayerNameEx(playerid));
		BanEx(to_player, "получено 3 варна");
	}
	else Kick:(to_player);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET warn=%d,warn_time=%d WHERE id=%d", warns, warns_time, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:unwarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerData(to_player, P_WARN, 		0);
	SetPlayerData(to_player, P_WARN_TIME, 	0);

	UpdatePlayerDatabaseInt(to_player, "warn", 		0);
	UpdatePlayerDatabaseInt(to_player, "warn_time", 	0);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял все предупреждения с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Снял все варны %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:spawn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2 && GetPlayerYAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spawn [id игрока]");

    if(GetPlayerPrikol(to_player) == 1)  return SendClientMessage(playerid, 0xCECECEFF, "Данного игрока нельзя заспавнить!");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerYAdminEx(playerid) >= 2)
	{
	    if(to_player != playerid) return SendClientMessage(playerid, 0xCECECEFF, "Только себе!");
	}

	SetPlayerSpawnInit(to_player);
	SpawnPlayer(to_player);
	SetPlayerSpawnPos(playerid);

	new fmt_text[70];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] заспавнил %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	}

	if(GetPlayerYAdminEx(playerid) >= 2)
	{
		format(fmt_text, sizeof fmt_text, "[Y] %s[%d] заспавнил %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	}


	format(fmt_text, sizeof fmt_text, "Заспавнил %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:spcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spcar [id авто]");

	if(IsPlayerInAnyVehicle(playerid) && vehicleid == 0) vehicleid = GetPlayerVehicleID(playerid);

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	if(GetVehicleData(vehicleid, V_OWRENT) != 0)
 	{
  		SetVehicleData(vehicleid, V_OWRENT, 0);
    }

	SetVehicleToRespawn(vehicleid);

	new fmt_msg[100];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] зареспавнил авто [№%d]", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Зареспавнил авто №%d", vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
stock CancelFlyMode(playerid)
{
        DeletePVar(playerid, "FlyMode");
        CancelEdit(playerid);
        TogglePlayerSpectating(playerid, false);

        DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
        noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
        return 1;
}

stock FlyMode(playerid)
{
        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid, X, Y, Z);
        noclipdata[playerid][fly_object] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

        TogglePlayerSpectating(playerid, true);
        AttachCameraToPlayerObject(playerid, noclipdata[playerid][fly_object]);

        SetPVarInt(playerid, "FlyMode", 1);
        noclipdata[playerid][camera_mode] = CAMERA_MODE_FLY;
        return 1;
}

stock MoveCamera(playerid)
{
        new Float:FV[3], Float:CPR[3];
        GetPlayerCameraPos(playerid, CPR[0], CPR[1], CPR[2]);
	    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);

        if(noclipdata[playerid][acce_lmul] <= 1) noclipdata[playerid][acce_lmul] += ACCEL_RATE;

        new Float:speed = MOVE_SPEED * noclipdata[playerid][acce_lmul];

        new Float:X, Float:Y, Float:Z;
        GetNextCameraPosition(noclipdata[playerid][mode_mode], CPR, FV, X, Y, Z);
        MovePlayerObject(playerid, noclipdata[playerid][fly_object], X, Y, Z, speed);

        noclipdata[playerid][last_move] = GetTickCount();
        return 1;
}

stock GetNextCameraPosition(move_mode, Float:CPR[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    	#define OFFSET_X (FV[0]*6000.0)
        #define OFFSET_Y (FV[1]*6000.0)
        #define OFFSET_Z (FV[2]*6000.0)
        switch(move_mode)
        {
                case MOVE_FORWARD:
                {
                        X = CPR[0]+OFFSET_X;
                        Y = CPR[1]+OFFSET_Y;
                        Z = CPR[2]+OFFSET_Z;
                }
                case MOVE_BACK:
                {
                        X = CPR[0]-OFFSET_X;
                        Y = CPR[1]-OFFSET_Y;
                        Z = CPR[2]-OFFSET_Z;
                }
                case MOVE_LEFT:
                {
                        X = CPR[0]-OFFSET_Y;
                        Y = CPR[1]+OFFSET_X;
                        Z = CPR[2];
                }
                case MOVE_RIGHT:
                {
                        X = CPR[0]+OFFSET_Y;
                        Y = CPR[1]-OFFSET_X;
                        Z = CPR[2];
                }
                case MOVE_BACK_LEFT:
                {
                        X = CPR[0]+(-OFFSET_X - OFFSET_Y);
                        Y = CPR[1]+(-OFFSET_Y + OFFSET_X);
                        Z = CPR[2]-OFFSET_Z;
                }
                case MOVE_BACK_RIGHT:
                {
                        X = CPR[0]+(-OFFSET_X + OFFSET_Y);
                        Y = CPR[1]+(-OFFSET_Y - OFFSET_X);
                        Z = CPR[2]-OFFSET_Z;
                }
                case MOVE_FORWARD_LEFT:
                {
                        X = CPR[0]+(OFFSET_X  - OFFSET_Y);
                        Y = CPR[1]+(OFFSET_Y  + OFFSET_X);
                        Z = CPR[2]+OFFSET_Z;
                }
                case MOVE_FORWARD_RIGHT:
                {
                        X = CPR[0]+(OFFSET_X  + OFFSET_Y);
                        Y = CPR[1]+(OFFSET_Y  - OFFSET_X);
                        Z = CPR[2]+OFFSET_Z;
                }
        }
}
CMD:tpk(playerid, params[])
{
        new Float:x, Float:y, Float:z;
        if(sscanf(params, "p<,>fff", x, y, z)) return SendClientMessage(playerid, -1, "Введи /тпк [X] [Y] [Z]. Можно с запятыми."); // Проверка, введены ли все координаты
        SetPlayerPos(playerid, x, y, z); // Выставление позиции игрока по заданным кординатами
        return true;
}


CMD:tp(playerid)
{
	if(number_mp_player < 1 || mp_status == 2) return SendClientMessage(playerid, 0x808080FF, "В данный момент точки телепорта нету");
    if(GetPlayerData(playerid, P_JAIL) > 0) return SendClientMessage(playerid, 0xFFFFFFAA, "Заключённым нельзя телепортироваться");
	SendClientMessage(playerid, 0x99CC00FF, "[МП] Вы были телепортированы");
	SetPlayerPos(playerid, mpPos[0], mpPos[1], mpPos[2]);
    SetPlayerInterior(playerid, mpWorld[0]);
	SetPlayerVirtualWorld(playerid, mpWorld[1]);
	number_mp_player--;
	SetPVarInt(playerid, "statusMP", 1);
	return 1;
}

CMD:mp_tp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new to_number, tp_status; else return SendClientMessage(playerid, 0x808080FF, "Используйте: /mp_tp [количество участников] [1 (открыть) / 2 (закрыть)]");
	if(!(1 <= to_number <= 500)) return SendClientMessage(playerid, 0x808080FF, "Вы указали не правильное кол-во участников [Min - 1] [Max - 500]");
	if(!(1 <= tp_status <= 2)) return SendClientMessage(playerid, 0x808080FF, "Укажите 1 - для открытия телепорта | 2 - закрытие");
	if(mp_status == tp_status) return SendClientMessage(playerid, 0x808080FF, "Телепорт на мероприятие уже открыт!");
	new stringMP[150];
	switch(tp_status)
	{
		case 1:
		{
			SendClientMessage(playerid, 0x3399FFFF, "Точка телепорта установлена");
            format(stringMP, sizeof(stringMP), "{FFFFFF}Максимальное Кол-во игроков %d", to_number);
			number_mp_player = to_number;
			mp_status = 1;
			GetPlayerPos(playerid, mpPos[0], mpPos[1], mpPos[2]);
			mpWorld[0] = GetPlayerInterior(playerid);
			mpWorld[1] = GetPlayerVirtualWorld(playerid);
		}
		case 2:
		{
			format(stringMP, sizeof(stringMP), "{FF4500}Точка телепорта удалена");
			for(new i = 0; i < 3; i++) mpPos[i] = 0;
			for(new i = 0; i < 2; i++) mpWorld[i] = 0;
			number_mp_player = 0;
			mp_status = 2;
			for(new i; i < MAX_PLAYERS; i++) DeletePVar(i, "statusMP");
		}
		default: Kick(playerid);
	}

	SendClientMessage(playerid, -1, stringMP);
	return 1;
}
CMD:rt(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
    new Float:px,Float:py,Float:pz;
    SetPlayerPos(playerid,px,py,pz);
    return 1;
}
alias:goto("g");
CMD:goto(playerid, params[])
{
 	if(GetPlayerAdminEx(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /goto [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, interior, virtual_world;
	GetPlayerPos(to_player, x, y, z);
	interior = GetPlayerInterior(to_player);
	virtual_world = GetPlayerVirtualWorld(to_player);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, interior, virtual_world, false);

	SetPlayerInHouse(playerid, GetPlayerInHouse(to_player));
	SetPlayerInBiz(playerid, GetPlayerInBiz(to_player));

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	new fmt_msg[105];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировался к %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}
	if(GetPlayerYAdminEx(playerid) >= 1)
	{
		format(fmt_msg, sizeof fmt_msg, "[Y] Ютубер %s[%d] телепортировался к %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:vr(playerid, params[])
{
	if(IsPlayerMuted(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");
	if(GetPlayerKDSet(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Писать в премиум чат можно раз в {99ff00}10{CECECE} секунд");
	if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Писать в премиум чат можно только с {99ff00}2{CECECE} уровня");
	if(GetPlayerAdminEx(playerid) < 2 || GetPlayerPremium(playerid) < 1) return 1;
	{
		if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vr [текст]");

		new fmt_str[128];
        if(GetString(GetPlayerNameEx(playerid), "Maniac")) return format(fmt_str, sizeof fmt_str, "[Владелец]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xff0000FF);
        if(GetString(GetPlayerNameEx(playerid), "Woody_Clown")) return format(fmt_str, sizeof fmt_str, "[Разработчик]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xff0000FF);
        if(GetString(GetPlayerNameEx(playerid), "Fernando_Black")) return format(fmt_str, sizeof fmt_str, "[Разработчик]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xff0000FF);
  		if(GetPlayerAdminEx(playerid) > 1) return format(fmt_str, sizeof fmt_str, "[Администратор]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xff0000FF);
		format(fmt_str, sizeof fmt_str, "[VIP]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToPrem(fmt_str, 0x0077ffFF);
		SetPlayerData(playerid, P_KDSET, 1);
    	SetTimerEx("KDSet", 10000, false, "i", playerid);

		SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
	}

	return 1;
}
CMD:givedonateall(playerid, params[])
{
	if !(GetPlayerAdminEx(playerid) == 8) *then return false;
	extract params -> new amount; else return SCM(playerid, -1, "Используйте: /givedonateall [количество]");
	if(amount < 1 || amount > 1000) return SCM(playerid, COLOR_GREY, "Нельзя выдать меньше 1 или больше 1000 доната");
	foreach(new i : Player)
	{
		if !IsPlayerLogged(i) *then continue;
		GivePlayerDonate(i, amount, "givemoneyall", true, true);
		new string[100];
		format(string, sizeof(string), "Создатель %s выдал всем %d донат рублей", GetPlayerNameEx(playerid), amount);
		SendClientMessageToAll(COLOR_GOLD, string);
	}
	return 1;
}
CMD:map(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new model,
	    name[30];
	if(sscanf(params, "is[30]", model, name))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /map [ID объекта] [название]");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /map [ID объекта] [название] (1 - 30)");

	if(GetString(name, "None"))
		return 0;

	if(TOTALOBJECTS + 1 > MAX_CREATE_OBJECTS)
		return SendClientMessage(playerid, COLOR_GREY, "Превышен лимит созданных объектов");

	static const mysql_str[] = "SELECT * FROM `create_objects` WHERE `Name` = '%s'";
	new str[sizeof(mysql_str) + (-2 + 30)];

	format(str, sizeof(str), mysql_str, name);
	mysql_query(mysql, str);

	if(cache_num_rows())
		return SendClientMessage(playerid, COLOR_GREY, "Данное название объекта уже используется!");

	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);
	EditObjectPlayer[playerid] = CreateObject(model, x+2, y+2, z, 0, 0, 0);
	printf("ObjectID Edit: %d", EditObjectPlayer[playerid]);
	EditObject(playerid, EditObjectPlayer[playerid]);

	SetString(ObjectNamePlayer[playerid], name);
	SetPVarInt(playerid, "obj_edit", 1);
	SetPVarInt(playerid, "obj_model", model);
	return 1;
}

CMD:map11(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new model,
	    name[30];
	if(sscanf(params, "is[30]", model, name))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /map [ID объекта] [название]");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /map [ID объекта] [название] (1 - 30)");

	if(GetString(name, "None"))
		return 0;

	if(TOTALOBJECTS + 1 > MAX_CREATE_OBJECTS)
		return SendClientMessage(playerid, COLOR_GREY, "Превышен лимит созданных объектов");

	static const mysql_str[] = "SELECT * FROM `create_objects` WHERE `Name` = '%s'";
	new str[sizeof(mysql_str) + (-2 + 30)];

	format(str, sizeof(str), mysql_str, name);
	mysql_query(mysql, str);

	if(cache_num_rows())
		return SendClientMessage(playerid, COLOR_GREY, "Данное название объекта уже используется!");

	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);
	EditObjectPlayer[playerid] = CreateObject(model, x+2, y+2, z, 0, 0, 0);
	printf("ObjectID Edit: %d", EditObjectPlayer[playerid]);
	EditObject(playerid, EditObjectPlayer[playerid]);

	SetString(ObjectNamePlayer[playerid], name);
	SetPVarInt(playerid, "obj_edit", 1);
	SetPVarInt(playerid, "obj_model", model);
	return 1;
}

CMD:dellmap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new name[30];
	if(sscanf(params, "s[30]", name))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dellmap [название объекта]");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dellmap [название объекта] (1 - 30)");

	if(GetString(name, "None"))
		return 0;

	new
		obj_id = -1;
	for(new i; i < TOTALOBJECTS; i++)
	{
		if(GetString(ObjInfo[i][objName], name))
		{
			obj_id = i;
			break;
		}
	}

	if(obj_id == -1)
		return SendClientMessage(playerid, COLOR_GREY, "Объект под данным именем не найден");

	static const
		fmt_str[] = "Вы успешно удалили объект под именем \"%s\"",
		mysql_str[] = "DELETE FROM `create_objects` WHERE `Name` = '%s'";
	new str[sizeof(mysql_str) + (-4 + 52)];

	format(str, sizeof(str), fmt_str, name);
	SendClientMessage(playerid, 0xCECECEFF, str);

	format(str, sizeof(str), mysql_str, name);
	mysql_query(mysql, str, false);

	DestroyDynamicObject(ObjInfo[obj_id][objID]);
	SetString(ObjInfo[obj_id][objName], "None");
	return 1;
}
CMD:editmap(playerid, params[]) {

	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new name[30];
	if(sscanf(params, "s[30]", name))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /editmap [название объекта]");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /editmap [название объекта] (1 - 30)");

	new
		obj_id = -1;
	for(new i; i < TOTALOBJECTS; i++)
	{
		if(GetString(ObjInfo[i][objName], name))
		{
			obj_id = i;
			break;
		}
	}

	if(obj_id == -1)
		return SendClientMessage(playerid, COLOR_GREY, "Объект под данным именем не найден.");

	return 1;
}

CMD:grav(playerid, params[])
{
    if(GetPlayerPrikol(playerid) < 1) return 1;
   	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
    SetPlayerGravity(to_player, 0.0260);
    return 1;
}

CMD:rgrav(playerid, params[])
{
    if(GetPlayerPrikol(playerid) < 1) return 1;
   	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
    ResetPlayerGravity(to_player);
    return 1;
}

CMD:tg(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /tg [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, interior, virtual_world;
	GetPlayerPos(to_player, x, y, z);
	interior = GetPlayerInterior(to_player);
	virtual_world = GetPlayerVirtualWorld(to_player);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, interior, virtual_world, false);

	SetPlayerInHouse(playerid, GetPlayerInHouse(to_player));
	SetPlayerInBiz(playerid, GetPlayerInBiz(to_player));

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	return 1;
}

CMD:getp(playerid, params[]) return callcmd::gethere(playerid, params);
CMD:getplayer(playerid, params[]) return callcmd::gethere(playerid, params);
CMD:gethere(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
	{
		SendClientMessage(playerid, 0x66CC33FF, "Вы пытаетесь телепортировать к себе администратора Выше рангом, он должен подтвердить Ваше действие");
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GETHERE);
	}
	else
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPosEx(to_player, x + 1, y + 1, z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false);

		SetPlayerInHouse(to_player, GetPlayerInHouse(playerid));
		SetPlayerInBiz(to_player, GetPlayerInBiz(playerid));

		new fmt_msg[105];
		format(fmt_msg, sizeof fmt_msg, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, -1, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "Вы телепортивали %s к себе", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, -1, fmt_msg);

		if(GetPlayerAdminEx(playerid) <= 5)
		{
			format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_msg, 0x999999FF);
		}

		format(fmt_msg, sizeof fmt_msg, "Телепортировал к себе %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
	}

	return 1;
}

CMD:gth(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gth [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(to_player, x + 1, y + 1, z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false);

	SetPlayerInHouse(to_player, GetPlayerInHouse(playerid));
	SetPlayerInBiz(to_player, GetPlayerInBiz(playerid));

	return 1;
}

CMD:vtp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new to_vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vtp [id транспорта]");
	if(!IsValidVehicle(to_vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetVehiclePos(to_vehicleid, x, y, z);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, false);

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к авто №%d", to_vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировался к авто №%d", GetPlayerNameEx(playerid), playerid, to_vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	return 1;
}

CMD:vget(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vget [id транспорта]");
	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);

	SendClientMessage(playerid, -1, "Вы телепортировали авто к себе");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к себе авто №%d", vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировал к себе авто №%d", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	return 1;
}

CMD:getv(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3 && GetPlayerYAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getv [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerYAdminEx(playerid) >= 2)
	{
	    if(to_player != playerid) return SendClientMessage(playerid, 0xCECECEFF, "Только себе!");
	}

	if(GetPlayerOwnableCarLast(to_player) == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет личного транспорта");


	new fmt_text[105],
		Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	SetVehiclePos(GetPlayerOwnableCarLast(to_player), x + 2.0, y + 2.0, z);

	format(fmt_text, sizeof fmt_text, "Вы телепортировали к %s его личный транспорт", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s телепортировал к Вам Ваш личный транспорт", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
	}

	if(GetPlayerYAdminEx(playerid) >= 2)
	{
		format(fmt_text, sizeof fmt_text, "[Y] %s[%d] телепортировал к %s[%d] его личный транспорт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Телепортировался к %s[acc:%d] его авто", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fixcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fixcar [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInAnyVehicle(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок должен находиться в транспорте");

	new fmt_text[93],
		vehicleid = GetPlayerVehicleID(to_player);

	RepairVehicle(vehicleid);
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

	format(fmt_text, sizeof fmt_text, "Вы починили транспорт игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s починил Ваш транспорт", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] починил транспорт игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		format(fmt_text, sizeof fmt_text, "[Y] %s[%d] починил транспорт игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Починил транспорт %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fix(playerid, params[])
{
	if(GetPlayerPrem(playerid) != 1) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте");

	new fmt_text[93],
		vehicleid = GetPlayerVehicleID(playerid);

	RepairVehicle(vehicleid);
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

	format(fmt_text, sizeof fmt_text, "%s починил свой транспорт", GetPlayerNameEx(playerid));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setfuel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new vehicleid, fuel; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuel [id транспорта] [кол-во топлива]");

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	if(!(0 <= fuel <= 150)) return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 150");

	SetVehicleData(vehicleid, V_FUEL, fuel);

	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в ТС №%d", fuel, vehicleid);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) >= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в ТС №%d", GetPlayerNameEx(playerid), playerid, fuel, vehicleid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %d топлива в авто №%d", fuel, vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
CMD:st(playerid, params[]) return callcmd::settime(playerid, params);
CMD:settime(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new time; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settime [время (0-23)]");

	if(!(0 <= time <= 23)) return SendClientMessage(playerid, 0x999999FF, "Время от 0 до 23 часов");

	SetWorldTime(time);

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы установили время %02d:00", time);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил время на сервере на %02d:00", GetPlayerNameEx(playerid), playerid, time);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил время %02d:00 на сервере", time);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
CMD:sw(playerid, params[]) return callcmd::setweather(playerid, params);
CMD:setweather(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new weather; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setweather [погода (0-20)]");

	if(!(-1 <= weather <= 20))
	{
		SendClientMessage(playerid, 0x999999FF, "Погода от 0 до 20 (-1 - случайная смена погоды)");
		SendClientMessage(playerid, 0x999999FF, "Рекомендовано: 1, 3, 8, 9, 18");

		return 1;
	}

	if(weather != -1)
		SetWeather(weather);
	else
		SetRandomWeather();

	new fmt_text[70];

	if(weather != -1)
		format(fmt_text, sizeof fmt_text, "Вы установили погоду %d", weather);
	else
		format(fmt_text, sizeof fmt_text, "Вы установили случайную погоду");

	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		if(weather != -1)
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил погоду на сервере на %d", GetPlayerNameEx(playerid), playerid, weather);
		else
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил случайную погоду на сервере", GetPlayerNameEx(playerid), playerid);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Установил погоду №%d на сервере", weather);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:payday(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	OnPayDay();

	new fmt_text[50];

	SendClientMessage(playerid, -1, "Вы включили PayDay");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал PayDay", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Инициировал PayDay");

	return 1;
}

CMD:gzcolor(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new gang_id; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /gzcolor [id банды] (0-Свободная зона, 1-- Тамбовская ОПГ, 2-- Ростовская ОПГ)");

	if(!(0 <= gang_id <= 3))
		return SendClientMessage(playerid, COLOR_WHITE, "Банды: 0 - Свободная зона, 1 - - Тамбовская, 2 - - Ростовская ОПГ");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться на нужной территории");

	SetGangZoneData(gang_zone_id, GZ_GANG, gang_id);
	SaveGangZone(gang_zone_id);

	GangZoneShowForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы изменили банду, владеющую данной территорией");

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] изменил банду у территории №%d на %d", GetPlayerNameEx(playerid), playerid, gang_zone_id, gang_id);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	format(fmt_text, sizeof fmt_text, "Изменил банду у территории №%d на %d", gang_zone_id, gang_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:sellproperty(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	SellDebtorsProperty();

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы инициировали продажу имущества должников");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал продажу имущества должников", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Иницировал продажу имущества должников");

	return 1;
}

CMD:sellhotels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	SellDebtorsHotels();

	new fmt_text[90];

	SendClientMessage(playerid, -1, "Вы инициировали продажу номеров с задолженностью в отеле");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал продажу номеров с задолженностью в отеле", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Инициировал продажу номеров в отеле");

	return 1;
}

CMD:setprods(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new biz_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setprods [id бизнеса] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество продуктов от 0 до 10000");

	if(!(0 <= biz_id <= g_business_loaded - 1))
		return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов в бизнесе №%d", amount, biz_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов в бизнесе №%d", GetPlayerNameEx(playerid), playerid, amount, biz_id);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:fullprods(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullprods [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество продуктов от 0 до 10000");

	for(new biz_id; biz_id < g_business_loaded - 1; biz_id ++)
		SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов во всех бизнесах", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов во всех бизнесах", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:setfuels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new fs_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuels [id АЗС] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 10000");

	if(!(0 <= fs_id <= g_fuel_station_loaded-1))
		return SendClientMessage(playerid, 0x999999FF, "Данной АЗС не существует на сервере");

	SetFuelStationData(fs_id, FS_FUELS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE fuel_stations SET fuels=%d WHERE id=%d", GetFuelStationData(fs_id, FS_FUELS), GetFuelStationData(fs_id, FS_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в АЗС №%d", amount, fs_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в АЗС №%d", GetPlayerNameEx(playerid), playerid, amount, fs_id);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:fullfuels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullfuels [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 10000");

	for(new fs_id; fs_id < g_fuel_station_loaded - 1; fs_id ++)
		SetFuelStationData(fs_id, FS_FUELS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE fuel_stations SET fuels=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива во всех АЗС", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива во всех АЗС", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:addbiz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addbiz [тип] [стоимость] [цена аренды]");

	new fmt_text[300];

	if(!(1 <= type <= 22))
	{
	    SendClientMessage(playerid, 0x999999FF,"Типы: 1-24/7, 2-Клуб, 3-Управление стат., 4-Риэлторское Агенство., 5-Одежда, 6-Отель, 7-Авторынок, 8-Казино");
		SendClientMessage(playerid, 0x999999FF,"9-Сотовый салон, 11-Магазин оружия,12-Bank,-13 Комп клуб,14-Спортзал");
	    SendClientMessage(playerid, 0x999999FF,"16-Аренда, 17-Новое СТО,18 - ферма, 19 - детейлинг(Нумир не сбита!), 20 - бу, 21 - нов бизы, 22- метро");
		return 1;
	}
	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость бизнеса не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_business_loaded;

	GetPlayerPos(playerid, g_business[idx][B_POS_X], g_business[idx][B_POS_Y], g_business[idx][B_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
	buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));

	SetBusinessData(idx, B_CITY,			buffer[0]);
	SetBusinessData(idx, B_ZONE,			buffer[1]);

	SetBusinessData(idx, B_PRICE,			price);
	SetBusinessData(idx, B_RENT_PRICE,		rent_price);
	SetBusinessData(idx, B_TYPE,			type);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO business \
		(city, zone, type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f')",
		GetBusinessData(idx, B_CITY),
		GetBusinessData(idx, B_ZONE),
		type, price, rent_price,
		GetBusinessData(idx, B_POS_X),
		GetBusinessData(idx, B_POS_Y),
		GetBusinessData(idx, B_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetBusinessData(idx, B_SQL_ID, cache_insert_id());

	cache_delete(result);

	g_business_loaded ++;

	CreatePickup(19132, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);

	UpdateBusinessLabel(idx);

	str_f = "";
	format(str_f, 500, "%s[ID: %d] создал бизнес №%d (City - %s / [Zone - %s])", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetBusinessData(idx, B_CITY)), GetZoneName(GetBusinessData(idx, B_ZONE)));
	//format(str_f, 144, "Вы создали бизнес №%d (City / [Zone])", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetBusinessData(idx, B_CITY)), GetZoneName(GetBusinessData(idx, B_ZONE)));
	SendMessageToAdmins(str_f, 0x66CC33FF);


	return 1;
}

CMD:addfuelst(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new price, rent_price, fuel_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addfuelst [стоимость] [цена аренды] [цена за бензин за литр]");

	new fmt_text[300];

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость заправки не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость заправки не может быть меньше 1");
	if(fuel_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость заправки за литр не может быть меньше 1 рубля");

	new Cache: result,
		idx = g_fuel_station_loaded;

	GetPlayerPos(playerid, g_fuel_station[idx][FS_POS_X], g_fuel_station[idx][FS_POS_Y], g_fuel_station[idx][FS_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));
	buffer[1] = Get2DZone(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));

	SetFuelStationData(idx, FS_CITY,			buffer[0]);
	SetFuelStationData(idx, FS_ZONE,			buffer[1]);

	SetFuelStationData(idx, FS_PRICE,			price);
	SetFuelStationData(idx, FS_RENT_PRICE,		rent_price);
	SetFuelStationData(idx, FS_FUEL_PRICE,		fuel_price);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO fuel_stations \
		(city, zone, fuel_price, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f')",
		GetFuelStationData(idx, FS_CITY),
		GetFuelStationData(idx, FS_ZONE),
		fuel_price, price, rent_price,
		GetFuelStationData(idx, FS_POS_X),
		GetFuelStationData(idx, FS_POS_Y),
		GetFuelStationData(idx, FS_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetFuelStationData(idx, FS_SQL_ID, cache_insert_id());

	cache_delete(result);

	g_fuel_station_loaded ++;

	//UpdateFuelStationLabel(idx);

	format(fmt_text, sizeof fmt_text, "Вы создали заправку №%d (SQL IMPORT / [Нет данных])", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetBusinessData(idx, B_CITY)), GetZoneName(GetBusinessData(idx, B_ZONE)));

	SendMessageToAdmins(fmt_text, 0x66CC33FF);


	return 1;
}
CMD:bsx(playerid, params[]) return callcmd::b_set_exit_pos(playerid, params);
CMD:b_set_exit_pos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetexitpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_EXIT_POS_X], g_business[biz_id][B_EXIT_POS_Y], g_business[biz_id][B_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_business[biz_id][B_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у бизнеса №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:b_set_name(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /b_set_name [id бизнеса][название]");

	extract params -> new biz_id, string: name[24];

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

    SetBusinessData(biz_id, B_NAME, name);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET name='%s' WHERE id=%d",
		GetBusinessData(biz_id, B_NAME),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили название у бизнеса №%d на %s", biz_id, name);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:b_set_int(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	if(!strlen(params))
	{
        SendClientMessage(playerid, 0xCECECEFF, "Используйте: /b_set_int [id бизнеса][инта]");
        SendClientMessage(playerid, 0xCECECEFF, "Типы бизнесов: 1-24/7, 2-Клуб, 3-Управление стат., 4-Риэлторск., 5-Одежда, 6-Отель, 7-Авторынок, 8-Казино, 9-Сотовый салон 11-Оружейный 12-Bank 13 - Комп клуб 14- Спортзал 15- Детелинг");
	}

	extract params -> new biz_id, inta;

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	new inter = inta - 1;

    SetBusinessData(biz_id, B_INTERIOR, inter);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET interior='%d' WHERE id=%d",
		inter,
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили инту у бизнеса №%d на %d", biz_id, inta);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:addenter(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new type, price, rent_price, enter; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addenter [тип] [стоимость кв] [Ежедневаня плата] [Этажей]");

	new fmt_text[400];

	if(!(0 <= type <= sizeof g_house_type - 1))
	{
		SendClientMessage(playerid, 0x999999FF, "Типы домов:");

		for(new i; i < sizeof g_house_type; i ++)
		{
			format(fmt_text, sizeof fmt_text, "%d. %s", i, GetHouseTypeInfo(i, HT_NAME));

			SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		}

		return 1;
	}

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость дома не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость ежедневной платы не может быть меньше 1");

	if(enter < 2 || enter > MAX_ENTRANCE_FLOORS) return SendClientMessage(playerid, 0x999999FF, "Минимум 2 этажа. Максимум 5");

	new Cache: result,
		idx = g_entrance_loaded;

	GetPlayerPos(playerid, g_entrance[idx][E_POS_X], g_entrance[idx][E_POS_Y], g_entrance[idx][E_POS_Z]);

	new buffer[2];
	new idxs;

	buffer[0] = Get2DCity(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));
	buffer[1] = Get2DZone(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));

	SetEntranceData(idx, E_CITY,			buffer[0]);
	SetEntranceData(idx, E_ZONE,			buffer[1]);

	SetEntranceData(idx, E_FLOORS,			enter);
	//SetHouseData(idx, H_RENT_PRICE,		rent_price);
	//SetHouseData(idx, H_TYPE,			type);

	//SetHouseData(idx, H_ENTRACE,		-1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO entrances \
		(city, zone, floors, pos_x, pos_y, pos_z)\
		VALUES ('%d', '%d', '%d', '%f', '%f', '%f')",
		GetEntranceData(idx, E_CITY),
		GetEntranceData(idx, E_ZONE),
		enter,
		GetEntranceData(idx, E_POS_X),
		GetEntranceData(idx, E_POS_Y),
		GetEntranceData(idx, E_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetEntranceData(idx, E_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_entrance_loaded ++;

	//UpdateHouse(idx);

	new kv = 4 * enter;

	for(idxs = 0; idxs < kv; idxs ++)
	{
		format
		(
			fmt_text, sizeof fmt_text,
			"INSERT INTO houses \
			(city, zone, type, price, rent_price, x, y, z, entrance)\
			VALUES ('-1', '-1', '%d', '%d', '%d', '0.0', '0.0', '0.0', '%d')", type, price, rent_price, idx
		);
		mysql_query(mysql, fmt_text, true);
	}

	format(fmt_text, sizeof fmt_text, "%s[ID: %d] создал подъезд №%d (City - %s / [Zone - %s])", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetEntranceData(idx, E_CITY)), GetZoneName(GetEntranceData(idx, E_ZONE)));

	SendMessageToAdmins(fmt_text, 0x66CC33FF);
	SendClientMessage(playerid, 0x999999FF, "Не забудьте поставить координаты выхода: {66CC33} /set_e_exit_pos");

	CreatePickup(19134, 23,GetEntranceData(idx, E_POS_X),GetEntranceData(idx, E_POS_Y),GetEntranceData(idx, E_POS_Z), -1);


	return 1;
}

CMD:set_e_exit_pos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /set_e_exit_pos [id подьезда]");

	if(!(0 <= biz_id <= g_entrance_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного подьезда не существует на сервере");

	GetPlayerPos(playerid, g_entrance[biz_id][E_EXIT_POS_X], g_entrance[biz_id][E_EXIT_POS_Y], g_entrance[biz_id][E_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_entrance[biz_id][E_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE entrances SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetEntranceData(biz_id, E_EXIT_POS_X),
		GetEntranceData(biz_id, E_EXIT_POS_Y),
		GetEntranceData(biz_id, E_EXIT_POS_Z),
		GetEntranceData(biz_id, E_EXIT_ANGLE),
		GetEntranceData(biz_id, E_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у подьезда №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:addhouse(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addhouse [тип] [стоимость] [Ежедневаня плата]");

	new fmt_text[300];

	if(!(0 <= type <= sizeof g_house_type - 1))
	{
		SendClientMessage(playerid, 0x999999FF, "Типы домов:");

		for(new i; i < sizeof g_house_type; i ++)
		{
			format(fmt_text, sizeof fmt_text, "%d. %s", i, GetHouseTypeInfo(i, HT_NAME));

			SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		}

		return 1;
	}

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость дома не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость ежедневной платы не может быть меньше 1");

	new Cache: result,
		idx = g_house_loaded;

	GetPlayerPos(playerid, g_house[idx][H_POS_X], g_house[idx][H_POS_Y], g_house[idx][H_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
	buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));

	SetHouseData(idx, H_CITY,			buffer[0]);
	SetHouseData(idx, H_ZONE,			buffer[1]);

	SetHouseData(idx, H_PRICE,			price);
	SetHouseData(idx, H_RENT_PRICE,		rent_price);
	SetHouseData(idx, H_TYPE,			type);

	SetHouseData(idx, H_ENTRACE,		-1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO houses \
		(city, zone, type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f')",
		GetHouseData(idx, H_CITY),
		GetHouseData(idx, H_ZONE),
		type, price, rent_price,
		GetHouseData(idx, H_POS_X),
		GetHouseData(idx, H_POS_Y),
		GetHouseData(idx, H_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetHouseData(idx, H_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_house_loaded ++;

	UpdateHouse(idx);

	format(fmt_text, sizeof fmt_text, "[A] %s Создал дом №%d (SQL IMPORT / [Нет данных])", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetHouseData(idx, H_CITY)), GetZoneName(GetHouseData(idx, H_ZONE)));

	SendMessageToAdmins(fmt_text, 0x66CC33FF);
	SendClientMessage(playerid, 0x999999FF, "Не забудьте поставить координаты выхода: {66CC33} /setexitpos");


	return 1;
}

CMD:sx(playerid, params[]) return callcmd::setexitpos(playerid, params);
CMD:setexitpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setexitpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_EXIT_POS_X], g_house[house_id][H_EXIT_POS_Y], g_house[house_id][H_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_EXIT_POS_X),
		GetHouseData(house_id, H_EXIT_POS_Y),
		GetHouseData(house_id, H_EXIT_POS_Z),
		GetHouseData(house_id, H_EXIT_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);
	SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно поставили выход! Не забудьте поставить координаты Т/C:{99ff00} /setcarpos ");

	return 1;
}
CMD:sc(playerid, params[]) return callcmd::setcarpos(playerid, params);
CMD:setcarpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setcarpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_CAR_POS_X], g_house[house_id][H_CAR_POS_Y], g_house[house_id][H_CAR_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_CAR_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET car_x='%f', car_y='%f', car_z='%f', car_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_CAR_POS_X),
		GetHouseData(house_id, H_CAR_POS_Y),
		GetHouseData(house_id, H_CAR_POS_Z),
		GetHouseData(house_id, H_CAR_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты спавна авто у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:getname(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new user_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getname [номер аккаунта]");

	new name[21],
		fmt_text[120];

	format(name, sizeof name, "%s", GetPlayerNameBySqlID(user_id));

	if(strcmp(name, "none", true))
	{
		format(fmt_text, sizeof fmt_text, "Имя: %s / Номер аккаунта: %d", name, user_id);

		SendClientMessage(playerid, 0x3399FFFF, fmt_text);
	}
	else SendClientMessage(playerid, 0x999999FF, "Данный аккаунт не найден в базе данных");

	return 1;
}

CMD:slap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /slap [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, fmt_text[85];
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x, y, z + 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);

	format(fmt_text, sizeof fmt_text, "Вы подбросили игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s подбросил Вас", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] подбросил игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Подбросил %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:sld(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /slap [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x + 10, y, z + 10);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);
	return 1;
}

CMD:hp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hp [id игрока] [количество здоровья]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	else if(GetPlayerAdminEx(playerid) == 1 && to_player != playerid)
		return SendClientMessage(playerid, 0x999999FF, "Администраторам 1-го уровня доступно изменение только своего уровня здоровья");

	else if(!(0 <= health <= 100)) return SendClientMessage(playerid, 0x999999FF, "Уровень здоровья от 0 до 100");

	SetPlayerData(to_player, P_HEALTH, health);
	SetPlayerHealthEx(to_player, health);

	if(GetPlayerData(to_player, P_HOSPITAL))
		SetPlayerData(to_player, P_HOSPITAL, false);

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень здоровья", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили %s уровень здоровья", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] изменил уровень здоровья %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] уровень здоровья на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:spcars(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new vehicles_count;

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(!IsValidVehicle(i)) continue;
	    else if(IsVehicleOccupied(i)) continue;
	    else if(IsTrailerAttachedToAnyVehicle(i)) continue;

	    if(GetVehicleData(i, V_OWRENT) != 0)
	    {
	        SetVehicleData(i, V_OWRENT, 0);
	    }

	    SetVehicleToRespawn(i);
	    DestroyVehicle(arendascooter[i++]);
	    DestroyVehicle(arendascooter[i]);
	    DestroyVehicle(arendascooter[playerid]);
	    vehicles_count++;
	}

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "Вы зареспавнили весь незанятый транспорт. Всего зареспавнено: %d шт.", vehicles_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] зареспавнил весь незанятый транспорт", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Зареспавнил весь незанятый транспорт");

	return 1;
}

CMD:veh(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;
	if(GetPVarInt(playerid,"SpawnCar") > gettime()) return SCM(playerid,COLOR_RED,"\
	 			    	[Ошибка] {FFFFFF}Спавнить авто можно раз в 1 минуту!");
	extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /veh [id модели] [цвет 1] [цвет 2] [доступ игроков (не обязательно)]");

	if(!(400 <= model_id <= 16000)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 16000");

	new status;

	sscanf(params, "{d}{d}{d}d", status);

	if(!(0 <= status <= 1))
		return SendClientMessage(playerid, 0x999999FF, "Доступ игроков к транспорту: 0 - Нет доступа, 1 - Доступно любому игроку");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, status);
	acc_PutPlayerInVehicle(playerid, vehicleid, 0);

	new fmt_text[100];

	if(GetPlayerAdminEx(playerid) <= 4)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт (%d, %d, %d)",
		GetPlayerNameEx(playerid), playerid, model_id, color_1, color_2);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Создал транспорт (%d, %d, %d)", model_id, color_1, color_2);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
	SetPVarInt(playerid, "SpawnCar", gettime());
	return 1;
}

CMD:add_rentveh(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;
	if(GetPVarInt(playerid,"SpawnCar") > gettime()) return SCM(playerid,COLOR_RED,"\
	 			    	[Ошибка] {FFFFFF}Спавнить авто можно раз в 1 минуту!");
	extract params -> new model_id, color_1, color_2, status, id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add_rentveh [id модели] [цвет 1] [цвет 2] [цена] [id аренды]");

	if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	SetTimer("CountRentedVehicles", 1000, 0);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0);

	SetVehicleData(vehicleid, V_RENT, id);
	SetVehicleData(vehicleid, V_RENTP, status);
	SetVehicleData(vehicleid, V_OWRENT, 0);

	new fmt_text[100];

	if(GetPlayerAdminEx(playerid) <= 4)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт (%d, %d, %d)",
		GetPlayerNameEx(playerid), playerid, model_id, color_1, color_2);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Создал транспорт (%d, %d, %d)", model_id, color_1, color_2);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
	SetPVarInt(playerid, "SpawnCar", gettime());
	return 1;
}

CMD:pveh(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;
	if(GetPVarInt(playerid,"SpawnCar") > gettime()) return SCM(playerid,COLOR_RED,"\
	 			    	[Ошибка] {FFFFFF}Спавнить авто можно раз в 1 минуту!");
	extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pveh [id модели] [цвет 1] [цвет 2] [доступ игроков (не обязательно)]");

	//if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

	new status;

	sscanf(params, "{d}{d}{d}d", status);

	if(!(0 <= status <= 1))
		return SendClientMessage(playerid, 0x999999FF, "Доступ игроков к транспорту: 0 - Нет доступа, 1 - Доступно любому игроку");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, status);
	PutPlayerInVehicle(playerid, vehicleid, 0);
	SetPVarInt(playerid, "SpawnCar", gettime());
	return 1;
}

CMD:setleader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setleader [id игрока] [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Правительство области");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Воинская часть");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Городская больница");
		SendClientMessage(playerid, 0xCECECEFF, "4 - ГТРК «Ритм»");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Отдел полиции №1 (ДПС)");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Отдел полиции №2 (ППС)");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Фсин");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Центральное ОПГ");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Западное ОПГ");
		SendClientMessage(playerid, 0xCECECEFF, "10- Северное ОПГ");
		return 1;
	}
	extract params -> new to_player, org_id;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!(0 <= org_id <= 10)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор организации");

	new fmt_msg[155];

	if(!org_id)
	{
	    format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] снял Вас с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] снял %s[%d] с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
		SendMessageToAdmins(fmt_msg, 0x999999FF);
		return InvitePlayer(to_player, 0, 0, true);
	}

	InvitePlayer(to_player, org_id, 10, true);

	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] назначил Вас лидером подразделения \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerSubdivisionName(to_player), GetPlayerTeamName(to_player));
	else
		format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] назначил Вас лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));

	SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);

	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером подразделения \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerSubdivisionName(to_player), GetPlayerTeamName(to_player));
	else
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));

	SendMessageToAdmins(fmt_msg, 0x999999FF);

	if(org_id)
		format(fmt_msg, sizeof fmt_msg, "Назначил %s[acc:%d] лидером %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetTeamName(org_id), org_id);

	else
		format(fmt_msg, sizeof fmt_msg, "Снял %s[acc:%d] с поста лидера", GetPlayerNameEx(to_player), to_player);

	SendLog(playerid, LOG_TYPE_SET_LEADER, fmt_msg);

	return 1;
}

CMD:givegun(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, weapon_id, weapon_ammo; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givegun [id игрока] [id оружия] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(1 <= weapon_id <= 46) || (19 <= weapon_id <= 21)) return SendClientMessage(playerid, 0x999999FF, "ID оружия от 1 до 46");
	if(!(1 <= weapon_ammo <= 1000)) return SendClientMessage(playerid, 0x999999FF, "Количество патронов от 1 до 1000");

	GivePlayerWeapon(to_player, weapon_id, weapon_ammo);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Администратор %s[%d] выдал Вам %s и %d патр.", GetPlayerNameEx(playerid), playerid, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s[%d] %s и %d патр.", GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %s [%d патр]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] %s[%d патр]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetWeaponName(weapon_id), weapon_ammo);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:templeader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new fmt_msg[155];

	if(GetPlayerTeamEx(playerid) > 0)
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы сняли с себя временное лидерство");
		format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] снял с себя временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));
		SendMessageToAdmins(fmt_msg, COLOR_GREY);
		return InvitePlayer(playerid, 0, 0, true);
	}

	Dialog
	(
		playerid, DIALOG_TEMP_LEADER, DIALOG_STYLE_LIST,
		"Временное лидерство",
		"1. Правительство\n\
		2. Мин. Обороны\n\
		3. Больница\n\
		4. ТРК Ритм\n\
		5. Полиция №1 (ДПС)\n\
		6. Полиция №2 (ППС)\n\
		7. ФСИН\n\
		8. Центральное ОПГ\n\
		9. Западное ОПГ\n\
		10. Северное ОПГ",
		"Далее","Отмена"
	);

	return 1;
}

CMD:agivelic(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, license; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-Базовый уровень 2-Профессиональный уровень 3-На оружие)");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_text[144];

	switch(license)
	{
		case 1:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на вождение Базового уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение Базового уровня", GetPlayerData(to_player, P_DRIVING_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на вождение Базового уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 2:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? 0 : 2);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на вождение Профессионального уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение Профессионального уровня", GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на вождение Профессионального уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 3:
		{
			SetPlayerData(to_player, P_WEAPON_LIC, GetPlayerData(to_player, P_WEAPON_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "weapon_lic", GetPlayerData(to_player, P_WEAPON_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на оружие", GetPlayerData(to_player, P_WEAPON_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		default: return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-Базовый уровень 2-Профессиональный уровень 3-На оружие)");
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] лицензию %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), license);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setskills(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, set_code, set_value; else {

	    SendClientMessage(playerid, 0xCECECEFF, "Использование: /setskills [id игрока] [навык] [значение]");
	    SendClientMessage(playerid, 0xCECECEFF, "Коды навыков:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Colt 45");
	    SendClientMessage(playerid, 0xCECECEFF, "2 - SD Pistol");
	    SendClientMessage(playerid, 0xCECECEFF, "3 - Desert Eagle");
	    SendClientMessage(playerid, 0xCECECEFF, "4 - Shotgun");
	    SendClientMessage(playerid, 0xCECECEFF, "5 - MP5");
	    SendClientMessage(playerid, 0xCECECEFF, "6 - AK47");
	    SendClientMessage(playerid, 0xCECECEFF, "7 - M4");
	    SendClientMessage(playerid, 0xCECECEFF, "8 - Sniper Rifle");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Sawnoff");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Combat SG");
		SendClientMessage(playerid, 0xCECECEFF, "11 - Micro Uzi");
	    SendClientMessage(playerid, 0x999999FF, "12 - Сила");
	    return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= set_value <= 100)) return SendClientMessage(playerid, 0x999999FF, "Значение навыка от 0 до 100");

	new tmp_skill_name[32], query[128];

	switch(set_code)
	{
		case 1:
	    {
	        SetPlayerData(to_player, P_SKILL_COLT, set_value);
			tmp_skill_name = "Colt 45";
			UpdatePlayerDatabaseInt(to_player, "skill_colt", set_value);
	    }
	    case 2:
	    {
	        SetPlayerData(to_player, P_SKILL_SDPISTOL, set_value);
			tmp_skill_name = "SD Pistol";
			UpdatePlayerDatabaseInt(to_player, "skill_sdpistol", set_value);
	    }
	    case 3:
	    {
	        SetPlayerData(to_player, P_SKILL_DEAGLE, set_value);
			tmp_skill_name = "Desert Eagle";
			UpdatePlayerDatabaseInt(to_player, "skill_deagle", set_value);
	    }
	    case 4:
	    {
	        SetPlayerData(to_player, P_SKILL_SHOTGUN, set_value);
			tmp_skill_name = "Shotgun";
			UpdatePlayerDatabaseInt(to_player, "skill_shotgun", set_value);
	    }
	    case 5:
	    {
	        SetPlayerData(to_player, P_SKILL_MP5, set_value);
			tmp_skill_name = "MP5";
			UpdatePlayerDatabaseInt(to_player, "skill_mp5", set_value);
	    }
	    case 6:
	    {
	        SetPlayerData(to_player, P_SKILL_AK47, set_value);
			tmp_skill_name = "AK47";
			UpdatePlayerDatabaseInt(to_player, "skill_ak47", set_value);
	    }
	    case 7:
	    {
	        SetPlayerData(to_player, P_SKILL_M4, set_value);
			tmp_skill_name = "M4";
			UpdatePlayerDatabaseInt(to_player, "skill_m4", set_value);
	    }
	    case 8:
	    {
	        SetPlayerData(to_player, P_SKILL_SNIPER_RIFLE, set_value);
			tmp_skill_name = "Sniper Rifle";
			UpdatePlayerDatabaseInt(to_player, "skill_sniper_rifle", set_value);
	    }
		case 9:
	    {
	        SetPlayerData(to_player, P_SKILL_SAWNOFF, set_value);
			tmp_skill_name = "Sawnoff";
			UpdatePlayerDatabaseInt(to_player, "skill_sawnoff", set_value);
	    }
		case 10:
	    {
	        SetPlayerData(to_player, P_SKILL_COMBAT_SG, set_value);
			tmp_skill_name = "Combat SG";
			UpdatePlayerDatabaseInt(to_player, "skill_combat_sg", set_value);
	    }
		case 11:
	    {
	        SetPlayerData(to_player, P_SKILL_MICRO_UZI, set_value);
			tmp_skill_name = "Micro Uzi";
			UpdatePlayerDatabaseInt(to_player, "skill_micro_uzi", set_value);
	    }
	    case 12:
	    {
	        SetPlayerData(to_player, P_POWER, set_value);
			tmp_skill_name = "Сила";
			UpdatePlayerDatabaseInt(to_player, "power", set_value);
	    }
	    default: return SendClientMessage(playerid, 0x999999FF, "Неверно введен код навыка");
	}

	SetPlayerSkillsInit(to_player);

	format(query, sizeof query, "Администратор %s изменил Вам уровень навыка %s на %d", GetPlayerNameEx(playerid), tmp_skill_name, set_value);
	SendClientMessage(to_player, 0x3399FFFF, query);

	format(query, sizeof query, "Вы изменили игроку %s уровень навыка %s на %d", GetPlayerNameEx(to_player), tmp_skill_name, set_value);
	SendClientMessage(playerid, 0x66CC00FF, query);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(query, sizeof query, "[A] Администратор %s[%d] изменил %s[%d] уровень навыка %s на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, tmp_skill_name, set_value);
		SendMessageToAdmins(query, 0x999999FF);
	}

	format(query, sizeof query, "Изменил %s[acc:%d] уровень навыка %s на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), tmp_skill_name, set_value);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, query);

	return 1;
}

CMD:setpremium(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, premium, days; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setpremium [id игрока] [уровень премиум-аккаунта] [время (в днях)]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(1 <= premium <= 4)) return SendClientMessage(playerid, 0x999999FF, "Уровень премиум-аккаунта от 1 до 4 (чтобы отобрать, используйте кол-во дней: 0)");

	if(!(0 <= days <= 30)) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 0 до 30");

	new fmt_msg[100];

	new premium_rank[4][17] =
	{
		"{cd7f32}Bronze",
		"{c0c0c0}Silver",
		"{ffd700}Gold",
		"{e5e4e2}Platinum"
	};

	SetPlayerData(to_player, P_PREMIUM, premium);
	SetPlayerData(to_player, P_PREMIUM_TIME, gettime() + days * 86400);

	UpdatePlayerDatabaseInt(to_player, "premium", premium);
	UpdatePlayerDatabaseInt(to_player, "premium_time", gettime() + days * 86400);

	format(fmt_msg, sizeof fmt_msg, "%s выдал Вам %s {3399FF}премиум-аккаунт на %d дн.", GetPlayerNameEx(playerid), premium_rank[premium - 1], days);
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выдали %s %s {3399FF}премиум-аккаунт на %d дн.", GetPlayerNameEx(to_player), premium_rank[premium - 1], days);
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] премиум-аккаунт %d на %d дн.", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), premium, days);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:arang(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

 	extract params -> new to_player, lvl; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arang [id игрока] [уровень]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= lvl <= 5)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 5");
	if(lvl >= GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать уровень администратора равный или больше вашего");
	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя изменить уровень администрирования  человека выше или равному вашему статусу.");

	SetPlayerData(to_player, P_ADMIN, lvl);
	UpdatePlayerDatabaseInt(to_player, "admin", lvl);

	new fmt_text[128];
	if(lvl > 0)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %d уровень администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, lvl);

		SendMessageToAdmins(fmt_text, 0xFF5533FF);

		format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост администратора %d уровня", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), lvl);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);
	}
	else
	{
	    format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] снял %s[%d] с администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToAdmins(fmt_text, 0xFF5533FF);

		format(fmt_text, sizeof fmt_text, "Снял %s[acc:%d] с поста администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);
	}

	return 1;
}

CMD:adeladmin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /adeladmin [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Нельзя снять главного администратора");

	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Разработчик %s[%d] снял Вас с поста администратора", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] Разработчик %s[%d] снял %s[%d] с поста администратора",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Снял %s[acc:%d] с поста администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setfulldostup(playerid, params[])//доступ
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;
//	if(GetPlayerGiveFullEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет фулл доступа.");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfulldostup [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerFullEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок уже имеет фулл-доступ");

	SetPlayerData(to_player, P_FULL, 1);
	UpdatePlayerDatabaseInt(to_player, "full", 1);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Разработчик %s[%d] выдал вам полный доступ", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[F] Разработчик %s[%d] выдал %s[%d] полный доступ",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] полный доступ", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setmindostup(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setmindostup [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerMinEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок уже имеет мин-доступ");

	SetPlayerData(to_player, P_MIND, 1);
	UpdatePlayerDatabaseInt(to_player, "mind", 1);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Разработчик %s[%d] выдал вам минимальный доступ", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[F] Разработчик %s[%d] выдал %s[%d] минимальный доступ",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] минимальный доступ", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setadmin [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок уже стоит на посту администратора");

	SetPlayerData(to_player, P_ADMIN, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", 1);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Разработчик %s[%d] поставил Вас на пост администратора", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] Разработчик %s[%d] поставил %s[%d] на пост администратора",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:yrang(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

 	extract params -> new to_player, lvl; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /yrang [id игрока] [уровень]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= lvl <= 2)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 2");

	SetPlayerData(to_player, P_YADMIN, lvl);
	UpdatePlayerDatabaseInt(to_player, "yadmin", lvl);

	new fmt_text[128];
	if(lvl > 0)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %d уровень ютуберки",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, lvl);

		SendMessageToAdmins(fmt_text, 0x999999FF);

		format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост ютубера %d уровня", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), lvl);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);
	}
	else
	{
	    format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] снял %s[%d] с ютубера",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToAdmins(fmt_text, 0x999999FF);

		format(fmt_text, sizeof fmt_text, "Снял %s[acc:%d] с поста ютубера", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);
	}

	return 1;
}

CMD:givedonate(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player, donate; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givedonate [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= donate <= 20_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 20000 RCoins за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача RCoins от админа %s", GetPlayerNameEx(playerid));
	GivePlayerDonate(to_player, donate, reason, true, true);

	format(reason, sizeof reason, "Администратор %s выдал Вам %d RCoins", GetPlayerNameEx(playerid), donate);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал RCoins %s[%d] кол-во %d руб, в итоге у игрока %d руб",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, donate, GetPlayerCurrentDonate(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] %d RCoins", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), donate);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

CMD:givemoney(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemoney [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= cash <= 100_000_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 100000000 рублей за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача денег от админа %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, reason, true, true);

	format(reason, sizeof reason, "Администратор %s выдал Вам %d рублей", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал деньги %s[%d] кол-во %d руб, в итоге у игрока %d руб", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, cash, GetPlayerMoneyEx(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] %d руб", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), cash);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

CMD:givemoneyall(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 7) return 1;
	new money = 1000000;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "LoginPlayer") == 1) continue;
		GivePlayerMoneyEx(i, money);
		new string[128];
		format(string, sizeof(string), "Вам было выданно: {FFFFFF}%d!", money);
		SendClientMessage(i, 0xFFFF00FF, string);
	}
	return 1;
}

CMD:setstats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, set_code, set_value; else {

		SendClientMessage(playerid, 0xCECECEFF, "Использование: /setstats [id игрока] [код] [значение]");
		SendClientMessage(playerid, 0xCECECEFF, "Код: 1 - Уровень | 2 - Работа");

		return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_msg[128];

	switch(set_code)
	{
		case 1:
		{
			if(!(1 <= set_value <= 250)) return SendClientMessage(playerid, 0xFF6600FF, "Уровень от 1 до 250");

			SetPlayerData(to_player, P_LEVEL, set_value);

			SetPlayerScore(to_player, set_value);

			format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень на %d", GetPlayerNameEx(playerid), set_value);
			SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s уровень на %d", GetPlayerNameEx(to_player), set_value);
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		case 2:
		{
			if(!(0 <= set_value <= 9)) return SendClientMessage(playerid, 0xFF6600FF, "Ид работы от 0 до 9");
			SetPlayerData(to_player, P_JOB, set_value);

			format(fmt_msg, sizeof fmt_msg, "Администратор %s установил Вам работу %s", GetPlayerNameEx(playerid), GetPlayerJobAndRankName(to_player));
			SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы установили игроку %s работу %s", GetPlayerNameEx(to_player), GetPlayerJobAndRankName(to_player));
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		default: return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Неверно введен код");
	}

	mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE accounts SET level=%d,job=%d WHERE id=%d", GetPlayerLevel(to_player), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:pay(playerid, params[])
{
    if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Передавать деньги можно только с {99ff00}2{CECECE} уровня");
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");
	if(GetPlayerLevel(to_player) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Передавать деньги можно только игроку у которого выше чем {99ff00}2-й{CECECE} уровень");

	new fmt_text[75],
		max_money = GetPlayerLevel(playerid) > 2 ? 5000 : 5000;

	if(!(1 <= cash <= max_money))
	{
		format(fmt_text, sizeof fmt_text, "Сумма должна быть от 1 до %d рублей", max_money);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		return 1;
	}

	if(GetPlayerMoneyEx(playerid) < cash) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет столько денег");

	format(fmt_text, sizeof fmt_text, "+%d", cash);
	SetPlayerChatBubble(to_player, fmt_text, 0x00CC00FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "-%d", cash);
	SetPlayerChatBubble(playerid, fmt_text, 0xFF6600FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "Передача денег от %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "Передача денег игроку %s", GetPlayerNameEx(to_player));
	GivePlayerMoneyEx(playerid, -cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "%s передал Вам деньги %d руб", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы передали игроку %s деньги %d руб", GetPlayerNameEx(to_player), cash);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	Action(playerid, "достал кошелёк и передал деньги", _, false);

	return 1;
}

CMD:rpay(playerid, params[])
{
    if(GetPlayerPrikol(playerid) < 1) return 1;
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");

	new fmt_text[75],
		max_money = GetPlayerLevel(playerid) > 2 ? 5000000 : 5000000;

	if(!(1 <= cash <= max_money))
	{
		format(fmt_text, sizeof fmt_text, "Сумма должна быть от 1 до %d рублей", max_money);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		return 1;
	}

	format(fmt_text, sizeof fmt_text, "+%d", cash);
	SetPlayerChatBubble(to_player, fmt_text, 0x00CC00FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "-%d", cash);
	SetPlayerChatBubble(playerid, fmt_text, 0xFF6600FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "Передача денег от %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "Передача денег игроку %s", GetPlayerNameEx(to_player));
	GivePlayerMoneyEx(playerid, -cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "%s передал Вам деньги %d руб", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы передали игроку %s деньги %d руб", GetPlayerNameEx(to_player), cash);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	Action(playerid, "достал кошелёк и передал деньги", _, false);

	return 1;
}

CMD:gpay(playerid, params[])
{
    if(GetPlayerPrikol(playerid) < 1) return 1;
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gpay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");

	new fmt_text[75],
		max_money = GetPlayerLevel(playerid) > 1 ? 5000000 : 5000000;

	if(!(1 <= cash <= max_money))
	{
		format(fmt_text, sizeof fmt_text, "Сумма должна быть от 1 до %d рублей", max_money);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		return 1;
	}

	format(fmt_text, sizeof fmt_text, "+%d", cash);
	SetPlayerChatBubble(playerid, fmt_text, 0x00CC00FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "-%d", cash);
	SetPlayerChatBubble(to_player, fmt_text, 0xFF6600FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "Передача денег от %s", GetPlayerNameEx(to_player));
	GivePlayerMoneyEx(playerid, cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "Передача денег игроку %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, -cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "%s передал Вам деньги %d руб", GetPlayerNameEx(to_player), cash);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы передали игроку %s деньги %d руб", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	Action(to_player, "достал кошелёк и передал деньги", _, false);

	return 1;
}

CMD:a_panel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	Dialog
	(
		playerid, DIALOG_ADMIN_PANEL, DIALOG_STYLE_LIST,
		"{FFCD00}Управление сервером",
		"\
		1. Список администраторов\n\
		2. Список лидеров\n\
		3. Бейджик администратора\n\
		",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:gaapanel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	Dialog
	(
		playerid, DIALOG_GAADMIN_PANEL, DIALOG_STYLE_LIST,
		"{FFCD00}Управление сервером",
		"\
		1. Бейджик администратора\n\
		2. Список лидеров\n\
		",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:history(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /history [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[128];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_row_int(0, 0);

	cache_delete(result);

	if(!user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	format(query, sizeof query, "SELECT name FROM change_names WHERE owner_id=%d ORDER BY id DESC LIMIT 45", user_id);
	mysql_tquery(mysql, query, "ShowChangeNameHistory", "is", playerid, name);

	return 1;
}
CMD:serverconfig(playerid)
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;
	new string[210];
	format(string, sizeof string,
	"Функция\tСтатус\n"\
	"Умножение доната\tx%d\n"\
	"Умножение EXP\tx%d\n"\
	"Умножение зарплаты\tx%d\n"\
	"Тест/Тех.Работы\t%s\n"\
	"Допущеные до теста\tсписок\n"\
	"Допуск человеку\tдать\n"\
	"Допуск человеку\tзабрать",
	g_doubling[0], g_doubling[1], g_doubling[2], Test_server ? ("{66CC33}включено") : ("{CC3333}выключено"));
	Dialog(playerid, DIALOG_CONFIG, DIALOG_STYLE_TABLIST_HEADERS, "Настройки сервера", string, "Далее", "Отмена");
	return 1;
}
CMD:zbtplayer(playerid)
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;
	new query[128];

	format(query, sizeof query, "SELECT name FROM test_user");
	mysql_tquery(mysql, query, "ShowTestPlayer", "i", playerid);

	return 1;
}
CMD:addzbtplayer(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addzbtplayer [ник]");

	if(!(3 <= strlen(params) <= 21))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM test_user WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		return SendClientMessage(playerid, -1, "У него уже есть доступ!");

	cache_delete(result);

	new str[144];
	format(str, sizeof str, "INSERT INTO `test_user` (`name`) VALUES ('%s')", name);
	mysql_query(mysql, str, false);
	SendClientMessage(playerid, -1, "Добавлено успешно");
	format(query, sizeof query, "[A] %s[%d] дал для %s доступ к тесту", GetPlayerNameEx(playerid), playerid, name);
	SendMessageToAdmins(query, 0x999999FF);
	return 1;
}
CMD:delzbtplayer(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 8) return 1;
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delzbtplayer [ник]");

	if(!(3 <= strlen(params) <= 25))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[25];
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM test_user WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		mysql_format(mysql, query, sizeof query, "DELETE FROM test_user WHERE name='%s'", name);
		mysql_query(mysql, query, false);
		SendClientMessage(playerid, -1, "Удалено");
	}
	else return SendClientMessage(playerid, -1, "У пользователя нет доступа");
	cache_delete(result);
	if(IsPlayerConnected(GetPlayerID(name)))
	{
		SendClientMessage(GetPlayerID(name), -1, "У вас забрали доступ к тестовому серверу!");
		Kick(GetPlayerID(name));
	}
	format(query, sizeof query, "[A] %s[%d] удалил для %s доступ к тесту", GetPlayerNameEx(playerid), playerid, name);
	SendMessageToAdmins(query, 0x999999FF);
	return 1;
}
CMD:c(playerid, params[]) return callcmd::call(playerid, params);
CMD:call(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0x999999FF, "Закончите текущий разговор");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		new number;
		if(sscanf(params, "d", number))
		{
			Dialog
			(
				playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT,
				"{FFCD00}Наберите номер",
				"{6699CC}Номера государственных служб:\n\n\
				{FFFFFF}Полиция\t\t\t{66CC00}02\n\
				{FFFFFF}Скорая помощь\t\t{66CC00}03\n\
				{FFFFFF}Такси\t\t\t\t{66CC00}555\n\
				{FFFFFF}Механик\t\t\t{66CC00}090\n\
				{FFFFFF}Мэрия\t\t\t\t{66CC00}022\n\
				{FFFFFF}Служба точного времени\t{66CC00}060\n\
				{FFFFFF}Оператор связи\t\t{66CC00}111",
				"Позвонить", "Отмена"
			);
			return 1; // (TODO)
		}

		switch(number)
		{
			case 02: return 1;
			case 03: return 1;
			case 555: return 1;
			case 090: return 1;
			case 022: return 1;

			case 060:
			{
				ShowCurrentTime(playerid);
			}
			case 111:
			{
				new fmt_str[175];
				SetPlayerPhoneUseState(playerid, true);

				format
				(
					fmt_str, sizeof fmt_str,
					"{FFFFFF}Здравствуйте! Вы позвонили оператору.\n"\
					"На счету Вашего мобильного телефона {00FF00}%d руб\n\n"\
					"{FFFFFF}Пополнить его можно в любом банкомате.\n"\
					"Всего доброго!",
					GetPlayerData(playerid, P_PHONE_BALANCE)
				);
				Dialog(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "{FFCD00}Оператор сотовой связи", fmt_str, "Ок", "Отмена");
			}

			default:
			{
				new subscriber = GetPlayerIDByPhone(number);

				if(number < 1)
					return SendClientMessage(playerid, 0x999999FF, "Данный номер не обслуживается");

				if(subscriber == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Набранный Вами номер не обслуживается");

				if(subscriber == playerid || GetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(subscriber, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0x999999FF, "Абонент занят");

				if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
					return SendClientMessage(playerid, 0x999999FF, "Телефон абонента вне зоны доступа");

				SetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER, subscriber);
				SetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER, playerid);

				new fmt_str[90];

				format(fmt_str, sizeof fmt_str, "Исходящий звонок | Номер: %d {FFCD00}| Ожидание ответа от %s...", number, GetPlayerNameEx(subscriber));
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);

				format(fmt_str, sizeof fmt_str, "Входящий звонок | Номер: %d {FFCD00}| Вызывает %s", GetPlayerPhone(playerid), GetPlayerNameEx(playerid));
				SendClientMessage(subscriber, 0x3399FFFF, fmt_str);

				SendClientMessage(subscriber, 0xFFFFFFFF, "Используйте {00CC00}/p {FFFFFF}чтобы ответить или {FF6600}/h {FFFFFF}чтобы отклонить вызов");
				SetPlayerPhoneUseState(playerid, true);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}

	return 1;
}

CMD:p(playerid, params[])
{
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1) return 1;

	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	if(caller != INVALID_PLAYER_ID)
	{
		SetPlayerPhoneCall(caller, PC_TIME, 0);
		SetPlayerPhoneCall(playerid, PC_TIME, 0);

		new fmt_str[64];
		format(fmt_str, sizeof fmt_str, "Вы ответили на звонок %s", GetPlayerNameEx(caller));
		SendClientMessage(playerid, 0xDD90FFFF, fmt_str);

		format(fmt_str, sizeof fmt_str, "%s ответил на Ваш звонок", GetPlayerNameEx(playerid));
		SendClientMessage(caller, 0xDD90FFFF, fmt_str);

		SetPlayerPhoneUseState(playerid, true, false);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Нет входящих вызовов");

	return 1;
}

CMD:h(playerid, params[])
{
	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

	if(call_to != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(call_to);
			SendClientMessage(call_to, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(call_to, false);
		}
		SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
	}
	else if(caller != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(caller);
			SendClientMessage(caller, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(caller, false);
		}
		if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
		{
			SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
		}
		else SendClientMessage(playerid, 0xFF9944FF, "Вы отклонили входящий вызов");
	}
	else return 1;

	ClearPlayerPhoneCall(playerid);
	SetPlayerPhoneUseState(playerid, false);

	return 1;
}

CMD:sms(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_MUTE)) return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать данную функцию пока не пройдёт блокировка чата");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sms [номер телефона] [сообщение]");

		extract params -> new number, string:message[66];

		if(number < 550)
			return SendClientMessage(playerid, 0x999999FF, "Данный номер не обслуживается");

		new subscriber = GetPlayerIDByPhone(number);

		if(subscriber != INVALID_PLAYER_ID)
		{
			if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
				return SendClientMessage(playerid, 0x999999FF, "Не удается отправить сообщение. Телефон абонента недоступен");

			if(!strlen(message))
				return SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

			if(strlen(message) > 64)
				return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");

			AddPlayerData(playerid, P_PHONE_BALANCE, -, 5);
			GameTextForPlayer(playerid, "SMS ~n~~y~-5 rub", 4000, 1);

			new fmt_str[128];

			format(fmt_str, sizeof fmt_str, "SMS: %s | Отправитель: %s [т.%d]", message, GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
			SendClientMessage(subscriber, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(subscriber, "SMS <<", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "SMS: %s | Получатель: %s [т.%d]", message, GetPlayerNameEx(subscriber), GetPlayerPhone(subscriber));
			SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(playerid, "SMS >>", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_PHONE_BALANCE), GetPlayerAccountID(playerid));
			mysql_tquery(mysql, fmt_str, "", "");

			if(g_admin_ears)
			{
				format(fmt_str, sizeof fmt_str, "[A] SMS: %s | от %s[%d] к %s[%d]", message, GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(subscriber), subscriber);
				SendMessageToAdmins(fmt_str, 0xFFFF00FF);
			}

			format(fmt_str, sizeof fmt_str, "Для %s[acc:%d]: %s", GetPlayerNameEx(subscriber), GetPlayerAccountID(subscriber), message);
			SendLog(playerid, LOG_TYPE_SMS_CHAT, fmt_str);
		}
		else SendClientMessage(playerid, 0x999999FF, "Телефон находится вне зоны доступа");
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0xCECECEFF, "Закончите текущий разговор");

	if(GetPlayerPhoneCall(playerid, PC_ENABLED))
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, false);
		SendClientMessage(playerid, 0xFF6600FF, "Телефон отключен");
	}
	else
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, true);
		SendClientMessage(playerid, 0x66CC00FF, "Телефон включен");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны сидеть за рулем транспорта");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /eject [id игрока]");

	extract params -> new to_player;

	if(vehicleid != GetPlayerVehicleID(to_player) || playerid == to_player)
		return SendClientMessage(playerid, 0x999999FF, "Игрок должен сидеть в Вашем транспорте");

	RemovePlayerFromVehicle(to_player);

	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "%s выкинул Вас из своего транспорта", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Вы выкинули %s из своего транспорта", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);

	return 1;
}

CMD:book(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	return ShowPlayerPhoneBook(playerid);
}

CMD:add(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add [id игрока] [номер телефона]");

	extract params -> new to_player, string: number[10];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerPhoneBookInit(playerid))
		InitPlayerPhoneBook(playerid);

	if(GetPlayerPhoneBookContacts(playerid) >= MAX_PHONE_BOOK_CONTACTS)
		return SendClientMessage(playerid, 0xCECECEFF, "Записная книжка заполнена. Удалите ненужные контакты");

	if((3 <= strlen(number) <= 9) && IsNumeric(number) && strval(number) > 0)
		return AddPhoneBookContact(playerid, GetPlayerNameEx(to_player), number);

	SetPVarString(playerid, "add_contact_name", GetPlayerNameEx(to_player));
	new fmt_str[64 + 1];

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", GetPlayerNameEx(to_player));
	return Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}Добавление нового контакта", fmt_str, "Добавить", "Отмена");
}
CMD:fuel(playerid, params[])
{
	new fmt_str[41];
	new string[40 * (MAX_FUEL_STATIONS+2) + 1] = "№ АЗС\t\tСтоимость 1 л\t\tВ наличии\t\tНазвание АЗС\n\n{FFFFFF}";

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d\t\t\t%d руб\t\t%d л\t\t%s\n", idx, GetFuelStationData(idx, FS_FUEL_PRICE), GetFuelStationData(idx, FS_FUELS), GetFuelStationData(idx, FS_NAME));
		strcat(string, fmt_str);
	}
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Заправочные станции", string, "Закрыть", "");
}

CMD:buyfuel(playerid, params[])
{
	ShowPlayerBuyJerricanDialog(playerid, GetNearestFuelStation(playerid, 10.0));

	return 1;
}

CMD:fill(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /fill [id игрока] [кол-во топлива] [стоимость]");

	extract params -> new to_player, fill_fuel_count, fill_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Клиент должен находиться за рулем");

	if(1 <= GetPlayerJobLoadItems(playerid) <= fill_fuel_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества топлива");

	if(!(1 <= fill_price <= 1500))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 1500 рублей");

	if(GetPlayerMoneyEx(to_player) < fill_price)
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FILL_CAR, fill_fuel_count, fill_price);
	return 1;
}

CMD:repair(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /repair [id игрока] [стоимость]");

	extract params -> new to_player, repair_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Клиент должен находиться за рулем");

	new Float: vehicle_health;
	GetVehicleHealth(GetPlayerVehicleID(to_player), vehicle_health);
	if(vehicle_health < 350.0 && !IsPlayerInRangeOfPoint(playerid, 80.0, 1180.0962,2500.5166,12.4769)) return SendClientMessage(playerid, 0xCECECEFF, "Транспорт клиента очень сильно поврежден, отвезите его на стоянку автомехаников {CCCC00}(/gps)");

	if(!(1 <= repair_price <= 8000))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 8000 рублей");

	if(GetPlayerMoneyEx(to_player) < repair_price)
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_REPAIR_CAR, repair_price);
	return 1;
}

CMD:getfuel(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{
		SetPVarInt(playerid, "nearest_fuel_st", stationid);

		if(IsFuelStationOwned(stationid))
		{
			if(GetFuelStationData(stationid, FS_FUELS) < 10)
				return SendClientMessage(playerid, 0xFF6600FF, "Хранилище этой АЗС пусто");
		}

		new fmt_str[150];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Топливо на АЗС:\t\t%d/10000 л\n"\
			"Стоимость 1 литра:\t%d руб\n\n"\
			"Введите кол-во бензина, которое хотите закупить\n"\
			"(число должно быть кратным 10)",
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationData(stationid, FS_FUEL_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "{FFCD00}Закупка топлива", fmt_str, "Купить", "Отмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");

	return 1;
}
CMD:buyfuelst(playerid, params[])
{
	if(GetPlayerFuelStation(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть заправка. Чтобы купить другую необходимо продать старую");

	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buyfuelst", stationid);

		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t{339999}%s\n"\
			"{FFFFFF}Стоимость:\t\t\t{6699FF}%d руб\n"\
			"{FFFFFF}Плата за аренду:\t\t{6699FF}%d руб в день\n\n"\
			"{669966}Вы уверены что хотите купить эту заправку?",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка заправочной станции", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с заправкой, которую хотите купить");

	return 1;
}

CMD:fuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[850];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
			"{FFFFFF}Номер заправки:\t\t\t%d\n"\
			"Владелец:\t\t\t\t%s\n"\
			"Город / область:\t\t\t%s\n"\
			"Район:\t\t\t\t\t%s\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Количество топлива:\t\t\t%d из %d\n"\
			"Цена топлива:\t\t\t%d руб за 1 л\n"\
			"Закупочная цена:\t\t\t%d руб за 1 л\n"\
			"Бюджет заправки:\t\t\t%d руб\n"\
			"АЗС арендована на:\t\t\t%d/30 дней\n"\
			"Гос. стоимость:\t\t\t%d руб\n"\
			"Аренда территории:\t\t\t%d руб в день\n"\
			"Акцизный сбор:\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления заправочной станцией\n"\
			"нажмите кнопку \"Изменить\"",
			GetFuelStationData(stationid, FS_NAME),
			stationid,
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetCityName(GetFuelStationData(stationid, FS_CITY)),
			GetZoneName(GetFuelStationData(stationid, FS_ZONE)),
			GetFuelStationData(stationid, FS_IMPROVEMENTS),
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationMaxFuel(stationid),
			GetFuelStationData(stationid, FS_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BUY_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BALANCE),
			GetFuelStationData(stationid, FS_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Взымается") : ("Не взымается"),
			GetFuelStationData(stationid, FS_LOCK_STATUS) ? ("{CC3333}Станция закрыта") : ("{66CC33}Станция открыта")
		);
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о заправке", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");
	return 1;
}

CMD:sellfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, DIALOG_FUEL_STATION_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа заправочной станции",
			"{FFFFFF}Вы уверены что хотите продать свою заправочную станцию государству?\n\n"\
			"Вам будет возвращена ее стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать заправочную станцию другому игроку,\n"\
			"используйте команду /sellmyfuelst",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");

	return 1;
}
CMD:sellmyfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		if(GetPlayerLevel(playerid) < 2)
		    return SendClientMessage(playerid, 0xFF6600FF, "Этим можно пользоваться со 2 уровня");
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyfuelst [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

		new Float: f_pos_x = GetFuelStationData(stationid, FS_POS_X);
		new Float: f_pos_y = GetFuelStationData(stationid, FS_POS_Y);
		new Float: f_pos_z = GetFuelStationData(stationid, FS_POS_Z);

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");

		if(!(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(to_player, 10.0, f_pos_x, f_pos_y, f_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с заправкой которую хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_FUEL_ST, stationid, price);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет заправки");

	return 1;
}
/*CMD:business(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		static const
			music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};

		if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
		{
			SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
		}

		new fmt_str[900];
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_ARENDA)
		{
		    format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
				"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
				"Владелец:\t\t\t\t%s\n"\
				"Город / область:\t\t\t%s\n"\
				"Район:\t\t\t\t\t%s\n"\
				"Количество продуктов:\t\t%d из %d\n"\
				"Стоимость 1 продукта:\t\t%d руб\n"\
				"Уровень улучшений:\t\t\t%d\n"\
				"Баланс предприятия:\t\t\t%d руб\n"\
				"Бизнес арендован на:\t\t%d/30 дней\n"\
				"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
				"Аренда помещения:\t\t\t%d руб в день\n"\
				"Тип аренды:\t\t\t\t%s\n"\
				"{669966}Для открытия панели управления вашим бизнесом\n"\
				"нажмите кнопку \"Изменить\"",
				GetBusinessData(businessid, B_NAME),
				businessid,
				GetBusinessData(businessid, B_OWNER_NAME),
				GetCityName(GetBusinessData(businessid, B_CITY)),
				GetZoneName(GetBusinessData(businessid, B_ZONE)),
				GetBusinessData(businessid, B_PRODS),
				GetBusinessMaxProd(businessid),
				GetBusinessData(businessid, B_PROD_PRICE),
				GetBusinessData(businessid, B_IMPROVEMENTS),
				GetBusinessData(businessid, B_BALANCE),
				GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
				GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
				GetBusinessData(businessid, B_PRICE),
				GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
				GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная")
			);
		}
		else
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
				"{FFFFFF}Номер бизнеса:\t\t\t%d\n"\
				"Владелец:\t\t\t\t%s\n"\
				"Город / область:\t\t\t%s\n"\
				"Район:\t\t\t\t\t%s\n"\
				"Плата за вход:\t\t\t%d руб\n"\
				"Количество продуктов:\t\t%d из %d\n"\
				"Стоимость 1 продукта:\t\t%d руб\n"\
				"Уровень улучшений:\t\t\t%d\n"\
				"Баланс предприятия:\t\t\t%d руб\n"\
				"Бизнес арендован на:\t\t%d/30 дней\n"\
				"Звук при входе:\t\t\t{%s}%s\n"\
				"{FFFFFF}Гос. стоимость:\t\t\t%d руб\n"\
				"Аренда помещения:\t\t\t%d руб в день\n"\
				"Тип аренды:\t\t\t\t%s\n"\
				"Статус:\t\t\t\t\t%s\n\n"\
				"{669966}Для открытия панели управления вашим бизнесом\n"\
				"нажмите кнопку \"Изменить\"",
				GetBusinessData(businessid, B_NAME),
				businessid,
				GetBusinessData(businessid, B_OWNER_NAME),
				GetCityName(GetBusinessData(businessid, B_CITY)),
				GetZoneName(GetBusinessData(businessid, B_ZONE)),
				GetBusinessData(businessid, B_ENTER_PRICE),
				GetBusinessData(businessid, B_PRODS),
				GetBusinessMaxProd(businessid),
				GetBusinessData(businessid, B_PROD_PRICE),
				GetBusinessData(businessid, B_IMPROVEMENTS),
				GetBusinessData(businessid, B_BALANCE),
				GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
				GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
				!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
				music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
				GetBusinessData(businessid, B_PRICE),
				GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
				GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
				GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт")
			);
		}
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о бизнесе", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
	return 1;
}*/

cmd:business(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid) && GetPlayerBusiness_2(playerid); 
	if(businessid != -1)
	{
		new text[1024];

		format(text, sizeof text, "1.%s\n2.%s", GetPlayerBizName(playerid), GetPlayerBizNames(playerid));

		Dialog(playerid, DIALOG_BIZ_LIST, DIALOG_STYLE_LIST, "{FFCC00}Мои бизнесы", text, "Выбрать", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");
	return 1;
}
CMD:buybiz(playerid, params[])
{
	if(GetBusiness(playerid) != -1 && GetBusiness_2(playerid) != -1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть 2 бизнеса. Чтобы купить другой необходимо продать старый");

	new businessid = GetNearestBusiness(playerid, 4.0);
	if(businessid != -1)
	{
		SetPVarInt(playerid, "buy_biz_id", businessid);
		new fmt_str[376];
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_XZ)
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Название:\t\t\t{339999}%s\n"\
				"{FFFFFF}Стоимость:\t\t\t{6699FF}%d руб\n"\
				"{FFFFFF}Плата за аренду:\t\t{6699FF}%d руб в день\n\n"\
				"{669966}Вы уверены что хотите купить этот бизнес?\n"\
				"{669966}Данный бизнес находится на стадии строительства и никакого дохода с него ещё нет",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_PRICE),
				GetBusinessData(businessid, B_RENT_PRICE)
			);
		}
		else
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Название:\t\t\t{339999}%s\n"\
				"{FFFFFF}Стоимость:\t\t\t{6699FF}%d руб\n"\
				"{FFFFFF}Плата за аренду:\t\t{6699FF}%d руб в день\n\n"\
				"{669966}Вы уверены что хотите купить этот бизнес?",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_PRICE),
				GetBusinessData(businessid, B_RENT_PRICE)
			);
		}
		Dialog(playerid, DIALOG_BIZ_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка нового бизнеса", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с бизнесом, который хотите купить");

	return 1;
}

CMD:sellbiz(playerid, params[])
{
/*	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа бизнеса",
			"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
			"Вам будет возвращено его стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать бизнес другому игроку,\n"\
			"используйте команду /sellmybiz",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");

	new businessid2 = GetBusines(playerid);
	if(businessid2 != -1)
	{
		Dialog
		(
			playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа бизнеса2",
			"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
			"Вам будет возвращено его стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать бизнес другому игроку,\n"\
			"используйте команду /sellmybiz",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");*/

	new text[124];

	new businessid = GetPlayerBusiness(playerid) && GetBusiness_2(playerid);
	if(businessid != -1)
	{
		format(text, sizeof text, "1.%s\n2.%s", GetPlayerBizName(playerid), GetPlayerBizNames(playerid));

		Dialog(playerid, DIALOG_SELLBIZ, DIALOG_STYLE_LIST, "{FFCC00}Выберите бизнес который хотите продать!", text, "Выбрать", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");

	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	new businessid1 = GetBusiness_2(playerid);
	if(businessid != -1 && businessid1 != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmybiz [id игрока] [стоимость] [порядковый номер бизнеса]");

		extract params -> new to_player, price, slot;

//		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
//			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	 	if(slot > 2 || slot < 1) return SendClientMessage(playerid, -1, "Выберите либо 1 либо 2 номер бизнеа");

		if(slot == 1) return SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса в данном слоте");
		{
			if(price < 1)
				return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

			new Float: b_pos_x = GetBusinessData(businessid, B_POS_X);
			new Float: b_pos_y = GetBusinessData(businessid, B_POS_Y);
			new Float: b_pos_z = GetBusinessData(businessid, B_POS_Z);

			if(GetPlayerMoneyEx(to_player) < price)
				return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");

			if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z))
				SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с бизнесом который хотите продать");

			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_BUSINESS, businessid, price);
		}
		if(slot == 2) return SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса в данном слоте");
		{
			if(price < 1)
				return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

			new Float: b_pos_x = GetBusinessData(businessid1, B_POS_X);
			new Float: b_pos_y = GetBusinessData(businessid1, B_POS_Y);
			new Float: b_pos_z = GetBusinessData(businessid1, B_POS_Z);

			if(GetPlayerMoneyEx(to_player) < price)
				return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");

			if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z))
				SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с бизнесом который хотите продать");

			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_BUSINESS_2, businessid1, price);
		}
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет бизнеса");

	return 1;
}

CMD:bizmusic(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 4)
		{
			new fmt_str[13 + 1];
			new string[(sizeof fmt_str - 1) * (sizeof g_business_sound) + 1];

			string = "1. Отключен\n";
			for(new idx = 1; idx <= sizeof g_business_sound; idx ++)
			{
				format(fmt_str, sizeof fmt_str, "%d. Звук №%d\n", idx + 1, idx);
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_BIZ_ENTER_MUSIC, DIALOG_STYLE_LIST, "{FFCD00}Звук при входе в бизнес", string, "Выбрать", "Закрыть");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Для использование этой функции необходим 4 уровень улучшения бизнеса");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:manager(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /manager [id игрока]");

		extract params -> new to_player;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0))
			return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_BUSINESS_MANAGER, businessid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:buy(playerid, params[])
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
		{
/*			Dialog
			(
				playerid, DIALOG_DOP_SHOP, DIALOG_STYLE_LIST,
				"{0099FF}Магазин 24/7",
				"1. Аптечка (2 шт)\t\t{00CC00}15000 руб\n"\
				"2. Фотоаппарат (15 снимков)\t{00CC00}6000 руб\n"\
				"3. Букет цветов\t\t{00CC00}6500 руб\n"\
				"4. Трость\t\t\t{00CC00}18000 руб\n"\
				"5. Парашют\t\t\t{00CC00}24000 руб\n"\
				"6. Лотерейный билет\t\t{00CC00}15000 руб\n"\
				"7. Маска\t\t\t{00CC00}7100 руб\n"\
				"8. Бумбокс\t\t\t{00CC00}5000 руб",
				"Купить", "Отмена"
			);*/
            for(new i; i < 8; i++)
			{
			    PlayerTextDrawShow(playerid, shop_PTD[playerid][i]);
			    SelectTextDraw(playerid, -1);
			    SetPVarInt(playerid, "shop", 1);
			}
   			SelectTextDraw(playerid, -1);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
		{
/*			Dialog
			(
				playerid, DIALOG_BIZ_CELL_SALON, DIALOG_STYLE_LIST,
				"{FFCD00}Сотовый салон",
				"1. Мобильный телефон\t{00CC00}25000 руб\n"\
				"2. Изменить номер\t\t{00CC00}10000 руб\n"\
				"3. Изменить цвет телефона\t{00CC00}2500 руб\n"\
				"4. Пополнить счёт телефона\n"\
				"5. Покупка ноутбука\t{00CC00}100000 руб",
				"Купить", "Отмена"
			);*/
            for(new i; i < 6; i++)
			{
			    PlayerTextDrawShow(playerid, cell_salon_PTD[playerid][i]);
			    SelectTextDraw(playerid, -1);
			    SetPVarInt(playerid, "cell_salon", 1);
			}
   			SelectTextDraw(playerid, -1);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_BUY_GUN))
		{
			Dialog
			(
				playerid, DIALOG_BIZ_BUY_GUN, DIALOG_STYLE_LIST,
				"{FFCD00}Магазин оружия",
				"1. Desert-Eagle\t\t\t{00CC00}50000 руб\n"\
				"2. ShotGun\t\t\t{00CC00}100000 руб\n"\
				"3. Снайперская винтовка\t{00CC00}700000 руб\n"\
				"4. MP-5\t\t\t\t{00CC00}70000 руб\n"\
				"5. SD-Pistol\t\t\t{00CC00}100000 руб",
				"Купить", "Отмена"
			);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в продуктовом магазине/сотовом салоне");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в продуктовом магазине/сотовом салоне");

	return 1;
}

CMD:healme(playerid, params[])
{
	if(GetPlayerData(playerid, P_MED_CHEST) <= 0)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой аптечки");

	AddPlayerData(playerid, P_MED_CHEST, -, 1);
	SetPlayerHealthEx(playerid, 60.0, true);

	GameTextForPlayer(playerid, "~b~+60 hp", 15000, 1);
	SendClientMessage(playerid, 0x3399FFFF, "Вы использовали аптечку. Здоровье пополнено на 60 единиц");

	ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);

	return 1;
}

CMD:present(playerid, params[])
{
	if(!IsPlayerHaveWeapon(playerid, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет цветов");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /present [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 3.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");

	if(IsPlayerHaveWeapon(to_player, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть букет цветов");

	new fmt_str[64];

	new Float: angle;
	new Float: to_x, Float: to_y;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerPos(to_player, to_x, to_y, z);

	angle = GetAngleToPoint(to_x, to_y, x, y);

	SetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(to_player, angle + 180.0);

	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(to_player, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);

	format(fmt_str, sizeof fmt_str, "%s получил(а) от Вас цветы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "%s подарил(а) Вам цветы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);

	SetTimerEx("PresentFlowersToPlayer", 1500, false, "ii", playerid, to_player);
	return 1;
}

CMD:mask(playerid, params[])
{
	if(GetPlayerData(playerid, P_MASK) != 1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой маски");

	SetPlayerData(playerid, P_MASK, 600 + 1);
	SetPlayerColorEx(playerid, 0x00000000);

	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 0);
	SetPlayerChatBubble(playerid, "Надевает маску", 0xFF9900FF, 15.0, 5000);

	GameTextForPlayer(playerid, "~b~~h~invisible on", 2500, 4);
	SendClientMessage(playerid, 0x3399FFFF, "Ваше месторасположение на GPS скрыто на 10 минут");

	return 1;
}

CMD:gate(playerid, params[])
{
	if(!CheckNearestGate(playerid))
	{
		CallRemoteFunction("FS_PlayerUseButton", "i", playerid);
	}
	return 1;
}

CMD:home(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[900];
		new entranceid = GetHouseData(houseid, H_ENTRACE);

		format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип / название:\t\t\t{339999}%s\n", GetHouseData(houseid, H_NAME));
		if(entranceid != -1)
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"%s{FFFFFF}Номер подъезда:\t\t\t%d\n"\
				"Номер квартиры:\t\t\t%d\n"\
				"Город / область:\t\t\t%s\n"\
				"Район:\t\t\t\t\t%s\n",
				fmt_str,
				entranceid + 1,
				GetHouseData(houseid, H_FLAT_ID) + 1,
				GetCityName(GetEntranceData(entranceid, E_CITY)),
				GetZoneName(GetEntranceData(entranceid, E_ZONE))
			);
		}
		else
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"%s{FFFFFF}Номер дома:\t\t\t\t%d\n"\
				"Город / область:\t\t\t%s\n"\
				"Район:\t\t\t\t\t%s\n",
				fmt_str,
				houseid,
				GetCityName(GetHouseData(houseid, H_CITY)),
				GetZoneName(GetHouseData(houseid, H_ZONE))
			);
		}

		format
		(
			fmt_str, sizeof fmt_str,
			"%sСтоимость:\t\t\t\t%d руб\n"\
			"Дом оплачен на:\t\t\t%d/30 дней\n"\
			"Количество комнат:\t\t\t%d\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Модель домашнего авто:\t\t{FF3333}Нет\n"\
			"{FFFFFF}Квартплата:\t\t\t\t%d руб в день\n"\
			"Тип квартплаты:\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления вашим домом\n"\
			"нажмите кнопку \"Изменить\"",
			fmt_str,
			GetHouseData(houseid, H_PRICE),
			GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
			GetHouseData(houseid, H_IMPROVEMENTS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Обычная") : ("Пониженная"),
			GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}Дом закрыт") : ("{66CC33}Дом открыт")
		);
		Dialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}Информация о доме", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:sellhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Продажа дома",
			"{FFFFFF}Вы уверены что хотите продать свой дом государству?\n\n"\
			"Вам будет возвращено ее стоимость за вычитом 40%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать дом другому игроку,\n"\
			"используйте команду /sellmyhome",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:sellmyhome(playerid, params[])
{
    if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Продавать дом можно только с {99ff00}2{CECECE} уровня");
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyhome [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(price < 1)
			return SendClientMessage(playerid, 0xFF6600FF, "Укажите стоимость продажи");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около дома который хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_HOME, houseid, price);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:live(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		new rooms = GetHouseTypeInfo(type, HT_ROOMS);

		if(GetHouseRentersCount(houseid) >= rooms)
			return SendClientMessage(playerid, 0x999999FF, "Все комнаты Вашего дома уже заняты");

		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /live [id игрока]"); // [кол-во дней] [цена (необязательно)]

		extract params -> new to_player, days, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и арендатор должны находиться около дома который хотите сдать в аренду");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HOME_RENT_ROOM, houseid);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:liveout(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_EVICT, DIALOG_STYLE_MSGBOX,
			"{FF9900}Выселение из дома",
			"{FFFFFF}Вы действительно хотите выселиться из дома?",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы нигде не проживаете");

	return 1;
}

CMD:makestore(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
		{
			if(GetPlayerInHouse(playerid) == houseid)
			{
				new type = GetHouseData(houseid, H_TYPE);
				if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_MOVE_STORE, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Шкаф",
						"{FFFFFF}Вы хотите разместить шкаф в этом месте?",
						"Да", "Нет"
					);
				}
				else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у себя в доме");
			}
			else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у себя в доме");
		}
		else SendClientMessage(playerid, 0x999999FF, "Необходим 5 уровень улучшений для дома");
	}
	else SendClientMessage(playerid, 0x999999FF, "Функция доступна владельцам недвижимости");

	return 1;
}

CMD:use(playerid, params[])
{
	new house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);

	if(house_id == -1) return SendClientMessage(playerid, 0xFF6600FF, "Функция доступна владельцам недвижимости");

	if(GetPlayerInHouse(playerid) != house_id) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в своём доме");

	if(GetHouseData(house_id, H_IMPROVEMENTS) < 5) return SendClientMessage(playerid, 0xFF6600FF, "Необходим 5 уровень улучшений для дома");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, GetHouseData(house_id, H_STORE_X), GetHouseData(house_id, H_STORE_Y), GetHouseData(house_id, H_STORE_Z)))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться у своего шкафа");

	Dialog
	(
		playerid, DIALOG_HOUSE_STORE, DIALOG_STYLE_LIST,
		"Шкаф",
		"1. Положить металл\n\
		2. Положить наркотики\n\
		3. Положить оружие\n\
		4. Положить одежду\n\
		5. Взять металл\n\
		6. Взять наркотики\n\
		7. Взять оружие\n\
		8. Взять одежду",
		"Далее", "Закрыть"
	);

	return 1;
}

CMD:homelock(playerid, params[])
{
	new hotel_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(hotel_id != -1)
	{
		if(GetHotelData(hotel_id, room_id, H_STATUS))
		{
			SetHotelData(hotel_id, room_id, H_STATUS, false);

			GameTextForPlayer(playerid, "~g~~h~OЏKP‘ЏO", 2000, 4);
			SendClientMessage(playerid, 0x66CC00FF, "Номер открыт");
		}
		else
		{
			SetHotelData(hotel_id, room_id, H_STATUS, true);

			GameTextForPlayer(playerid, "~r~~h~€AKP‘ЏO", 2000, 4);
			SendClientMessage(playerid, 0xFF6600FF, "Номер закрыт");
		}

		new query[64];
		format(query, sizeof query, "UPDATE hotels SET status=%d WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_STATUS), GetHotelData(hotel_id, room_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы не снимаете номер в гостинице");

	return 1;
}

CMD:exit(playerid, params[])
{
	if(GetPlayerInHouse(playerid) != -1)
	{
		ExitPlayerFromHouse(playerid, 3.0);
	}
	else if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
	{
		ExitPlayerFromHotelRoom(playerid);
	}
	else if(!GetPlayerInterior(playerid))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не в помещении");
	}

	return 1;
}

cmd:power(playerid) {
	if(TI[playerid][tDMArea][0]) {
	    SetPlayerPosAC(playerid,GetPVarFloat(playerid,"pos_comp_x"),GetPVarFloat(playerid,"pos_comp_y"),GetPVarFloat(playerid,"pos_comp_z")+1.5,GetPVarInt(playerid,"comp_vw"),
			GetPVarInt(playerid,"comp_int"));

		TI[playerid][tVirtualWorld] = GetPVarInt(playerid,"comp_vw");
		TI[playerid][tInterior] = GetPVarInt(playerid,"comp_int");

  		DestroyDynamic3DTextLabel(DMSTATUS[playerid]);
		DMSTATUS[playerid] = Text3D:(0xFFFF);
		PlayerTextDrawHide(playerid,DmArenaTextDraw[playerid]);
		new query[156];
		format(query,sizeof(query), "UPDATE `accounts` SET kills = kills + '%d' WHERE name = '%s'",TI[playerid][tDMArea][1],GetPlayerNameEx(playerid));
		mysql_tquery(mysql,query,"","");
		TI[playerid][tDMArea][0] = 0;
		TI[playerid][tDMArea][1] = 0;
		TI[playerid][tDMArea][2] = 0;
		if(GetPlayerData(playerid, P_TEAM)) {
			SetPlayerSkin(playerid,GetPlayerData(playerid, P_OSKIN));
			SetPlayerColorInit(playerid);
		}
		else SetPlayerColorInit(playerid);
		DelGun(playerid);
	}
 	else if(TI[playerid][tGunArea][0]) {
	    SetPlayerPosAC(playerid,GetPVarFloat(playerid,"pos_comp_x"),GetPVarFloat(playerid,"pos_comp_y"),GetPVarFloat(playerid,"pos_comp_z")+1.5,GetPVarInt(playerid,"comp_vw"),
			GetPVarInt(playerid,"comp_int"));

		TI[playerid][tVirtualWorld] = GetPVarInt(playerid,"comp_vw");
		TI[playerid][tInterior] = GetPVarInt(playerid,"comp_int");

		DestroyDynamic3DTextLabel(DMSTATUS[playerid]);
		DMSTATUS[playerid] = Text3D:(0xFFFF);
		PlayerTextDrawHide(playerid,DmArenaTextDraw[playerid]);
		TI[playerid][tGunArea][0] = 0;
		TI[playerid][tGunArea][1] = 0;
		TI[playerid][tGunArea][2] = 0;
		TI[playerid][tGunArea][3] = 0;
		if(GetPlayerData(playerid, P_TEAM)) {
			SetPlayerSkin(playerid,GetPlayerData(playerid, P_OSKIN));
			SetPlayerColorInit(playerid);
		}
		else SetPlayerColorInit(playerid);
		DelGun(playerid);
	}
	return 1;
}

CMD:lift(playerid, params[])
{
	new entranceid = GetPlayerInEntrance(playerid);
	if(entranceid != -1)
	{
		new floor = GetPlayerInEntranceFloor(playerid);
		if(floor != -1)
		{
			if(!floor)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.5, 3031.6641,1700.7533,997.5250) && !IsPlayerInRangeOfPoint(playerid, 1.5, 3022.8372,1700.9956,997.5250))
					return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около лифта");
			}
			else
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2778.0535,1700.8218,997.5250) && !IsPlayerInRangeOfPoint(playerid, 1.5, 2768.8918,1700.9902,997.5250))
					return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около лифта");
			}
			ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы не в подъезде");

	return 1;
}
CMD:lock(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");

	extract params -> new type;

	new Float: radius = 20.0;
	new vehicleid = INVALID_VEHICLE_ID;

	switch(type)
	{
		case 1:
		{
			//vehicleid = GetPlayerOwnableCarLast(playerid);
			new Float:Distance_ = 50.0;
			for(new c = 0; c<35; c++)
			{
			    if(cars_g[playerid][c] != INVALID_VEHICLE_ID)
			    {
			        new Float:Distance = D_PlayerVehicle(playerid, cars_g[playerid][c]);
			    	if(Distance < Distance_)
					{
						Distance_ = Distance;
						vehicleid = cars_g[playerid][c];
					}
			    }
			}
			if(Distance_ == 50.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");

			/*if(GetPlayerVehicleID(playerid) == GetPlayerOwnableCarLast(playerid)) vehicleid = GetPlayerOwnableCarLast(playerid);
			else vehicleid = GetPlayerOwnableCarListitem(playerid);
			if(GetPVarInt(playerid, "go_list") == 1)
			{
			    SetPVarInt(playerid, "go_list", 0);
                vehicleid = GetPlayerOwnableCarListitem(playerid);
			}
			if(vehicleid == INVALID_VEHICLE_ID)
			{
				if(GetPlayerOwnableCarLasts(playerid) == 0)
					return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
				else
					return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}*/
		}
		case 2:
		{
			vehicleid = GetPlayerRentCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет арендованной машины");
		}
		case 3:
		{
			vehicleid = GetPlayerJobCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать эту функцию");
		}
		case 4:
		{
			vehicleid = GetPlayerAllowedCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет доверенного транспорта");
		}
		default:
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");
	}

	new Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z))
	{
		new status = GetVehicleParam(vehicleid, V_LOCK);
		if(status)
		{
			if(type == 1)
			{
				Action(playerid, "открыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЏPAнCЊOPЏ~g~ OЏKP‘Џ", 3000, 3);
			SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_OFF);
		}
		else
		{
			if(type == 1)
			{
				Action(playerid, "закрыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЏPAнCЊOPЏ~r~ €AKP‘Џ", 3000, 3);
		}
		SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_ON);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы должны стоять рядом с транспортом");

	return 1;
}
CMD:key(playerid, params[])
{
	new vehicleid;
	new Float:Distance_ = 50.0;
	for(new c = 0; c<35; c++)
	{
	    if(cars_g[playerid][c] != INVALID_VEHICLE_ID)
	    {
	        new Float:Distance = D_PlayerVehicle(playerid, cars_g[playerid][c]);
	    	if(Distance < Distance_)
			{
				Distance_ = Distance;
				vehicleid = cars_g[playerid][c];
			}
	    }
	}
	if(Distance_ == 50.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
		{
			if(!IsABike(vehicleid))
			{
				if(vehicleid == vehicleid || vehicleid == GetPlayerAllowedCar(playerid))
				{
					new index = GetVehicleData(vehicleid, V_ACTION_ID);
					new bool: status = GetOwnableCarData(index, OC_KEY_IN);

					if(status)
					{
						if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
						{
							SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
						}
						Action(playerid, "вытащил ключ из замка зажигания", _, false);
					}
					else Action(playerid, "вставил ключ в замок зажигания", _, false);

					SetOwnableCarData(index, OC_KEY_IN, status ^ true);
					SpeedometrKeyStatusInit(playerid, vehicleid);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном/доверенном транспорте");
			}
		}
		else
		{
			if(GetPlayerOwnableCarLasts(playerid) == 0)
				SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
			else
				SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

	return 1;
}

CMD:getmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(GetPVarInt(playerid, "go_list") == 1)
	{
	    SetPVarInt(playerid, "go_list", 0);
        vehicleid = GetPlayerOwnableCarListitem(playerid);
	}

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new price = 300;
		new i_have_home = (GetPlayerHouse(playerid, HOUSE_TYPE_HOME) != -1 || GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) != -1);

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
		{
			if(GetPlayerMoneyEx(playerid) >= price || i_have_home)
			{
				if(!i_have_home)
					GivePlayerMoneyEx(playerid, -price, "Метка ТС на GPS", true, true);

				new Float: x, Float: y, Float: z;
				GetVehiclePos(vehicleid, x, y, z);

				EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
				return 1;
			}
			else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
	}
	else
	{
		if(GetPlayerOwnableCarLasts(playerid) == 0)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 0;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new fmt_str[256];

			new price = GetVehicleInfo(model_id-400, VI_PRICE);
			new percent = price * 20 / 100;
			if(!IsPlayerInRangeOfPoint(playerid,50,-2722.9207,-1346.6228,9.8734)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на Свалки");

			format
			(
				fmt_str, sizeof fmt_str,
				"Модель:\t%s (№%d)\n"\
				"Стоимость:\t%d руб\n\n"\
				"Вы уверены что хотите продать транспорт?\n"\
				"На Ваш банковский счет будет начислено %d руб\n\n"\
				"Если Вы хотите продать его другому игроку,\n"\
				"используйте команду /sellmycar",
				GetVehicleName(vehicleid),
				model_id,
				price,
				price - percent
			);
			Dialog(playerid, DIALOG_OWNABLE_CAR_SELL, DIALOG_STYLE_MSGBOX, "Продажа личного транспорта", fmt_str, "Да", "Нет");
		}
	}
	else
	{
		if(GetPlayerOwnableCarLasts(playerid) == 0)
			SendClientMessage(playerid, 0xFF6600FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0xFF6600FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 1;
}

CMD:sellmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Продавать транспорт можно только с {99ff00}2{CECECE} уровня");
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmycar [id игрока] [стоимость]");
        if(!IsPlayerInRangeOfPoint(playerid,250,-1633.8027,1025.8977,997.7969) && !IsPlayerInRangeOfPoint(playerid,250,2304.5803,1757.3826,1001.0000) && !IsPlayerInRangeOfPoint(playerid,250,1575.7394,1772.4160,996.5703)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на Б/У рынке");
		extract params -> new to_player, price;

		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new car_price = GetVehicleInfo(model_id-400, VI_PRICE);

			if(!IsPlayerConnected(to_player) || to_player == playerid)
				return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

			if((GetPlayerOwnableCarLasts(to_player) + 1) > GetPlayerCarSlots(to_player))
				return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет свободных слотов для транспорта");

			if(GetPlayerOwnableCarLast(to_player) != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок должен выгрузить его личный транспорт с сервера {888888}(/car > 7)");

			if(!(3000 <= price <= (car_price * 2)))
				return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000 рублей и не дороже в 2 раза гос. стоимости ТС");

			if(GetPlayerMoneyEx(to_player) < price)
				return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

			new  Float: car_x, Float: car_y, Float: car_z;
			GetVehiclePos(vehicleid, car_x, car_y, car_z);

			if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(to_player, 15.0, car_x, car_y, car_z))
			{
				SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_OWNABLE_CAR, price, vehicleid);
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около ТС");
		}
	}
	else
	{
		if(GetPlayerOwnableCarLasts(playerid) == 0)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 1;
}

CMD:allow(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCarLasts(playerid) == 0)
			return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /allow [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[71];

	if(GetPlayerAllowedCar(to_player) == vehicleid)
	{
		format(fmt_text, sizeof fmt_text, "Вы забрали у %s ключи от Вашего личного транспорта", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, 0x3399FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "%s забрал у Вас ключи от своего личного транспорта", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		SetPlayerData(to_player, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}
	else
	{
		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_CAR_KEY);
	}

	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCarLasts(playerid) == 0)
			return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	if(vehicleid != GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном транспорте");

	new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

	if(green_zone_id != -1)
	{
		if(!g_green_zones[green_zone_id][GZ_ALLOW_PARK])
		{
			new fmt_text[144];

			format(fmt_text, sizeof fmt_text, "На территории {FFFF00}'%s' {3399FF}парковка личного транспорта запрещена. Выберите другое место для парковки", g_green_zones[green_zone_id][GZ_NAME]);
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);

			return 1;
		}
	}
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new query[512];
	new Float: x, Float: y, Float: z, Float: angle;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, angle);
	format(query, sizeof query, "UPDATE ownable_cars SET pos_x=%f,pos_y=%f,pos_z=%f,angle=%f WHERE id=%d LIMIT 1", x, y, z, angle, GetOwnableCarData(index, OC_SQL_ID));
	mysql_tquery(mysql, query, "", "");
	SaveOwnableCar(vehicleid);

	return SendClientMessage(playerid, -1, "Транспорт припаркован");
}

CMD:car(playerid, params[])
{
	/*if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
	{
		Dialog
		(
			playerid, DIALOG_OWNABLE_CAR, DIALOG_STYLE_LIST,
			"{0099FF}Система управления транспортом",
			"1. {669900}Открыть {FFFFFF}или {FF3300}закрыть {FFFFFF}транспорт\n"\
			"2. Вставить / вытащить ключи\n"\
			"3. Отметить транспорт на GPS {FF6600}(5000 руб)\n"\
			"4. Содержимое багажника\n"\
			"5. Документы на транспорт\n"\
			"{888888}6. Припарковать транспорт\n"\
			"{888888}7. Выгрузить транспорт с сервера",
			"Выбрать", "Закрыть"
		);
	}
	else*/
	{
		new fmt_text[2640],
			Cache: result,
			id;

		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, fmt_text, true);

		new rows = cache_num_rows();

		if(!rows)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");

		else
		{
			/*if(rows == 1)
			{
				id = cache_get_field_content_int(0, "id");

				ShowOwnableCarLoadDialog(playerid, id);
			}
			else*/
			{
				new query[160],
					model_id,
					car_number[7];

				format(fmt_text, sizeof fmt_text, "");

				for(new i = 0; i < rows; i ++)
				{
					id = cache_get_field_content_int(i, "id");
					model_id = cache_get_field_content_int(i, "model_id") - 400;
					cache_get_field_content(i, "number", car_number);

					format(query, sizeof query, "{FFFFFF}%d. %s {888888}[%s]\n", i + 1, GetVehicleInfo(model_id, VI_NAME), car_number);
					strcat(fmt_text, query);
					SetPlayerListitemValue(playerid, i, id);
				}

				Dialog
				(
					playerid, DIALOG_OWNABLE_CAR_LIST, DIALOG_STYLE_LIST,
					"{0099FF}Выберите транспорт",
					fmt_text,
					"Выбрать", "Закрыть"
				);
			}
		}

		cache_delete(result);
	}

	return 1;
}


/*CMD:ta(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ta [vehicleid] [item] [amount]");

	extract params -> new vehicleid, item, amount;

	if(AddTrunkItem(vehicleid, item, amount))
	{
		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "Вы положили \"%s\" в багажник, кол-во: %d %s", GetItemInfo(item, I_NAME), amount, GetItemInfo(item, I_NAME_COUNT));
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);
	}
	else SendClientMessage(playerid, 0x999999FF, "Неверный тип предмета");

	return 1;
}*/

CMD:pos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	new Float: x, Float: y, Float: z, interior, virtual_world;

	if(sscanf(params, "P<,>fff", x, y, z))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pos [x y z]");

	sscanf(params, "P<,>{fff}dd", interior, virtual_world);

	return SetPlayerPosEx(playerid, x, y, z, interior, virtual_world);
}

CMD:d(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организациях");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /d [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[D] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		SendClientMessage(i, 0xFF9999FF, fmt_msg);
	}

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию организаций", 0xDD99FFAA, 10.0, 4000);

	return 1;
}

CMD:dd(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организациях");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dd [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( [D] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		SendClientMessage(i, 0xFF9999FF, fmt_msg);
	}

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию организаций", 0xDD99FFAA, 10.0, 4000);

	return 1;
}

CMD:r(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /r [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[R] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);
	else
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _, true);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:rr(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rr [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( [R] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);
	else
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _, true);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:ff(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организациях");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ff [текст]");

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "(( [F] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}
CMD:f(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организациях");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /f [текст]");

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "[F] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}
CMD:gov(playerid, params[]) return callcmd::gnews(playerid, params);
CMD:gnews(playerid, params[])
{
	if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_PJ)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gnews [текст]");

	new fmt_msg[170 + 1];
	format(fmt_msg, sizeof fmt_msg, "Гос.новости: %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
	SendClientMessageToAll(0x4466CCFF,  fmt_msg);

	return 1;
}
CMD:invite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /invite [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(1 <= GetPlayerTeamEx(to_player) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в организации");
	if(GetPlayerData(to_player, P_WARN)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть предупреждения");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_INVITE);
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uninvite [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");

	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(GetPlayerJob(to_player) >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	// }

	UnInvite(playerid, to_player, reason);

	return 1;
}

CMD:rang(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rang [id игрока] [+/-]");
	extract params -> new to_player, string:give_rang[2];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerJob(to_player) >= 10) return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить или понизить лидера организации");

	new current_rang = GetPlayerJob(to_player);

	new fmt_msg[75];
	if(give_rang[0] == '+')
	{
		if((current_rang + 1) >= GetPlayerJob(playerid)) return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить больше своего ранга");

		GetPlayerJob(to_player)++;
		format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был повышен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else if(give_rang[0] == '-')
	{
		if((current_rang - 1) < 1) return SendClientMessage(playerid, 0x999999FF, "Нельзя понизить ниже 1 ранга");

		GetPlayerJob(to_player)--;
		format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был понижен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else return SendClientMessage(playerid, 0xCECECEFF, "Введите действие: '+' чтобы повысить или '-' чтобы понизить");

	if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
		SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
	}

	if(!GetPlayerSex(to_player))
	{
		SetPlayerData(playerid, P_OSKIN, GetTeamData(GetPlayerTeamEx(to_player), O_SKINS)[GetPlayerJob(to_player)-1]);
		ResetSkin(to_player);
	}

	format(fmt_msg, sizeof fmt_msg, "Вы %s ранг %s[%d] до %d (%s)", (give_rang[0] == '+') ? ("повысили") : ("понизили"),  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET org_skin=%d,job=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	format(fmt_msg, sizeof fmt_msg, "%s %s[acc:%d] до %d (%s)", (give_rang[0] == '+') ? ("Повысил") : ("Понизил"),  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));

	SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);

	return 1;
}

CMD:changeskin(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /changeskin [id игрока]");
	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerSex(to_player)) return SendClientMessage(playerid, 0x999999FF, "Нельзя изменить внешность игрокам с женским полом");

	new team_id = GetPlayerTeamEx(playerid);

	new fmt_str[30];
	new text[(sizeof fmt_str) * 10];
	new old_skin;
	new count;

	SetPVarInt(playerid, "change_team_skin_playerid", to_player);

	for(new i; i < 10; i ++)
	{
		if(old_skin == GetTeamData(team_id, O_SKINS)[i]) continue;

		SetPlayerListitemValue(playerid, count, i);
		count ++;

		old_skin = GetTeamData(team_id, O_SKINS)[i];
		format(fmt_str, sizeof fmt_str, "Скин %d (id %d)\n", count, old_skin);
		strcat(text, fmt_str);
	}
	Dialog(playerid, DIALOG_TEAM_CHANGE_SKIN, DIALOG_STYLE_LIST, "Выберите внешность для игрока:", text, "Ок", "Отмена");

	return 1;
}

CMD:showall(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	new query[75];
	format(query, sizeof query, "SELECT name, level, job FROM accounts WHERE team = %d ORDER BY job DESC", GetPlayerTeamEx(playerid));
	mysql_tquery(mysql, query, "ShowOrgAllPlayers", "i", playerid);
	return 1;
}

public: ShowOrgAllPlayers(playerid)
{
	new rows = cache_num_rows();

	new p_name[21];
	new lvl, rang;

	new fmt_str[33];
	new text[1290] = "Уровень\tРанг\tИмя\n\n{FFFFFF}";

	new idx, j = rows;
	if(j > 45)
		j = 45;

	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		rang = cache_get_row_int(idx,2);

		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, rang, p_name);
		strcat(text, fmt_str);
	}

	format(fmt_str, sizeof fmt_str, "{00CC00}Показаны %d/%d игроков", idx, rows);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
	return 1;
}
stock IsAFamLeader(playerid)
{
	new house = 0;
	for(new i = 1; i <= TOTALFAM;i++)
	{
		if(!strcmp(FamInfo[i][fLeader], GetPlayerNameEx(playerid), true)) house++;
	}
	return house;
}

CMD:find(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");

	ShowTeamStructureDialog(playerid, GetPlayerTeamEx(playerid));
	return 1;
}

stock ShowTeamStructureDialog(playerid, teamid)
{
	new string[1000];
	new fmt_str[40];

	if(teamid)
	{
		string = "Уровень\tРанг\tТелефон\tИмя\n\n{FFFFFF}";

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerTeamEx(i) != teamid) continue;

			format(fmt_str, sizeof fmt_str, "%d\t\t%d\t%d\t\t%s", GetPlayerLevel(i), GetPlayerJob(i), GetPlayerPhone(i), GetPlayerNameEx(i));
			strcat(string, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string, "-AFK");

			strcat(string, "\n");
		}

		if(IsTeamSubdivision(teamid))
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Члены подразделения online", string, "Закрыть", "");
		else
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Члены организации online", string, "Закрыть", "");
	}
	else
	{
		string = "Уровень\tТелефон\tИмя\n\n{FFFFFF}";

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerJob(i) != GetPlayerJob(playerid)) continue;

			format(fmt_str, sizeof fmt_str, "%d\t%d%s%s", GetPlayerLevel(i), GetPlayerPhone(i), GetPlayerPhone(i) > 0 ? ("\t") : ("\t\t"), GetPlayerNameEx(i));
			strcat(string, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string, "-AFK");

			if(IsPlayerInJob(i))
				strcat(string, " *");

			strcat(string, "\n");
		}

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Сотрудники online", string, "Закрыть", "");
	}
	return 1;
}

CMD:leaders(playerid)
{
	new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

	result = mysql_query(mysql, "SELECT * FROM `accounts` WHERE `admin` = 0 AND `job` = 10 ORDER BY team ASC", true);
	rows = cache_num_rows();

	format(text, sizeof text, "{3399FF}№ фракции\tИмя\t\t\t\tФракция{FFFFFF}");

	for(new i = 0; i < rows; i++)
	{
		new name[21],
			user_id = cache_get_field_content_int(i, "id"),
			team = cache_get_field_content_int(i, "team");

		cache_get_field_content(i, "name", name);

		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s%s\t%s", team, name, strlen(name) > 14 ? "\t" : "\t\t", GetTeamName(team));
		strcat(text, fmt_text);
		SetPlayerListitemValue(playerid, i+1, user_id);
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "{FFCC00}Список лидеров", text, "Закрыть", "");
	return 1;
}

CMD:liclist(playerid, params[])
{
	new fmt_text[78],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != TEAM_GOVERNMENT) continue;
		else if(GetPlayerJob(i) != 6) continue;

		format(fmt_text, sizeof fmt_text, "\nПравительство - Лицензёр - %s[%d] - тел. %d", GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Лицензёры онлайн", list, "Закрыть", "");

	return 1;
}

CMD:adlist(playerid, params[])
{
	new fmt_text[78],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != TEAM_GOVERNMENT) continue;
		else if(GetPlayerJob(i) != 7) continue;

		format(fmt_text, sizeof fmt_text, "\nПравительство - Адвокат - %s[%d] - тел. %d", GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Адвокаты онлайн", list, "Закрыть", "");

	return 1;
}

CMD:debtorsell(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "Функция доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 6) return SendClientMessage(playerid, 0xCECECEFF, "Команда доступна сотрудникам правительства с 6 ранга");

	Dialog
	(
		playerid, DIALOG_DEBTOR_SELL_LIST, DIALOG_STYLE_LIST,
		"Выберите действие",
		"1. Выселить должника из жилья\n\
		2. Забрать предприятие у должника\n\
		3. Забрать АЗС у должника",
		"Далее", "Закрыть"
	);
	return 1;
}

CMD:debtorlist(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "Функция доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 3) return SendClientMessage(playerid, 0xCECECEFF, "Команда доступна сотрудникам правительства с 3 ранга");

	Dialog
	(
		playerid, DIALOG_DEBTORLIST, DIALOG_STYLE_LIST,
		"Выберите тип собственности",
		"1. Жилье\n\
		2. Предприятия\n\
		3. Заправочные станции",
		"Выбрать", "Закрыть"
	);
	return 1;
}

stock ShowDebtorListDialog(playerid, type)
{
	new
		fmt_str[36 + 1],
		text[((sizeof fmt_str) * 20) + 1],
		cur_time = gettime(),
		idx,
		count;

	if(type == 0)
	{
		for(idx = 0, count = 0; idx < g_house_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetHouseData(idx, H_OWNER_ID) < 1) continue;
			if((((GetHouseData(idx, H_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetHouseData(idx, H_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			if(GetHouseData(idx, H_TYPE))
			{
				format(fmt_str, sizeof fmt_str, "кв. %d под. %d (%s)\n", idx % 6 + 1, GetHouseData(idx, H_ENTRACE) + 1, "Нижегородская обл.");
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			}
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за жилье нет");

		Dialog(playerid, DIALOG_DEBTORLIST_HOUSE, DIALOG_STYLE_LIST, "{FFCC00}Жилье должников", text, "Отметить", "Назад");
	}
	else if(type == 1)
	{
		for(idx = 0, count = 0; idx < g_business_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetBusinessData(idx, B_OWNER_ID) < 1) continue;
			if((((GetBusinessData(idx, B_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetBusinessData(idx, B_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за предприятия нет");

		Dialog(playerid, DIALOG_DEBTORLIST_BIZ, DIALOG_STYLE_LIST, "{FFCC00}Предприятия должников", text, "Отметить", "Назад");
	}
	else
	{
		for(idx = 0, count = 0; idx < g_fuel_station_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetFuelStationData(idx, FS_OWNER_ID) < 1) continue;
			if((((GetFuelStationData(idx, FS_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetFuelStationData(idx, FS_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за АЗС нет");

		Dialog(playerid, DIALOG_DEBTORLIST_FUEL_ST, DIALOG_STYLE_LIST, "{FFCC00}Заправочные станции должников", text, "Отметить", "Назад");
	}

	return 1;
}

stock SellDebtorsProperty()
{
	new cur_time = gettime(),
		query[580];

	for(new i; i < g_house_loaded; i ++)
	{
		if(!GetHouseData(i, H_EVICTION)) continue;
		if(GetHouseData(i, H_RENT_DATE) > cur_time) continue;

		format(query, sizeof query, "UPDATE houses SET `owner_id` = '0', `lock`='0', `eviction` = '0' WHERE `id` = '%d'", GetHouseData(i, H_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts SET house='-1', house_type='-1' WHERE id='%d'", GetHouseData(i, H_OWNER_ID));
		mysql_query(mysql, query, false);

		SetHouseData(i, H_OWNER_ID,			0);
		SetHouseData(i, H_IMPROVEMENTS,		0);

		SetHouseData(i, H_EVICTION, 0);

		SetHouseData(i, H_RENT_DATE,		0);
		SetHouseData(i, H_LOCK_STATUS,		false);

		UpdateHouse(i);

		HouseHealthInit(i);
		HouseStoreInit(i);
	}

	for(new i; i < g_business_loaded; i ++)
	{
		if(!GetBusinessData(i, B_EVICTION)) continue;
		if(GetBusinessData(i, B_RENT_DATE) > cur_time) continue;

		format(query, sizeof query, "UPDATE business SET `owner_id` = '0', `products` = '0', `prod_price` = '0', `lock` = '0', `eviction` = '0' WHERE `id` = '%d'", GetBusinessData(i, B_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts SET business='-1' WHERE id='%d'", GetBusinessData(i, B_OWNER_ID));
		mysql_query(mysql, query, false);

		SetBusinessData(i, B_OWNER_ID, 			0);
		SetBusinessData(i, B_IMPROVEMENTS, 		0);

		SetBusinessData(i, B_EVICTION, 0);

		SetBusinessData(i, B_PRODS, 			0);
		SetBusinessData(i, B_PROD_PRICE,		0);

		SetBusinessData(i, B_BALANCE,			0);
		SetBusinessData(i, B_RENT_DATE,			0);
		SetBusinessData(i, B_ENTER_MUSIC,		0);
		SetBusinessData(i, B_LOCK_STATUS,		false);

		BusinessHealthPickupInit(i);

		format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
		mysql_query(mysql, query, false);

		g_business_gps_init = false;

		//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(i, B_SQL_ID));
		//mysql_query(mysql, query, false);

		CallLocalFunction("UpdateBusinessLabel", "i", i);
	}

	for(new i; i < g_fuel_station_loaded; i ++)
	{
		if(!GetFuelStationData(i, FS_EVICTION)) continue;
		if(GetFuelStationData(i, FS_RENT_DATE) > cur_time) continue;

		format(query, sizeof query, "UPDATE fuel_stations SET `owner_id` = '0', `fuels` = '1000', `fuel_price` = '3', `lock` = '0', `eviction` = '0' WHERE `id` = '%d'", GetFuelStationData(i, FS_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts SET fuel_st='-1' WHERE id='%d'", GetFuelStationData(i, FS_OWNER_ID));
		mysql_query(mysql, query, false);

		SetFuelStationData(i, FS_OWNER_ID, 0);
		SetFuelStationData(i, FS_IMPROVEMENTS, 	0);

		SetFuelStationData(i, FS_EVICTION, 0);

		SetFuelStationData(i, FS_FUELS, 		1000);
		SetFuelStationData(i, FS_FUEL_PRICE,	5);
		SetFuelStationData(i, FS_BUY_FUEL_PRICE,0);

		SetFuelStationData(i, FS_BALANCE,		0);
		SetFuelStationData(i, FS_RENT_DATE,		0);
		SetFuelStationData(i, FS_LOCK_STATUS,	false);

		//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(i, FS_SQL_ID));
		//mysql_query(mysql, query, false);

		CallLocalFunction("UpdateFuelStationLabel", "i", i);
	}

	return 1;
}
stock SellDebtorsHotels()
{
	new cur_time = gettime();
	new query[200];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts a,hotels h SET a.house=-1,a.house_room=0,a.house_type=-1,h.owner_id=0,h.rent_time=0,h.status=1 WHERE a.id=h.owner_id AND h.rent_time < %d", cur_time);
	mysql_query(mysql, query, false);

	new hotel_owner_playerid;

	for(new h_id, r_id; h_id < MAX_HOTELS; h_id ++)
	{
		for(r_id = 0; r_id < MAX_HOTEL_ROOMS; r_id ++)
		{
			if(GetHotelData(h_id, r_id, H_RENT_DATE) < cur_time) continue;

			GetPlayerID(GetHotelData(h_id, r_id, H_OWNER_NAME), hotel_owner_playerid);

			SetHotelData(h_id, r_id, H_OWNER_ID, 0);
			SetHotelData(h_id, r_id, H_RENT_DATE, 0);

			if(IsPlayerConnected(hotel_owner_playerid) && IsPlayerLogged(hotel_owner_playerid))
			{
				if(GetPlayerHouse(hotel_owner_playerid, HOUSE_TYPE_HOTEL) == h_id)
				{
					SetPlayerData(hotel_owner_playerid, P_HOUSE, 		-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_ROOM, 	-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_TYPE, 	-1);

					SendClientMessage(hotel_owner_playerid, 0xFF6600FF, "Вы были выселены из гостиницы за неуплату услуг");
				}
			}
		}
	}
	return 1;
}

CMD:smenu(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return SendClientMessage(playerid, 0x999999FF, "Функция доступна советникам правительства");

	Dialog
	(
		playerid, DIALOG_ADVISOR_MENU, DIALOG_STYLE_LIST,
		"{33CC66}Меню советника",
		"1. Показать/скрыть бейджик\n\
		2. Показать/скрыть рацию организации\n\
		3. Показать состав организации",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:givelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 6) return SendClientMessage(playerid, 0x999999FF, "Функция доступна только лицензерам");

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givelic [id игрока] [идентификатор лицензии] [цена]");
		SendClientMessage(playerid, 0x999999FF, "Индификаторы лицензий: 1 - Вод. права базового уровня | 2 - Вод. права профессионального уровня | 3 - На оружие");
		return 1;
	}

	extract params -> new to_player, lic_id, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");

	if(!(1 <= lic_id <= 3)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор лицензии");

	switch(lic_id)
	{
		case 1:
		{
			if(GetPlayerData(to_player, P_DRIVING_LIC) >= 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на вождение базового уровня");
		}
		case 2:
		{
			if(GetPlayerData(to_player, P_DRIVING_LIC) == 2)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на вождение профессионального уровня");
		}
		case 3:
		{
			if(GetPlayerData(to_player, P_WEAPON_LIC) == 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на оружие");
		}
	}

	new lic_price_limits[3][2] =
	{
		{1000, 	10000},
		{10000, 30000},
		{30000, 50000}
	};

	if(!(lic_price_limits[lic_id - 1][0] <= price <= lic_price_limits[lic_id - 1][1]))
	{
		new fmt_text[60];

		format(fmt_text, sizeof fmt_text, "Стоимость лицензии должна быть от %d до %d рублей",
		lic_price_limits[lic_id - 1][0], lic_price_limits[lic_id - 1][1]);

		SendClientMessage(playerid, 0x999999FF, fmt_text);

		return 1;
	}

	if(GetPlayerMoneyEx(to_player) < price)
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет такой суммы денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_LIC, lic_id, price);

	return 1;
}

CMD:free(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 7) return SendClientMessage(playerid, 0x999999FF, "Функция доступна только адвокатам");

	extract params -> new to_player, price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /free [id игрока] [цена]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");

	if(!GetPlayerData(to_player, P_JAIL))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не находится в тюрьме");

	if(!(500 <= price <= 50000))
		return SendClientMessage(playerid, 0x999999FF, "Стоимость должна быть от 500 до 50.000 рублей");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_JAIL_FREE, price);

	return 1;
}

CMD:medhelp(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	//if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /medhelp [id игрока] [стоимость лечения]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Пациент слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не лежит в больнице");
	if(!(100 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 100 до 5000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_MEDHELP, price);
	return 1;
}

CMD:out(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /out [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Игрок должен находиться на лечении");

	ClearMedBed(to_player, GetPlayerData(playerid, P_OCCUPIED_BED));
	SetPlayerData(to_player, P_HOSPITAL, false);

	SetPlayerChatBubble(to_player, "Выписан", 0x66CC00FF, 10.0, 2000);

	new fmt_msg[60];
	format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s выписал Вас из больницы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выписали %s из больницы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	return 1;
}

CMD:heal(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	//if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /heal [id игрока] [цена за лечение]");
	extract params -> new to_player, price;

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	//if(!IsPlayerInRangeOfPoint(to_player, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вам пациент должег тоже быть в больнице.");
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_MED_CAR || GetPlayerVehicleID(to_player) != vehicleid) return SendClientMessage(playerid, 0x999999FF, "Вы или Ваш пациент находитесь не в машине скорой помощи");
	if(!(0 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 0 до 5000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_HEAL, price);
	return 1;
}

CMD:changesex(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /changesex [id игрока] [стоимость операции]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Игрок должен находиться на стационарном лечении");
	if(!(500000 <= price <= 1000000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость операции должна быть от 500000 до 1000000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CHANGE_SEX, price);
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:tie(playerid, params[])
{
	//if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");
	if(!GetPlayerVerevka(playerid)) return SendClientMessage(playerid, 0x999999FF, "У вас нет верёвки");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /tie [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "У игрока уже связаны руки или он в наручниках");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	AddPlayerData(playerid, P_VEREV, -, 1);
	UpdatePlayerDatabaseInt(playerid, "verevka", GetPlayerData(playerid, P_VEREV));

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s связал %s руки", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:repaircar(playerid)
{
	if(GetPlayerRepair(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет рем.комплектов");
	
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте");

	new vehicleid = GetPlayerVehicleID(playerid);

	RepairVehicle(vehicleid);
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);
	
	AddPlayerData(playerid, P_REPAIR, -, 1);
	UpdatePlayerDatabaseInt(playerid, "repair", GetPlayerData(playerid, P_REPAIR));
	
	SendClientMessage(playerid, 0xCECECEFF, "За ремонт транспортного средства был снят 1 рем.комплект");
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid) && GetPlayerAdminEx(playerid) == 0) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:putpl(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в автомобиле");

	if(!IsPlayerInPoliceCar(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в служебном транспорте");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0x999999FF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:search(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /search [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new fmt_text[110],
		bool: some_is_found;

	format(fmt_text, sizeof fmt_text, "%s %s произвёл обыск у %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_text, 0xDD90FFFF, 25.0);

	if(GetPlayerData(to_player, P_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "У %s[%d] обнаружено %d г наркотиков", GetPlayerData(to_player, P_DRUGS));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}
	if(GetPlayerData(to_player, P_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "У %s[%d] обнаружено %d патронов", GetPlayerData(to_player, P_AMMO));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}

	if(!some_is_found) SendClientMessage(playerid, 0xFFFF00FF, "Ничего не найдено");

	return 1;
}

CMD:su(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /su [id игрока] [причина]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, criminalid, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	if(GetPlayerSuspect(criminalid) >= 6) return SendClientMessage(playerid, 0x999999FF, "Игрок имеет максимальный уровень розыска");

	new fmt_text[255];

	AddPlayerData(criminalid, P_SUSPECT, +, 1);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", GetPlayerData(criminalid, P_SUSPECT));

	format(fmt_text, sizeof fmt_text, "%s объявил Вас в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(playerid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы объявили %s в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(criminalid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] объявил %s[%d] в розыск [%d/6], причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid, GetPlayerSuspect(criminalid), message);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:clear(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /clear [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerSuspect(criminalid)) return SendClientMessage(playerid, 0x999999FF, "Игрок не имеет розыска");

	new fmt_text[255];

	SetPlayerData(criminalid, P_SUSPECT, 0);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	format(fmt_text, sizeof fmt_text, "%s удалил Вас из базы разыскиваемых", GetPlayerNameEx(playerid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы удалили %s из базы разыскиваемых", GetPlayerNameEx(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] удалил %s[%d] из базы разыскиваемых людей", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:setrates(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;
	extract params -> new donate, exp, sallary, name; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setrates [donate rate] [exp rate] [sallary rate] [x in name]");
	if((donate < 1 || donate > 5) || (exp < 1 || exp > 5) || (sallary < 1 || sallary > 5) || (name < 1 || name > 5)) return SendClientMessage(playerid, 0xCECECEFF, "Минимум 1, максимум 5 на каждую категорию");
	g_doubling[0] = donate;
	g_doubling[1] = exp;
	g_doubling[2] = sallary;
	new str[155];
	format(str, sizeof str, "donate = %d, exp = %d, sallary = %d. Название: X%d день", g_doubling[0], g_doubling[1], g_doubling[2], name);
	SendClientMessage(playerid, -1, str);
	format(str, sizeof str, "[A] Администратор %s[%d] изменил статус акции на сервере. Информация - /inforates", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(str, 0x999999FF, 3);
	if(donate > 1)
	{
		format(str, sizeof str, "Дорогие игроки, внимание! На сервере была включена акция X%d донат", g_doubling[0]);
		SendClientMessageToAll(-1, str);
	}
	if(exp > 1)
	{
		format(str, sizeof str, "Дорогие игроки, внимание! На сервере была включена акция X%d EXP",  g_doubling[1]);
		SendClientMessageToAll(-1, str);
	}
	if(sallary > 1)
	{
		format(str, sizeof str, "Дорогие игроки, внимание! На сервере была включена акция X%d зарплата",  g_doubling[2]);
		SendClientMessageToAll(-1, str);
	}
	if(name < 2)
	{
		format(str, sizeof str, "hostname RadmiX RolePlay | ОБНОВЛЕНИЕ | x3 ДОНАТ");
		SendRconCommand(str);
		SendClientMessage(playerid, -1, "х был убран из названия сервера");
	}
	else
	{
		format(str, sizeof str, "hostname %s | X%d ДЕНЬ", SERVER_NAME_RP, name);
		SendRconCommand(str);
	}
	SaveServerConfig();
	return 1;
}

CMD:inforates(playerid)
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	new str[150];
	format(str, sizeof str,
	"Донат - x%d\n"\
	"EXP - x%d\n"\
	"Зарплаты - x%d\n",
	g_doubling[0], g_doubling[1], g_doubling[2]);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Info rates", str, "Закрыть", "");
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arrest [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerData(criminalid, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не в наручниках");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 189.3872,1446.6946,12.0100) ||
		!IsPlayerInRangeOfPoint(criminalid, 10.0, 189.3872,1446.6946,12.0100)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у здания Отделения Полиции №2");

	JailPlayer(criminalid, GetPlayerSuspect(criminalid) * 5);

	SetPlayerData(criminalid, P_SUSPECT, 0);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	SetPlayerSuspectInit(criminalid);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Вы задержали преступника %s[%d] и заключили его под стражу", GetPlayerNameEx(criminalid), criminalid);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] задержал Вас и заключил под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid);
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] заключил %s[%d] под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	SendClientMessage(criminalid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	return 1;
}

CMD:m(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /m [текст]");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "<< %s %s[%d]: %s >>", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_text, 0xFFFF00FF, 60.0);

	return 1;
}

CMD:takelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ДПС");

	extract params -> new to_player, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /takelic [id игрока] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	if(!GetPlayerData(to_player, P_DRIVING_LIC)) return SendClientMessage(playerid, 0x999999FF, "У игрока нет прав");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] %s права, причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "проф." : "базовые", message);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	SetPlayerData(to_player, P_DRIVING_LIC, 0);
	UpdatePlayerDatabaseInt(to_player, "driving_lic", 0);

	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	new fmt_text[40],
		fmt_list[1024] = "Розыск\tИмя{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!GetPlayerSuspect(i)) continue;
		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s", GetPlayerSuspect(i), GetPlayerNameEx(i));
		strcat(fmt_list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{ffcd00}Список разыскиваемых", fmt_list, "Закрыть", "");

	return 1;
}

CMD:setmark(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setmark [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerSuspect(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не в розыске");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	EnablePlayerGPS(playerid, 37, x, y, z, "{66cc33}В последний раз преступника видели на отмеченном месте");

	return 1;
}

CMD:ticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ДПС");

	extract params -> new to_player, amount, string:message[64]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ticket [id игрока] [сумма штрафа] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!(1 <= amount <= 50_000)) return SendClientMessage(playerid, 0x999999FF, "Сумма штрафа может быть от 1 до 50.000 рублей");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	CreateTicket(to_player, amount, GetPlayerNameEx(playerid), message);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] выписал Вам штраф в размере %d руб. Причина: %s", GetPlayerNameEx(playerid), playerid, amount, message);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выписали %s[%d] штраф в размере %d руб. Причина: %s", GetPlayerNameEx(to_player), to_player, amount, message);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] выписал %s[%d] штраф (%d руб), причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, amount, message);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFFC000FF, playerid);

	new Cache: result,
		id;

	result = mysql_query(mysql, "SELECT id FROM tickets ORDER BY id DESC LIMIT 1", true);

	id = cache_get_row_int(0, 0);

	cache_delete(result);

	new day, month, year;

	getdate(year, month, day);

	format(fmt_text, sizeof fmt_text, "Номер штрафа: #%d | Дата: %02d-%02d-%d", id, day, month, year);
	SendClientMessage(playerid, 0xFFCD00FF, fmt_text);

	return 1;
}

CMD:delticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не сотрудник ДПС");

	extract params -> new ticket_id; else return SendClientMessage(playerid, 0xCECECEFF, "/delticket [номер штрафа]");

	new query[144],
		Cache: result,
		rows,
		uid,
		reason[64],
		player_name[21],
		status,
		amount;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d", ticket_id);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	uid = cache_get_field_content_int(0, "uid");
	status = cache_get_field_content_int(0, "status");
	amount = cache_get_field_content_int(0, "amount");

	cache_get_field_content(0, "description", reason);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT name FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	cache_get_row(0, 0, player_name);

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Штраф с таким номером не найден");

	if(status) return SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить уже оплаченный штраф");

	mysql_format(mysql, query, sizeof query, "DELETE FROM tickets WHERE id=%d", ticket_id);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы удалили штраф #%d из базы данных ДПС", ticket_id);
	SendClientMessage(playerid, 0x66CC33FF, query);

	format(query, sizeof query, "%s %s[%d] удалил штраф #%d (%s,%s,%d руб) из базы данных ДПС", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, ticket_id, player_name, reason, amount);

	SendMessageToTeam(GetPlayerTeamEx(playerid), query, 0xFFC000FF, playerid);

	return 1;
}

CMD:tickets(playerid, params[])
{
	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xFFCD00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | %d руб | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xFFCD00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

CMD:ptickets(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ДПС");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ptickets [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(to_player));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xFFCD00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | %d руб | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xFFCD00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

CMD:radar(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_DPS) return SendClientMessage(playerid, 0x999999FF, "Вы не работник ДПС");

	Dialog
	(
		playerid, DIALOG_RADAR_SELECT, DIALOG_STYLE_LIST,
		"{FFCD00}Установка регистратора скорости",
		"1. Дворовые территории (20 км/ч)\n"\
		"2. Населенные пункты (60 км/ч)\n"\
		"3. Вне населенных пунктов (90 км/ч)\n"\
		"4. Автомагистрали (110 км/ч)\n"\
		"{888888}5. Удалить регистратор скорости",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:makegun(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY && !(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	extract params -> new weapon_id, weapon_ammo;

	if(!(1 <= weapon_id <= 7))
	{
		Dialog
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"Доступное оружие",
			"{66CCCC}\
			ID\tНазвание\t\tМеталл\n\n\
			{FFFFFF}1.\tSilenced 9mm\t\t3\n\
			2.\tDesert Eagle\t\t6\n\
			3.\tShotgun\t\t8\n\
			4.\tMP5\t\t\t9\n\
			5.\tAK47\t\t\t10\n\
			6.\tM4\t\t\t10\n\
			7.\tCountry Rifle\t\t11\n\n\
			Для добавления патронов к созданному оружию\n\
			необходимо держать его в руках\
			",
			"Закрыть", ""
		);

		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makegun [id оружия] [кол-во патронов]");

		return 1;
	}

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makegun [id оружия] [кол-во патронов]");
	if(weapon_ammo <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество патронов");

	enum TEMP_GUN_INFO
	{
		GUN_ID,
		GUN_METAL,
		GUN_NAME[16]
	};

	new temp_gun[7][TEMP_GUN_INFO] =
	{
		{23, 3, 	"Silenced 9mm"},
		{24, 6, 	"Desert Eagle"},
		{25, 8, 	"Shotgun"},
		{29, 9, 	"MP5"},
		{30, 10, 	"AK47"},
		{31, 10, 	"M4"},
		{33, 11, 	"Country Rifle"}
	};

	if(weapon_id != GetPlayerWeapon(playerid) && GetPlayerData(playerid, P_METALL) < temp_gun[weapon_id-1][GUN_METAL])
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет нужного количества металла");
	if(GetPlayerData(playerid, P_AMMO) < weapon_ammo)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет нужного количества патронов");

	new fmt_text[128];

	if(GetPlayerWeapon(playerid) == temp_gun[weapon_id-1][GUN_ID])
	{
		format(fmt_text, sizeof fmt_text, "добавил к %s %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);

		Action(playerid, fmt_text, _, false);
	}
	else
	{
		new w_id, w_ammo;

		for(new i; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, w_id, w_ammo);

			if(w_id == temp_gun[weapon_id-1][GUN_ID])
			{
				GivePlayerWeapon(playerid, w_id, -w_ammo);
				break;
			}
		}

		AddPlayerData(playerid, P_METALL, -, temp_gun[weapon_id-1][GUN_METAL]);
		UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

		format(fmt_text, sizeof fmt_text, "сделал %s из металла и %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);

		Action(playerid, fmt_text, _, false);
	}

	GivePlayerWeapon(playerid, temp_gun[weapon_id-1][GUN_ID], weapon_ammo);

	AddPlayerData(playerid, P_AMMO, -, weapon_ammo);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	return 1;
}

CMD:close(playerid, params[])
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать это");

	if(GetPlayerJob(playerid) < 8)
		return SendClientMessage(playerid, 0x999999FF, "Открывать или закрывать склад можно с 8-ого ранга");

	new repository = GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA,
		fmt_text[70];

	SetGangRepositoryData(repository, GR_LOCK, GetGangRepositoryData(repository, GR_LOCK) ^ true);

	UpdateGangRepository(repository);

	format(fmt_text, sizeof fmt_text, "[Внимание] Склад был %s игроком %s[%d]",
	GetGangRepositoryData(repository, GR_LOCK) ? "открыт" : "закрыт", GetPlayerNameEx(playerid), playerid);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, GetGangRepositoryData(repository, GR_LOCK) ? 0x66CC00FF : 0xFF6600FF);

	return 1;
}

CMD:capture(playerid, params[])
{
	if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(GetPlayerJob(playerid) < 6)
		return SendClientMessage(playerid, 0xFF6600FF, "Организовывать захват территории можно только с 6-ого ранга");

	if(g_capture[C_STATUS])
		return SendClientMessage(playerid, 0xFF6600FF, "Дождитесь окончания текущего захвата");

	new gang_id = (GetPlayerTeamEx(playerid) - TEAM_OPG_ARZAMASKAYA) + 1;

	if(g_capture[C_WAIT_TIME][gang_id - 1] > gettime())
		return SendClientMessage(playerid, 0xFF6600FF, "С момента последнего Вашего захвата еще не прошел 1 час");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться на захваченной кем-то территории");

	new gang_zone_team = GetGangZoneData(gang_zone_id, GZ_GANG);

	if(!gang_zone_team)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться на захваченной кем-то территории");

	if(gang_zone_team == gang_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете захватить свою территорию");

	if(g_capture[C_WAIT_TIME][gang_zone_team - 1] > gettime())
		return SendClientMessage(playerid, 0xFF6600FF, "Банда, чью территорию Вы хотите захватить, еще не окрепла с последнего захвата (не прошел 1 час)");

	new gang_players[2];

	foreach(new idx : Player)
	{
		if(GetPlayerTeamEx(idx) == GetPlayerTeamEx(playerid)) gang_players[0] ++;
		else if(GetPlayerTeamEx(idx) == (gang_zone_team - 1) + TEAM_OPG_ARZAMASKAYA) gang_players[1] ++;
		else continue;
	}

	if(gang_players[0] < MIN_PLAYERS_FOR_CAPTURE)
		return SendClientMessage(playerid, 0xFF6600FF, "В Вашей банде должно быть не менее 1-ти людей для захвата");

	if(gang_players[1] < MIN_PLAYERS_FOR_CAPTURE)
		return SendClientMessage(playerid, 0xFF6600FF, "В банде, территорию которой Вы хотите захватить, должно быть не менее 1-ти людей для захвата");

	StartCapture(playerid, gang_zone_id, gang_id, gang_zone_team);

	return 1;
}

stock StartCapture(playerid, gang_zone_id, attack_team, protect_team)
{
	if(g_capture[C_STATUS]) return 0;

	new fmt_text[128],
		gps_icons[3] = {62, 61, 60};

	format(fmt_text, sizeof fmt_text, "%s начали захват территории у %s",
	GetTeamName( (attack_team + TEAM_OPG_ARZAMASKAYA) - 1), GetTeamName( (protect_team + TEAM_OPG_ARZAMASKAYA) - 1));

	SendMessageToGang(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "%s %s [%d] инициировал захват.У вас есть 7 минут для захвата территории.",
	GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFF5533FF);

	foreach(new idx : Player)
	{
		if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(idx) <= TEAM_OPG_LYTKARINSKAYA)) continue;

		TextDrawShowForPlayer(playerid, capture_TD[0]);
		TextDrawShowForPlayer(playerid, capture_TD[1]);

		format(fmt_text, sizeof fmt_text, "Место отмечено на GPS. Окажите сопротивление вражеской банде в течение 7 минут, чтобы %s территорию",
		GetPlayerTeamEx(idx) == ((attack_team + TEAM_OPG_ARZAMASKAYA) - 1) ? "захватить" : "сохранить свою");

		SendClientMessage(idx, 0xFFFF00FF, fmt_text);

		SetPlayerMapIcon
		(
			idx, 97,
			GetGangZoneData(gang_zone_id, GZ_MIN_X) + 50.0,
			GetGangZoneData(gang_zone_id, GZ_MIN_Y) + 50.0,
			0.0,
			gps_icons[ GetPlayerTeamEx(idx) - TEAM_OPG_ARZAMASKAYA ],
			COLOR_WHITE,
			MAPICON_GLOBAL
		);
	}

	GangZoneFlashForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[attack_team]);

	g_capture[C_STATUS] = true;

	g_capture[C_GANG_ZONE] = gang_zone_id;

	g_capture[C_ATTACK_TEAM] = attack_team;
	g_capture[C_PROTECT_TEAM] = protect_team;

	g_capture[C_ATTACKER_KILLS] = 0;
	g_capture[C_PROTECTOR_KILLS] = 0;

	g_capture[C_TIME] = 7 * 60;

	UpdateCaptureTextDraw();

	return 1;
}

stock EndCapture()
{
	if(!g_capture[C_STATUS]) return 0;

	new fmt_text[90],
		attack_team = (g_capture[C_ATTACK_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1,
		protect_team = (g_capture[C_PROTECT_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1,
		gang_zone_id = g_capture[C_GANG_ZONE];

	if(g_capture[C_ATTACKER_KILLS] > g_capture[C_PROTECTOR_KILLS])
		format(fmt_text, sizeof fmt_text, "%s захватили территорию у %s", GetTeamName(attack_team), GetTeamName(protect_team));

	else
		format(fmt_text, sizeof fmt_text, "Попытка %s захватить территорию у %s провалилась", GetTeamName(attack_team), GetTeamName(protect_team));

	SendMessageToGang(fmt_text, 0xFF5533FF);

	new gz_index = GetGangZoneData(gang_zone_id, GZ_ZONE);

	GangZoneStopFlashForAll(gz_index);

	if(g_capture[C_ATTACKER_KILLS] > g_capture[C_PROTECTOR_KILLS])
	{
		SetGangZoneData(gang_zone_id, GZ_GANG, g_capture[C_ATTACK_TEAM]);
		SaveGangZone(gang_zone_id);

		GangZoneShowForAll(gz_index, gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

		UpdateGangRepository(g_capture[C_ATTACK_TEAM] - 1);
		UpdateGangRepository(g_capture[C_PROTECT_TEAM] - 1);
	}

	for(new r; r < sizeof capture_TD[]; r ++)
		TextDrawHideForAll(capture_TD[r]);

	g_capture[C_STATUS] = false;

	g_capture[C_GANG_ZONE] = -1;

	g_capture[C_ATTACK_TEAM] =
	g_capture[C_PROTECT_TEAM] = -1;

	g_capture[C_ATTACKER_KILLS] =
	g_capture[C_PROTECTOR_KILLS] = 0;

	g_capture[C_TIME] = 0;

	g_capture[C_WAIT_TIME][attack_team - 1] =
	g_capture[C_WAIT_TIME][protect_team - 1] = gettime() + 3600;

	foreach(new idx : Player)
		RemovePlayerMapIcon(idx, 97);

	return 1;
}

forward AdvertiseTimer();
public AdvertiseTimer()
{
	SendClientMessageToAll(COLOR_GOLD,"_______________________________________________________________________________________________");
	SendClientMessageToAll(COLOR_GOLD,"                                                                                               ");
	SendClientMessageToAll(COLOR_WHITE, "Получение дополнительных средств: {"#cGold"}-");
	SendClientMessageToAll(COLOR_WHITE, "При возникновении вопросов/жалоб, нажмите: {"#cGold"}H{"#cW"}, далее выберите: \"Связь с администрацией\"");
	SendClientMessageToAll(COLOR_WHITE, "Всю полезную информацию Вы можете найти в ноутбуке {"#cGold"}H - GPS{"#cW"}, {"#cGold"}/help {"#cW"}или на нашем форуме: {"#cGold"}forum.-");
	SendClientMessageToAll(COLOR_GOLD,"_______________________________________________________________________________________________");
}
stock UpdateCaptureTextDraw()
{
	new string[128];

	format
	(
		string, sizeof string,
		"%s",
		GetTeamName( (g_capture[C_ATTACK_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1 )
	);

	TextDrawSetString(capture_TD[1], string);

	new string1[128];

	format
	(
		string1, sizeof string1,
		"%s",
		GetTeamName( (g_capture[C_PROTECT_TEAM] + TEAM_OPG_ARZAMASKAYA) - 1 )
	);

	TextDrawSetString(capture_TD[2], string1);

	new string2[128];

	format
	(
		string2, sizeof string2,
		"%d мин %02d сек",
		g_capture[C_TIME] / 60,
		g_capture[C_TIME] % 60
	);

	TextDrawSetString(capture_TD[3], string2);

	new string3[128];

	format
	(
		string3, sizeof string3,
		"Убийств: %d",
		g_capture[C_ATTACKER_KILLS]
	);

	TextDrawSetString(capture_TD[4], string3);

	new string4[128];

	format
	(
		string4, sizeof string4,
		"Убийств: %d",
		g_capture[C_PROTECTOR_KILLS]
	);

	TextDrawSetString(capture_TD[5], string4);

	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		if(!IsPlayerLogged(idx)) continue;
		if(!(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(idx) <= TEAM_OPG_LYTKARINSKAYA)) continue;

		for(new r; r < sizeof capture_TD[]; r ++)
			TextDrawShowForPlayer(idx, capture_TD[r]);
	}
}

stock IsPlayerInPoliceTeam(playerid)
{
	if(TEAM_DPS <= GetPlayerTeamEx(playerid) <= TEAM_PJ) return true;
	return false;
}

stock IsPlayerInPoliceCar(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(VEHICLE_ACTION_TYPE_DPS_CAR <= GetVehicleData(vehicleid, V_ACTION_TYPE) <= VEHICLE_ACTION_TYPE_FBI_CAR) return true;
	return false;
}

stock GenerateCarNumber()
{
	static const chars[11] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X'};
	new number[6];

	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';

	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';

	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];

	return number;
}

stock IsACarNumber(text[])
{
	new length = strlen(text);

	if(length != 6)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0, 4, 5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X': continue;
					default: return 0;
				}
			}
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}

	if(text[1] == text[2] && text[2] == text[3] && text[3] == '0')
	{
		return 0;
	}

	return 1;
}

stock GetCarNumberPrice(number[])
{
	if(strlen(number) != 6) return 0;

	new chars[4],
		price = GetDonatePrice(DONATE_PRICE_CAR_NUMBER);

	format(chars, sizeof chars, "%c%c%c", number[0], number[4], number[5]);

	if(!strcmp(chars, "amp", true)) price += 200;
	else if(!strcmp(chars, "ooo", true)) price += 150;
	else if(!strcmp(chars, "aaa", true)) price += 150;
	else if(!strcmp(chars, "ekx", true)) price += 150;
	else if(!strcmp(chars, "xam", true)) price += 150;
	else if(!strcmp(chars, "bop", true)) price += 150;
	else if(!strcmp(chars, "xep", true)) price += 150;
	else if(!strcmp(chars, "hax", true)) price += 150;
	else if(!strcmp(chars, "bbb", true)) price += 150;
	else if(!strcmp(chars, "ttt", true)) price += 150;
	else
	{
		if(chars[0] == chars[1] && chars[0] != chars[2]) price += 25;
		else if(chars[0] == chars[1] && chars[0] == chars[2]) price += 150;
		else if(chars[0] == chars[2] && chars[0] != chars[1]) price += 100;
	}

	if(number[1] == 0 && number[1] == 0) price += 50;
	else if(number[1] == number[2] && number[1] != number[3]) price += 50;
	else if(number[1] == number[2] && number[1] == number[3]) price += 100;

	return price;
}

stock GetCarRegionPrice(number[])
{
	if(strlen(number) != 3) return 0;

	new price = GetDonatePrice(DONATE_PRICE_REGION);

	if(number[0] == 0 && number[1] == 0) price += 25;
	else if(number[0] == number[1] && number[1] != number[2]) price += 20;
	else if(number[0] == number[1] && number[0] == number[2]) price += 30;

	return price;
}

CMD:checknumber(playerid, params[])
{
	extract params -> new string: number[7]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /checknumber [номер]");

	if(strlen(number) != 6) return SendClientMessage(playerid, 0x999999FF, "Длина номера должна быть 6 символов");

	new fmt_text[90];
	format(fmt_text, sizeof fmt_text, "Стоимость введенного Вами номера: %d рублей", GetCarNumberPrice(number));
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:checkregion(playerid, params[])
{
	extract params -> new string: number[4]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /checkregion [регион]");

	if(strlen(number) != 3) return SendClientMessage(playerid, 0x999999FF, "Длина региона должна быть 3 символа");

	new fmt_text[90];
	format(fmt_text, sizeof fmt_text, "Стоимость введенного Вами региона: %d рублей", GetCarRegionPrice(number));
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:skill(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /skill [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(to_player == playerid)
	{
		ShowPlayerSkills(playerid);
		return Action(playerid, "просматривает свои навыки владения оружием", _, false);
	}

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOW_SKILL);

	return 1;
}
CMD:donat(playerid, params[]) return callcmd::donat(playerid, params);
CMD:donate(playerid, params[])
{
	//if(!IsPlayerHasDonations(playerid)) return SendClientMessage(playerid, 0x999999FF, "Новых пополнений не найдено");

	new	query[590],
		Cache: result,
		total_money;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `accounts` WHERE id=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	//rows = cache_num_rows();

	new donateold = GetPlayerCurrentDonate(playerid);

	if(cache_num_rows())
	{
		total_money = cache_get_field_content_int(0, "donate_current");
	}

	cache_delete(result);

	if(donateold < total_money)
	{
		//total_money == cache_get_field_content_int(i, "donate_current");
		new res_donate = total_money -= donateold;
		GivePlayerDonate(playerid, res_donate, "Пополнение");
		//SendClientMessage(playerid, -1, "Донат был начислен");
		new str[100];
		format(str, sizeof str, "{ff9900}Донат в размере {FFFFFF}%d руб{ff9900}, был начислен вам на аккаунт!", res_donate);
		SendClientMessage(playerid, -1, str);
	}
	if(donateold == total_money)
	{
		SendClientMessage(playerid, -1, "Новых зачислений не найдено!");
		return 1;
	}

	//if(0 < total_money <= 498) total_money_with_action = total_money;
	//else if(499 <= total_money <= 998) total_money_with_action = total_money + total_money/100*5;
	//else if(999 <= total_money <= 1998) total_money_with_action = total_money + total_money/100*15;
	//else if(1999 <= total_money <= 4998) total_money_with_action = total_money + total_money/100*20;
	//else if(total_money >= 4999) total_money_with_action = total_money + total_money/100*30;

	/*format
	(
		query, sizeof query,
		"{FFFFFF}\
		Вы пополнили счёт на {6699cc}%d.00 руб\n\
		{FFFFFF}С учётом акции будет зачислено {6699cc}%d.00 руб\n\n\
		{FFFFFF}Условия акции:\n\
		При зачислении суммы от {ff9900}499 руб {FFFFFF}вы получаете надбавку {33cc66}5%i%% от суммы\n\
		{FFFFFF}При зачислении суммы от {ff9900}999 руб {FFFFFF}вы получаете надбавку {33cc66}15%i%% от суммы\n\
		{FFFFFF}При зачислении суммы от {ff9900}1999 руб {FFFFFF}вы получаете надбавку {33cc66}20%i%% от суммы\n\
		{FFFFFF}При зачислении суммы от {ff9900}4999 руб {FFFFFF}вы получаете надбавку {33cc66}30%i%% от суммы\
		",
		total_money,
		total_money_with_action
	);

	Dialog(playerid, DIALOG_DONATE_ENROLLMENT, DIALOG_STYLE_MSGBOX, "{ffcc00}RCoins", query, "Зачислить", "Отмена");

	SetPVarInt(playerid, "donate_money", total_money);
	SetPVarInt(playerid, "donate_money_with_action", total_money_with_action);*/

	return 1;
}

CMD:setspawn(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_LIST,
		"{FFCC00}Изменение места появления в игре",
		"1. На Ж/Д вокзале или автостанции\n\
		2. В собственном доме\n\
		3. В гостиничном номере\n\
		4. На базе организации\n\
		5. В гостях (совместное проживание)\n\
		6. В доме семьи",
		"Выбрать", "Отмена"
	);
	return 1;
}

CMD:settint(playerid, params[])
{
	extract params -> new tint_id, tint_color; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settint [id раскраски] [id цвета]");

	if(!(0 <= tint_id <= MAX_WEAPON_TINTS - 1)) return SendClientMessage(playerid, 0x999999FF, "Некорректный идентификатор раскраски");

	if(!(0 <= tint_color <= sizeof weapon_tints)) return SendClientMessage(playerid, 0x999999FF, "Некорректный идентификатор цвета");

	g_player[playerid][P_WEAPON_TINT][tint_id] = tint_color;

	SendClientMessage(playerid, -1, "Успешно изменено");

	return 1;
}

CMD:dice(playerid, params[])
{
    if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0x999999FF, "Вы должны прожить в области минимум 2 года.");
	if(!IsPlayerInRangeOfAnyCasinoTable(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться возле игрального стола");

	extract params -> new to_player, money; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dice [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!(1 <= money <= 5_000_000))
		return SendClientMessage(playerid, 0x999999FF, "Сумма должна быть не более 5.000.000 рублей");

	if(GetPlayerMoneyEx(playerid) < money)
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет такого количества денег");

	if(GetPlayerMoneyEx(to_player) < money)
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет такого количества денег");

	if(GetPVarInt(playerid,"DiceKaz") > gettime()) return SCM(playerid,COLOR_RED,"\
	 			    	[Ошибка] {FFFFFF}Играть в казино можно раз в 5 секунд!");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CASINO_DICE	, money);
	return 1;
}

CMD:ad(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона, по которому могут с Вами связаться");

	new fmt_text[144];

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

		format(fmt_text, sizeof fmt_text, "Ваше объявление уже находится в очереди под {00CC99}номером %d", GetAdvertIndexInQueue(idx));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);

		return 1;
	}

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ad [текст объявления]");

	if(GetPlayerMoneyEx(playerid) < ADVERT_SEND_PRICE)
		return SendClientMessage(playerid, 0x999999FF, "Для отправки объявления необходимо иметь 2500 руб");

	SendAdvert(playerid, params);

	GivePlayerMoneyEx(playerid, -2500, "Отправка объявления", true, true);

	format(fmt_text, sizeof fmt_text, "Текст: %s", params);
	SendClientMessage(playerid, 0x00CC99FF, fmt_text);

	SendClientMessage(playerid, -1, "Ваше объявление было добавлено в очередь для публикации");
	SendClientMessage(playerid, -1, "Оставайтесь на связи, в противном случае объявление будет удалено из очереди");
	// SendClientMessage(playerid, -1, "Вы можете ускорить его публикацию {FF9900}с помощью команды /up. {FFFFFF}Услуга стоит {33CCFF}2000 руб");

	return 1;
}

CMD:edit(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_MUTE)) return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать данную функцию пока не пройдёт блокировка чата");

	if(!g_advert_created) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	new fmt_text[360],
		bool: ad_is_found;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		format
		(
			fmt_text, sizeof fmt_text,
			"{FFFFFF}Отправитель: %s\n\nТекст:\n{FFCD00}%s\n\n"\
			"{FFFFFF}Для редактирования объявления введите новый текст и нажмите 'Отправить'.\n"\
			"Если редактирование объявлению не нужно, оставьте поле пустым.",
			GetPlayerNameEx(GetAdvertData(idx, A_CREATOR)), GetAdvertData(idx, A_TEXT)
		);

		Dialog(playerid, DIALOG_ADVERT_EDIT, DIALOG_STYLE_INPUT, "{00CC00}Публикация объявления", fmt_text, "Отправить", "Отклонить");

		SetAdvertData(idx, A_EDIT, true);

		SetPVarInt(playerid, "advert_id", idx);

		ad_is_found = true;

		break;
	}

	if(!ad_is_found) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	return 1;
}

CMD:t(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!GetPVarInt(playerid, "efir")) return SendClientMessage(playerid, 0x999999FF, "Вы не подключены к радио-эфиру");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /t [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ГТРК «Ритм»] %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:u(playerid, params[])
{
	if(!GetPVarInt(playerid, "radio_mic")) return SendClientMessage(playerid, 0x999999FF, "Вы не подключены к радио-эфиру");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /u [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ГТРК «Ритм»] Гость %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:givemic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemic [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPVarInt(to_player, "radio_mic"))
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_MIC);

	else
	{
		new fmt_text[128];

		format(fmt_text, sizeof fmt_text, "%s %s[%d] отключил Вас от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		format(fmt_text, sizeof fmt_text, "Вы отключили %s[%d] от радио-эфира", GetPlayerNameEx(to_player), to_player);
		SendClientMessage(playerid, 0x3399FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] отключил %s[%d] от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

		SetPVarInt(to_player, "radio_mic", 0);
	}

	return 1;
}

CMD:efiron(playerid)
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

    SetPVarInt(playerid, "efir", 1);
    SendClientMessage(playerid, 0x33FF33AA, "Вы успешно подключились к эфиру.");
    SendClientMessage(playerid, 0x33FF33AA, "Что бы начать говорить в эфире введите /t [Текст]");

	return 1;
}

CMD:efiroff(playerid)
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

    SetPVarInt(playerid, "efir", 0);
    SendClientMessage(playerid, 0x33FF33AA, "Вы отключились от эфира.");

	return 1;
}
CMD:gangzonegovnozhopa(playerid, params[])
{
	new gang_zone[100][4] =
	{
		{-2667, 149, -2567, 249},
		{-2567, 149, -2467, 249},
		{-2467, 149, -2367, 249},
		{-2367, 149, -2267, 249},
		{-2267, 149, -2167, 249},
		{-2167, 149, -2067, 249},
		{-2167, 49, -2067, 149},
		{-2267, 49, -2167, 149},
		{-2367, 49, -2267, 149},
		{-2467, 49, -2367, 149},
		{-2567, 49, -2467, 149},
		{-2667, 49, -2567, 149},
		{-2667, -51, -2567, 49},
		{-2567, -51, -2467, 49},
		{-2467, -51, -2367, 49},
		{-2367, -51, -2267, 49},
		{-2267, -51, -2167, 49},
		{-2167, -51, -2067, 49},
		{-2167, -151, -2067, -51},
		{-2267, -151, -2167, -51},
		{-2367, -151, -2267, -51},
		{-2467, -151, -2367, -51},
		{-2567, -151, -2467, -51},
		{-2667, -151, -2567, -51},
		{-2667, -251, -2567, -151},
		{-2567, -251, -2467, -151},
		{-2467, -251, -2367, -151},
		{-2367, -251, -2267, -151},
		{-2267, -251, -2167, -151},
		{-2167, -251, -2067, -151},
		{1974, 2007, 2074, 2107},
		{1874, 2007, 1974, 2107},
		{1774, 2007, 1874, 2107},
		{1674, 2007, 1774, 2107},
		{1574, 2007, 1674, 2107},
		{1574, 2107, 1674, 2207},
		{1674, 2107, 1774, 2207},
		{1774, 2107, 1874, 2207},
		{1874, 2107, 1974, 2207},
		{1974, 2107, 2074, 2207},
		{1974, 2207, 2074, 2307},
		{1874, 2207, 1974, 2307},
		{1774, 2207, 1874, 2307},
		{1674, 2207, 1774, 2307},
		{1574, 2207, 1674, 2307},
		{1574, 2307, 1674, 2407},
		{1674, 2307, 1774, 2407},
		{1774, 2307, 1874, 2407},
		{1874, 2307, 1974, 2407},
		{1974, 2307, 2074, 2407},
		{1974, 2407, 2074, 2507},
		{1874, 2407, 1974, 2507},
		{1774, 2407, 1874, 2507},
		{1674, 2407, 1774, 2507},
		{1574, 2407, 1674, 2507},
		{1574, 2507, 1674, 2607},
		{1674, 2507, 1774, 2607},
		{1774, 2507, 1874, 2607},
		{1874, 2507, 1974, 2607},
		{1974, 2507, 2074, 2607},
		{1751, -311, 1851, -211},
		{1751, -411, 1851, -311},
		{1651, -411, 1751, -311},
		{1651, -311, 1751, -211},
		{1551, -311, 1651, -211},
		{1551, -411, 1651, -311},
		{1451, -411, 1551, -311},
		{1451, -311, 1551, -211},
		{981, -265, 1081, -165},
		{981, -365, 1081, -265},
		{981, -465, 1081, -365},
		{881, -465, 981, -365},
		{881, -365, 981, -265},
		{881, -265, 981, -165},
		{781, -265, 881, -165},
		{781, -365, 881, -265},
		{781, -465, 881, -365},
		{681, -465, 781, -365},
		{681, -365, 781, -265},
		{681, -265, 781, -165},
		{581, -265, 681, -165},
		{581, -365, 681, -265},
		{581, -465, 681, -365},
		{481, -465, 581, -365},
		{481, -365, 581, -265},
		{481, -265, 581, -165},
		{381, -265, 481, -165},
		{381, -365, 481, -265},
		{381, -465, 481, -365},
		{281, -365, 381, -265},
		{2401, -330, 2501, -230},
		{2501, -330, 2601, -230},
		{2501, -230, 2601, -130},
		{2501, -130, 2601, -30},
		{2401, -230, 2501, -130},
		{2401, -130, 2501, -30},
		{2301, -230, 2401, -130},
		{2601, -330, 2701, -230},
		{2601, -230, 2701, -130},
		{2201, -230, 2301, -130}
	};

	for(new i; i < sizeof gang_zone; i ++)
	{
		new query[110];

		mysql_format(mysql, query, sizeof query, "INSERT INTO gang_zones (min_x, min_y, max_x, max_y) VALUES (%d, %d, %d, %d)", gang_zone[i][0], gang_zone[i][1], gang_zone[i][2], gang_zone[i][3]);
		mysql_query(mysql, query, false);
	}

	LoadGangZones();

	ShowGangZonesForPlayer(playerid);

	return 1;
}
stock CreateGreenZones()
{
	for(new idx; idx < sizeof g_green_zones; idx ++)
		g_green_zones[idx][GZ_AREA] = CreateDynamicRectangle
		(
			g_green_zones[idx][GZ_MIN_X], g_green_zones[idx][GZ_MIN_Y],
			g_green_zones[idx][GZ_MAX_X], g_green_zones[idx][GZ_MAX_Y]
		);

	return 1;
}

stock HideSpecmenuTD(playerid)
{
    for(new i; i < 37; i ++)
	{
		PlayerTextDrawHide(playerid, spec_PTD[playerid][i]);
	}
	CancelSelectTextDraw(playerid);
	return 1;
}

stock ShowSpecmenuTD(playerid)
{
	for(new i; i < 37; i ++)
	{
		PlayerTextDrawShow(playerid, spec_PTD[playerid][i]);
	}
	new text[60];
	new fmt_td_text[100];
	new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	new Float: vehicle_health;
	new Float:health; GetPlayerHealth(spec_player, health);
	new Float: armour;

	GetPlayerArmour(spec_player, armour);

	format(text, sizeof text, "%s", GetPlayerNameEx(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][4], text);
	format(text, sizeof text, "%d", spec_player);
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][5], text);

	format(text, sizeof text, "%s", GetPlayerNameEx(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][6], text);
	format(text, sizeof text, "%d_ID", spec_player);
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][7], text);

	format(fmt_td_text, sizeof fmt_td_text, "%d/%d", GetPlayerLevel(spec_player),GetPlayerExp(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][8], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%f", health);
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][9], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%d/3", GetPlayerData(spec_player, P_WARN));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][10], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%d", GetPlayerPing(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][11], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%.1f", GetPlayerPacketLoss(playerid));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][12], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%s",  GetPlayerTeamName(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][13], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%s", GetPlayerJobAndRankName(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][14], fmt_td_text);

	if(GetPlayerFam(spec_player) == 0)
	{
		PlayerTextDrawSetString(playerid, spec_PTD[playerid][15], "Нету");
	}
	else {
		format(fmt_td_text, sizeof fmt_td_text, "%s", g_family[GetPlayerFam(playerid)][F_NAME]);
		PlayerTextDrawSetString(playerid, spec_PTD[playerid][15], fmt_td_text);
	}

	format(fmt_td_text, sizeof fmt_td_text, "%f", armour);
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][16], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%s", GetPlayerWeapon(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][17], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%d/%d/%d", GetPlayerData(spec_player, P_SKILL_DEAGLE), GetPlayerData(spec_player, P_SKILL_M4), GetPlayerData(spec_player, P_SKILL_AK47));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][18], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%d", GetVehicleHealth(GetPlayerVehicleID(spec_player), vehicle_health));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][19], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "%d", GetPlayerSpeed(spec_player));
	PlayerTextDrawSetString(playerid, spec_PTD[playerid][20], fmt_td_text);

	SelectTextDraw(playerid, 0xFFB400FF);
	return 1;
}

stock ShowPlayerAvtoriz(playerid)
{
	new text[50];
	PlayerTextDrawShow(playerid, avtoriz_PTD[playerid][0]);
	format(text, sizeof text, "%s", GetPlayerNameEx(playerid));
	PlayerTextDrawSetString(playerid, avtoriz_PTD[playerid][1], text);
	PlayerTextDrawShow(playerid, avtoriz_PTD[playerid][1]);
	//PlayerTextDrawShow(playerid, avtoriz_PTD[playerid][2]);
	PlayerTextDrawShow(playerid, avtoriz_PTD[playerid][3]);
	PlayerTextDrawShow(playerid, avtoriz_PTD[playerid][4]);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return 1;
}

stock HidePlayerAvtoriz(playerid)
{
	PlayerTextDrawHide(playerid, avtoriz_PTD[playerid][0]);
	PlayerTextDrawHide(playerid, avtoriz_PTD[playerid][1]);
	PlayerTextDrawHide(playerid, avtoriz_PTD[playerid][2]);
	PlayerTextDrawHide(playerid, avtoriz_PTD[playerid][3]);
	PlayerTextDrawHide(playerid, avtoriz_PTD[playerid][4]);

	CancelSelectTextDraw(playerid);
	return 1;
}

stock ShowPlayerReg(playerid)
{
	PlayerTextDrawShow(playerid, registr_PTD[playerid][0]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][1]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][2]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][3]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][4]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][5]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][6]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][7]);
	PlayerTextDrawShow(playerid, registr_PTD[playerid][8]);

	TextDrawShowForPlayer(playerid, registr_TD[0]);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return 1;
}

stock HidePlayerReg(playerid)
{
	PlayerTextDrawHide(playerid, registr_PTD[playerid][0]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][1]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][2]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][3]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][4]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][5]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][6]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][7]);
	PlayerTextDrawHide(playerid, registr_PTD[playerid][8]);

	TextDrawHideForPlayer(playerid, registr_TD[0]);

	CancelSelectTextDraw(playerid);
	return 1;
}

stock CreateRegPlayer(playerid)
{
	registr_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 109.3331, 164.9555, "stonks:click"); // click password
	PlayerTextDrawTextSize(playerid, registr_PTD[playerid][0], 88.0000, 21.0000);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, registr_PTD[playerid][0], true);

	registr_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 108.6666, 198.5556, "stonks:click"); // email click
	PlayerTextDrawTextSize(playerid, registr_PTD[playerid][1], 88.0000, 21.0000);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, registr_PTD[playerid][1], true);

	registr_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 108.6666, 232.9851, "stonks:click"); // referal click
	PlayerTextDrawTextSize(playerid, registr_PTD[playerid][2], 88.0000, 21.0000);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, registr_PTD[playerid][2], true);

	registr_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 107.3332, 266.2702, "stonks:man"); // пусто
	PlayerTextDrawTextSize(playerid, registr_PTD[playerid][3], 33.0000, 18.0000);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, registr_PTD[playerid][3], true);

	registr_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 165.6665, 266.2702, "stonks:women"); // пусто
	PlayerTextDrawTextSize(playerid, registr_PTD[playerid][4], 33.0000, 18.0000);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, registr_PTD[playerid][4], true);

	registr_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 132.9998, 294.0628, "stonks:dalee"); // пусто
	PlayerTextDrawTextSize(playerid, registr_PTD[playerid][5], 37.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, registr_PTD[playerid][5], true);

	registr_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 154.3332, 172.9924, "Введите пароль"); // пусто
	PlayerTextDrawLetterSize(playerid, registr_PTD[playerid][6], 0.1828, 0.8034);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][6], 0);

	registr_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 152.9998, 206.1777, "Введите e-mail"); // пусто
	PlayerTextDrawLetterSize(playerid, registr_PTD[playerid][7], 0.1828, 0.8034);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][7], 0);

	registr_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 152.6665, 240.1925, "Введите ник"); // пусто
	PlayerTextDrawLetterSize(playerid, registr_PTD[playerid][8], 0.1828, 0.8034);
	PlayerTextDrawAlignment(playerid, registr_PTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, registr_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, registr_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, registr_PTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, registr_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, registr_PTD[playerid][8], 0);
	return 1;
}

stock CreateAvtorizPlayer(playerid)
{

    avtoriz_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 85.6666, 122.2294, "stonks:avtoriz"); // пусто
	PlayerTextDrawTextSize(playerid, avtoriz_PTD[playerid][0], 122.0000, 210.0000);
	PlayerTextDrawAlignment(playerid, avtoriz_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, avtoriz_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, avtoriz_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, avtoriz_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, avtoriz_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, avtoriz_PTD[playerid][0], 0);

	avtoriz_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 146.6667, 203.2740, "NICK_NAME"); // пусто
	PlayerTextDrawLetterSize(playerid, avtoriz_PTD[playerid][1], 0.1796, 0.8490);
	PlayerTextDrawAlignment(playerid, avtoriz_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, avtoriz_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, avtoriz_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, avtoriz_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, avtoriz_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, avtoriz_PTD[playerid][1], 0);

	avtoriz_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 145.6667, 245.9998, "PASSWORD"); // пусто
	PlayerTextDrawLetterSize(playerid, avtoriz_PTD[playerid][2], 0.1796, 0.8490);
	PlayerTextDrawAlignment(playerid, avtoriz_PTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, avtoriz_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, avtoriz_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, avtoriz_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, avtoriz_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, avtoriz_PTD[playerid][2], 0);

	avtoriz_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 125.3332, 284.8369, "stonks:play"); // пусто
	PlayerTextDrawTextSize(playerid, avtoriz_PTD[playerid][3], 41.0000, 21.0000);
	PlayerTextDrawAlignment(playerid, avtoriz_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, avtoriz_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, avtoriz_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, avtoriz_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, avtoriz_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, avtoriz_PTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, avtoriz_PTD[playerid][3], true);

	avtoriz_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 103.6666, 239.6221, "stonks:click"); // click password
	PlayerTextDrawTextSize(playerid, avtoriz_PTD[playerid][4], 89.0000, 20.0000);
	PlayerTextDrawAlignment(playerid, avtoriz_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, avtoriz_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, avtoriz_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, avtoriz_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, avtoriz_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, avtoriz_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, avtoriz_PTD[playerid][4], true);
	return 1;

}

stock CreatePlayerGreenZoneText(playerid)
{
	green_zone_PTD[playerid] = CreatePlayerTextDraw(playerid, 552.889099, 141.368865, "?_");
	PlayerTextDrawLetterSize(playerid, green_zone_PTD[playerid], 0.178888, 0.987732);
	PlayerTextDrawAlignment(playerid, green_zone_PTD[playerid], 2);
	PlayerTextDrawColor(playerid, green_zone_PTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, green_zone_PTD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, green_zone_PTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, green_zone_PTD[playerid], 51);
	PlayerTextDrawFont(playerid, green_zone_PTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, green_zone_PTD[playerid], 1);

	return 1;
}

stock CreatePlayerCityZoneText(playerid)
{
	city_zone_PTD[playerid] = CreatePlayerTextDraw(playerid, 29.000034, 414.814788, "New Textdraw");
	PlayerTextDrawLetterSize(playerid, city_zone_PTD[playerid], 0.207666, 0.977777);
	PlayerTextDrawAlignment(playerid, city_zone_PTD[playerid], 1);
	PlayerTextDrawColor(playerid, city_zone_PTD[playerid], 255);
	PlayerTextDrawSetShadow(playerid, city_zone_PTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, city_zone_PTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, city_zone_PTD[playerid], 51);
	PlayerTextDrawFont(playerid, city_zone_PTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, city_zone_PTD[playerid], 1);

	return 1;
}

stock ShowPlayerGreenZoneText(playerid, green_zone)
{
	for(new idx; idx < 2; idx ++)
		TextDrawShowForPlayer(playerid, green_zone_TD[idx]);

	PlayerTextDrawShow(playerid, green_zone_PTD[playerid]);

	new fmt_text[60];

	format(fmt_text, sizeof fmt_text, "", g_green_zones[green_zone][GZ_NAME]);
	PlayerTextDrawSetString(playerid, green_zone_PTD[playerid], fmt_text);

	return 1;
}

stock HidePlayerGreenZoneText(playerid)
{
	for(new idx; idx < 2; idx ++)
		TextDrawHideForPlayer(playerid, green_zone_TD[idx]);

	PlayerTextDrawHide(playerid, green_zone_PTD[playerid]);

	return 1;
}
CMD:setlights(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new Float: x,
		Float: y;

	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(player_test_label[playerid][0] == Text3D: INVALID_3DTEXT_ID)
		{
			for(new idx; idx < 4; idx ++)
			{
				GetVehicleTurnSignalPos(vehicleid, idx + 1, x, y);

				player_test_label[playerid][idx] = CreateDynamic3DTextLabel(IntToString(idx), 0xFFCC33FF, x, y, 0.0, 10.0, _, vehicleid);
			}
		}
		else
		{
			for(new idx; idx < 4; idx ++)
			{
				DestroyDynamic3DTextLabel(player_test_label[playerid][idx]);

				player_test_label[playerid][idx] = Text3D: INVALID_3DTEXT_ID;
			}
		}
	}
	else SendClientMessage(playerid, -1, "u r not in a vehicle");

	return 1;
}

CMD:setspeed(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

	extract params -> new Float: speed; else return SendClientMessage(playerid, -1, "/setspeed [speed]");

	new vehicleid = GetPlayerVehicleID(playerid);

	SetVehicleSpeed(vehicleid, speed);

	SendClientMessage(playerid, -1, "speed changed");

	return 1;
}

CMD:sd(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

	extract params -> new Float: speed; else return SendClientMessage(playerid, -1, "/sd [speed]");

	new vehicleid = GetPlayerVehicleID(playerid);

	SetVehicleSpeed(vehicleid, speed);

	SendClientMessage(playerid, -1, "speed changed");

	return 1;
}

CMD:supercarblya(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new supercar = GetPVarInt(playerid, "supercar");

	supercar = supercar ^ 1;

	SetPVarInt(playerid, "supercar", supercar);

	new fmt_text[2][32] =
	{
		"supercar off",
		"supercar on"
	};

	SendClientMessage(playerid, -1, fmt_text[supercar]);

	return 1;
}

CMD:setmultiplier(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new multiplier; else return SendClientMessage(playerid, -1, "/setmultiplier [mult]");

	SetPVarInt(playerid, "supercar_multiplier", multiplier);

	SendClientMessage(playerid, -1, "multiplier changed");

	return 1;
}
CMD:pedaltype(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new pedal_name[3][] = {"none", "gas", "brake"};

	new pedal_type = player_press_pedal[playerid];

	SendClientMessage(playerid, -1, pedal_name[pedal_type]);

	return 1;
}

CMD:createpromo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	Dialog
	(
		playerid, DIALOG_PROMO_CREATE, DIALOG_STYLE_INPUT,
		"{FFCD00}Создание промокода",
		"{FFFFFF}Для создания промокода введите\n"\
		"следующие параметры в окно ниже:\n\n"\
		"{33CC66}Параметры: Код, Тип, Кол-во, Использования, PayDay\n\n"\
		"{888888}Примечание:\n"\
		"{FFFFFF}- Код может содержать от 1 до 30 символов\n"\
		"- Тип от 0 до 2 (деньги, донат, exp)\n"\
		"- Количество от 1 до 1.500.000\n"\
		"- Количество использований от 1 до 500\n"\
		"- Количество PayDay от 0 до 20",
		"Далее", "Отмена"
	);

	return 1;
}

CMD:report(playerid, params[])
{
 	if(IsPlayerRMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас заблокирован доступ к репорту. Используйте: /time");

	if(GetPVarInt(playerid, "antifloodrep") > gettime())
	{
	    new flood_rep[144];

	    format(flood_rep, sizeof flood_rep, "Вы недавно отправляли жалобу. Подождите %d {FF6600}сек.", GetPVarInt(playerid, "antifloodrep") - gettime());

		SendClientMessage(playerid, 0xFF6600FF, flood_rep);
	}
 	else
 	{
		if(!strlen(params))
		{
	    	ShowPlayerReport(playerid);
		}
		else
		{
			format(report_message[playerid], sizeof report_message, "%s", params);

			Dialog(playerid, DIALOG_REPORT_2, DIALOG_STYLE_LIST, "Выберите действие", "1. Жалоба на игрока\n2. Задать вопрос", "Далее", "Закрыть");
		}

	}
	return 1;
}

CMD:pcode(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_PROMO_ACTIVATE, DIALOG_STYLE_INPUT,
		"{FFCD00}Активация промокода",
		"{FFFFFF}Введите промокод в окно ниже:",
		"Далее", "Отмена"
	);
	return 1;
}

stock ShowFamilyRepository(playerid)
{
	Dialog
	(
		playerid, DIALOG_FAM_REPOSITORY, DIALOG_STYLE_LIST,
		"Склад семьи",
		"\
		1. Взять наркотики\n\
		2. Взять патроны\n\
		3. Взять металл\n\
		4. Взять деньги\n\
		––––––––––––––\n\
		5. Положить наркотики\n\
		6. Положить патроны\n\
		7. Положить металл\n\
		8. Положить деньги\n\
		––––––––––––––\n\
		{FF6600}Открыть / закрыть склад\n\
		История склада\n\
		Информация\n\
		",
		"Выбрать", "Отмена"
	);
	return 1;
}

stock FamilyLog(playerid = INVALID_PLAYER_ID, desc[])
{
	new query_string[512];
	mysql_format(mysql, query_string, sizeof query_string, "INSERT INTO family_log (fam_id, text) VALUES (%d, '%s')",
	GetPlayerFam(playerid), desc);
	mysql_query(mysql, query_string, false);

	return 1;
}

stock GetPlayerFamilyRang(playerid)
{
	new rang,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT famrank FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		rang = cache_get_row_int(0, 0);

	cache_delete(result);

	return rang;
}

stock GetFamilyCountUsers(f_id)
{
	new count,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE pfam=%d", f_id);
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock GetPlayerFamilyRank(playerid)
{
	new family = GetPlayerFam(playerid);
	return g_family_rank[family][g_player[playerid][P_FAMRANK] - 1];
}


stock SendFamilyMessage(playerid, message[])
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerFam(i) != GetPlayerFam(playerid)) continue;

		new fmt_str[144];

		format(fmt_str, sizeof fmt_str, "{%s}[%s] %s", g_family[GetPlayerFam(playerid)][F_COLOR], g_family[GetPlayerFam(playerid)][F_NAME], message);
		SendClientMessage(i, 0xFFFFFFFF, fmt_str);
	}
}

stock ShowPlayerFind(playerid)
{
	new fmt_text[300],
		list[sizeof fmt_text * 10 + 50] = "Дожность\t\tИмя\t\tТелефон\n";

	new count;

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		if(!IsPlayerConnected(i) || GetPlayerFam(i) != GetPlayerFam(playerid)) continue;

		format(fmt_text, sizeof fmt_text, "\n%s [%d]\t\t%s [%d] - т.%d", GetPlayerFamilyRank(i), GetPlayerFamRankEx(i), GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);

		count = i;
	}

	format(fmt_text, sizeof fmt_text, "\n\nВсего членов семьи онлайн: %d чел.", count + 1);
	strcat(list, fmt_text);

	Dialog(playerid, DIALOG_CANCEL_FAMILY, DIALOG_STYLE_MSGBOX, "Члены семьи онлайн", list, "Назад", "Закрыть");
}

CMD:fmenu(playerid)
{
	if(GetPlayerData(playerid, P_FAMRANK) < 1) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");

	new fmt_text[300];

	format
	(
	    fmt_text, sizeof fmt_text,
		"1. Информация о семье\n"\
		"2. Семейный дом [ %d ]\n"\
		"3. Члены семьи онлайн\n"\
		"4. Полный состав семьи [ {FF6600}Offline{FFFFFF} ]\n"\
		"5. Настройки семьи\n"\
		"6. Склад семьи\n"\
		"{ADADAD}Покинуть семью",
		g_family[GetPlayerFam(playerid)][F_HOUSE]
	);

	Dialog
	(
		playerid, DIALOG_FAMILY_INFO, DIALOG_STYLE_LIST,
		"Управление семьей",
		fmt_text,
		"Далее", "Закрыть"
	);

	return 1;
}

CMD:fclose(playerid, params[])
{
	if(GetPlayerFamRankEx(playerid) < 4) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");

	if(g_family[GetPlayerFam(playerid)][F_LOCK] == 0)
	{
		new query[144];

		mysql_format(mysql, query, sizeof query, "UPDATE family SET status_sklad=1 WHERE fam_id=%d", GetPlayerFam(playerid));
		mysql_query(mysql, query, false);

		g_family[GetPlayerFam(playerid)][F_LOCK] = 1;

		for(new i=0; i < MAX_PLAYERS; i++)
		{
			if(!IsPlayerConnected(i) || GetPlayerFam(i) != GetPlayerFam(playerid)) continue;
			new f_name[144];

			format(f_name, sizeof f_name, "[%s] %s [%d] закрыл склад семьи", g_family[GetPlayerFam(playerid)][F_NAME], GetPlayerNameEx(playerid), playerid);

			SendClientMessage(i, 0xFF6600FF, f_name);
		}
	}
	else if(g_family[GetPlayerFam(playerid)][F_LOCK] == 1)
	{
		new query[144];

		mysql_format(mysql, query, sizeof query, "UPDATE family SET status_sklad=0 WHERE fam_id=%d", GetPlayerFam(playerid));
		mysql_query(mysql, query, false);

		g_family[GetPlayerFam(playerid)][F_LOCK] = 0;

		for(new i=0; i < MAX_PLAYERS; i++)
		{
			if(!IsPlayerConnected(i) || GetPlayerFam(i) != GetPlayerFam(playerid)) continue;
			new f_name[144];

			format(f_name, sizeof f_name, "[%s] %s [%d] открыл склад семьи", g_family[GetPlayerFam(playerid)][F_NAME], GetPlayerNameEx(playerid), playerid);

			SendClientMessage(i, 0xCECECEFF, f_name);
		}
	}

	return 1;
}

CMD:family_rang(playerid, params[]) return callcmd::frang(playerid, params);
CMD:frang(playerid, params[])
{
	if(GetPlayerFam(playerid) < 0) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");
	if(GetPlayerFamRankEx(playerid) < 5) return SendClientMessage(playerid, 0xFF6600FF, "Функция доступна основателям семьи");

	if(!strlen(params)) return SendClientMessage(playerid, COLOR_GREY, "Используйте: /frang [ID игрока]");
	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(GetPlayerFam(to_player) != GetPlayerFam(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Этот игрок не состоит в Вашей семье");

	SetPVarInt(playerid, "edit_frang", to_player);

	STRING_GLOBAL[0] = EOS;

	new fmt_str[144];

	for(new i = 0; i < 5; i ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", i + 1, g_family_rank[GetPlayerFam(playerid)][i]);
		strcat(STRING_GLOBAL, fmt_str);
	}

	Dialog(playerid, DIALOG_GIVE_FAMILY_RANG, DIALOG_STYLE_LIST, "Выберите ранг", STRING_GLOBAL, "Далее", "Закрыть");

	return 1;
}

CMD:family_uninvite(playerid, params[]) return callcmd::funinvite(playerid, params);
CMD:funinvite(playerid, params[])
{
	if(!GetPlayerFam(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");
	else if(GetPlayerFamRankEx(playerid) < 4) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");
	if(sscanf(params, "d", params[0]) || params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Используйте: /funinvite [ид игрока]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не подключен");
    if(GetPlayerFamRankEx(params[0]) == 5) return SendClientMessage(playerid, 0xFF6600FF, "Игрок лидер семьи");
	if(GetPlayerFam(params[0]) != GetPlayerFam(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не в вашей семье");
	SendClientMessage(params[0],-1,"Вас исключили из семьи!");
	SetPlayerData(params[0], P_FAM, 0);
	UpdatePlayerDatabaseInt(params[0], "pfam", 0);

	SetPlayerData(params[0], P_FAMRANK, 0);
	UpdatePlayerDatabaseInt(params[0], "famrank", 0);
	DestroyDynamic3DTextLabel(g_player[params[0]][P_FAM_LABEL]);
	g_player[params[0]][P_FAM_LABEL] = Text3D: -1;

	new query[100];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET fName='' WHERE id=%d LIMIT 1", GetPlayerAccountID(params[0]));
	mysql_query(mysql, query, false);

	if(!mysql_errno())
	{
		format(g_player[params[0]][P_FAMNAME], 61, "");
	}

	new str[144];
	format(str, sizeof(str), "%s [%d] исключил из семьи %s [%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(params[0]), params[0]);
	SendFamilyMessage(playerid, str);
    return 1;
}

CMD:family_leave(playerid)
{
	if(!GetPlayerFam(playerid) || GetPlayerFamRankEx(playerid) == 5) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");

	SetPlayerData(playerid, P_FAM, 0);
	UpdatePlayerDatabaseInt(playerid, "pfam", 0);

	SetPlayerData(playerid, P_FAMRANK, 0);
	UpdatePlayerDatabaseInt(playerid, "famrank", 0);
	DestroyDynamic3DTextLabel(g_player[playerid][P_FAM_LABEL]);
	g_player[playerid][P_FAM_LABEL] = Text3D: -1;

	new query[100];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET fName='' WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	if(!mysql_errno())
	{
		format(g_player[playerid][P_FAMNAME], 61, "");
	}

	SendClientMessage(playerid, 0xFF6666FF, "Вы покинули семью по собственному желанию	");

	return 1;
}

CMD:create_family(playerid)
{
	Dialog
	(
		playerid, d_family_creating, DIALOG_STYLE_LIST,
		"{FF6666}Создание семьи",
		"{ffffff}Создать\nСписок",
		"Далее", "Закрыть"
	);
}
CMD:finvite(playerid, params[])
{
	if(!GetPlayerFam(playerid) || GetPlayerFamRankEx(playerid) < 3) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");
	if(!strlen(params)) return SendClientMessage(playerid, COLOR_GREY, "Используйте: /finvite [ID игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(GetPlayerLevel(to_player) < 2) return SendClientMessage(playerid, -1, "У игрока должен быть уровень больше второго");
	if(GetPlayerFam(to_player) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Этот игрок уже состоит в семье");
	if(GetPlayerData(to_player, P_WARN)) return SendClientMessage(playerid, 0xFF6600FF, "У игрока есть предупреждения");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FINVITE);
	return 1;
}

CMD:fm(playerid, params[])
{
	if(!GetPlayerFam(playerid)) return true;
	if(sscanf(params, "s[60]", params)) return SendClientMessage(playerid, COLOR_GREY, "Используйте: /fm [текст]");
	new str[144];
	format(str, sizeof(str), "%s [%d]: %s", GetPlayerNameEx(playerid), playerid, params);
    SendFamilyMessage(playerid, str);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0x3399FFFF, 10.5, 2000);
    return 1;
}

CMD:finfo(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_GREY, "Используйте: /finfo [ID игрока]");

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new family_id = GetPlayerFam(to_player);

	STRING_GLOBAL[0] = EOS;

	if(GetPlayerFam(to_player) > 0)
	{
		format
		(
			STRING_GLOBAL, sizeof STRING_GLOBAL,
			"Название: %s\n\
			ID семьи: %d\n\n\
			Дата создания: %s\n\
            Состав семьи: %i чел.\n\
			Бюджет семьи: %d руб.\n\n\
			Основатель: %s",
			g_family[family_id][F_NAME],
			g_family[family_id][F_ID],
			g_family[family_id][F_DATE],
			GetFamilyCountUsers(family_id),
			g_family[family_id][F_MONEY],
			g_family[family_id][F_LEADER]
		);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Информация о семье", STRING_GLOBAL, "Закрыть", "");
	}
	else
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s не состоит в семье", GetPlayerNameEx(to_player));
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Информация о семьe", STRING_GLOBAL, "Закрыть", "");
	}

	return 1;
}

CMD:afly(playerid, params[])
{
	//if(GetPlayerAdminEx(playerid) < 1) return 1;
    if(GetPlayerAdminEx(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;

	new fmt_text[55],
		bool: fly_status;

	if(StartFly(playerid))
		fly_status = true;

	else
		StopFly(playerid);

	format(fmt_text, sizeof fmt_text, "Вы %s Fly-режим", fly_status ? "включили" : "выключили");
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] %s Fly-режим", GetPlayerNameEx(playerid), playerid, fly_status ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}
 	if(GetPlayerYAdminEx(playerid) >= 1)
	{
		format(fmt_text, sizeof fmt_text, "[Y] %s[%d] %s Fly-режим", GetPlayerNameEx(playerid), playerid, fly_status ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	format(fmt_text, sizeof fmt_text, "%s Fly-режим", fly_status ? "Включил" : "Выключил");
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:pfly(playerid, params[])
{
	if(GetPlayerPrikol(playerid) < 1) return 1;

	new fmt_text[55],
		bool: fly_status;

	if(StartFly(playerid))
		fly_status = true;

	else
		StopFly(playerid);

	format(fmt_text, sizeof fmt_text, "Вы %s Fly-режим", fly_status ? "включили" : "выключили");
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	format(fmt_text, sizeof fmt_text, "%s Fly-режим", fly_status ? "Включил" : "Выключил");
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
CMD:idea(playerid, params[])
{
	extract params -> new string: text[144]; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: {ffffff} /idea [текст]");

	SetPlayerChatBubble(playerid, text, 0xcececeFF, 25.0, 7000);

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Мысли от %s[%d]: {ffffff}%s", GetPlayerNameEx(playerid), text);
	SendMessageInLocal(playerid, STRING_GLOBAL, 0xcececeFF, 25.0);

	return 1;
}

CMD:svist(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: {ffffff} /svist [ID игрока]");

	Action(playerid, "свистнул");

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s[%d] свистнул Вам", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xb8e994FF, STRING_GLOBAL);

	return 1;
}
CMD:fcuff(playerid, params[])
{
    if(GetPlayerTeamEx(playerid) != TEAM_PJ) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}
CMD:funcuff(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_PJ) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:fputpl(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_PJ) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в автомобиле");

	if(!IsPlayerInPoliceCar(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в служебном транспорте");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0xFF6600FF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:fsearch(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_PJ) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /search [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	new fmt_text[110],
		bool: some_is_found;

	format(fmt_text, sizeof fmt_text, "%s %s произвёл обыск у %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_text, 0xDD90FFFF, 25.0);

	if(GetPlayerData(to_player, P_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "У %s [%d] обнаружено %d г наркотиков", GetPlayerData(to_player, P_DRUGS));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}
	if(GetPlayerData(to_player, P_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "У %s [%d] обнаружено %d патронов", GetPlayerData(to_player, P_AMMO));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}

	if(!some_is_found) SendClientMessage(playerid, 0xFFFF00FF, "Ничего не найдено");

	return 1;
}
CMD:viktorina(playerid)
{
		if(GetPlayerAdminEx(playerid) < 5) return 1;

        StartViktorina();

		return 1;
}
//викторина
public StartViktorina()
{

		new hour, minute, second;
		gettime(hour,minute,second);

		new day, month, year;
	    getdate(year, month, day);

        new str[128],a,b;
		new chislo;
        a = random(vMaxN);
        b = random(vMaxN);

        //if(hour < 10 && minute < 10 && second < 10)
        format(str, sizeof str,"{c71e00}Викторина: {ffffff}Сколько будет {c71e00}%d{ffffff} + {c71e00}%d{ffffff} ? {BEBEBE}(ответ пишем в чате)",a,b);

        SendClientMessageToAll(0xFFFFFFFF, str);

		chislo = a += b;
        Viktorina = chislo;
        return 1;
}

public: StartVictor()
{
	StartViktorina();
}
CMD:buygun(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 257.1270,1592.6824,1528.3159))
    {
	Dialog(playerid, wepbuy, DIALOG_STYLE_LIST,"Выберите оружие","Deagle[50пт] Цена - 3000р\nShotGun[50пт] Цена - 3000р\nAK47[50пт] Цена - 6500р\nM4[50пт] Цена - 6500р\nВинтовка[10пт] Цена - 5000р","Купить","Нет");
	}
	else
	{
	SendClientMessage(playerid, 0xFF6600FF, "Вы должны находится в магазине оружия!");
	}
 	return 1;
}
CMD:down(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_RED, "Используйте: /down [ID игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

 	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x, y, z - 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);
	return true;
}
CMD:tplist(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 2) return 1;
	Dialog
	(
		playerid, DIALOG_GPS, DIALOG_STYLE_LIST,
		"GPS Навигатор",
		"1. Общественные места\n"\
		"2. Автовокзалы\n"\
		"3. Государственные организации\n"\
		"4. Нелегальные организации\n"\
		"5. Подработки {bf1599}[Работы]\n"\
		"6. Банки\n"\
		"7. Разное / Развлечения\n"\
		"8. Бизнесы\n"\
		"9. Аренда рабочего транспорта\n"\
		"10.Ближайшие места\n"\
		"11.Другое",
		"Выбрать", "Закрыть"
	);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}
CMD:amusic(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

    new radio[256], distance;

	if(sscanf(params, "s[256]d", radio, distance)) return SendClientMessage(playerid, COLOR_RED, "Используйте:/amusic [ссылка] [дистанция]");
	else if(!(10 <= strlen(radio) <= 256)) return SendClientMessage(playerid, 0xFF6600FF, "Неверное количество символов в URL!");
	else if(!(2 <= distance <= 100)) return SendClientMessage(playerid, 0xFF6600FF, "Неверно указана дистанция. От 2 до 100 метров!");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, radio, X, Y, Z, distance, 1);
	format(radio, sizeof radio, "[A] %s [%d] поставил музыку (дистанция %d м)", GetPlayerNameEx(playerid), playerid, distance);
	SendMessageToAdmins(radio, COLOR_GREY);
	return 1;
}
CMD:spoff(playerid)
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	StopSpectate(playerid);

	SendClientMessage(playerid, COLOR_RED, "Вы вышли из режима наблюдения");

	HideSpecmenuTD(playerid);

	return 1;
}
CMD:gm(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, COLOR_RED, "Используйте:/gm [ID игрока]");

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не найден");

	if(IsPlayerAFK(params[0])) return SendClientMessage(playerid, 0xFF5533FF, "Данный игрок находится в АФК");

	new Float: pl_health ;
	GetPlayerHealth(params[0], pl_health);
	SetPlayerHealthEx(params[0], pl_health - 5);

	SetTimerEx("check_player_nop", 1400, false, "iif", playerid, params[0], pl_health);
	return true;
}
CMD:alldelveh(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new vehicles_count;

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
		{
			DestroyVehicle(i);
		}

	    vehicles_count++;
	}

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] удалил автомобили созданные администраторами", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	return 1;
}
//рыбалка

CMD:rod(playerid,params[])
    {
        if(GetPlayerData(playerid, P_YDKA) == 0)
            return SendClientMessage(playerid, -1, "У Вас нет удочки!");
        if(fishing_rod_state[playerid] == 1)
        {
            fishing_rod_state[playerid] = 2;
            return SetPlayerAttachedObject(playerid, FISHING_ROD_ATTACHID, 10812,6,0.079376,0.037070,0.007706,0.0,0.000000,0.000000,1.000000,1.000000,1.000000);
        }
        if(fishing_busy[playerid])
            return SendClientMessage(playerid, -1, "Вы ловите рыбу. Чтобы завершить рыбалку, используйте /fish");
        fishing_rod_state[playerid] = 1;
        return RemovePlayerAttachedObject(playerid, FISHING_ROD_ATTACHID);
    }

CMD:fish(playerid,params[])
    {
        if(fishing_busy[playerid])
        {
            KillTimer(fishing_timer[playerid]);
            fishing_busy[playerid] = 0;
            TogglePlayerControllable(playerid, 1);
            ApplyAnimation(playerid, "SAMP", "FISHINGIDLE", 2.0, 0, 0, 0, 0, 0);
            GameTextForPlayer(playerid, "~w~Рыбалка ~r~остановлена", 3000, 3);
            return SendClientMessage(playerid, -1, "Рыбалка остановлена");
        }
        if(!VaildFishingPlace(playerid) || IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid, -1, "В этом месте запрещена рыбалка!");
        if(fishing_bait[playerid] < 1)
            return SendClientMessage(playerid, -1, "У Вас нет приманок в запасе!");
        if(fishing_line[playerid] < 1)
            return SendClientMessage(playerid, -1, "У Вас нет лесок в запасе!");
        if(fishing_rod_state[playerid] != 2)
            return SendClientMessage(playerid, -1, "Возмите удочку в руки! (/rod)");
        TogglePlayerControllable(playerid, 0);
        ApplyAnimation(playerid, "SAMP", "FISHINGIDLE", 50.0, 0, 1, 0, 1, 1);
        fishing_busy[playerid] = 1;
        KillTimer(fishing_timer[playerid]);
        fishing_timer[playerid] = SetTimerEx("FishTimer", 25000, false, "i", playerid);
        SendClientMessage(playerid, -1, "Вы начали рыбачить!");
        GameTextForPlayer(playerid,"~w~Рыбалка ~g~началась", 19000, 3);
        return 1;
    }



VaildFishingPlace(playerid)
{
    if(!IsPlayerConnected(playerid))
        return 0;
    if(IsPlayerInRangeOfPoint(playerid, 100,2081.7791,1113.5826,11.4500) || IsPlayerInRangeOfPoint(playerid, 100,2085.0549,1040.2208,11.4500))
        return 1;
    return 0;
}

forward FishTimer(playerid);

public FishTimer(playerid)
{
    if(!VaildFishingPlace(playerid))
    {
        fishing_busy[playerid] = 0;
        SetCameraBehindPlayer(playerid);
        return ApplyAnimation(playerid, "SAMP", "FISHINGIDLE", 2.0, 0, 0, 0, 0, 0);
    }
    static const FishNames[][8] =
    {
        {"Ерша"},
        {"Окуня"},
        {"Карася"},
        {"Щуку"},
        {"Белугу"},
        {"Кету"},
        {"Горбушу"},
        {"Семгу"},
        {"Нерку"},
        {"Лосося"}
    };
    TogglePlayerControllable(playerid, 1);
    fishing_busy[playerid] = 0;
    new fish = random(sizeof(FishNames)+5)-1;
    if(fish == -1)
    return fishing_line[playerid] = 0, SendClientMessage(playerid, -1, "Рыба сорвалась и порвала леску!");
    static const fmt_str[] = "{00FF00}х {FFFFFF}Вы поймали {88AA88}%s {FFFFFF}и продали на рынке за {88AA88}%d${FFFFFF}!";
    new string[sizeof(fmt_str)-2+sizeof(FishNames[])-2+11];
    new money = (fish*3+5000) * g_doubling[2];
    GivePlayerMoneyEx(playerid, money);
    format(string, sizeof(string), "~g~+%d", money);
    GameTextForPlayer(playerid, string, 1200, 1);
    format(string, sizeof(string), fmt_str, FishNames[fish], money);
    return SendClientMessage(playerid, -1, string);
}
CMD:invent(playerid, params[])
{
	new fmt_str[400];

	format
	(
		fmt_str, sizeof fmt_str,
		"Предмет\t\tКоличество\n"\
		"Деньги\t\t\t%d руб.\n"\
		"Наркотики\t\t\t%d гр.\n"\
		"Патроны\t\t\t%d шт.\n"\
		"Аптечки\t\t%d шт.\n"\
		"Металл\t\t\t%d кг.\n\
		>> Следующая страница",
		GetPlayerData(playerid, P_MONEY),
		GetPlayerData(playerid, P_DRUGS),
		GetPlayerData(playerid, P_AMMO),
		GetPlayerData(playerid, P_MED_CHEST),
		GetPlayerData(playerid, P_METALL)
	);

	Dialog(playerid, DIALOG_ITEM, DIALOG_STYLE_TABLIST_HEADERS, "Инвентарь", fmt_str, "Закрыть", "");

	return 1;
}
CMD:tpcoord(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
    new Float:px,Float:py,Float:pz,int,vw,string1[128];
    if(sscanf(params,"p<,>fffdd",px,py,pz,int,vw)) return SendClientMessage(playerid, 0x808080FF, "Используйте: /tpcoord <x,y,z,int,vw>");
    if(GetPlayerState(playerid) == 2)
	{
	    new car = GetPlayerVehicleID(playerid);
		SetVehiclePos(car, px, py, pz);
		LinkVehicleToInterior(car, int);
		SetVehicleVirtualWorld(car, vw);

		format(string1, sizeof(string1), "Вы были телепортированы вместе с машиной №%d на координаты {FFFFFF}X:%f, Y:%f, Z:%f, Interior:%d, VirtualWorld:%d",car,px,py,pz,int,vw);
	}
	else
	{
		SetPlayerPos(playerid, px, py, pz);
		SetPlayerInterior(playerid,int);
    	SetPlayerVirtualWorld(playerid,vw);

		format(string1, sizeof(string1), "Вы были телепортированы на координаты {FFFFFF}X:%f, Y:%f, Z:%f, Interior:%d, VirtualWorld:%d",px,py,pz,int,vw);
	}
    SendClientMessage(playerid, COLOR_GREY, string1);
    return 1;
}
CMD:give_action_money(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	extract params -> new to_player, cash; else return SendClientMessage(playerid, COLOR_GREY, "Используйте: /give_action_money [ID игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(!(1 <= cash <= 1_000_000_000)) return SendClientMessage(playerid, 0xFF6600FF, "Количесто денег от 1 до 1.000.000.000 рублей");

	new reason[144];
	format(reason, sizeof reason, "Выдача от адм %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, reason, true, true);

	format(reason, sizeof reason, "Вы победили в промо-акции и выиграли %d рублей!", cash);
	SendClientMessage(to_player, 0x66CC00FF, reason);

	format(reason, sizeof reason, "Вы подарили игроку %s %d рублей", GetPlayerNameEx(to_player), cash);
	SendClientMessage(playerid, 0x66CC00FF, reason);

	format(reason, sizeof reason, "Выдал %s[acc:%d] %d руб", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), cash);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

CMD:reset_money(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, cash; else return SendClientMessage(playerid, COLOR_GREY, "Используйте: /reset_money [ID игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new reason[144];
	format(reason, sizeof reason, "Обнуление денег админом %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, -cash, reason, true, true);

	format(reason, sizeof reason, "Вы обнулили игроку %s %d рублей", GetPlayerNameEx(to_player), cash);
	SendClientMessage(playerid, 0x66CC00FF, reason);

	format(reason, sizeof reason, "Обнулил %s[acc:%d] %d руб", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), cash);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

public: FlyPosadka(playerid)
{
    SetPlayerPosEx(playerid, -4969.0718,-4998.1641,999.9081,174.1916, 3, 0);
    SendClientMessage(playerid, -1, "Добро пожаловать на борт нашего самолёта!");
    SetPlayerData(playerid, P_BILET, 0);
    SetPVarInt(playerid, "polet", 1);
    SendClientMessage(playerid, -1, "Займите своё место и ожидайте приземления в месте прибытия. Мы скоро взлетим.");
    SetTimerEx("FlyVzlet", 10000, false, "i", playerid);
}

public: FlyVzlet(playerid)
{
    SendClientMessage(playerid, -1, "Пилот: Дорогие пасажиры, мы успешно взлетели. Лететь нам, примерно минуты 3-4");
    SetTimerEx("FlyStop", 185000, false, "i", playerid);
}

public: FlyStop(playerid)
{
    SendClientMessage(playerid, -1, "Пилот: И так дорогие пасажиры. Мы успешно приземлились. Проходите к выходу из самолёта.");
    SendClientMessage(playerid, -1, "Пилот: Спасибо что использовали нашу авиакомпанию.");
    SetPVarInt(playerid, "polet", 0);
}

public: OstanovkaStart(playerid)
{
	SetPVarInt(playerid, "ostanovka_start", 1);

	new timer_stap = GetPVarInt(playerid, "timer_ostanovka");

	switch(timer_stap)
	{
	    case 0:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000010);

			SetPVarInt(playerid, "timer_ostanovka", 1);
	    }
	    case 1:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000030);

		  	SetPVarInt(playerid, "timer_ostanovka", 2);
	    }
	    case 2:
	    {
			TextDrawBoxColor(black_ground, 0x00000050);

			SetPVarInt(playerid, "timer_ostanovka", 3);
	    }
	    case 3:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000070);

		  	SetPVarInt(playerid, "timer_ostanovka", 4);
	    }
	    case 4:
	    {

			new ost_id;
			new Float: dist;

			ost_id = GetMapNearestOst(playerid);

			new Float: x = GetPVarFloat(playerid, "click_x");
			new Float: y = GetPVarFloat(playerid, "click_y");
			new Float: z = GetPVarFloat(playerid, "click_z");

			dist = GetDistanceBetweenPoints(x, y, z, g_ostanovka[ost_id][OST_POS_X], g_ostanovka[ost_id][OST_POS_Y], g_ostanovka[ost_id][OST_POS_Z]);

			player_avtobus_timer[playerid] = floatround(dist) * 25 / 100;

			ShowPlayerTimerPanel(playerid);

		  	TextDrawBoxColor(black_ground, 0x00000090);

		  	SetPlayerPos(playerid, 2403.4170,-1779.5597,9041.1641);
			SetPlayerFacingAngle(playerid, 269.0);

			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 2000, false, "i", playerid);

			SetPVarInt(playerid, "timer_ostanovka", 5);
	    }
	    case 5:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000070);

		  	SetPVarInt(playerid, "timer_ostanovka", 6);
	    }
	    case 6:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000050);

		  	SetPVarInt(playerid, "timer_ostanovka", 7);
	    }
	    case 7:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000030);

		  	SetPVarInt(playerid, "timer_ostanovka", 8);
	    }
	    case 8:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000010);

		  	SetPVarInt(playerid, "timer_ostanovka", 9);
	    }
	    case 9:
	    {
			TextDrawHideForPlayer(playerid, black_ground);

			DeletePVar(playerid, "timer_ostanovka");
	    }
	}

	if(0 <= timer_stap <= 8)
	{
		TextDrawHideForPlayer(playerid, black_ground);

		TextDrawShowForPlayer(playerid, black_ground);

	    SetTimerEx("OstanovkaStart", 250, false, "i", playerid);
	}
}

public: OstanovkaStop(playerid)
{
	//SetPVarInt(playerid, "ostanovka_start", 1);

	new timer_stap = GetPVarInt(playerid, "timer_stop");

	switch(timer_stap)
	{
	    case 0:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000010);

			SetPVarInt(playerid, "timer_stop", 1);
	    }
	    case 1:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000030);

		  	SetPVarInt(playerid, "timer_stop", 2);
	    }
	    case 2:
	    {
			TextDrawBoxColor(black_ground, 0x00000050);

			SetPVarInt(playerid, "timer_stop", 3);
	    }
	    case 3:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000070);

		  	SetPVarInt(playerid, "timer_stop", 4);
	    }
	    case 4:
	    {
			new ost_id;

			ost_id = GetMapNearestOst(playerid);

			HidePlayerTimerPanel(playerid);

		  	TextDrawBoxColor(black_ground, 0x00000090);

		  	SetPlayerPos(playerid, g_ostanovka[ost_id][OST_POS_X], g_ostanovka[ost_id][OST_POS_Y], g_ostanovka[ost_id][OST_POS_Z]);
			SetPlayerFacingAngle(playerid, 269.0);

			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 2000, false, "i", playerid);

			SetPVarInt(playerid, "timer_stop", 5);

			DeletePVar(playerid, "click_x");
			DeletePVar(playerid, "click_y");
			DeletePVar(playerid, "click_z");
	    }
	    case 5:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000070);

		  	SetPVarInt(playerid, "timer_stop", 6);
	    }
	    case 6:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000050);

		  	SetPVarInt(playerid, "timer_stop", 7);
	    }
	    case 7:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000030);

		  	SetPVarInt(playerid, "timer_stop", 8);
	    }
	    case 8:
	    {
		  	TextDrawBoxColor(black_ground, 0x00000010);

		  	SetPVarInt(playerid, "timer_stop", 9);
	    }
	    case 9:
	    {
			TextDrawHideForPlayer(playerid, black_ground);
			DeletePVar(playerid, "timer_stop");
	    }
	}

	if(0 <= timer_stap <= 8)
	{
		TextDrawHideForPlayer(playerid, black_ground);

		TextDrawShowForPlayer(playerid, black_ground);

	    SetTimerEx("OstanovkaStop", 250, false, "i", playerid);
	}
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
	if(IsPlayerConnected(x)) {
	GetPlayerIp(x,against_ip,32);
	if(!strcmp(against_ip,test_ip)) ip_count++;
	}
	}
	return ip_count;
}
stock ShowPlayerItems(playerid)
{
	new query[100];
	new Cache: result;

	new fmt_text[912];

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM items WHERE owner_id=%d LIMIT 30", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new item_id = cache_get_field_content_int(idx, "item_id");
			new id = cache_get_field_content_int(idx, "id");

			format(query, sizeof query, "%d. %s\n", idx + 1, g_cont_item[item_id][c_item_name]);
			strcat(fmt_text, query);

			SetPlayerListitemValue(playerid, idx, id);
		}

		Dialog(playerid, DIALOG_SELL_ITEM, DIALOG_STYLE_LIST, "{d7994e}Содержимое инвентаря", fmt_text, "Выбрать", "Закрыть");
	}
	else
	{
		format(query, sizeof query, "\nДанная страница пуста");
		strcat(fmt_text, query);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "Инвентарь", fmt_text, "Выбрать", "Закрыть");
	}

	cache_delete(result);

	return 1;
}
CMD:sellmyskin(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0x999999FF, "Вы должны прожить в области минимум 3 года.");

    if(IsPlayerInRangeOfPoint(playerid, 15.0, 652.9271,2260.3232,12.0900))
	{

	    new skin = GetPlayerSkin(playerid);

	    if(skin == 45 && 75) return SendClientMessage(playerid, 0x999999FF, "Вы не можете продать эту одежду");

	    if(!strlen(params))
				return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyskin [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || to_player == playerid) return SendClientMessage(playerid, -1, "Введите корректный ид покупателя");

		if(!(50000 <= price <= 65000000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть не менее 50000 рублей от стоимости одежды и не более 65.000.000 рублей");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_SKIN, price);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на рынке одежды.");

	return true;
}
CMD:reset(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "Вы выбросили все надетые вещи");

	RemovePlayerAttachedObject(playerid, 6);

	return 1;
}
CMD:sban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sban [ID игрока] [срок в днях или -1] [причина (необязательно)]");

	extract params -> new to_player, ban_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(!(-1 <= ban_time <= 30) || ban_time == 0) return SendClientMessage(playerid, 0xFF6600FF, "Cрок бана от 1 до 30 или -1");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Нельзя забанить администратора выше по рангу");

	new fmt_text[200];

    format(fmt_text, sizeof fmt_text, "[A] %s [%d] забанил игрока %s без лишнего шума. Причина: %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), reason);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	new query[244];

	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);


	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET a_sban = a_ban+1 WHERE name = '%s'", GetPlayerNameEx(playerid));
	mysql_query(mysql, query, false);

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	BanEx(to_player, reason);

	return 1;
}
CMD:hpall(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new Float:ps;

	if(sscanf(params, "fi", ps)) SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hpall [радиус]");

	if(ps < 20 || ps > 200) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 20 до 200");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, ps, pos[0], pos[1], pos[2])) continue;
		SetPlayerHealthEx(i, 100);
		SetPlayerData(i, P_HEALTH, 100);
		SendClientMessage(i, COLOR_WHITE, "Администратор изменил Вам уровень здоровья");
	}

	SendClientMessage(playerid, COLOR_WHITE, "Вы успешно изменили HP игрокам в радиусе");

	return 1;
}

CMD:mp_gun(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new gun, ammo, radius;

	if(sscanf(params, "iii", radius, gun, ammo)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_gun [радиус] [id оружия] [патроны]");
	if(radius < 1 || radius > 200) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 20 до 200");

	if(gun < 1 || gun > 46 || gun == 38 || gun == 36 || gun == 35 || gun == 37) return SendClientMessage(playerid, 0xFF6600FF, "Неверный ID оружия");

	if(ammo < 1 || ammo > 999) return SendClientMessage(playerid, 0xFF6600FF, "Патронов может быть от 1 до 999");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new string[144];
	new players;
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		GivePlayerWeapon(i, gun, ammo);
		format(string, sizeof string, "[MP]: Вы получили оружие %s [%d] и %d пт.", GetWeaponName(gun), gun, ammo);
		SendClientMessage(i, 0xCECECEFF, string);
		players++;
	}
	format(string, sizeof string, "Оружие выдано %i игрокам в радиусе %i метров", players, radius);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:mp_skin(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new skin, radius;

	if(sscanf(params, "iii", radius, skin)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_skin [радиус] [id скина]");
	if(radius < 1 || radius > 200) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 20 до 200");
	if(skin < 1 || skin > 299) return SendClientMessage(playerid, 0xFF6600FF, "ID скина может быть от 1 до 299");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	new string[144];
	new players;
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		SetPlayerSkin(i, skin);
	}
	format(string, sizeof string, "Скин выдан %i игрокам в радиусе %i метров", players + 1, radius);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:mp_freeze(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_freeze [радиус]");

	extract params -> new radius;

	if(radius < 1 || radius > 100) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 1 до 100");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		TogglePlayerControllable(i, false);
		SendClientMessage(i, COLOR_WHITE, "Администратор заморозил Вас");
	}

	SendClientMessage(playerid, COLOR_WHITE, "Вы успешно заморозили игроков в радиусе");

	return 1;
}

CMD:mp_unfreeze(playerid,params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_unfreeze [радиус]");

	extract params -> new radius;

	if(radius < 1 || radius > 100) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 1 до 100");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		TogglePlayerControllable(i, true);
		SendClientMessage(i, COLOR_WHITE, "Администратор разморозил Вас");
	}

	SendClientMessage(playerid, COLOR_WHITE, "Вы успешно разморозили игроков в радиусе");

	return 1;
}
CMD:agm(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;
 	if(GetPVarInt(playerid,"agm") == 0)
    {
        SetPVarInt(playerid,"agm", 1);
        SetPlayerHealth(playerid, 0x7F800000);
        SendClientMessage(playerid, -1, "AGM ON");
    }
    else
    {
        SetPVarInt(playerid,"agm", 0);
        SetPlayerHealth(playerid, 100.0);
        SendClientMessage(playerid, -1, "AGM OFF");
    }
  	return 1;
}
CMD:money_log(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFF6600FF, "Информация: /money_log [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

	new fmt_text[1512];

	new description[128];

	format(description, sizeof description, "Последние 20 операций денег игрока %s", name);

	format(fmt_text, sizeof fmt_text, "Дата операции\t\tКоличество\tПричина\n");

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM money_log WHERE uid=%d LIMIT 20", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new time = cache_get_field_content_int(idx, "time"),
				money = cache_get_field_content_int(idx, "money"),
				reg_date[6],
				desc[32];

			cache_get_field_content(idx, "description", desc);

			timestamp_to_date(time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);

			format(query, sizeof query, "\n%02d.%02d.%d %02d:%02d:%02d\t%d\t\t%s", reg_date[0], reg_date[1], reg_date[2], reg_date[3], reg_date[4], reg_date[5], money, desc);
			strcat(fmt_text, query);
		}
	}
	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, description, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию об аккаунте %s[acc:%d]", name, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:getvehspeed(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getvehspeed [id транспорта]");

	new Float: speed = GetVehicleSpeed(vehicleid);

	new fmt_text[24];

	format(fmt_text, sizeof fmt_text, "vehicle speed: %f", speed);
	SendClientMessage(playerid, 0xFF5533FF, fmt_text);

	return 1;
}
CMD:forbes(playerid)
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	Dialog(playerid, DIALOG_FORBES, DIALOG_STYLE_LIST, "Список форбс", "1. Деньги\n2. Уровень", "Выбрать", "Закрыть");
	return 1;
}
CMD:az(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	SetPlayerPos(playerid, 2142.7476,-1972.6597,188.2424);

	SendClientMessage(playerid, 0xCECECEFF, "Вы успешно телепортировались в админ-зону");

	return 1;
}
CMD:myskin(playerid)
{
	new query[128],
		str[128],
	    stringi[512];

    new Cache: result;

    cache_delete(result);


    mysql_format(mysql, query, sizeof query, "SELECT * FROM `skin_player` WHERE `id_acc` = %d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(!cache_num_rows()) return SendClientMessage(playerid, 0xFF6600FF, "У Вас только одна одежда");

	for(new i = 0; i < cache_num_rows(); i++)
	{
		if(i > 15)
			i = 14;

	   	player_skin[i][ID][playerid] = cache_get_field_content_int(i, "id");

	    player_skin[i][ID_PLAYER][playerid] = cache_get_field_content_int(i, "id_acc");

 		cache_get_field_content(i, "name_skin", player_skin[i][SKIN_NAME][playerid], mysql, 16);

 		player_skin[i][SKIN_ID][playerid] = cache_get_field_content_int(i, "skin_id");

        format(str, sizeof str,"{FFCC00}%d. {FFFFFF}%s\n", i+1, player_skin[i][SKIN_NAME][playerid]);

        strcat(stringi, str);
    }

	Dialog(playerid, DIALOG_SKIN_MENU, DIALOG_STYLE_LIST ,"{3399FF}Ваши скины", stringi, "Выбрать","Отмена");


	cache_delete(result);
	return true;
}
CMD:tdo(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2)
		return SendClientMessage(playerid, 0xFF6600FF, "Этим можно пользоваться со 2 уровня");

	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /tdo [текст]");

    if(pame_text[playerid] != Text3D:-1)
         return SendClientMessage(playerid, -1, "Вы уже создали объявление. Используйте:/tdo_delete");

	new description[228];

	format(description, sizeof description, "{66ccff}- Объявление -\n{00ff00}%s\nОтправитель: {AFAFAF}%s", params, GetPlayerNameEx(playerid));

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	pame_text[playerid] = CreateDynamic3DTextLabel(description, 0xCECECEFF, X, Y, Z, 10.0);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "Вы создали объявление с текстом: %s", params);
	SendClientMessage(playerid, COLOR_WHITE, fmt_str);

	return 1;
}

CMD:tdo_delete(playerid, params[])
{
    if(pame_text[playerid] == Text3D:-1)
        return SendClientMessage(playerid, 0xFF6600FF, "Вы еще не создавали объявление. Используйте: /tdo");

    SendClientMessage(playerid, 0xFF6600FF, "Вы удалили созданное Вами объявление");
    DestroyDynamic3DTextLabel(pame_text[playerid]);
    pame_text[playerid] = Text3D:-1;
    return 1;
}
CMD:flip(playerid)
{
    static const	coin_str0[] = "подбросил монетку, выпал",
                    coin_str1[] = "а {66CCFF}\"решка\".", coin_str2[] = " {66CCFF}\"орёл\".";

	new string [MAX_PLAYER_NAME + (sizeof (coin_str0) - 1) + (sizeof (coin_str1) - 1) + 1];

    strcat(string, coin_str0);
    strcat(string, (random(2)) ? (coin_str1) : (coin_str2));

	Action(playerid, string);
    return 1;
}
CMD:masturbation(playerid)
{
	if(GetPVarInt(playerid, "antiflood_mastur") > gettime())
	{
	    new flood_mas[144];

	    format(flood_mas, sizeof flood_mas, "Вы недавно выполняли это действие. Подождите %d {FF6600}сек.", GetPVarInt(playerid, "antiflood_mastur") - gettime());

		SendClientMessage(playerid, 0xFF6600FF, flood_mas);

		return 1;
	}

	ApplyAnimation(playerid, "PAULNMAC", "WANK_LOOP", 4.1, 0, 1, 1, 0, 0, 1);

	if(GetPlayerSex(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Ваш пол не позволяет это сделать");

	new fmt_str[124];

	format(fmt_str, sizeof fmt_str, "%s мастурбирует", GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	SetPlayerChatBubble(playerid, "мастурбирует", 0xCECECEFF, 10.5, 2000);

	SetPVarInt(playerid, "antiflood_mastur", gettime() + 5);

	return 1;
}
CMD:getcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getcar [id транспорта]");
	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);

	SendClientMessage(playerid, -1, "Вы телепортировали авто к себе");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] телепортировал к себе транспорт: №%d", GetPlayerNameEx(playerid), playerid, vehicleid);
	SendMessageToAdmins(fmt_msg, COLOR_GREY);

	return 1;
}
CMD:makeadminoff(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makeadminoff [имя игрока] [уровень]");

	extract params -> new string: name[21], lvl;

	if(!(0 <= lvl <= 7)) return SendClientMessage(playerid, 0xFF6600FF, "Неверный идентификатор. Уровень от 0 до 7");

	if(GetPlayerAdminEx(playerid) <= lvl) return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете дать лвл больше или равный своему!");

	new query[400];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] оффлайн назначил игрока %s администратором %d уровня", GetPlayerNameEx(playerid), playerid, name, lvl);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET admin=%d WHERE id=%d LIMIT 1", lvl, user_id);
	mysql_query(mysql, query, false);

	return 1;
}
CMD:kiss(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Нельзя использовать в машине");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kiss [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(GetPlayerSex(playerid) == GetPlayerSex(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете поцеловать игрока того же пола как и Вы");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_KISS);
	}
	else SendClientMessage(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");

	return 1;
}
CMD:sellsim(playerid, params[])
{
    if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0x999999FF, "Вы должны прожить в области минимум 2 года.");
//	if(GetPlayerPhone(playerid) == GetPlayerAccountID(playerid) + 100000) return SendClientMessage(playerid, 0xFF6600FF, "Вы можете продать данную SIM-карту.");
//	if(GetPlayerPhone(playerid) == 0) return SendClientMessage(playerid, 0xFF6600FF, "Вы можете продать данную SIM-карту.");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, -2701.6865,-0.0529,1060.9941)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в сотовом салоне");

	if(!strlen(params)) return SendClientMessage(playerid, COLOR_GOLD, "Команда:{"#cW"} /sellsim [ID игрока] [цена]");

	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(price < 1000 || price > 100000000) return SendClientMessage(playerid, 0xFF6600FF, "Цена от 1.000 до 100.000.000");

	if(GetPlayerMoney(to_player) < price) return SendClientMessage(playerid, 0xFF6600FF, "У игрока недостаточно средств");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELLSIM, price);
	return 1;
}

CMD:rmute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rmute [ID игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xFF6600FF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_RMUTE) > 0) return SendClientMessage(playerid, 0xFF6600FF, "У этого игрока уже блокировка репорта");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s заблокировал репорт игроку %s на %d мин.", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);

	if(strlen(reason))
	format(fmt_msg, sizeof fmt_msg, "%s Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_RMUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "rmute", mute_time * 60);

	SendClientMessage(to_player, 0xFF6600FF, "Время до окончания блокировки репорта: /time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[acc:%d] блокировку репорта на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);

//	new query[200];

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);


	return 1;
}
CMD:unrmute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unrmute [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_RMUTE) <= 0) return SendClientMessage(playerid, 0xFF6600FF, "У этого игрока нет блокировки репорта");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял блокировку репорта с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_RMUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "rmute", 0);

	SendClientMessage(to_player, 0xCECECEFF, "Доступ к репорту восстановлен");

	SetPlayerData(playerid, P_AUNRMUTE, GetPlayerData(playerid, P_AUNRMUTE) + 1);
	UpdatePlayerDatabaseInt(playerid, "a_unrmute", GetPlayerData(playerid, P_AUNRMUTE) + 1);

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку репорта у %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:podarokpanel(playerid)
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	Dialog
	(
	    playerid, DIALOG_GIFT_PANEL, DIALOG_STYLE_LIST,
	    "Управление подарками",
	    "1. Создать подарки\n\
		2. Телепортироваться к подарку\n\
		3. Удалить подарки",
	    "Выбрать", "Закрыть"
	);
	return 1;
}

CMD:creategifts(playerid)
{
    if(GetPlayerAdminEx(playerid) < 6) return 1;

	for(new i; i < MAX_GIFTS; i ++)
	{

		new Float: pos_x = gifts_pos_after_purchase[0][i][0];
		new Float: pos_y = gifts_pos_after_purchase[0][i][1];
		new Float: pos_z = gifts_pos_after_purchase[0][i][2];

		gift[i] = CreatePickup(19057, 8, pos_x, pos_y, pos_z, -1, PICKUP_ACTION_TYPE_GIFT);

	}

	SendClientMessage(playerid, 0xCECECEFF, "Подарки успешно созданы.");

	return 1;
}
CMD:deletegifts(playerid)
{
    if(GetPlayerAdminEx(playerid) < 6) return 1;

	for(new i; i < MAX_GIFTS; i ++)
	{

		DestroyPickup(gift[i]);

	}

	SendClientMessage(playerid, 0xCECECEFF, "Подарки успешно удалены.");

	return 1;
}

CMD:tpgifts(playerid)
{
    if(GetPlayerAdminEx(playerid) < 6) return 1;

	new list[300];

	new query[300];

	for(new i; i < MAX_GIFTS; i ++)
	{
		format
		(
			query, sizeof query,
			"Подарок №%d\n",
			i + 1
		);

		strcat(list, query);
	}

    Dialog(playerid, DIALOG_TP_GIFT, DIALOG_STYLE_LIST, "Выберите подарок", list, "Выбрать", "Закрыть");

	return 1;
}
CMD:fly(playerid,params[])
{
    if(GetPlayerAdminEx(playerid) < 2) return 1;

   	SetPVarInt(playerid, "spawn_ac", 1);

	if(GetPVarType(playerid, "FlyMode"))
 	{
		new inter, world, Float: X, Float: Y, Float: Z, Float: FA;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, FA);
		inter = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);
		SetPVarFloat(playerid, "SpecX", X);
		SetPVarFloat(playerid, "SpecY", Y);
		SetPVarFloat(playerid, "SpecZ", Z);
		SetPVarFloat(playerid, "SpecFA", FA);
		SetPVarInt(playerid, "SpecInt", inter);
		SetPVarInt(playerid, "SpecWorld", world);

		DeletePVar(playerid, "FlyMode");
        CancelEdit(playerid);
        TogglePlayerSpectating(playerid, false);

		DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
		noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
		SetPlayerSpawnInit(playerid);
		SpawnPlayer(playerid);
		SetPlayerPos(playerid, X, Y, Z);
		SetPlayerFacingAngle(playerid, FA);
		SetPlayerVirtualWorld(playerid, world);
		SetPlayerInterior(playerid, inter);
  	}
    else
    {
    	SetPVarInt(playerid, "SpecBool", 1);
     	FlyMode(playerid);
    }
    return true;
}
stock ShowPlayerFlyPolet(playerid)
{
	Dialog
	(
	playerid, DIALOG_ADMIN_FLY, DIALOG_STYLE_LIST,
	"Режим полёта",
	"1. Спавн в текущем месте\n"\
	"2. Спавн на месте старта",
	"Далее", "Отмена"
	);

	return 1;
}
CMD:drugs(playerid, params[])
{
	if(GetPlayerData(playerid, P_DRUGS) <= 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет наркотиков");
	if(GetPVarInt(playerid, "DrugsTime") > gettime()) return SendClientMessage(playerid, 0xFF6600FF, "Вы недавно употребляли наркотики.. Подождите немного");
	if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xCECECEFF, "Информация: /drugs [кол-во грамм]");
	new string[128];
	if(params[0] > 5)
	{
	    format(string, sizeof(string), "Количество от 1 до 5, сейчас У Вас %i грамм", GetPlayerData(playerid, P_DRUGS));
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}

	new Float:health;

	GetPlayerHealth(playerid, health);

	SetPlayerData(playerid, P_HEALTH, health+params[0]*20);
	SetPlayerHealthEx(playerid, health+params[0]*20);

	GetPlayerHealth(playerid, health);
	if(health > 120) return SendClientMessage(playerid, COLOR_GREY, "Вам плохо от наркотиков, пожалуйста подождите");

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
	format(string, sizeof(string), "Вы употребили %i гр. наркотиков. Ваше здоровье: %3.1f", params[0], health);
	SendClientMessage(playerid, 0xCECECEFF, string);

	AddPlayerData(playerid, P_DRUGS, -, params[0]);
	UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

	//drug_effect_gone_timer[playerid] = 6;

	SetPVarInt(playerid, "DrugsTime", gettime() + 60);

	new fmt_str[124];

	format(fmt_str, sizeof fmt_str, "%s употребил(a) %i грамм наркотиков", GetPlayerNameEx(playerid), params[0]);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	SetPlayerTime(playerid,17,0);
	SetPlayerDrunkLevel(playerid, 3000);
	SetPlayerWeather(playerid, 0);

	return 1;
}

CMD:dropdrugs(playerid, params[])
{
	if(GetPlayerData(playerid, P_DRUGS) == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет наркотиков");

	SetPlayerData(playerid, P_DRUGS, 0);
	UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

	new fmt_str[124];

	format(fmt_str, sizeof fmt_str, "%s скинул(a) пакетик с неизвестным содержимым", GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
	return 1;
}

forward DrugEffectGone(playerid);
public DrugEffectGone(playerid)
{
        new time[3];
        gettime(time[0], time[1], time[2]);
        SetPlayerTime(playerid, time[0], time[1]);
        SetPlayerWeather(playerid, 7);
        return true;
}
CMD:removegun(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_RED, "Используйте: /removegun [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

    ResetPlayerWeapons(to_player);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] отобрал оружие у игрока %s [%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	return 1;
}
CMD:bomba(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bomba [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new Float:x, Float:y, Float:z;
 	GetPlayerPos(to_player, x, y, z);
  	CreateExplosion(x, y, z, 10, 10.0 );

	return 1;
}
public ConnectedPlayers()
{
        new Connected;
        for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i)) Connected++;
        return Connected;
}
public NoRoof(playerid)
{
    new carid = GetPlayerSurfingVehicleID(playerid); // ???????? ???? ???? ?? ??????? ?????
    if(carid != INVALID_VEHICLE_ID ) // ???? ???? ??????????(?????? ????? ?? ????)
    {
        new Float:speed = GetVehicleSpeed(carid); // ???????? ???????? ????
        new cm=GetVehicleModel(carid); // ???????? ?????? ????
        switch(cm)
        {
            case 430,446,452,453,454,472,473,484,493,595:{return 1;} // ???? ??? ?????, ????????? ??????)
            default:{}
        }
        if(speed > 0) // ???? ???????? ?????? 30??\???
        {
            new Float:slx, Float:sly, Float:slz;
            GetPlayerPos(playerid, slx, sly, slz);
            SetPlayerPos(playerid, slx, sly, slz+2.5); // ??????? ???????? ?????? ???? ?? ?? ??????? ?? ????
            ApplyAnimation(playerid, "ped", "BIKE_fallR", 4.0, 0, 1, 0, 0, 0,0); // ???????? ?????? ???????
            new Float:hp;
            GetPlayerHealth(playerid, hp);
            SetPlayerHealth(playerid, hp-15); // ??????? 15??
            SetTimerEx("anim2", 1100, 0, "d", playerid); // ???????? ?? ?????? ?????? ????? ????? ????????? ?????
        }
    }
    return 1;
}

public anim2(playerid)
{
        ApplyAnimation(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
        return 1;
}

CMD:carpass(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCarLasts(playerid) == 0)
			return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0xFF6600FF, "Ваш личный транспорт не загружен на сервер");
	}

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /carpass [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	ShowOwnableCarPass(to_player, vehicleid);

	return 1;
}

stock ShowPlayerReport(playerid)
{
	Dialog
	(
		playerid, DIALOG_REPORT_1, DIALOG_STYLE_INPUT,
		"Связь с администрацией",
		"Вы собираетесь задать вопрос администрации\n"\
		"Перед подачей ознакомьтесь со списком ответов (/help)\n\n"\
		"{999999}Запрещено:\n"\
		"- Флуд\n"\
		"- Оффтоп\n"\
		"- Оскорбления\n"\
		"- Просьбы (деньги, RCoins)\n\n"\
		"Если Вам долго не отвечают, задайте вопрос заново",
		"Далее", "Назад"
	);
}

stock TeleportPlayerGPS(playerid, Float: x, Float: y, Float: z)
{
	SetPlayerPos(playerid, x, y, z);
	return 1;
}

CMD:gotoactor(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_actor; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: {ffffff} /gotoactor [ID актера]");

	new Float: x, Float: y, Float: z;

	GetActorPos(to_actor, x, y, z);

	SetPlayerPos(playerid, x, y, z);

	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_vehicleid; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: /gotocar [id транспорта]");
	if(!IsValidVehicle(to_vehicleid)) return SendClientMessage(playerid, 0xFF6600FF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetVehiclePos(to_vehicleid, x, y, z);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, false);

	SendClientMessage(playerid, -1, "Вы были телепортированы к авто");

	return 1;
}

CMD:take(playerid)
{
	new Float:x, Float:y, Float:z;

	for(new i; i < MAX_ITEM; i++)
	{
	    if(item_obj[i] != -1)
	    {
			GetDynamicObjectPos(item_obj[i], x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
			{
		   		new string[300];

		   		new id = items_id[i];

				format(string, sizeof(string), "Вы действительно хотите поднять \"%s\"в количестве %d %s?", items_name[id][itemname], item_value[i], items_name[id][item_value_name]);
				Dialog(playerid, DIALOG_TAKE_ITEM, DIALOG_STYLE_MSGBOX, "Поднять предмет", string, "Да", "Отмена");
			}
		}
	}
	return 1;
}

GetPlayerFAngle(playerid, &Float:angle)
{
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	else GetPlayerFacingAngle(playerid, angle);
}

public: LoadPlayerItem(playerid)
{
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		SetPlayerData(playerid, P_WHEAT, 	cache_get_field_content_int(0, "wheat"));
		SetPlayerData(playerid, P_AMMO, 		cache_get_field_content_int(0, "ammo"));

		SetPlayerData(playerid, P_DRUGS, 	cache_get_field_content_int(0, "drugs"));

		SetPlayerData(playerid, P_HEAL, 	cache_get_field_content_int(0, "heal"));
		SetPlayerData(playerid, P_METALL, 		cache_get_field_content_int(0, "metall"));

		SetPlayerData(playerid, P_MONEY, 	cache_get_field_content_int(0, "money"));
	}
	cache_delete(result);
}

CMD:wedding(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 35.0, -1293.4110, 717.4692, 2002.0000)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в церкви");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xcececeFF, "Используйте: /wedding [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(GetPlayerBrakEx(playerid) != 0 || GetPlayerBrakEx(to_player) != 0)
	    return SendClientMessage(playerid, 0xFF6600FF, "Вы уже состоите в браке");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_WEDDING);

	return 1;
}

CMD:divorce(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 35.0, -1293.4110, 717.4692, 2002.0000)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в церкви");

	if(GetPlayerBrakEx(playerid) < 1)
 		return SendClientMessage(playerid, 0xFF6600FF, "Вы не состоите в браке");

	new query[144];

	format(query, sizeof query, "Вы развелись своим супругом (супругой)", GetPlayerBrakEx(playerid));
	SendClientMessage(playerid, 0xCECECEFF, query);

  	if(!mysql_errno())
	{
	format(g_player[playerid][P_WIFE_NAME], 61, "", 0);
	}

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET brak='' WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock AddRentVehicle(id ,model, Float:X, Float:Y, Float:Z, Float:Angle, color1, color2, price)
{
    new newvid;
    newvid = AddStaticVehicle(model, X, Y, Z, Angle, color1, color2);
    RentCar[newvid][Rprice] = price;
    RentCar[newvid][Rcarid] = id;
    RentCar[newvid][ROwned] = 0;
    IsRentableVehicle[newvid] = 1;
    SetVehicleNumberPlate(newvid,"RENT");
}

TotalVehicles()
{
	new vid;
	vid = CreateVehicle(411, 0, 0, 0, 0, -1, -1, 10);
	DestroyVehicle(vid);
	vid--;
	return vid;
}
forward CountRentedVehicles();
public CountRentedVehicles()
{
	new count;
	for(new R=1; R<TotalVehicles(); R++)
	{
	    if(GetVehicleData(R, V_RENT) != -1)
	    {
	        count++;
		}
	}
}

CMD:getcampos(playerid)
{
    new Float:x1,Float:y1,Float:z1;
    new str_getcampos[61];
    GetPlayerCameraPos(playerid,x1,y1,z1);
    format(str_getcampos, 61, "SetPlayerCameraPos(playerid,%f,%f,%f);",x1,y1,z1);
    SendClientMessage(playerid,-1,str_getcampos);
    GetPlayerCameraLookAt(playerid,x1,y1,z1);
    format(str_getcampos, 61, "SetPlayerCameraLookAt(playerid,%f,%f,%f);",x1,y1,z1);
    SendClientMessage(playerid,-1,str_getcampos);
    return true;
}

stock GetPlayerCameraLookAt(playerid, &Float:rX, &Float:rY, &Float:rZ, Float:dist = 10.0)
{
    new Float: locAt[6];
    GetPlayerCameraFrontVector(playerid, locAt[0], locAt[1], locAt[2]);
    GetPlayerCameraPos(playerid, locAt[3], locAt[4], locAt[5]);
    rX = locAt[0] * dist + locAt[3];
    rY = locAt[1] * dist + locAt[4];
    rZ = locAt[2] * dist + locAt[5];
}

stock SetPlayerFermerChopCP(playerid)
{
	new rand = random(sizeof fermer_job_chop_cp);

	SetPlayerCheckpoint(playerid, fermer_job_chop_cp[rand][0], fermer_job_chop_cp[rand][1], fermer_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_FERMER_TAKE);
}

public: SetPlayerFermerTakeWheat(playerid, wheatid)
{
	GameTextForPlayer(playerid, "~g~WHEAT++", 4000, 1);

	ClearPlayerAnim(playerid);

	-- WheatPos[wheatid][wheat_value];

	DeletePVar(playerid, "wheat_take");

	AddPlayerData(playerid, P_WHEAT, +, 1);
	UpdatePlayerDatabaseInt(playerid, "wheat", GetPlayerData(playerid, P_WHEAT));

 	new text[144];
  	format(text, sizeof text, "Пшеница\n{"#cW"}{79cb64}Урожай: {"#cW"}%d из 10\n\n{79cb64}Сорвать: л. ALT", WheatPos[wheatid][wheat_value]);
  	UpdateDynamic3DTextLabelText(wheat_label[wheatid], 0x79cb64FF, text);
}

public: SetPlayerFermerTake(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
	{
		//if(GetPlayerAnimationIndex(playerid) != 20)
			//FermerPlayerDrop(playerid, false);

			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_PUT);

			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 2901, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);

			if(!random(5))
				SetTimerEx("FermerPlayerDrop", 500, false, "dd", playerid, true);
	}
}

public: FermerPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_CHOP);

	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили сено");

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

	ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);

	SetPlayerFermerChopCP(playerid);

	return 1;
}

stock OstInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
//	new Float: dist = 0.6;

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		x = GetOSTInfo(idx, OST_POS_X);
		y = GetOSTInfo(idx, OST_POS_Y);
		z = GetOSTInfo(idx, OST_POS_Z);
		rot_z = GetOSTInfo(idx, OST_ROT_Z);

		CreateDynamicObject(4640, x, y, z, 0.0, 0.0, rot_z, 0, 0, -1, STREAMER_OBJECT_SD, 100.0);

		CreateDynamic3DTextLabel("{"#cGold"}Остановка\n{"#cW"}Использование: {"#cGold"}л. ALT", -1, x, y, z + 0.7, 3.0);
	}
	print("[OST]: Все остановки созданы");
}

stock GetPlayerNearestOST(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new ost_id = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetOSTInfo(idx, OST_POS_X), GetOSTInfo(idx, OST_POS_Y), GetOSTInfo(idx, OST_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			ost_id = idx;
		}
	}
	return ost_id;
}

stock ShowPlayerOstanovkaDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_SELECT_OSTANOVKA, DIALOG_STYLE_LIST,
		"{"#cGold"}Выбор точки прибытия",
		"{"#cGold"}1. {"#cW"}Автошкола\n"\
		"{"#cGold"}2. {"#cW"}Гостиница\n"\
		"{"#cGold"}3. {"#cW"}Военкомат\n"\
		"{"#cGold"}4. {"#cW"}Автосалон\n"\
		"{"#cGold"}5. {"#cW"}Мото-Вело рынок\n"\
		"{"#cGold"}6. {"#cW"}Рынок\n"\
		"{"#cGold"}7. {"#cW"}Утилизация авто\n"\
		"{"#cGold"}8. {"#cW"}Заброшенный склад\n"\
		"{"#cGold"}9. {"#cW"}БУ Рынок\n"\
		"{"#cGold"}10. {"#cW"}Автомастерская\n"\
		"{"#cGold"}––––––––––––––––––––––––\n"\
		"{"#cGold"}11. {"#cW"}Вокзал г. Арзамас\n"\
		"{"#cGold"}12. {"#cW"}Вокзал г. Южный\n"\
		"{"#cGold"}13. {"#cW"}Центральная автостанция\n"\
		"{"#cGold"}14. {"#cW"}Автовокзал Батырево\n"\
		"{"#cGold"}15. {"#cW"}Автовокзал Эдово\n"\
		"{"#cGold"}16. {"#cW"}Аэропорт Батырево\n"\
		"{"#cGold"}––––––––––––––––––––––––\n"\
		"{"#cGold"}17. {"#cW"}Правительство\n"\
		"{"#cGold"}18. {"#cW"}Полиция №1 (ДПС)\n"\
		"{"#cGold"}19. {"#cW"}Полиция №2 (ППС)\n"\
		"{"#cGold"}20. {"#cW"}Больница\n"\
		"{"#cGold"}21. {"#cW"}Радио Арзамас\n"\
		"{"#cGold"}22. {"#cW"}Мин.Обороны\n"\
		"{"#cGold"}––––––––––––––––––––––––\n"\
		"{"#cGold"}23. {"#cW"}Тамбовская ОПГ\n"\
		"{"#cGold"}24. {"#cW"}Ростовская ОПГ\n"\
		"{"#cGold"}25. {"#cW"}Московская ОПГ\n"\
		"{"#cGold"}––––––––––––––––––––––––\n"\
		"{"#cGold"}26. {"#cW"}Городской склад\n"\
		"{"#cGold"}27. {"#cW"}Шахта\n"\
		"{"#cGold"}28. {"#cW"}Лесопилка\n"\
		"{"#cGold"}29. {"#cW"}Ферма\n"\
		"{"#cGold"}30. {"#cW"}Завод по производству продуктов\n"\
		"{"#cGold"}31. {"#cW"}Автопарк для дальнобойщиков (продукты)\n"\
		"{"#cGold"}32. {"#cW"}Автопарк для дальнобойщиков (топливо)\n"\
		"{"#cGold"}33. {"#cW"}СТО Южный\n"\
		"{"#cGold"}––––––––––––––––––––––––\n"\
		"{"#cGold"}34. {"#cW"}Центральный банк\n"\
		"{"#cGold"}35. {"#cW"}Банк г. Южный\n"\
		"{"#cGold"}––––––––––––––––––––––––\n"\
		"{"#cGold"}36. {"#cW"}Церковь\n"\
		"{"#cGold"}37. {"#cW"}Наркопритон",
		"Выбрать", "Закрыть"
	);
	return 1;
}

stock GetMapNearestOst(playerid)
{
	new ost_id = -1;
	new Float: my_dist;
	new Float: dist = 650.0;

	new Float: x = GetPVarFloat(playerid, "click_x");
 	new Float: y = GetPVarFloat(playerid, "click_y");
 	new Float: z = GetPVarFloat(playerid, "click_z");

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		//my_dist = GetDistanceBetweenPoints(x, y, z, g_ostanovka[idx][OST_POS_X], g_ostanovka[idx][OST_POS_Y], g_ostanovka[idx][OST_POS_Z]);
		my_dist = PointToPoint(x, y, z, g_ostanovka[idx][OST_POS_X], g_ostanovka[idx][OST_POS_Y], g_ostanovka[idx][OST_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			ost_id = idx;
		}
	}
	return ost_id;
}

stock GetNearestOst(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new ost_id = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_ostanovka[idx][OST_POS_X], g_ostanovka[idx][OST_POS_Y], g_ostanovka[idx][OST_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			ost_id = idx;
		}
	}
	return ost_id;
}

stock GetDistanceBetweenPoints(Float: X, Float: Y, Float: Z, Float: PointX, Float: PointY, Float: PointZ)
{
	new Float: Distance;

	Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));

	return floatround(Distance);
}

stock ShowBizInfoPick(playerid, biz_id)
{
	new str[120];
	new vhod = GetBusinessData(biz_id, B_ENTER_PRICE);
	new price = GetBusinessData(biz_id, B_PRICE);
	format(str, sizeof str, "%d р", vhod);
    PlayerTextDrawSetString(playerid, Info_PTD[playerid][5], str);
    format(str, sizeof str, "%d р", price);
    PlayerTextDrawSetString(playerid, Info_PTD[playerid][6], str);
    format(str, sizeof str, "%s", GetBusinessData(biz_id, B_NAME));
    PlayerTextDrawSetString(playerid, Info_PTD[playerid][1], str);
    format(str, sizeof str, "%s", GetBusinessData(biz_id, B_OWNER_NAME));
    PlayerTextDrawSetString(playerid, Info_PTD[playerid][4], str);
    PlayerTextDrawShow(playerid, Info_PTD[playerid][0]);
    PlayerTextDrawShow(playerid, Info_PTD[playerid][1]);
    PlayerTextDrawShow(playerid, Info_PTD[playerid][4]);
    PlayerTextDrawShow(playerid, Info_PTD[playerid][5]);
    PlayerTextDrawShow(playerid, Info_PTD[playerid][6]);
    if(GetBusinessData(biz_id, B_LOCK_STATUS))
    {
        PlayerTextDrawShow(playerid, Info_PTD[playerid][2]);
    }
    else
    {
        PlayerTextDrawShow(playerid, Info_PTD[playerid][3]);
    }
}

stock ShowLicDrive(playerid, to_player)
{
	//new nick = GetPlayerNameEx(playerid);
	new lvl = GetPlayerLevel(playerid);
	new skin = GetPlayerSkinEx(playerid);

	new msg[160];
	new ms[160];

	if(skin > 299)
	{
		PlayerTextDrawSetPreviewModel(to_player, licdrive_PTD[to_player][0], 293);
		SendClientMessage(playerid, -1, "Чтобы не было краша скин был поставлен вам другой в паспорте!");
	}

	else PlayerTextDrawSetPreviewModel(to_player, licdrive_PTD[to_player][0], skin);

	format(ms, sizeof ms, "%s", GetPlayerNameEx(playerid));
	PlayerTextDrawSetString(to_player, licdrive_PTD[to_player][1], ms);

	format(msg, sizeof msg, "%d лет в области", lvl);
	PlayerTextDrawSetString(to_player, licdrive_PTD[to_player][2], msg);

	TextDrawShowForPlayer(to_player, licdrive_TD[0]);
	PlayerTextDrawShow(to_player, licdrive_PTD[to_player][0]);
	PlayerTextDrawShow(to_player, licdrive_PTD[to_player][1]);
	PlayerTextDrawShow(to_player, licdrive_PTD[to_player][2]);

	SendClientMessage(to_player, -1, "Чтобы закрыть документы просто нажмите на них");

	SelectTextDraw(to_player, 0xFFFFFFFF);
}

stock HideLicDrive(playerid)
{
	for(new r; r < sizeof licdrive_PTD[]; r ++)
		PlayerTextDrawHide(playerid, licdrive_PTD[playerid][r]);

	TextDrawHideForPlayer(playerid, licdrive_TD[0]);

	CancelSelectTextDraw(playerid);
}

stock ShowMvdLic(playerid, to_player)
{
	new skin = GetPlayerSkinEx(playerid);

	new msg[160];
	new ms[160];

	if(skin > 299)
	{
		PlayerTextDrawSetPreviewModel(to_player, mvd_PTD[to_player][0], 293);
		SendClientMessage(playerid, -1, "Чтобы не было краша скин был поставлен вам другой в паспорте!");
	}
	else PlayerTextDrawSetPreviewModel(to_player, mvd_PTD[to_player][0], skin);

	format(ms, sizeof ms, "%s", GetPlayerNameEx(playerid));
	PlayerTextDrawSetString(to_player, mvd_PTD[to_player][1], ms);

	format(msg, sizeof msg, "%s", GetPlayerJobAndRankName(playerid));
	PlayerTextDrawSetString(to_player, mvd_PTD[to_player][2], msg);

	TextDrawShowForPlayer(to_player, mvd_TD[0]);
	PlayerTextDrawShow(to_player, mvd_PTD[to_player][0]);
	PlayerTextDrawShow(to_player, mvd_PTD[to_player][1]);
	PlayerTextDrawShow(to_player, mvd_PTD[to_player][2]);

	SendClientMessage(to_player, -1, "Чтобы закрыть документы просто нажмите на них");

	SelectTextDraw(to_player, 0xFFFFFFFF);
}

stock HideMvdLic(playerid)
{
	for(new r; r < sizeof mvd_PTD[]; r ++)
		PlayerTextDrawHide(playerid, mvd_PTD[playerid][r]);

	TextDrawHideForPlayer(playerid, mvd_TD[0]);

	CancelSelectTextDraw(playerid);
}

stock HidePassPlayer(playerid)
{
	for(new r; r < sizeof pass_PTD[]; r ++)
		PlayerTextDrawHide(playerid, pass_PTD[playerid][r]);

	TextDrawHideForPlayer(playerid, pass_TD[0]);

	CancelSelectTextDraw(playerid);
}

stock ShowPassPlayer(playerid, to_player)
{
	new skin = GetPlayerSkinEx(playerid);

	new msg[200];

	if(skin > 299)
	{
		PlayerTextDrawSetPreviewModel(to_player, pass_PTD[to_player][9], 293);
		SendClientMessage(playerid, -1, "Чтобы не было краша скин был поставлен вам другой в паспорте!");
	}
	else PlayerTextDrawSetPreviewModel(to_player, pass_PTD[to_player][9], skin);

	format(msg, sizeof msg, "%s", GetPlayerHouseName(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][0], msg);

	format(msg, sizeof msg, "%s", GetPlayerNameEx(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][1], msg);

	format(msg, sizeof msg, "%d", GetPlayerPhone(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][2], msg);

	format(msg, sizeof msg, "%s / %s", GetPlayerTeamName(playerid), GetPlayerSubdivisionName(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][3], msg);

	format(msg, sizeof msg, "%s", GetPlayerSexNam(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][4], msg);

	format(msg, sizeof msg, "%d", GetPlayerLevel(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][5], msg);

	format(msg, sizeof msg, "%s", GetPlayerJobAndRankName(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][6], msg);

	format(msg, sizeof msg, "%d", GetPlayerSuspect(playerid));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][7], msg);

	format(msg, sizeof msg, "%d", GetPlayerData(playerid, P_LAW_ABIDING));
	PlayerTextDrawSetString(to_player, pass_PTD[to_player][8], msg);

	for(new r; r < sizeof pass_PTD[]; r ++)
		PlayerTextDrawShow(to_player, pass_PTD[playerid][r]);

	TextDrawShowForPlayer(to_player, pass_TD[0]);

	SendClientMessage(to_player, -1, "Чтобы закрыть документы просто нажмите на них");

	SelectTextDraw(to_player, 0xFFFFFFFF);
}

stock ShowHomeInfoPick(playerid, house_id)
{
	new str[120];
	new price = GetHouseData(house_id, H_PRICE);
	new rent = GetHouseData(house_id, H_RENT_PRICE);
	new type = GetHouseData(house_id, H_TYPE);
	new room = GetHouseTypeInfo(type, HT_ROOMS);

	format(str, sizeof str, "%s", GetHouseTypeInfo(type, HT_NAME));
	PlayerTextDrawSetString(playerid, hometd_PTD[playerid][2], str);
	format(str, sizeof str, "Комнат: %d", room);
	PlayerTextDrawSetString(playerid, hometd_PTD[playerid][3], str);
	format(str, sizeof str, "%d р", rent);
	PlayerTextDrawSetString(playerid, hometd_PTD[playerid][5], str); //HT_NAME
    format(str, sizeof str, "%d р", price);
    PlayerTextDrawSetString(playerid, hometd_PTD[playerid][6], str);
    format(str, sizeof str, "Дом #%d", house_id);
    PlayerTextDrawSetString(playerid, hometd_PTD[playerid][1], str);
    format(str, sizeof str, "%s", GetHouseData(house_id, H_OWNER_NAME));
    PlayerTextDrawSetString(playerid, hometd_PTD[playerid][4], str);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][0]);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][1]);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][2]);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][3]);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][4]);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][5]);
    PlayerTextDrawShow(playerid, hometd_PTD[playerid][6]);
}

stock HideBizInfoPick(playerid)
{
	for(new r; r < sizeof Info_PTD[]; r ++)
		PlayerTextDrawHide(playerid, Info_PTD[playerid][r]);
}

stock HideHomeInfoPick(playerid)
{
	for(new r; r < sizeof hometd_PTD[]; r ++)
		PlayerTextDrawHide(playerid, hometd_PTD[playerid][r]);
}

stock HideDetTextDraw(playerid)
{
	for(new r; r < sizeof Vinyl_PTD[]; r ++)
		PlayerTextDrawHide(playerid, Vinyl_PTD[playerid][r]);
}

stock ShowDetTextDraw(playerid)
{
	for(new r; r < sizeof Vinyl_PTD[]; r ++)
		PlayerTextDrawShow(playerid, Vinyl_PTD[playerid][r]);
}

stock ShowPlayerTimerPanel(playerid)
{
  	for(new r; r < sizeof timer_PTD[]; r ++)
		PlayerTextDrawHide(playerid, timer_PTD[playerid][r]);

	timer_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 581.0336, 170.4036, "3:21"); // ?????
	PlayerTextDrawLetterSize(playerid, timer_PTD[playerid][0], 0.2243, 1.2266);
	PlayerTextDrawAlignment(playerid, timer_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, timer_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, timer_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, timer_PTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, timer_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, timer_PTD[playerid][0], 0);

	timer_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 567.3331, 164.1259, "LD_SPAC:white"); // ?????
	PlayerTextDrawTextSize(playerid, timer_PTD[playerid][1], 41.0000, 21.0000);
	PlayerTextDrawAlignment(playerid, timer_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, timer_PTD[playerid][1], 128);
	PlayerTextDrawBackgroundColor(playerid, timer_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, timer_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, timer_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, timer_PTD[playerid][1], 0);

	timer_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 567.3664, 164.1258, "LD_SPAC:white"); // ?????
	PlayerTextDrawTextSize(playerid, timer_PTD[playerid][2], 41.0199, 4.8099);
	PlayerTextDrawAlignment(playerid, timer_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, timer_PTD[playerid][2], -2293505);
	PlayerTextDrawBackgroundColor(playerid, timer_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, timer_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, timer_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, timer_PTD[playerid][2], 0);
}

stock HidePlayerTimerPanel(playerid)
{
  	for(new r; r < sizeof timer_PTD[]; r ++)
		PlayerTextDrawHide(playerid, timer_PTD[playerid][r]);
}



CMD:fermers_list(playerid)
{
	new fmt_text[100],
		list[sizeof fmt_text * 10 + 50] = "{"#cW"}Имя игрока\t{"#cW"}Собрано пшеницы{"#cW"}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
        else if(GetPlayerData(i, P_WHEAT) < 1) continue;

		if(i < 0)
		{
			format(fmt_text, sizeof fmt_text, "Лучших работников фермы не найдено.");
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{33AA33}Лучшие работники фермы", fmt_text, "Закрыть", "");
		}
		else
		{
			format(fmt_text, sizeof fmt_text, "%s [%d]\t{33AA33}%d шт.\n", GetPlayerNameEx(i), i, GetPlayerData(i, P_WHEAT));
			strcat(list, fmt_text);
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{33AA33}Лучшие работники фермы", list, "Закрыть", "");
		}
	}

	return 1;
}

CMD:fuelstinfo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /fuelstinfo [id AЗС]");

	extract params -> new stationid;

	if(!(0 <= stationid <= g_fuel_station_loaded-1)) return SendClientMessage(playerid, 0xFF6600FF, "Данной АЗС не существует на сервере");

	new string[44];

	format(string, sizeof string, "{"#cGold"}АЗС №%d", stationid);

	new fmt_str[1024];
	format
	(
		fmt_str, sizeof fmt_str,
		"{"#cW"}Название:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Номер заправки:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Владелец:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Город / область:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Район:\t\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Уровень улучшений:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Количество топлива:\t\t\t{AFAFAF}%d из %d\n"\
		"{"#cW"}Цена топлива:\t\t\t\t{AFAFAF}%d руб за 1 л\n"\
		"{"#cW"}Закупочная цена:\t\t\t{AFAFAF}%d руб за 1 л\n"\
		"{"#cW"}Бюджет заправки:\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}АЗС арендована на:\t\t\t{AFAFAF}%d/30 дней\n"\
		"{"#cW"}Гос. стоимость:\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Аренда территории:\t\t\t{AFAFAF}%d руб в день\n"\
		"{"#cW"}Акцизный сбор:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Статус:\t\t\t\t\t%s",
		GetFuelStationData(stationid, FS_NAME),
		stationid,
		GetFuelStationData(stationid, FS_OWNER_NAME),
		GetCityName(GetFuelStationData(stationid, FS_CITY)),
		GetZoneName(GetFuelStationData(stationid, FS_ZONE)),
		GetFuelStationData(stationid, FS_IMPROVEMENTS),
		GetFuelStationData(stationid, FS_FUELS),
		GetFuelStationMaxFuel(stationid),
		GetFuelStationData(stationid, FS_FUEL_PRICE),
		GetFuelStationData(stationid, FS_BUY_FUEL_PRICE),
		GetFuelStationData(stationid, FS_BALANCE),
		GetFuelStationData(stationid, FS_RENT_DATE) <= gettime() ? 0 :
		GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
		GetFuelStationData(stationid, FS_PRICE),
		GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
		GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Взымается") : ("Не взымается"),
		GetFuelStationData(stationid, FS_LOCK_STATUS) ? ("{CC3333}Станция закрыта") : ("{66CC33}Станция открыта")
	);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, fmt_str, "Закрыть", "");

	return 1;
}

CMD:homeinfo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /homeinfo [id жилья]");

	extract params -> new houseid;

	if(!(0 <= houseid <= g_house_loaded-1)) return SendClientMessage(playerid, 0xFF6600FF, "Данного дома не существует на сервере");

	new fmt_str[850];

	new string[44];

	format(string, sizeof string, "{"#cGold"}Дом / Квартирка №%d", houseid);

	format(fmt_str, sizeof fmt_str, "{"#cW"}Тип / название:\t\t\t\t{339999}%s\n", GetHouseData(houseid, H_NAME));

	format
	(
		fmt_str, sizeof fmt_str,
		"%s{"#cW"}Номер дома:\t\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Город / область:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Район:\t\t\t\t\t{AFAFAF}%s\n",
		fmt_str,
		houseid,
		GetCityName(GetHouseData(houseid, H_CITY)),
		GetZoneName(GetHouseData(houseid, H_ZONE))
	);

	format
	(
		fmt_str, sizeof fmt_str,
		"%s{"#cW"}Стоимость:\t\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Дом оплачен на:\t\t\t{AFAFAF}%d/30 дней\n"\
		"{"#cW"}Количество комнат:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Уровень улучшений:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Квартплата:\t\t\t\t{AFAFAF}%d руб в день\n"\
		"{"#cW"}Тип квартплаты:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Статус:\t\t\t\t\t{AFAFAF}%s",
		fmt_str,
		GetHouseData(houseid, H_PRICE),
		GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
		GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
		GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
		GetHouseData(houseid, H_IMPROVEMENTS),
		GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
		GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Обычная") : ("Пониженная"),
		GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}Дом закрыт") : ("{66CC33}Дом открыт")
	);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, fmt_str, "Закрыть", "");

	return 1;
}

CMD:bizinfo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /bizinfo [id бизнеса]");

	extract params -> new businessid;

	if(!(0 <= businessid <= g_business_loaded-1)) return SendClientMessage(playerid, 0xFF6600FF, "Данного бизнеса не существует на сервере");

	static const
 	music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};

	if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
	{
		SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
	}

	new string[144];

	format(string, sizeof string, "{"#cGold"}Бизнес №%d", businessid);

	new fmt_str[1024];
	format
	(
		fmt_str, sizeof fmt_str,
		"{"#cW"}Название:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Номер бизнеса:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Владелец:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Город / область:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Район:\t\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Плата за вход:\t\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Количество продуктов:\t\t{AFAFAF}%d из %d\n"\
		"{"#cW"}Стоимость 1 продукта:\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Уровень улучшений:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Баланс предприятия:\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Бизнес арендован на:\t\t\t{AFAFAF}%d/30 дней\n"\
		"{"#cW"}Звук при входе:\t\t\t{AFAFAF}{%s}%s\n"\
		"{"#cW"}Гос. стоимость:\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Аренда помещения:\t\t\t{AFAFAF}%d руб в день\n"\
		"{"#cW"}Тип аренды:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Статус:\t\t\t\t\t{AFAFAF}%s",
		GetBusinessData(businessid, B_NAME),
		businessid,
		GetBusinessData(businessid, B_OWNER_NAME),
		GetCityName(GetBusinessData(businessid, B_CITY)),
		GetZoneName(GetBusinessData(businessid, B_ZONE)),
		GetBusinessData(businessid, B_ENTER_PRICE),
		GetBusinessData(businessid, B_PRODS),
		GetBusinessMaxProd(businessid),
		GetBusinessData(businessid, B_PROD_PRICE),
		GetBusinessData(businessid, B_IMPROVEMENTS),
		GetBusinessData(businessid, B_BALANCE),
		GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
		GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
		!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
		music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
		GetBusinessData(businessid, B_PRICE),
		GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
		GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
		GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт")
	);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, fmt_str, "Закрыть", "");

	return 1;
}

CMD:boombox(playerid, params[])
{
    if(GetPlayerBoombox(playerid) == 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет бумбокса");

	Dialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "{"#cGold"}Управление бумбоксом", "1. Поставить на землю\n2. Убрать", "Далее", "Закрыть");
	return 1;
}

stock DestroyBoombox(playerid)
{
	switch(BoxInfo[playerid][box_music])
 	{
  		case 1:
  		{
			DestroyDynamicObject(BoxInfo[playerid][box_object]);
			for(new id = 0; id <= MAX_PLAYERS; id++)
			{
   				if(IsPlayerInRangeOfPoint(id, DistanceMusic, BoxInfo[playerid][box_x], BoxInfo[playerid][box_y], BoxInfo[playerid][box_z]))
   				{
					StopAudioStreamForPlayer(id);
			    }
			}
	    }
	    case 2:
		{
			RemovePlayerAttachedObject(playerid, ObjectSlot);
			StopAudioStreamForPlayer(playerid);
	    }
	}
	BoxInfo[playerid][box_object] = -1;
	BoxInfo[playerid][box_music] = 0;
	BoxInfo[playerid][box_x] = 0.0;
	BoxInfo[playerid][box_y] = 0.0;
	BoxInfo[playerid][box_z] = 0.0;
 	DestroyDynamic3DTextLabel(BoxInfo[playerid][box_label]);
    BoxInfo[playerid][box_label] = Text3D:-1;
}

stock GetPlayerBoombox(playerid)
{
	new quest_1,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT boombox FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		quest_1 = cache_get_row_int(0, 0);

	cache_delete(result);

	return quest_1;
}

CMD:fullferma(playerid)
{
    if(GetPlayerAdminEx(playerid) < 6) return 1;
    SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, 10000);
    SendClientMessage(playerid, -1, "Ферма пополнена");
    FermerRepositoryUpdate();
	return 1;
}

CMD:contspawn(playerid)
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	STRING_GLOBAL[2] = EOS;

	for(new i = 0; i != sizeof containers; i ++)
	{
		if(containers[i][CD_STATUS] >= 2)
		{
			DestroyVehicle(veh_cont[i]);
		}
		DestroyDynamicObject(container[i]);

		DestroyDynamic3DTextLabel(container_label[i]);
		DestroyDynamic3DTextLabel(container_label_1[i]);

		DestroyDynamicObject(container_door[i]);
		DestroyDynamicObject(container_second_door[i]);
		DestroyDynamicObject(container_block[i]);

		containers[i][C_LAST_BET] = -1;
		containers[i][C_PRICE_COUNT] = def_cena_cont[i];

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{D7DF01}Объединенные Арабские Эмираты\n{DBA901}Вес: 3500 кг (№%d)\n{ffffff}Содержимое: {AEB404}Транспорт\n{ffffff}Cтоимость: {B18904}%d руб", i + 1, containers[i][C_PRICE_COUNT]);
		container_label[i] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, containers[i][C_POS_X], containers[i][C_POS_Y], containers[i][C_POS_Z] +3.5, 15.0);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Используйте {DBA901}L.ALT {ffffff}чтобы\nоткрыть торги за контейнер начальная\nстоимость которого составляет: {B18904}%d руб", containers[i][C_PRICE_COUNT]);
		container_label_1[i] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, containers[i][C_POS_X_1], containers[i][C_POS_Y_1], containers[i][C_POS_Z_1], 15.0);

		container[i] = CreateDynamicObject(containers[i][C_ID], containers[i][C_POS_X], containers[i][C_POS_Y], containers[i][C_POS_Z], 0.00, 0.00, containers[i][C_POS_A]);

		container_door[i] = CreateDynamicObject(containers[i][CD_FIRST_ID], containers[i][CD_FIRST_POS_X], containers[i][CD_FIRST_POS_Y], containers[i][CD_FIRST_POS_Z], 0.00, 0.00, containers[i][CD_FIRST_POS_A]);
		container_second_door[i] = CreateDynamicObject(containers[i][CD_SECOND_ID], containers[i][CD_SECOND_POS_X], containers[i][CD_SECOND_POS_Y], containers[i][CD_SECOND_POS_Z], 0.00, 0.00, containers[i][CD_SECOND_POS_A]);
		container_block[i] = CreateDynamicObject(10477, containers[i][C_B_POS_X], containers[i][C_B_POS_Y], containers[i][C_B_POS_Z], 0.00, 0.00, containers[i][C_B_POS_A]);

		containers[i][CD_STATUS] = 0;
	}

	SendClientMessageToAll(0xFFFFFFFF, "{ba8616}В порт доставлена новая партия контейнеров.");

	return 1;
}

CMD:contdelete(playerid)
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	for(new i = 0; i != sizeof containers; i ++)
	{
		DestroyDynamicObject(container[i]);
		DestroyVehicle(veh_cont[i]);

		DestroyDynamic3DTextLabel(container_label[i]);
		DestroyDynamic3DTextLabel(container_label_1[i]);

		DestroyDynamicObject(container_door[i]);
		DestroyDynamicObject(container_second_door[i]);
		DestroyDynamicObject(container_block[i]);

		containers[i][C_LAST_BET] = -1;
		containers[i][CD_STATUS] = 1;
		containers[i][C_PRICE_COUNT] = def_cena_cont[i];
	}
	return 1;
}

CMD:quest(playerid)
{
	new quest[250];
	format(quest, sizeof quest,
	"Квест\tСтатус\n"\
	"1. Первый телефон\t%s\n"\
	"2. Первая работа\t%s\n"\
	"3. Первое авто\t%s\n"\
	"4. Первое жильё\t%s",
	GetPlayerData(playerid, P_QUEST_1) ? ("{66CC33}Выполненно") : ("{CC3333}Не выполненно"),
	GetPlayerData(playerid, P_QUEST_4) ? ("{66CC33}Выполненно") : ("{CC3333}Не выполненно"),
	GetPlayerData(playerid, P_QUEST_3) ? ("{66CC33}Выполненно") : ("{CC3333}Не выполненно"),
	GetPlayerData(playerid, P_QUEST_2) ? ("{66CC33}Выполненно") : ("{CC3333}Не выполненно")); //("{CC3333}Не выполненно")
	Dialog(playerid, DIALOG_QUESTS, DIALOG_STYLE_TABLIST_HEADERS, "Начальные квесты", quest, "Выбрать", "Закрыть");
	return 1;
}

/*CMD:king(playerid)
{
	if(GetPlayerData(playerid, P_PERENOS) != 0) return SendClientMessage(playerid, -1, "Вы уже переносили аккаунт");
	Dialog(playerid, DIALOG_PERENOS_1, DIALOG_STYLE_INPUT, "Перенос аккаунта", "Привет, дорогой игрок. Мы реализовали перенос аккаунтов с King RolePlay\nЕсли ты хочешь перенести свой аккаунт от туда к нам, то введи ник который у тебя был там.", "Далее", "Закрыть");
	return 1;
}*/

CMD:unrent(playerid)
{
	if(GetPlayerData(playerid, P_RENT_CAR) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "У вас нет арендованного авто!");
	new veh_id = GetPlayerData(playerid, P_RENT_CAR);
	if(GetVehicleModel(veh_id) == 15134)
	{
		DestroyVehicle(veh_id);
	}
	else
	{
		SetVehicleData(veh_id, V_OWRENT, 0);
		SetVehicleToRespawn(veh_id);
	}
	SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	SendClientMessage(playerid, -1, "Вы успешно отдали арендованное авто обратно");
	return 1;
}

CMD:svalkaspawn(playerid)
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;

	STRING_GLOBAL[1] = EOS;

	for(new i = 0; i != sizeof svalka; i ++)
	{
		if(svalka[i][SV_STATUS] != 1)
		{
			DestroyDynamic3DTextLabel(svalka_label[i]);
			DestroyVehicle(veh_sval[i]);
		}

		new random_model = random(sizeof car_market_data[]);
		svalka_car[i] = car_market_data[1][random_model][0];
		veh_sval[i] = CreateVehicle
		(
			svalka_car[i],
			svalka[i][S_POS_X],
			svalka[i][S_POS_Y],
			svalka[i][S_POS_Z],
			svalka[i][S_POS_A],
			0,
			1,
			-1,
			0,
			VEHICLE_ACTION_TYPE_ADMIN_CAR,
			0
		);

		svalka[i][S_LAST_BET] = -1;
		svalka[i][S_PRICE_COUNT] = 1700000;

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffffff}Аукцион за авто {DBA901}(№%d)\n{ffffff}Начальная стоймость: {B18904}%d рублей\n{ffffff}Нажмите {DBA901}L.ALT{ffffff}чтобы начать торги", i + 1, svalka[i][S_PRICE_COUNT]);
		svalka_label[i] = CreateDynamic3DTextLabel(STRING_GLOBAL, -1, svalka[i][S_POS_X], svalka[i][S_POS_Y], svalka[i][S_POS_Z] +1.5, 15.0);

		svalka[i][SV_STATUS] = 0;
	}

	SendClientMessage(playerid, -1, "Свалка заспавнена");
	return 1;
}

CMD:statistik(playerid)
{
	SaveProsto(playerid);
	return 1;
}

stock AttachCarNumber(vehicleid,  index) {
    new model_id = GetOwnableCarData(index, OC_MODEL_ID);
    nomerobj_f[index] = CreateDynamicObject(15165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    nomerobj_b[index] = CreateDynamicObject(15165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(nomerobj_f[index], vehicleid, g_car_num_opt[model_id][C_XF], g_car_num_opt[model_id][C_YF],
	g_car_num_opt[model_id][C_ZF], g_car_num_opt[model_id][C_XRF], g_car_num_opt[model_id][C_YRF], g_car_num_opt[model_id][C_ZRF]);
	AttachDynamicObjectToVehicle(nomerobj_b[index], vehicleid, g_car_num_opt[model_id][C_XB], g_car_num_opt[model_id][C_YB],
	g_car_num_opt[model_id][C_ZB], g_car_num_opt[model_id][C_XRB], g_car_num_opt[model_id][C_YRB], g_car_num_opt[model_id][C_ZRB]);
	print("номера созданы");
}

stock SetVehicleNumber(idx) {
	new vehNumber[6];
	new region[3];

    sscanf(GetOwnableCarData(idx, OC_NUMBER), "p< >s[32]s[32]s[32]s[32]s[32]s[32]", vehNumber[0], vehNumber[1], vehNumber[2], vehNumber[3], vehNumber[4], vehNumber[5]);
	/*if(GetOwnableCarData(idx, OC_REGION) != 152)
	{
		new str[5];
		format(str, sizeof str, "%d", GetOwnableCarData(idx, OC_REGION));
		SetDynamicObjectMaterial(nomerobj_f[idx], 0, 15165, "nomer", str, 0);
    	SetDynamicObjectMaterial(nomerobj_b[idx], 0, 15165, "nomer", str, 0);
	}*/
	for(new i = 0; i < 6; i++) {
		switch(vehNumber[i])
		{
					case '0': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "0", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "0", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "0", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "0", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "0", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "0", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "0", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "0", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "0", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "0", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "0", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "0", 0);
							}
						}
					}
					case '1': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "1", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "1", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "1", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "1", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "1", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "1", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "1", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "1", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "1", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "1", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "1", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "1", 0);
							}
						}
					}
					case '2': {
						switch(i)  {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "2", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "2", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "2", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "2", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "2", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "2", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "2", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "2", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "2", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "2", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "2", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "2", 0);
							}
						}
					}
					case '3': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "3", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "3", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "3", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "3", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "3", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "3", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "3", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "3", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "3", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "3", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "3", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "3", 0);
							}
						}
					}
					case '4': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "4", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "4", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "4", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "4", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "4", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "4", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "4", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "4", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "4", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "4", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "4", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "4", 0);
							}
						}
					}
					case '5': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "5", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "5", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "5", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "5", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "5", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "5", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "5", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "5", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "5", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "5", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "5", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "5", 0);
							}
						}
					}
					case '6': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "6", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "6", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "6", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "6", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "6", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "6", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "6", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "6", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "6", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "6", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "6", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "6", 0);
							}
						}
					}
					case '7': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "7", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "7", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "7", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "7", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "7", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "7", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "7", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "7", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "7", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "7", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "7", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "7", 0);
							}
						}
					}
					case '8': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "8", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "8", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "8", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "8", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "8", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "8", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "8", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "8", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "8", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "8", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "8", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "8", 0);
							}
						}
					}
					case '9': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "9", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "9", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "9", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "9", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "9", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "9", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "9", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "9", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "9", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "9", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "9", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "9", 0);
							}
						}
					}
					case 'A': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "a", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "a", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "a", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "a", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "a", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "a", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "a", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "a", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "a", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "a", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "a", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "a", 0);
							}
						}
					}
					case 'B': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "b", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "b", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "b", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "b", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "b", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "b", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "b", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "b", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "b", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "b", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "b", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "b", 0);
							}
						}
					}
					case 'C': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "c", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "c", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "c", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "c", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "c", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "c", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "c", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "c", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "c", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "c", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "c", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "c", 0);
							}
						}
					}
					case 'E': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "e", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "e", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "e", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "e", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "e", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "e", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "e", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "e", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "e", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "e", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "e", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "e", 0);
							}
						}
					}
					case 'K': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "k", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "k", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "k", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "k", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "k", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "k", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "k", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "k", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "k", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "k", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "k", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "k", 0);
							}
						}
					}
					case 'M': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "m", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "m", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "m", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "m", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "m", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "m", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "m", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "m", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "m", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "m", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "m", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "m", 0);
							}
						}
					}
					case 'H': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "h", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "h", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "h", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "h", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "h", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "h", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "h", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "h", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "h", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "h", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "h", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "h", 0);
							}
						}
					}
					case 'O': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "o", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "o", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "o", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "o", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "o", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "o", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "o", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "o", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "o", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "o", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "o", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "o", 0);
							}
						}
					}
					case 'P': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "p", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "p", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "p", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "p", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "p", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "p", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "p", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "p", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "p", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "p", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "p", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "p", 0);
							}
						}
					}
					case 'T': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "t", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "t", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "t", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "t", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "t", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "t", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "t", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "t", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "t", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "t", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "t", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "t", 0);
							}
						}
					}
					case 'X': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "x", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "x", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "x", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "x", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "x", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "x", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "x", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "x", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "x", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "x", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "x", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "x", 0);
							}
						}
					}
					case 'Y': {
						switch(i) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "y", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "y", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "y", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "y", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "y", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "y", 0);
							}
							case 3: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "y", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "y", 0);
							}
							case 4: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "y", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "y", 0);
							}
							case 5: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "y", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "y", 0);
							}
						}
					}
					default: {
						SetDynamicObjectMaterial(nomerobj_f[idx], 3, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 3, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 4, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 4, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 5, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 5, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 6, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 6, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 7, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 7, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 8, 15165, "nomer", "q", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 8, 15165, "nomer", "q", 0);
						break;
					}
		}
	}
	sscanf(GetOwnableCarData(idx, OC_REGION), "p< >s[32]s[32]s[32]", region[0], region[1], region[2]);
	for(new ui = 0; ui < 3; ui++)
	{
		switch(region[ui])
		{
					case '0': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "0_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "0_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "0_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "0_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "0_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "0_r", 0);
							}
						}
					}
					case '1': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "1_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "1_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "1_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "1_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "1_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "1_r", 0);
							}
						}
					}
					case '2': {
						switch(ui)  {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "2_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "2_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "2_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "2_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "2_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "2_r", 0);
							}
						}
					}
					case '3': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "3_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "3_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "3_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "3_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "3_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "3_r", 0);
							}
						}
					}
					case '4': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "4_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "4_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "4_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "4_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "4_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "4_r", 0);
							}
						}
					}
					case '5': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "5_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "5_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "5_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "5_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "5_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "5_r", 0);
							}
						}
					}
					case '6': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "6_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "6_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "6_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "6_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "6_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "6_r", 0);
							}
						}
					}
					case '7': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "7_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "7_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "7_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "7_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "7_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "7_r", 0);
							}
						}
					}
					case '8': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "8_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "8_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "8_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "8_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "8_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "8_r", 0);
							}
						}
					}
					case '9': {
						switch(ui) {
							case 0: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "9_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "9_r", 0);
							}
							case 1: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "9_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "9_r", 0);
							}
							case 2: {
								SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "9_r", 0);
								SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "9_r", 0);
							}
						}
					}
					default: {
						SetDynamicObjectMaterial(nomerobj_f[idx], 9, 15165, "nomer", "_r", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 9, 15165, "nomer", "_r", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 10, 15165, "nomer", "_r", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 10, 15165, "nomer", "_r", 0);
						SetDynamicObjectMaterial(nomerobj_f[idx], 11, 15165, "nomer", "_r", 0);
						SetDynamicObjectMaterial(nomerobj_b[idx], 11, 15165, "nomer", "_r", 0);
						break;
					}
		}
	}
}

CMD:givestonks(playerid)
{
	AddPlayerData(playerid, P_SLOT_AC, +, 100);
	SendClientMessage(playerid, -1, "Было выдано 100 к допустимому количеству акций");
	return 1;
}

/*CMD:stonks(playerid)
{
	new fmt_str[94 + 1];
	new string[MAX_STONKS * (sizeof fmt_str) + 1];
	for(new idx, count; idx < g_stonks_loaded; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%s\t\tЦена: %d рублей за шт.\t\t\tОсталось: %d шт.\n", GetStonksData(idx, S_NAME), GetStonksData(idx, S_PRICE), GetStonksData(idx, S_KOLVO));
		strcat(string, fmt_str);

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_STONKS, DIALOG_STYLE_LIST, "Список акций", string, "Выбрать", "Назад");
	return 1;
}
CMD:mystonks(playerid)
{
	if(GetPlayerData(playerid, P_S_ID) == -1 || GetPlayerData(playerid, P_S_KOLVO) < 1) return SendClientMessage(playerid, -1, "У вас нет акций!");
	new str[220];
	new stonks = GetPlayerData(playerid, P_S_ID) -= 1;
	format(str, sizeof str,
	"Вы владеете акциями %s\n"\
	"У вас есть акции в колличестве %d шт.\n"\
	"На данный момент при продаже акций вы можете получить %d рублей\n\n"\
	"Если вы хотите продать свои акции то просто введите колличество и нажмите 'Продать'",
	GetStonksData(stonks, S_NAME), GetPlayerData(playerid, P_S_KOLVO), GetPlayerData(playerid, P_S_KOLVO) * GetStonksData(stonks, S_PRICE));
	Dialog(playerid, DIALOG_STONKS_SELL, DIALOG_STYLE_INPUT, "Личный кабинет акционера", str, "Продать", "Отмена");
	return 1;
}*/

CMD:exit_by(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Вы должны быть в авто");

	new business = GetPVarInt(playerid, "by_id");

	SetVehiclePos(vehicleid, GetBusinessData(business, B_EXIT_POS_X),GetBusinessData(business, B_EXIT_POS_Y),GetBusinessData(business, B_EXIT_POS_Z));
	SetVehicleZAngle(vehicleid, GetBusinessData(business, B_EXIT_ANGLE));

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	LinkVehicleToInterior(vehicleid, 0);
	SetVehicleVirtualWorld(vehicleid, 0);

	DestroyVehicleLabel(vehicleid);

	SetPVarInt(playerid, "in_by", 0);
	return 1;
}

CMD:carplatef(playerid)
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;
    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid == INVALID_VEHICLE_ID) return 1;
    SetVehicleZAngle(vehicleid, 0.0);
    new
		Float:x,
		Float:y,
		Float:z;
	GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
	CarPlatePlayer[playerid] = CreateDynamicObject(15165, x, y, z,   0.00000, 0.00000, 180.00000);
 	SetPVarInt(playerid, "PlateObjf", 1);
 	EditDynamicObject(playerid, CarPlatePlayer[playerid]);
	return 1;
}
CMD:carplateb(playerid)
{
	if(GetPlayerAdminEx(playerid) < 7) return 1;
    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid == INVALID_VEHICLE_ID) return 1;
    SetVehicleZAngle(vehicleid, 0.0);
    new
		Float:x,
		Float:y,
		Float:z;
	GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
	CarPlatePlayer[playerid] = CreateDynamicObject(15165, x, y, z,   0.00000, 0.00000, 180.00000);
 	SetPVarInt(playerid, "PlateObjb", 1);
 	EditDynamicObject(playerid, CarPlatePlayer[playerid]);
	return 1;
}

/*CMD:carplatetestadd(playerid)
{
	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid,x,y,z);
	objectcartest = CreateDynamicObject(15165, x, y, z,   0.00000, 0.00000, 180.00000);
	return 1;
}

CMD:carplatetestchange1(playerid, params[])
{
	extract params -> new slot, string: value[15]; else {

		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /carplatetestchange1 [слой] [значение буквы]");
		return 1;
	}
	new str[10];
	format(str, sizeof str, "%s", value);
	SetDynamicObjectMaterial(objectcartest, slot, 15165, "nomer", str, 0);
	return 1;
}

CMD:carplatetestchange2(playerid, params[])
{
	extract params -> new slot, value; else {

		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /carplatetestchange2 [слой] [значение число]");
		return 1;
	}
	new str[10];
	format(str, sizeof str, "%d", value);
	SetDynamicObjectMaterial(objectcartest, slot, 15165, "nomer", str, 0);
	return 1;
}*/

forward Casino_Start(tableid);
public Casino_Start(tableid) // Паблик для работы с таймером (местами можете оптимизировать если необходимо)
{
	new string[128]; // Создаём массив для дальнейших форматов
	if(TableInfo[tableid][steps] == 0) // Если время за столом подошло к концу
    {
        for(new i; i < 4; i++) // Обходим всех игроков за столом
        {
            if(TableInfo[tableid][t_players][i] != INVALID_PLAYER_ID && Casino_GetPlayerID(tableid,TableInfo[tableid][t_players][i]) != -1) // Если за столом есть игрок и его слот не ровняется -1
            {
                SetPVarInt(TableInfo[tableid][t_players][i],"WINNER",random(20)); // Выставляем игроку победное число по окончанию игры
                format(string,sizeof(string),"%d",GetPVarInt(TableInfo[tableid][t_players][i],"WINNER")); // Форматируем победное число игроку
                GameTextForPlayer(TableInfo[tableid][t_players][i], string, 1000, 3); // Показываем победное число игроку
                PlayerPlaySound(TableInfo[tableid][t_players][i], 33403, 0.0, 0.0, 0.0); // Производим звук для игрока
            }
        }

        new maxs,winid = -1; // Переменные для определения победителя
        for(new i; i < GetMaxPlayers(); i++) // Обходим всех игроков на сервере
        {
            if(GetPVarInt(i,"CasinoTable") == tableid && Casino_GetPlayerID(tableid,i) != -1) // Если игрок находится за нужным столом и его слот не ровняется -1
            {
                new v = GetPVarInt(i,"WINNER"); // Достаём победное число игрока
                if(v > maxs) maxs = v,winid = i; // Если победное число игрока больше чем текущее,то присваиваем его ид как победный
                if(i != winid && i != TableInfo[tableid][t_crup]) // Если игрок находится за столом и не ровняется крупье
                {
                    format(string,sizeof(string),"Вы проиграли {FF4500}%d рублей{1E90FF}. Ваше число: {FF4500}%d",TableInfo[tableid][t_bet],GetPVarInt(i,"WINNER")); // Форматируем текст
                    SendClientMessage(i,0x1E90FFFF,string); // Отправляем текст
                    PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0); // Производим звук для игрока
                }
            }
            if(GetPVarInt(i,"CasinoTable") == tableid && Casino_GetPlayerID(tableid,i) == -1) // Если игрок находится за столом но не в игре
            {
                format(string,sizeof(string),"%d",TableInfo[tableid][steps]); // Форматируем текст со временем
                GameTextForPlayer(i, string, 1000, 3); // Выводим тескт со временем игроку
            }
        }

        if(TableInfo[tableid][t_crup] != INVALID_PLAYER_ID) // Если за столом находится крупье
        {
			new crupiemoney = ((TableInfo[tableid][t_bet]*Casino_TotalPlayer(tableid))/100)*1; // Вычисляем 1% для крупье от банка игры
            GivePlayerMoneyEx(TableInfo[tableid][t_crup],crupiemoney); // Выдаём деньги крупье за игру (функция GivePlayerMoney может быть другая)
			format(string,sizeof(string),"[Рулетка]: Вы получили %d рублей от банка %d рублей",crupiemoney,TableInfo[tableid][t_bet]*Casino_TotalPlayer(tableid)); // Форматируем текст
            SendClientMessage(TableInfo[tableid][t_crup],0x008000FF,string); // Выводим текст
        }

		new prize = ((TableInfo[tableid][t_bet]*Casino_TotalPlayer(tableid))/100)*95; // Вычисляем 95% от банка победителю
        GivePlayerMoneyEx(winid,prize); // Выдаём деньги победителю
		format(string,sizeof(string),"Вы выиграли {FF4500}%d рублей {1E90FF} с числом {FF4500}%d",prize,GetPVarInt(winid,"WINNER")); // Форматируем текст
        SendClientMessage(winid,0x1E90FFFF,string); // Выводим текст
        PlayerPlaySound(winid, 1085, 0.0, 0.0, 0.0); // Производим звук для победителя

        format(string, sizeof(string), "%s выиграл в кости. Выпавшее число: %d",GetPlayerNameEx(winid),GetPVarInt(winid,"WINNER")); // Форматируем текст (GetName у вас может быть другой)
	//	ProxDetector(15.0,winid,0xDD90FFAA,0xDD90FFAA,0xDD90FFAA,0xDD90FFAA,0xDD90FFAA); // Выводим текст в радиусе 15 (проверьте наличие функции ProxDetector)
		SendMessageInLocal(winid, string, 0xDD90FFAA, 15.0);

        for(new i; i < 4; i++) DeletePVar(TableInfo[tableid][t_players][i],"WINNER"),TableInfo[tableid][t_players][i] = INVALID_PLAYER_ID; // Обнуляем игроков за столом
        TableInfo[tableid][steps] = 20,TableInfo[tableid][t_bet] = 0,TableInfo[tableid][t_status] = false; // Выставляем нужные значения переменных для стола
        KillTimer(CasinoTimer[tableid]),Casino_Update(tableid); // Убиваем таймер и обновляем текстдрав стола
	}
    else // Время не подошло к концу?
    {
        for(new i; i < 4; i++) // Обходим всех игроков за столом
        {
            if(TableInfo[tableid][t_players][i] != INVALID_PLAYER_ID && Casino_GetPlayerID(tableid,TableInfo[tableid][t_players][i]) != -1) // Если за столом найден игрок и его слот не ровняется -1
            {
                format(string,sizeof(string),"%d",random(20)); // Форматируем ему текст с рандомным числом
                GameTextForPlayer(TableInfo[tableid][t_players][i], string, 1000, 3); // Показываем ему текст
                PlayerPlaySound(TableInfo[tableid][t_players][i], 33403, 0.0, 0.0, 0.0); // Производим ему звук
            }
        }
        for(new i; i < GetMaxPlayers(); i++) // Проходим всех игроков
        {
            if(GetPVarInt(i,"CasinoTable") == tableid && Casino_GetPlayerID(tableid,i) == -1) // Если игрок находится возле стола но не в игре
            {
                format(string,sizeof(string),"%d",TableInfo[tableid][steps]); // Форматируем ему текст со временем до окончания
                GameTextForPlayer(i, string, 1000, 3); // Выводим ему текст
            }
        }
        TableInfo[tableid][steps]--; // Минус одна секунда
	}
	return true;
}

stock Casino_GetSlot(tableid) // Выводим свободный слот за столом
{
	new slot = -1;
	for(new i; i < 4; i++)
	{
		if(TableInfo[tableid][t_players][i] == INVALID_PLAYER_ID && slot == -1) slot = i;
	}
	return slot;
}

stock Casino_GetPlayerID(tableid,playerid) // Получаем слот на столе игрока
{
	new plid = -1;
	for(new i; i < 4; i++)
	{
		if(TableInfo[tableid][t_players][i] == playerid) plid = i;
	}
	return plid;
}

stock Casino_TotalPlayer(tableid) // Получаем общее количество игроков на столом
{
	new total;
	for(new i; i < 4; i++)
	{
		if(TableInfo[tableid][t_players][i] != INVALID_PLAYER_ID) total++;
	}
	return total;
}

stock Casino_Update(tableid) // Обновление текстдрава за столом
{
	new string[128];
	format(string,sizeof(string),"%d",TableInfo[tableid][t_bet]);
	TextDrawSetString(TD_CASINO[tableid][4],string);
	format(string,sizeof(string),"%d/4",Casino_TotalPlayer(tableid));
	TextDrawSetString(TD_CASINO[tableid][5],string);
}

stock createTextDrawToPlayer(playerid)
{
	spec_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 12.0000, 201.0444, "spec:left_panel"); // ?????
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][0], 68.0000, 121.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][0], 0);

	spec_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 514.6668, 130.1111, "spec:right_panel"); // ?????
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][1], 116.0000, 249.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][1], 0);

	spec_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 234.0001, 375.2667, "spec:middle"); // ?????
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][2], 176.0000, 24.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][2], 0);

	spec_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 203.0001, 411.3558, "spec:middle_panel"); // ?????
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][3], 236.0000, 27.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][3], 0);

	spec_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 312.3334, 373.7630, "Spec_Spectovich"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][4], 0.4000, 1.6000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][4], 0);

	spec_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 377.0332, 376.1926, "0"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][5], 0.2296, 1.2183);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][5], 1832724991);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][5], 0);

	spec_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 571.3332, 136.4888, "Spec_Spectovich"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][6], 0.2080, 0.9528);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][6], true);

	spec_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 546.0000, 145.6147, "0_ID"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][7], 0.1816, 0.7911);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][7], -5963521);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][7], true);

	spec_PTD[playerid][8] = CreatePlayerTextDraw(playerid, 618.3331, 172.1629, "1"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][8], 0.2339, 0.8284);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][8], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][8], 0);

	spec_PTD[playerid][9] = CreatePlayerTextDraw(playerid, 618.3331, 182.8636, "100"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][9], 0.1503, 0.7330);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][9], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][9], 0);

	spec_PTD[playerid][10] = CreatePlayerTextDraw(playerid, 618.3331, 192.9642, "0"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][10], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][10], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][10], 0);

	spec_PTD[playerid][11] = CreatePlayerTextDraw(playerid, 618.3331, 203.8648, "25"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][11], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][11], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][11], 0);

	spec_PTD[playerid][12] = CreatePlayerTextDraw(playerid, 618.3331, 214.1655, "123"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][12], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][12], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][12], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][12], 0);

	spec_PTD[playerid][13] = CreatePlayerTextDraw(playerid, 618.3331, 244.1673, "‚…???"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][13], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][13], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][13], 0);

	spec_PTD[playerid][14] = CreatePlayerTextDraw(playerid, 618.3331, 254.2679, "10"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][14], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][14], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][14], 0);

	spec_PTD[playerid][15] = CreatePlayerTextDraw(playerid, 618.3331, 265.3686, "Smirnov"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][15], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][15], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][15], 0);

	spec_PTD[playerid][16] = CreatePlayerTextDraw(playerid, 618.3331, 291.4702, "56"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][16], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][16], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][16], 0);

	spec_PTD[playerid][17] = CreatePlayerTextDraw(playerid, 618.3331, 301.2708, "0"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][17], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][17], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][17], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][17], 0);

	spec_PTD[playerid][18] = CreatePlayerTextDraw(playerid, 618.3331, 312.1715, "1/2/3/4"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][18], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][18], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][18], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][18], 0);

	spec_PTD[playerid][19] = CreatePlayerTextDraw(playerid, 618.3331, 338.6731, "1000"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][19], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][19], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][19], 0);

	spec_PTD[playerid][20] = CreatePlayerTextDraw(playerid, 618.3331, 349.0737, "235"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][20], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][20], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][20], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][20], 0);

	spec_PTD[playerid][21] = CreatePlayerTextDraw(playerid, 618.3331, 359.6744, "‹k?«¤e®"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][21], 0.1456, 0.8118);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][21], 3);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][21], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][21], 0);

	spec_PTD[playerid][22] = CreatePlayerTextDraw(playerid, 19.6666, 208.9259, "spec:click"); // obnovlenie
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][22], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][22], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][22], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][22], true);

	spec_PTD[playerid][23] = CreatePlayerTextDraw(playerid, 19.6666, 226.7891, "spec:click"); // statistika
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][23], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][23], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][23], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][23], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][23], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][23], true);

	spec_PTD[playerid][24] = CreatePlayerTextDraw(playerid, 18.9999, 241.7224, "spec:click"); // demorgan
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][24], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][24], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][24], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][24], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][24], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][24], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][24], true);

	spec_PTD[playerid][25] = CreatePlayerTextDraw(playerid, 19.3333, 256.2409, "spec:click"); // mute
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][25], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][25], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][25], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][25], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][25], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][25], true);

	spec_PTD[playerid][26] = CreatePlayerTextDraw(playerid, 18.9999, 270.7594, "spec:click"); // slap
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][26], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][26], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][26], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][26], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][26], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][26], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][26], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][26], true);

	spec_PTD[playerid][27] = CreatePlayerTextDraw(playerid, 18.6666, 285.2779, "spec:click"); // information
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][27], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][27], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][27], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][27], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][27], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][27], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][27], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][27], true);

	spec_PTD[playerid][28] = CreatePlayerTextDraw(playerid, 18.4999, 300.2409, "spec:click"); // exit
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][28], 51.0000, 12.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][28], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][28], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][28], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][28], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][28], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][28], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][28], true);

	spec_PTD[playerid][29] = CreatePlayerTextDraw(playerid, 207.8333, 416.3889, "spec:click"); // vse igroki
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][29], 38.0000, 17.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][29], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][29], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][29], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][29], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][29], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][29], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][29], true);

	spec_PTD[playerid][30] = CreatePlayerTextDraw(playerid, 250.8335, 417.2185, "spec:click"); // sluchayni igrok
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][30], 52.0000, 17.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][30], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][30], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][30], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][30], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][30], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][30], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][30], true);

	spec_PTD[playerid][31] = CreatePlayerTextDraw(playerid, 307.8334, 416.8037, "spec:click"); // rabochie
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][31], 28.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][31], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][31], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][31], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][31], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][31], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][31], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][31], true);

	spec_PTD[playerid][32] = CreatePlayerTextDraw(playerid, 341.1667, 416.8038, "spec:click"); // mafii
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][32], 28.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][32], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][32], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][32], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][32], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][32], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][32], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][32], true);

	spec_PTD[playerid][33] = CreatePlayerTextDraw(playerid, 373.1667, 418.0482, "spec:click"); // kapti
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][33], 28.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][33], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][33], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][33], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][33], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][33], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][33], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][33], true);

	spec_PTD[playerid][34] = CreatePlayerTextDraw(playerid, 404.5000, 417.6334, "spec:click"); // police
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][34], 28.0000, 15.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][34], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][34], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][34], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][34], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][34], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][34], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][34], true);

	spec_PTD[playerid][35] = CreatePlayerTextDraw(playerid, 235.8333, 381.9593, "spec:click"); // left
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][35], 11.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][35], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][35], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][35], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][35], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][35], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][35], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][35], true);

	spec_PTD[playerid][36] = CreatePlayerTextDraw(playerid, 396.1667, 382.3742, "spec:click"); // right
	PlayerTextDrawTextSize(playerid, spec_PTD[playerid][36], 11.0000, 13.0000);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][36], 1);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][36], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][36], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][36], 4);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][36], 0);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][36], 0);
	PlayerTextDrawSetSelectable(playerid, spec_PTD[playerid][36], true);

	spec_PTD[playerid][37] = CreatePlayerTextDraw(playerid, 956.0000, 840.0147, "2021/5/10_22:00:00"); // ?????
	PlayerTextDrawLetterSize(playerid, spec_PTD[playerid][37], 0.1556, 0.6957);
	PlayerTextDrawAlignment(playerid, spec_PTD[playerid][37], 2);
	PlayerTextDrawColor(playerid, spec_PTD[playerid][37], -1);
	PlayerTextDrawBackgroundColor(playerid, spec_PTD[playerid][37], 255);
	PlayerTextDrawFont(playerid, spec_PTD[playerid][37], 2);
	PlayerTextDrawSetProportional(playerid, spec_PTD[playerid][37], 1);
	PlayerTextDrawSetShadow(playerid, spec_PTD[playerid][37], 0);

	gameTextDraw_player[playerid][0] = CreatePlayerTextDraw(playerid, 187.333328, 283.177886, "");
	PlayerTextDrawLetterSize(playerid, gameTextDraw_player[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, gameTextDraw_player[playerid][0], 46.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, gameTextDraw_player[playerid][0], 1);
	PlayerTextDrawColor(playerid, gameTextDraw_player[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, gameTextDraw_player[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, gameTextDraw_player[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, gameTextDraw_player[playerid][0], 255);
	PlayerTextDrawFont(playerid, gameTextDraw_player[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, gameTextDraw_player[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, gameTextDraw_player[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, gameTextDraw_player[playerid][0], true);

	gameTextDraw_player[playerid][1] = CreatePlayerTextDraw(playerid, 289.333404, 202.859237, "2.0x");
	PlayerTextDrawLetterSize(playerid, gameTextDraw_player[playerid][1], 0.732333, 2.628741);
	PlayerTextDrawAlignment(playerid, gameTextDraw_player[playerid][1], 1);
	PlayerTextDrawColor(playerid, gameTextDraw_player[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, gameTextDraw_player[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, gameTextDraw_player[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, gameTextDraw_player[playerid][1], 255);
	PlayerTextDrawFont(playerid, gameTextDraw_player[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, gameTextDraw_player[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, gameTextDraw_player[playerid][1], 0);

	gameTextDraw_player[playerid][2] = CreatePlayerTextDraw(playerid, 191.999954, 258.859313, "10000000");
	PlayerTextDrawLetterSize(playerid, gameTextDraw_player[playerid][2], 0.407665, 1.496296);
	PlayerTextDrawAlignment(playerid, gameTextDraw_player[playerid][2], 1);
	PlayerTextDrawColor(playerid, gameTextDraw_player[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, gameTextDraw_player[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, gameTextDraw_player[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, gameTextDraw_player[playerid][2], 255);
	PlayerTextDrawFont(playerid, gameTextDraw_player[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, gameTextDraw_player[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, gameTextDraw_player[playerid][2], 0);

}


stock createTextDrawToAll()
{
	gameTextDraw_all[0] = TextDrawCreate(164.666702, 132.599945, "crashbet:crashbet");
	TextDrawLetterSize(gameTextDraw_all[0], 0.000000, 0.000000);
	TextDrawTextSize(gameTextDraw_all[0], 302.000000, 185.000000);
	TextDrawAlignment(gameTextDraw_all[0], 1);
	TextDrawColor(gameTextDraw_all[0], -1);
	TextDrawSetShadow(gameTextDraw_all[0], 0);
	TextDrawSetOutline(gameTextDraw_all[0], 0);
	TextDrawBackgroundColor(gameTextDraw_all[0], 255);
	TextDrawFont(gameTextDraw_all[0], 4);
	TextDrawSetProportional(gameTextDraw_all[0], 0);
	TextDrawSetShadow(gameTextDraw_all[0], 0);

	gameTextDraw_all[1] = TextDrawCreate(266.000122, 282.348297, "");
	TextDrawLetterSize(gameTextDraw_all[1], 0.000000, 0.000000);
	TextDrawTextSize(gameTextDraw_all[1], 95.000000, 24.000000);
	TextDrawAlignment(gameTextDraw_all[1], 1);
	TextDrawColor(gameTextDraw_all[1], -1);
	TextDrawSetShadow(gameTextDraw_all[1], 0);
	TextDrawSetOutline(gameTextDraw_all[1], 0);
	TextDrawBackgroundColor(gameTextDraw_all[1], 255);
	TextDrawFont(gameTextDraw_all[1], 4);
	TextDrawSetProportional(gameTextDraw_all[1], 0);
	TextDrawSetShadow(gameTextDraw_all[1], 0);
	TextDrawSetSelectable(gameTextDraw_all[1], true);
}

CMD:crashonline(playerid) {
	SetPVarInt(playerid, #game, 1);
	showBoxZeppelin(playerid, 1);
}

CMD:phone(playerid)
{
    if(GetPlayerPhone(playerid) == 0) return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");
    if(GetPVarInt(playerid, "phoneshow") != 0) return HidePhonePlayer(playerid);
    ShowPhonePlayer(playerid);
    SetPVarInt(playerid, "phoneshow", 1);
	return 1;
}

stock HidePhonePlayer(playerid)
{
    for(new r; r < sizeof PHONE_PTD[]; r ++)
		PlayerTextDrawHide(playerid, PHONE_PTD[playerid][r]);

	TextDrawHideForPlayer(playerid, PHONE_TD[0]);

	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid, "phoneshow", 0);
	return 1;
}

stock CreatePhonePlayer(playerid)
{
    PHONE_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 507.000000, 388.955688, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][0], 19.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][0], true);

	PHONE_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 532.333251, 388.540924, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][1], 19.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][1], true);

	PHONE_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 555.999816, 388.126068, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][2], 19.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][2], true);

	PHONE_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 506.666473, 359.503814, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][3], 19.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][3], true);

	PHONE_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 555.999938, 358.674163, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][4], 19.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][4], true);

	PHONE_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 556.999877, 331.711151, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][5], 19.000000, 22.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][5], true);

	PHONE_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 504.333404, 213.644439, "23:00");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][6], 0.188333, 0.774518);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][6], 0);

	PHONE_PTD[playerid][7] = CreatePlayerTextDraw(playerid, 501.666595, 287.325927, "");
	PlayerTextDrawLetterSize(playerid, PHONE_PTD[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PHONE_PTD[playerid][7], 78.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PHONE_PTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, PHONE_PTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PHONE_PTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PHONE_PTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PHONE_PTD[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, PHONE_PTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, PHONE_PTD[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, PHONE_PTD[playerid][7], true);
}

stock ShowPhonePlayer(playerid)
{
	new hour, minute;
	new msg[10];
	gettime(hour, minute);
	format(msg, sizeof msg, "%d:%02d", hour, minute);
	PlayerTextDrawSetString(playerid, PHONE_PTD[playerid][6], msg);

	for(new r; r < sizeof PHONE_PTD[]; r ++)
		PlayerTextDrawShow(playerid, PHONE_PTD[playerid][r]);

	TextDrawShowForPlayer(playerid, PHONE_TD[0]);

	SelectTextDraw(playerid, 0xFFFFFFFF);
	SendClientMessage(playerid, 0x999999FF, "Чтобы убрать телефон ещё раз используйте: /phone");
	return 1;
}

CMD:test_id(playerid)
{
	SelectObject(playerid);
	return 1;
}

stock ShowMetroList(playerid)
{
	new fmt_str[39];
	new string[((sizeof fmt_str) * 10) + 1];

	for(new idx, count; idx < g_business_loaded; idx ++)
	{
		if(GetBusinessData(idx, B_TYPE) != BUSINESS_TYPE_METRO) continue;
		if(idx == GetPVarInt(playerid, "pickup_biz")) continue;
		SetPlayerListitemValue(playerid, count ++, idx);

		format(fmt_str, sizeof fmt_str, "Станция: %s\n", GetBusinessData(idx, B_NAME));
		strcat(string, fmt_str);
	}
	SendClientMessage(playerid, -1, "Выберите станцию метро на которую хотите поехать");
	Dialog(playerid, DIALOG_METRO, DIALOG_STYLE_LIST, "{FFCD00}Станции метро", string, "Выбрал", "Отмена");
	return 1;
}

stock ShowMetroBilet(playerid)
{
	new metroold = GetPVarInt(playerid, "pickup_biz");
	new metronew = GetPVarInt(playerid, "metrolist");
	new
		hour, minute,
		year, month, day;
	new msg[30];
	gettime(hour, minute);
	getdate(year, month, day);
	format(msg, sizeof msg, "%d:%02d", hour, minute);
	TextDrawSetString(Metro_TD[3], msg);
	minute += 2;
	format(msg, sizeof msg, "%d:%02d", hour, minute);
	TextDrawSetString(Metro_TD[4], msg);
	format(msg, sizeof msg, "%02d.%02d.%d", day, month, year);
	TextDrawSetString(Metro_TD[5], msg);
	TextDrawSetString(Metro_TD[6], msg);
	for(new r; r < sizeof Metro_TD; r ++)
		TextDrawShowForPlayer(playerid, Metro_TD[r]);

	for(new i; i < sizeof Metro_PTD[]; i ++)
		PlayerTextDrawShow(playerid, Metro_PTD[playerid][i]);

	new mss1[80];
	format(mss1, sizeof mss1, "%s", GetBusinessData(metroold, B_NAME));
	PlayerTextDrawSetString(playerid, Metro_PTD[playerid][0], mss1);
	format(mss1, sizeof mss1, "%s", GetBusinessData(metronew, B_NAME));
	PlayerTextDrawSetString(playerid, Metro_PTD[playerid][1], mss1);
	SelectTextDraw(playerid, 0xFFFFFFFF);
	return 1;
}

stock HideMetroBilet(playerid)
{
	for(new r; r < sizeof Metro_TD; r ++)
		TextDrawHideForPlayer(playerid, Metro_TD[r]);

	for(new i; i < sizeof Metro_PTD[]; i ++)
		PlayerTextDrawHide(playerid, Metro_PTD[playerid][i]);

	CancelSelectTextDraw(playerid);
	return 1;
}

enum {
	AREA_TYPE_NONE = 0,
	AREA_TYPE_HOUSE,
	AREA_TYPE_HOTEL,
	AREA_TYPE_AIRPORT,
	AREA_TYPE_SAD_JOB,
	AREA_TYPE_WOOD,
	AREA_TYPE_BUSINESS,
	AREA_TYPE_BUSINESS_INT,
	AREA_TYPE_BUSINESS_BUY_INT,
	AREA_TYPE_TELEPORT_PICKUP,
	AREA_TYPE_PICK_ID,
	AREA_TYPE_DROPPED_ITEM,
	AREA_TYPE_QUESTS_FIRE,
	AREA_TYPE_CARS_SHOW,
	AREA_TYPE_ORG_ENTER,
	AREA_TYPE_ORG_ENTER_ROOM,
	AREA_TYPE_ORG_EXIT,
	AREA_TYPE_ORG_EXIT_ROOM,
	AREA_TYPE_ORG_WAREHOUSE,
	AREA_TYPE_ORG_EXIT_WAREHOUSE,
	AREA_TYPE_ORG_ENTER_WAREHOUSE,
	AREA_TYPE_ACTOR,
	AREA_TYPE_CARGO_SHIP,
	AREA_TYPE_CARGO_CONTAINER,
	AREA_TYPE_CARGO_SCRAP,
}
enum {
	AREA_DATA_AREAID,
	AREA_DATA_EXTRA_ID_1,
	AREA_DATA_EXTRA_ID_2,
	AREA_DATA_TYPE,
}

stock SetDynamicAreaType(areaid, type = AREA_TYPE_NONE, extra_id_1 = 0, extra_id_2 = 0) {
	if(!IsValidDynamicArea(areaid)) {
		printf("ERROR: SetDynamicAreaType | areaid = %d | type = %d | extra_id_1 = %d", areaid, type, extra_id_1);
		return 0;
	}
	new DynamicAreaData[AREA_DATA_TYPE + 1];
	DynamicAreaData[AREA_DATA_AREAID] = areaid;
	DynamicAreaData[AREA_DATA_EXTRA_ID_1] = extra_id_1;
	DynamicAreaData[AREA_DATA_EXTRA_ID_2] = extra_id_2;
	DynamicAreaData[AREA_DATA_TYPE] = type;

	Streamer_SetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, DynamicAreaData, sizeof (DynamicAreaData));
	return type;
}

stock AI_CreateActor(model, Float:x, Float:y, Float:z, Float:angle, worldid = -1, interiorid = -1, Float:radius = 100.0) {
	if(Iter_Count(Actors) >= MAX_ACTOR_COUNT) {
		printf("Error: (AI_CreateActor) Iter_Count(Actors) >= MAX_ACTOR_COUNT!");
		return false;
	}
	new id = Iter_Free(Actors);

	AI[id][actorModel] = model;
	AI[id][actorPos][0] = x;
	AI[id][actorPos][1] = y;
	AI[id][actorPos][2] = z;
	AI[id][actorPos][3] = angle;
	AI[id][actorWorld] = worldid;
	AI[id][actorInterior] = interiorid;

	AI[id][actorID] = CreateDynamicActor(AI[id][actorModel],
		AI[id][actorPos][0], AI[id][actorPos][1], AI[id][actorPos][2], AI[id][actorPos][3],
		true, 100.0, AI[id][actorWorld], AI[id][actorInterior], -1
	);
	AI[id][actorArea] = CreateDynamicSphere(
		AI[id][actorPos][0], AI[id][actorPos][1], AI[id][actorPos][2],
		radius, AI[id][actorWorld], AI[id][actorInterior]
	);
	SetDynamicAreaType(AI[id][actorArea], AREA_TYPE_ACTOR, id);

	AI[id][actorTextID] = CreateDynamic3DTextLabel(
		" ", 0xFFFFFFFF,
		AI[id][actorPos][0], AI[id][actorPos][1], AI[id][actorPos][2] + 1.2,
		7.5, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, AI[id][actorWorld], AI[id][actorInterior]
	);
	Iter_Add(Actors, id);

	return AI[id][actorID];
}
